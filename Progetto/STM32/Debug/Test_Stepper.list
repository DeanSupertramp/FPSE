
Test_Stepper.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bc8c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000550  0800be60  0800be60  0001be60  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c3b0  0800c3b0  000201e8  2**0
                  CONTENTS
  4 .ARM          00000008  0800c3b0  0800c3b0  0001c3b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c3b8  0800c3b8  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c3b8  0800c3b8  0001c3b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c3bc  0800c3bc  0001c3bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  0800c3c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000360  200001e8  0800c5a8  000201e8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000548  0800c5a8  00020548  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014673  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a57  00000000  00000000  0003488b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001158  00000000  00000000  000372e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001068  00000000  00000000  00038440  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023cc7  00000000  00000000  000394a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013f8f  00000000  00000000  0005d16f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d5ba6  00000000  00000000  000710fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000c1  00000000  00000000  00146ca4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005fb0  00000000  00000000  00146d68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e8 	.word	0x200001e8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800be44 	.word	0x0800be44

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001ec 	.word	0x200001ec
 800020c:	0800be44 	.word	0x0800be44

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b9a4 	b.w	8001028 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f83c 	bl	8000d64 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_d2lz>:
 8000cf8:	b538      	push	{r3, r4, r5, lr}
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	4604      	mov	r4, r0
 8000d00:	460d      	mov	r5, r1
 8000d02:	f7ff ff0b 	bl	8000b1c <__aeabi_dcmplt>
 8000d06:	b928      	cbnz	r0, 8000d14 <__aeabi_d2lz+0x1c>
 8000d08:	4620      	mov	r0, r4
 8000d0a:	4629      	mov	r1, r5
 8000d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d10:	f000 b80a 	b.w	8000d28 <__aeabi_d2ulz>
 8000d14:	4620      	mov	r0, r4
 8000d16:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d1a:	f000 f805 	bl	8000d28 <__aeabi_d2ulz>
 8000d1e:	4240      	negs	r0, r0
 8000d20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d24:	bd38      	pop	{r3, r4, r5, pc}
 8000d26:	bf00      	nop

08000d28 <__aeabi_d2ulz>:
 8000d28:	b5d0      	push	{r4, r6, r7, lr}
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	; (8000d5c <__aeabi_d2ulz+0x34>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	4606      	mov	r6, r0
 8000d30:	460f      	mov	r7, r1
 8000d32:	f7ff fc81 	bl	8000638 <__aeabi_dmul>
 8000d36:	f7ff ff57 	bl	8000be8 <__aeabi_d2uiz>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	f7ff fc02 	bl	8000544 <__aeabi_ui2d>
 8000d40:	4b07      	ldr	r3, [pc, #28]	; (8000d60 <__aeabi_d2ulz+0x38>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	f7ff fc78 	bl	8000638 <__aeabi_dmul>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	4639      	mov	r1, r7
 8000d50:	f7ff faba 	bl	80002c8 <__aeabi_dsub>
 8000d54:	f7ff ff48 	bl	8000be8 <__aeabi_d2uiz>
 8000d58:	4621      	mov	r1, r4
 8000d5a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d5c:	3df00000 	.word	0x3df00000
 8000d60:	41f00000 	.word	0x41f00000

08000d64 <__udivmoddi4>:
 8000d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d68:	9d08      	ldr	r5, [sp, #32]
 8000d6a:	4604      	mov	r4, r0
 8000d6c:	468c      	mov	ip, r1
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	f040 8083 	bne.w	8000e7a <__udivmoddi4+0x116>
 8000d74:	428a      	cmp	r2, r1
 8000d76:	4617      	mov	r7, r2
 8000d78:	d947      	bls.n	8000e0a <__udivmoddi4+0xa6>
 8000d7a:	fab2 f282 	clz	r2, r2
 8000d7e:	b142      	cbz	r2, 8000d92 <__udivmoddi4+0x2e>
 8000d80:	f1c2 0020 	rsb	r0, r2, #32
 8000d84:	fa24 f000 	lsr.w	r0, r4, r0
 8000d88:	4091      	lsls	r1, r2
 8000d8a:	4097      	lsls	r7, r2
 8000d8c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d90:	4094      	lsls	r4, r2
 8000d92:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d96:	0c23      	lsrs	r3, r4, #16
 8000d98:	fbbc f6f8 	udiv	r6, ip, r8
 8000d9c:	fa1f fe87 	uxth.w	lr, r7
 8000da0:	fb08 c116 	mls	r1, r8, r6, ip
 8000da4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000da8:	fb06 f10e 	mul.w	r1, r6, lr
 8000dac:	4299      	cmp	r1, r3
 8000dae:	d909      	bls.n	8000dc4 <__udivmoddi4+0x60>
 8000db0:	18fb      	adds	r3, r7, r3
 8000db2:	f106 30ff 	add.w	r0, r6, #4294967295
 8000db6:	f080 8119 	bcs.w	8000fec <__udivmoddi4+0x288>
 8000dba:	4299      	cmp	r1, r3
 8000dbc:	f240 8116 	bls.w	8000fec <__udivmoddi4+0x288>
 8000dc0:	3e02      	subs	r6, #2
 8000dc2:	443b      	add	r3, r7
 8000dc4:	1a5b      	subs	r3, r3, r1
 8000dc6:	b2a4      	uxth	r4, r4
 8000dc8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dcc:	fb08 3310 	mls	r3, r8, r0, r3
 8000dd0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000dd4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000dd8:	45a6      	cmp	lr, r4
 8000dda:	d909      	bls.n	8000df0 <__udivmoddi4+0x8c>
 8000ddc:	193c      	adds	r4, r7, r4
 8000dde:	f100 33ff 	add.w	r3, r0, #4294967295
 8000de2:	f080 8105 	bcs.w	8000ff0 <__udivmoddi4+0x28c>
 8000de6:	45a6      	cmp	lr, r4
 8000de8:	f240 8102 	bls.w	8000ff0 <__udivmoddi4+0x28c>
 8000dec:	3802      	subs	r0, #2
 8000dee:	443c      	add	r4, r7
 8000df0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000df4:	eba4 040e 	sub.w	r4, r4, lr
 8000df8:	2600      	movs	r6, #0
 8000dfa:	b11d      	cbz	r5, 8000e04 <__udivmoddi4+0xa0>
 8000dfc:	40d4      	lsrs	r4, r2
 8000dfe:	2300      	movs	r3, #0
 8000e00:	e9c5 4300 	strd	r4, r3, [r5]
 8000e04:	4631      	mov	r1, r6
 8000e06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0a:	b902      	cbnz	r2, 8000e0e <__udivmoddi4+0xaa>
 8000e0c:	deff      	udf	#255	; 0xff
 8000e0e:	fab2 f282 	clz	r2, r2
 8000e12:	2a00      	cmp	r2, #0
 8000e14:	d150      	bne.n	8000eb8 <__udivmoddi4+0x154>
 8000e16:	1bcb      	subs	r3, r1, r7
 8000e18:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e1c:	fa1f f887 	uxth.w	r8, r7
 8000e20:	2601      	movs	r6, #1
 8000e22:	fbb3 fcfe 	udiv	ip, r3, lr
 8000e26:	0c21      	lsrs	r1, r4, #16
 8000e28:	fb0e 331c 	mls	r3, lr, ip, r3
 8000e2c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e30:	fb08 f30c 	mul.w	r3, r8, ip
 8000e34:	428b      	cmp	r3, r1
 8000e36:	d907      	bls.n	8000e48 <__udivmoddi4+0xe4>
 8000e38:	1879      	adds	r1, r7, r1
 8000e3a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e3e:	d202      	bcs.n	8000e46 <__udivmoddi4+0xe2>
 8000e40:	428b      	cmp	r3, r1
 8000e42:	f200 80e9 	bhi.w	8001018 <__udivmoddi4+0x2b4>
 8000e46:	4684      	mov	ip, r0
 8000e48:	1ac9      	subs	r1, r1, r3
 8000e4a:	b2a3      	uxth	r3, r4
 8000e4c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e50:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e54:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e58:	fb08 f800 	mul.w	r8, r8, r0
 8000e5c:	45a0      	cmp	r8, r4
 8000e5e:	d907      	bls.n	8000e70 <__udivmoddi4+0x10c>
 8000e60:	193c      	adds	r4, r7, r4
 8000e62:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e66:	d202      	bcs.n	8000e6e <__udivmoddi4+0x10a>
 8000e68:	45a0      	cmp	r8, r4
 8000e6a:	f200 80d9 	bhi.w	8001020 <__udivmoddi4+0x2bc>
 8000e6e:	4618      	mov	r0, r3
 8000e70:	eba4 0408 	sub.w	r4, r4, r8
 8000e74:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e78:	e7bf      	b.n	8000dfa <__udivmoddi4+0x96>
 8000e7a:	428b      	cmp	r3, r1
 8000e7c:	d909      	bls.n	8000e92 <__udivmoddi4+0x12e>
 8000e7e:	2d00      	cmp	r5, #0
 8000e80:	f000 80b1 	beq.w	8000fe6 <__udivmoddi4+0x282>
 8000e84:	2600      	movs	r6, #0
 8000e86:	e9c5 0100 	strd	r0, r1, [r5]
 8000e8a:	4630      	mov	r0, r6
 8000e8c:	4631      	mov	r1, r6
 8000e8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e92:	fab3 f683 	clz	r6, r3
 8000e96:	2e00      	cmp	r6, #0
 8000e98:	d14a      	bne.n	8000f30 <__udivmoddi4+0x1cc>
 8000e9a:	428b      	cmp	r3, r1
 8000e9c:	d302      	bcc.n	8000ea4 <__udivmoddi4+0x140>
 8000e9e:	4282      	cmp	r2, r0
 8000ea0:	f200 80b8 	bhi.w	8001014 <__udivmoddi4+0x2b0>
 8000ea4:	1a84      	subs	r4, r0, r2
 8000ea6:	eb61 0103 	sbc.w	r1, r1, r3
 8000eaa:	2001      	movs	r0, #1
 8000eac:	468c      	mov	ip, r1
 8000eae:	2d00      	cmp	r5, #0
 8000eb0:	d0a8      	beq.n	8000e04 <__udivmoddi4+0xa0>
 8000eb2:	e9c5 4c00 	strd	r4, ip, [r5]
 8000eb6:	e7a5      	b.n	8000e04 <__udivmoddi4+0xa0>
 8000eb8:	f1c2 0320 	rsb	r3, r2, #32
 8000ebc:	fa20 f603 	lsr.w	r6, r0, r3
 8000ec0:	4097      	lsls	r7, r2
 8000ec2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ec6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000eca:	40d9      	lsrs	r1, r3
 8000ecc:	4330      	orrs	r0, r6
 8000ece:	0c03      	lsrs	r3, r0, #16
 8000ed0:	fbb1 f6fe 	udiv	r6, r1, lr
 8000ed4:	fa1f f887 	uxth.w	r8, r7
 8000ed8:	fb0e 1116 	mls	r1, lr, r6, r1
 8000edc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ee0:	fb06 f108 	mul.w	r1, r6, r8
 8000ee4:	4299      	cmp	r1, r3
 8000ee6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eea:	d909      	bls.n	8000f00 <__udivmoddi4+0x19c>
 8000eec:	18fb      	adds	r3, r7, r3
 8000eee:	f106 3cff 	add.w	ip, r6, #4294967295
 8000ef2:	f080 808d 	bcs.w	8001010 <__udivmoddi4+0x2ac>
 8000ef6:	4299      	cmp	r1, r3
 8000ef8:	f240 808a 	bls.w	8001010 <__udivmoddi4+0x2ac>
 8000efc:	3e02      	subs	r6, #2
 8000efe:	443b      	add	r3, r7
 8000f00:	1a5b      	subs	r3, r3, r1
 8000f02:	b281      	uxth	r1, r0
 8000f04:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f08:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f0c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f10:	fb00 f308 	mul.w	r3, r0, r8
 8000f14:	428b      	cmp	r3, r1
 8000f16:	d907      	bls.n	8000f28 <__udivmoddi4+0x1c4>
 8000f18:	1879      	adds	r1, r7, r1
 8000f1a:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f1e:	d273      	bcs.n	8001008 <__udivmoddi4+0x2a4>
 8000f20:	428b      	cmp	r3, r1
 8000f22:	d971      	bls.n	8001008 <__udivmoddi4+0x2a4>
 8000f24:	3802      	subs	r0, #2
 8000f26:	4439      	add	r1, r7
 8000f28:	1acb      	subs	r3, r1, r3
 8000f2a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000f2e:	e778      	b.n	8000e22 <__udivmoddi4+0xbe>
 8000f30:	f1c6 0c20 	rsb	ip, r6, #32
 8000f34:	fa03 f406 	lsl.w	r4, r3, r6
 8000f38:	fa22 f30c 	lsr.w	r3, r2, ip
 8000f3c:	431c      	orrs	r4, r3
 8000f3e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f42:	fa01 f306 	lsl.w	r3, r1, r6
 8000f46:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f4a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f4e:	431f      	orrs	r7, r3
 8000f50:	0c3b      	lsrs	r3, r7, #16
 8000f52:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f56:	fa1f f884 	uxth.w	r8, r4
 8000f5a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f5e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f62:	fb09 fa08 	mul.w	sl, r9, r8
 8000f66:	458a      	cmp	sl, r1
 8000f68:	fa02 f206 	lsl.w	r2, r2, r6
 8000f6c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f70:	d908      	bls.n	8000f84 <__udivmoddi4+0x220>
 8000f72:	1861      	adds	r1, r4, r1
 8000f74:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f78:	d248      	bcs.n	800100c <__udivmoddi4+0x2a8>
 8000f7a:	458a      	cmp	sl, r1
 8000f7c:	d946      	bls.n	800100c <__udivmoddi4+0x2a8>
 8000f7e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f82:	4421      	add	r1, r4
 8000f84:	eba1 010a 	sub.w	r1, r1, sl
 8000f88:	b2bf      	uxth	r7, r7
 8000f8a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f8e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f92:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f96:	fb00 f808 	mul.w	r8, r0, r8
 8000f9a:	45b8      	cmp	r8, r7
 8000f9c:	d907      	bls.n	8000fae <__udivmoddi4+0x24a>
 8000f9e:	19e7      	adds	r7, r4, r7
 8000fa0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000fa4:	d22e      	bcs.n	8001004 <__udivmoddi4+0x2a0>
 8000fa6:	45b8      	cmp	r8, r7
 8000fa8:	d92c      	bls.n	8001004 <__udivmoddi4+0x2a0>
 8000faa:	3802      	subs	r0, #2
 8000fac:	4427      	add	r7, r4
 8000fae:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000fb2:	eba7 0708 	sub.w	r7, r7, r8
 8000fb6:	fba0 8902 	umull	r8, r9, r0, r2
 8000fba:	454f      	cmp	r7, r9
 8000fbc:	46c6      	mov	lr, r8
 8000fbe:	4649      	mov	r1, r9
 8000fc0:	d31a      	bcc.n	8000ff8 <__udivmoddi4+0x294>
 8000fc2:	d017      	beq.n	8000ff4 <__udivmoddi4+0x290>
 8000fc4:	b15d      	cbz	r5, 8000fde <__udivmoddi4+0x27a>
 8000fc6:	ebb3 020e 	subs.w	r2, r3, lr
 8000fca:	eb67 0701 	sbc.w	r7, r7, r1
 8000fce:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000fd2:	40f2      	lsrs	r2, r6
 8000fd4:	ea4c 0202 	orr.w	r2, ip, r2
 8000fd8:	40f7      	lsrs	r7, r6
 8000fda:	e9c5 2700 	strd	r2, r7, [r5]
 8000fde:	2600      	movs	r6, #0
 8000fe0:	4631      	mov	r1, r6
 8000fe2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fe6:	462e      	mov	r6, r5
 8000fe8:	4628      	mov	r0, r5
 8000fea:	e70b      	b.n	8000e04 <__udivmoddi4+0xa0>
 8000fec:	4606      	mov	r6, r0
 8000fee:	e6e9      	b.n	8000dc4 <__udivmoddi4+0x60>
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	e6fd      	b.n	8000df0 <__udivmoddi4+0x8c>
 8000ff4:	4543      	cmp	r3, r8
 8000ff6:	d2e5      	bcs.n	8000fc4 <__udivmoddi4+0x260>
 8000ff8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000ffc:	eb69 0104 	sbc.w	r1, r9, r4
 8001000:	3801      	subs	r0, #1
 8001002:	e7df      	b.n	8000fc4 <__udivmoddi4+0x260>
 8001004:	4608      	mov	r0, r1
 8001006:	e7d2      	b.n	8000fae <__udivmoddi4+0x24a>
 8001008:	4660      	mov	r0, ip
 800100a:	e78d      	b.n	8000f28 <__udivmoddi4+0x1c4>
 800100c:	4681      	mov	r9, r0
 800100e:	e7b9      	b.n	8000f84 <__udivmoddi4+0x220>
 8001010:	4666      	mov	r6, ip
 8001012:	e775      	b.n	8000f00 <__udivmoddi4+0x19c>
 8001014:	4630      	mov	r0, r6
 8001016:	e74a      	b.n	8000eae <__udivmoddi4+0x14a>
 8001018:	f1ac 0c02 	sub.w	ip, ip, #2
 800101c:	4439      	add	r1, r7
 800101e:	e713      	b.n	8000e48 <__udivmoddi4+0xe4>
 8001020:	3802      	subs	r0, #2
 8001022:	443c      	add	r4, r7
 8001024:	e724      	b.n	8000e70 <__udivmoddi4+0x10c>
 8001026:	bf00      	nop

08001028 <__aeabi_idiv0>:
 8001028:	4770      	bx	lr
 800102a:	bf00      	nop

0800102c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800102c:	b480      	push	{r7}
 800102e:	b083      	sub	sp, #12
 8001030:	af00      	add	r7, sp, #0
 8001032:	4603      	mov	r3, r0
 8001034:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001036:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800103a:	2b00      	cmp	r3, #0
 800103c:	db0b      	blt.n	8001056 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800103e:	79fb      	ldrb	r3, [r7, #7]
 8001040:	f003 021f 	and.w	r2, r3, #31
 8001044:	4907      	ldr	r1, [pc, #28]	; (8001064 <__NVIC_EnableIRQ+0x38>)
 8001046:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800104a:	095b      	lsrs	r3, r3, #5
 800104c:	2001      	movs	r0, #1
 800104e:	fa00 f202 	lsl.w	r2, r0, r2
 8001052:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001056:	bf00      	nop
 8001058:	370c      	adds	r7, #12
 800105a:	46bd      	mov	sp, r7
 800105c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001060:	4770      	bx	lr
 8001062:	bf00      	nop
 8001064:	e000e100 	.word	0xe000e100

08001068 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001068:	b480      	push	{r7}
 800106a:	b083      	sub	sp, #12
 800106c:	af00      	add	r7, sp, #0
 800106e:	4603      	mov	r3, r0
 8001070:	6039      	str	r1, [r7, #0]
 8001072:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001074:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001078:	2b00      	cmp	r3, #0
 800107a:	db0a      	blt.n	8001092 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	b2da      	uxtb	r2, r3
 8001080:	490c      	ldr	r1, [pc, #48]	; (80010b4 <__NVIC_SetPriority+0x4c>)
 8001082:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001086:	0112      	lsls	r2, r2, #4
 8001088:	b2d2      	uxtb	r2, r2
 800108a:	440b      	add	r3, r1
 800108c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001090:	e00a      	b.n	80010a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	b2da      	uxtb	r2, r3
 8001096:	4908      	ldr	r1, [pc, #32]	; (80010b8 <__NVIC_SetPriority+0x50>)
 8001098:	79fb      	ldrb	r3, [r7, #7]
 800109a:	f003 030f 	and.w	r3, r3, #15
 800109e:	3b04      	subs	r3, #4
 80010a0:	0112      	lsls	r2, r2, #4
 80010a2:	b2d2      	uxtb	r2, r2
 80010a4:	440b      	add	r3, r1
 80010a6:	761a      	strb	r2, [r3, #24]
}
 80010a8:	bf00      	nop
 80010aa:	370c      	adds	r7, #12
 80010ac:	46bd      	mov	sp, r7
 80010ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b2:	4770      	bx	lr
 80010b4:	e000e100 	.word	0xe000e100
 80010b8:	e000ed00 	.word	0xe000ed00

080010bc <USART2_IRQHandler>:

//void stopMotor(void);
void read_UART_input(void);
void read_UART1_input(void);

void USART2_IRQHandler(void){
 80010bc:	b580      	push	{r7, lr}
 80010be:	af00      	add	r7, sp, #0
	HAL_UART_IRQHandler(&huart2);
 80010c0:	4802      	ldr	r0, [pc, #8]	; (80010cc <USART2_IRQHandler+0x10>)
 80010c2:	f005 f9cb 	bl	800645c <HAL_UART_IRQHandler>
}
 80010c6:	bf00      	nop
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	200004c8 	.word	0x200004c8

080010d0 <USART1_IRQHandler>:

void USART1_IRQHandler(void){
 80010d0:	b580      	push	{r7, lr}
 80010d2:	af00      	add	r7, sp, #0
	HAL_UART_IRQHandler(&huart1);
 80010d4:	4802      	ldr	r0, [pc, #8]	; (80010e0 <USART1_IRQHandler+0x10>)
 80010d6:	f005 f9c1 	bl	800645c <HAL_UART_IRQHandler>
}
 80010da:	bf00      	nop
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	bf00      	nop
 80010e0:	20000398 	.word	0x20000398

080010e4 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle) {
 80010e4:	b480      	push	{r7}
 80010e6:	b083      	sub	sp, #12
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
	// Set transmission flag: transfer complete
	UartReady = SET;
 80010ec:	4b04      	ldr	r3, [pc, #16]	; (8001100 <HAL_UART_RxCpltCallback+0x1c>)
 80010ee:	2201      	movs	r2, #1
 80010f0:	701a      	strb	r2, [r3, #0]
}
 80010f2:	bf00      	nop
 80010f4:	370c      	adds	r7, #12
 80010f6:	46bd      	mov	sp, r7
 80010f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fc:	4770      	bx	lr
 80010fe:	bf00      	nop
 8001100:	20000000 	.word	0x20000000

08001104 <TIM2_IRQHandler>:


void TIM2_IRQHandler(void) {
 8001104:	b580      	push	{r7, lr}
 8001106:	af00      	add	r7, sp, #0
	j++;
 8001108:	4b04      	ldr	r3, [pc, #16]	; (800111c <TIM2_IRQHandler+0x18>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	3301      	adds	r3, #1
 800110e:	4a03      	ldr	r2, [pc, #12]	; (800111c <TIM2_IRQHandler+0x18>)
 8001110:	6013      	str	r3, [r2, #0]
	HAL_TIM_IRQHandler(&htim2);
 8001112:	4803      	ldr	r0, [pc, #12]	; (8001120 <TIM2_IRQHandler+0x1c>)
 8001114:	f004 fac8 	bl	80056a8 <HAL_TIM_IRQHandler>
}
 8001118:	bf00      	nop
 800111a:	bd80      	pop	{r7, pc}
 800111c:	20000258 	.word	0x20000258
 8001120:	20000478 	.word	0x20000478

08001124 <TIM3_IRQHandler>:

void TIM3_IRQHandler(void) {
 8001124:	b580      	push	{r7, lr}
 8001126:	af00      	add	r7, sp, #0
	k++;
 8001128:	4b04      	ldr	r3, [pc, #16]	; (800113c <TIM3_IRQHandler+0x18>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	3301      	adds	r3, #1
 800112e:	4a03      	ldr	r2, [pc, #12]	; (800113c <TIM3_IRQHandler+0x18>)
 8001130:	6013      	str	r3, [r2, #0]
	HAL_TIM_IRQHandler(&htim3);
 8001132:	4803      	ldr	r0, [pc, #12]	; (8001140 <TIM3_IRQHandler+0x1c>)
 8001134:	f004 fab8 	bl	80056a8 <HAL_TIM_IRQHandler>
}
 8001138:	bf00      	nop
 800113a:	bd80      	pop	{r7, pc}
 800113c:	200002e8 	.word	0x200002e8
 8001140:	20000304 	.word	0x20000304

08001144 <TIM6_DAC_IRQHandler>:

void TIM6_DAC_IRQHandler(void) {
 8001144:	b580      	push	{r7, lr}
 8001146:	af00      	add	r7, sp, #0
	HAL_TIM_IRQHandler(&htim6);
 8001148:	4802      	ldr	r0, [pc, #8]	; (8001154 <TIM6_DAC_IRQHandler+0x10>)
 800114a:	f004 faad 	bl	80056a8 <HAL_TIM_IRQHandler>
}
 800114e:	bf00      	nop
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	200003f8 	.word	0x200003f8

08001158 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001158:	b580      	push	{r7, lr}
 800115a:	b082      	sub	sp, #8
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
  // Check which version of the timer triggered this callback
 // if (htim == &htim6 ){
	if(htim->Instance == TIM6){
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	4a0c      	ldr	r2, [pc, #48]	; (8001198 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8001166:	4293      	cmp	r3, r2
 8001168:	d111      	bne.n	800118e <HAL_TIM_PeriodElapsedCallback+0x36>
		stopMotor(&htim2,&htim3, &htim6);
 800116a:	4a0c      	ldr	r2, [pc, #48]	; (800119c <HAL_TIM_PeriodElapsedCallback+0x44>)
 800116c:	490c      	ldr	r1, [pc, #48]	; (80011a0 <HAL_TIM_PeriodElapsedCallback+0x48>)
 800116e:	480d      	ldr	r0, [pc, #52]	; (80011a4 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8001170:	f001 fe2e 	bl	8002dd0 <stopMotor>
		HAL_TIM_Base_Stop_IT(&htim6);
 8001174:	4809      	ldr	r0, [pc, #36]	; (800119c <HAL_TIM_PeriodElapsedCallback+0x44>)
 8001176:	f004 f84b 	bl	8005210 <HAL_TIM_Base_Stop_IT>
		__HAL_TIM_CLEAR_FLAG(&htim6, TIM_SR_UIF);
 800117a:	4b08      	ldr	r3, [pc, #32]	; (800119c <HAL_TIM_PeriodElapsedCallback+0x44>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	f06f 0201 	mvn.w	r2, #1
 8001182:	611a      	str	r2, [r3, #16]
		__HAL_TIM_CLEAR_FLAG(&htim6, TIM_IT_UPDATE);
 8001184:	4b05      	ldr	r3, [pc, #20]	; (800119c <HAL_TIM_PeriodElapsedCallback+0x44>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	f06f 0201 	mvn.w	r2, #1
 800118c:	611a      	str	r2, [r3, #16]
  }
}
 800118e:	bf00      	nop
 8001190:	3708      	adds	r7, #8
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	40001000 	.word	0x40001000
 800119c:	200003f8 	.word	0x200003f8
 80011a0:	20000304 	.word	0x20000304
 80011a4:	20000478 	.word	0x20000478

080011a8 <complementaryFilter>:


void complementaryFilter(void){
 80011a8:	b5b0      	push	{r4, r5, r7, lr}
 80011aa:	af00      	add	r7, sp, #0
	angleX = (0.97 * (angleX+Gy*(dTime/1000))) + 0.03*pitch;
 80011ac:	4b46      	ldr	r3, [pc, #280]	; (80012c8 <complementaryFilter+0x120>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	4618      	mov	r0, r3
 80011b2:	f7ff f9e9 	bl	8000588 <__aeabi_f2d>
 80011b6:	4604      	mov	r4, r0
 80011b8:	460d      	mov	r5, r1
 80011ba:	4b44      	ldr	r3, [pc, #272]	; (80012cc <complementaryFilter+0x124>)
 80011bc:	edd3 7a00 	vldr	s15, [r3]
 80011c0:	ed9f 7a43 	vldr	s14, [pc, #268]	; 80012d0 <complementaryFilter+0x128>
 80011c4:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80011c8:	ee16 0a90 	vmov	r0, s13
 80011cc:	f7ff f9dc 	bl	8000588 <__aeabi_f2d>
 80011d0:	4b40      	ldr	r3, [pc, #256]	; (80012d4 <complementaryFilter+0x12c>)
 80011d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011d6:	f7ff fa2f 	bl	8000638 <__aeabi_dmul>
 80011da:	4602      	mov	r2, r0
 80011dc:	460b      	mov	r3, r1
 80011de:	4620      	mov	r0, r4
 80011e0:	4629      	mov	r1, r5
 80011e2:	f7ff f873 	bl	80002cc <__adddf3>
 80011e6:	4602      	mov	r2, r0
 80011e8:	460b      	mov	r3, r1
 80011ea:	4610      	mov	r0, r2
 80011ec:	4619      	mov	r1, r3
 80011ee:	a332      	add	r3, pc, #200	; (adr r3, 80012b8 <complementaryFilter+0x110>)
 80011f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011f4:	f7ff fa20 	bl	8000638 <__aeabi_dmul>
 80011f8:	4602      	mov	r2, r0
 80011fa:	460b      	mov	r3, r1
 80011fc:	4614      	mov	r4, r2
 80011fe:	461d      	mov	r5, r3
 8001200:	4b35      	ldr	r3, [pc, #212]	; (80012d8 <complementaryFilter+0x130>)
 8001202:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001206:	a32e      	add	r3, pc, #184	; (adr r3, 80012c0 <complementaryFilter+0x118>)
 8001208:	e9d3 2300 	ldrd	r2, r3, [r3]
 800120c:	f7ff fa14 	bl	8000638 <__aeabi_dmul>
 8001210:	4602      	mov	r2, r0
 8001212:	460b      	mov	r3, r1
 8001214:	4620      	mov	r0, r4
 8001216:	4629      	mov	r1, r5
 8001218:	f7ff f858 	bl	80002cc <__adddf3>
 800121c:	4602      	mov	r2, r0
 800121e:	460b      	mov	r3, r1
 8001220:	4610      	mov	r0, r2
 8001222:	4619      	mov	r1, r3
 8001224:	f7ff fd00 	bl	8000c28 <__aeabi_d2f>
 8001228:	4603      	mov	r3, r0
 800122a:	4a27      	ldr	r2, [pc, #156]	; (80012c8 <complementaryFilter+0x120>)
 800122c:	6013      	str	r3, [r2, #0]
	angleY = (0.97 * (angleY+Gx*(dTime/1000))) + 0.03*roll;
 800122e:	4b2b      	ldr	r3, [pc, #172]	; (80012dc <complementaryFilter+0x134>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	4618      	mov	r0, r3
 8001234:	f7ff f9a8 	bl	8000588 <__aeabi_f2d>
 8001238:	4604      	mov	r4, r0
 800123a:	460d      	mov	r5, r1
 800123c:	4b23      	ldr	r3, [pc, #140]	; (80012cc <complementaryFilter+0x124>)
 800123e:	edd3 7a00 	vldr	s15, [r3]
 8001242:	ed9f 7a23 	vldr	s14, [pc, #140]	; 80012d0 <complementaryFilter+0x128>
 8001246:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800124a:	ee16 0a90 	vmov	r0, s13
 800124e:	f7ff f99b 	bl	8000588 <__aeabi_f2d>
 8001252:	4b23      	ldr	r3, [pc, #140]	; (80012e0 <complementaryFilter+0x138>)
 8001254:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001258:	f7ff f9ee 	bl	8000638 <__aeabi_dmul>
 800125c:	4602      	mov	r2, r0
 800125e:	460b      	mov	r3, r1
 8001260:	4620      	mov	r0, r4
 8001262:	4629      	mov	r1, r5
 8001264:	f7ff f832 	bl	80002cc <__adddf3>
 8001268:	4602      	mov	r2, r0
 800126a:	460b      	mov	r3, r1
 800126c:	4610      	mov	r0, r2
 800126e:	4619      	mov	r1, r3
 8001270:	a311      	add	r3, pc, #68	; (adr r3, 80012b8 <complementaryFilter+0x110>)
 8001272:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001276:	f7ff f9df 	bl	8000638 <__aeabi_dmul>
 800127a:	4602      	mov	r2, r0
 800127c:	460b      	mov	r3, r1
 800127e:	4614      	mov	r4, r2
 8001280:	461d      	mov	r5, r3
 8001282:	4b18      	ldr	r3, [pc, #96]	; (80012e4 <complementaryFilter+0x13c>)
 8001284:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001288:	a30d      	add	r3, pc, #52	; (adr r3, 80012c0 <complementaryFilter+0x118>)
 800128a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800128e:	f7ff f9d3 	bl	8000638 <__aeabi_dmul>
 8001292:	4602      	mov	r2, r0
 8001294:	460b      	mov	r3, r1
 8001296:	4620      	mov	r0, r4
 8001298:	4629      	mov	r1, r5
 800129a:	f7ff f817 	bl	80002cc <__adddf3>
 800129e:	4602      	mov	r2, r0
 80012a0:	460b      	mov	r3, r1
 80012a2:	4610      	mov	r0, r2
 80012a4:	4619      	mov	r1, r3
 80012a6:	f7ff fcbf 	bl	8000c28 <__aeabi_d2f>
 80012aa:	4603      	mov	r3, r0
 80012ac:	4a0b      	ldr	r2, [pc, #44]	; (80012dc <complementaryFilter+0x134>)
 80012ae:	6013      	str	r3, [r2, #0]
}
 80012b0:	bf00      	nop
 80012b2:	bdb0      	pop	{r4, r5, r7, pc}
 80012b4:	f3af 8000 	nop.w
 80012b8:	70a3d70a 	.word	0x70a3d70a
 80012bc:	3fef0a3d 	.word	0x3fef0a3d
 80012c0:	eb851eb8 	.word	0xeb851eb8
 80012c4:	3f9eb851 	.word	0x3f9eb851
 80012c8:	20000208 	.word	0x20000208
 80012cc:	20000260 	.word	0x20000260
 80012d0:	447a0000 	.word	0x447a0000
 80012d4:	20000370 	.word	0x20000370
 80012d8:	20000510 	.word	0x20000510
 80012dc:	2000020c 	.word	0x2000020c
 80012e0:	20000220 	.word	0x20000220
 80012e4:	20000518 	.word	0x20000518

080012e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012e8:	b5b0      	push	{r4, r5, r7, lr}
 80012ea:	b09a      	sub	sp, #104	; 0x68
 80012ec:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012ee:	f001 fdbd 	bl	8002e6c <HAL_Init>

  /* USER CODE BEGIN Init */

  steps_per_rev_eff = (steps_per_rev_motor * microsteps_set * 2);
 80012f2:	4bb6      	ldr	r3, [pc, #728]	; (80015cc <main+0x2e4>)
 80012f4:	f44f 6248 	mov.w	r2, #3200	; 0xc80
 80012f8:	601a      	str	r2, [r3, #0]

  arm_pid_instance_f32 PID;

  /* Set PID parameters */
   /* Set this for your needs */
   PID.Kp = PID_KP;        /* Proporcional */
 80012fa:	4bb5      	ldr	r3, [pc, #724]	; (80015d0 <main+0x2e8>)
 80012fc:	653b      	str	r3, [r7, #80]	; 0x50
   PID.Ki = PID_KI;        /* Integral */
 80012fe:	4bb5      	ldr	r3, [pc, #724]	; (80015d4 <main+0x2ec>)
 8001300:	657b      	str	r3, [r7, #84]	; 0x54
   PID.Kd = PID_KD;        /* Derivative */
 8001302:	4bb5      	ldr	r3, [pc, #724]	; (80015d8 <main+0x2f0>)
 8001304:	65bb      	str	r3, [r7, #88]	; 0x58

   /* Initialize PID system, float32_t format */
   arm_pid_init_f32(&PID, 1);
 8001306:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800130a:	2101      	movs	r1, #1
 800130c:	4618      	mov	r0, r3
 800130e:	f005 fdc3 	bl	8006e98 <arm_pid_init_f32>



  /* Init PID controller */
  PIDController pid = { PID_KP, PID_KI, PID_KD,
 8001312:	463b      	mov	r3, r7
 8001314:	2238      	movs	r2, #56	; 0x38
 8001316:	2100      	movs	r1, #0
 8001318:	4618      	mov	r0, r3
 800131a:	f005 fe03 	bl	8006f24 <memset>
 800131e:	4bac      	ldr	r3, [pc, #688]	; (80015d0 <main+0x2e8>)
 8001320:	603b      	str	r3, [r7, #0]
 8001322:	4bac      	ldr	r3, [pc, #688]	; (80015d4 <main+0x2ec>)
 8001324:	607b      	str	r3, [r7, #4]
 8001326:	4bac      	ldr	r3, [pc, #688]	; (80015d8 <main+0x2f0>)
 8001328:	60bb      	str	r3, [r7, #8]
 800132a:	4bac      	ldr	r3, [pc, #688]	; (80015dc <main+0x2f4>)
 800132c:	613b      	str	r3, [r7, #16]
 800132e:	4bac      	ldr	r3, [pc, #688]	; (80015e0 <main+0x2f8>)
 8001330:	617b      	str	r3, [r7, #20]
 8001332:	4baa      	ldr	r3, [pc, #680]	; (80015dc <main+0x2f4>)
 8001334:	61bb      	str	r3, [r7, #24]
 8001336:	4baa      	ldr	r3, [pc, #680]	; (80015e0 <main+0x2f8>)
 8001338:	61fb      	str	r3, [r7, #28]
 800133a:	4baa      	ldr	r3, [pc, #680]	; (80015e4 <main+0x2fc>)
 800133c:	623b      	str	r3, [r7, #32]
                        PID_TAU,
                        PID_LIM_MIN, PID_LIM_MAX,
						PID_LIM_MIN_INT, PID_LIM_MAX_INT,
                        SAMPLE_TIME_S };

  PIDController_Init(&pid);
 800133e:	463b      	mov	r3, r7
 8001340:	4618      	mov	r0, r3
 8001342:	f001 fa67 	bl	8002814 <PIDController_Init>

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001346:	f000 f971 	bl	800162c <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800134a:	f000 fb7f 	bl	8001a4c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800134e:	f000 fb53 	bl	80019f8 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8001352:	f000 fa07 	bl	8001764 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001356:	f000 fa79 	bl	800184c <MX_TIM3_Init>
  MX_TIM6_Init();
 800135a:	f000 faed 	bl	8001938 <MX_TIM6_Init>
  MX_I2C1_Init();
 800135e:	f000 f9d3 	bl	8001708 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8001362:	f000 fb1f 	bl	80019a4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001366:	2200      	movs	r2, #0
 8001368:	2100      	movs	r1, #0
 800136a:	2026      	movs	r0, #38	; 0x26
 800136c:	f001 feef 	bl	800314e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001370:	2026      	movs	r0, #38	; 0x26
 8001372:	f001 ff08 	bl	8003186 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001376:	2200      	movs	r2, #0
 8001378:	2100      	movs	r1, #0
 800137a:	2025      	movs	r0, #37	; 0x25
 800137c:	f001 fee7 	bl	800314e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001380:	2025      	movs	r0, #37	; 0x25
 8001382:	f001 ff00 	bl	8003186 <HAL_NVIC_EnableIRQ>

  NVIC_SetPriority(TIM2_IRQn, 0);
 8001386:	2100      	movs	r1, #0
 8001388:	201c      	movs	r0, #28
 800138a:	f7ff fe6d 	bl	8001068 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM2_IRQn);
 800138e:	201c      	movs	r0, #28
 8001390:	f7ff fe4c 	bl	800102c <__NVIC_EnableIRQ>

  NVIC_SetPriority(TIM3_IRQn, 0);
 8001394:	2100      	movs	r1, #0
 8001396:	201d      	movs	r0, #29
 8001398:	f7ff fe66 	bl	8001068 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM3_IRQn);
 800139c:	201d      	movs	r0, #29
 800139e:	f7ff fe45 	bl	800102c <__NVIC_EnableIRQ>

  NVIC_SetPriority(TIM6_DAC_IRQn, 0);
 80013a2:	2100      	movs	r1, #0
 80013a4:	2036      	movs	r0, #54	; 0x36
 80013a6:	f7ff fe5f 	bl	8001068 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80013aa:	2036      	movs	r0, #54	; 0x36
 80013ac:	f7ff fe3e 	bl	800102c <__NVIC_EnableIRQ>
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 80013b0:	b662      	cpsie	i
}
 80013b2:	bf00      	nop

  __enable_irq();

//  HAL_TIM_Base_Start_IT(&htim6);
  HAL_TIM_Base_Stop_IT(&htim6);
 80013b4:	488c      	ldr	r0, [pc, #560]	; (80015e8 <main+0x300>)
 80013b6:	f003 ff2b 	bl	8005210 <HAL_TIM_Base_Stop_IT>
  __HAL_TIM_CLEAR_FLAG(&htim6, TIM_SR_UIF);
 80013ba:	4b8b      	ldr	r3, [pc, #556]	; (80015e8 <main+0x300>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f06f 0201 	mvn.w	r2, #1
 80013c2:	611a      	str	r2, [r3, #16]
  __HAL_TIM_CLEAR_FLAG(&htim6, TIM_IT_UPDATE);
 80013c4:	4b88      	ldr	r3, [pc, #544]	; (80015e8 <main+0x300>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	f06f 0201 	mvn.w	r2, #1
 80013cc:	611a      	str	r2, [r3, #16]

  HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_1);
 80013ce:	2100      	movs	r1, #0
 80013d0:	4886      	ldr	r0, [pc, #536]	; (80015ec <main+0x304>)
 80013d2:	f003 ffa5 	bl	8005320 <HAL_TIM_OC_Start_IT>
  HAL_TIM_OC_Start_IT(&htim3, TIM_CHANNEL_1);
 80013d6:	2100      	movs	r1, #0
 80013d8:	4885      	ldr	r0, [pc, #532]	; (80015f0 <main+0x308>)
 80013da:	f003 ffa1 	bl	8005320 <HAL_TIM_OC_Start_IT>

  HAL_TIM_OC_Stop_IT(&htim2, TIM_CHANNEL_1);
 80013de:	2100      	movs	r1, #0
 80013e0:	4882      	ldr	r0, [pc, #520]	; (80015ec <main+0x304>)
 80013e2:	f004 f8ab 	bl	800553c <HAL_TIM_OC_Stop_IT>
  HAL_TIM_OC_Stop_IT(&htim3, TIM_CHANNEL_1);
 80013e6:	2100      	movs	r1, #0
 80013e8:	4881      	ldr	r0, [pc, #516]	; (80015f0 <main+0x308>)
 80013ea:	f004 f8a7 	bl	800553c <HAL_TIM_OC_Stop_IT>

  HAL_GPIO_WritePin(GPIOA, DIR_DX_Pin, GPIO_PIN_SET);
 80013ee:	2201      	movs	r2, #1
 80013f0:	2102      	movs	r1, #2
 80013f2:	4880      	ldr	r0, [pc, #512]	; (80015f4 <main+0x30c>)
 80013f4:	f002 f908 	bl	8003608 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, DIR_SX_Pin, GPIO_PIN_SET);
 80013f8:	2201      	movs	r2, #1
 80013fa:	2180      	movs	r1, #128	; 0x80
 80013fc:	487d      	ldr	r0, [pc, #500]	; (80015f4 <main+0x30c>)
 80013fe:	f002 f903 	bl	8003608 <HAL_GPIO_WritePin>

  MPU6050_Init(&hi2c1);
 8001402:	487d      	ldr	r0, [pc, #500]	; (80015f8 <main+0x310>)
 8001404:	f000 fe64 	bl	80020d0 <MPU6050_Init>
  MPU6050_Calibration(&hi2c1);
 8001408:	487b      	ldr	r0, [pc, #492]	; (80015f8 <main+0x310>)
 800140a:	f001 f92d 	bl	8002668 <MPU6050_Calibration>

  float setpoint = 0.0f;
 800140e:	f04f 0300 	mov.w	r3, #0
 8001412:	65fb      	str	r3, [r7, #92]	; 0x5c
  while (1){
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	dTime = HAL_GetTick() - last;
 8001414:	f001 fd90 	bl	8002f38 <HAL_GetTick>
 8001418:	4602      	mov	r2, r0
 800141a:	4b78      	ldr	r3, [pc, #480]	; (80015fc <main+0x314>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	1ad3      	subs	r3, r2, r3
 8001420:	ee07 3a90 	vmov	s15, r3
 8001424:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001428:	4b75      	ldr	r3, [pc, #468]	; (8001600 <main+0x318>)
 800142a:	edc3 7a00 	vstr	s15, [r3]
	last = HAL_GetTick();
 800142e:	f001 fd83 	bl	8002f38 <HAL_GetTick>
 8001432:	4603      	mov	r3, r0
 8001434:	4a71      	ldr	r2, [pc, #452]	; (80015fc <main+0x314>)
 8001436:	6013      	str	r3, [r2, #0]

	MPU6050_getStatus(&hi2c1);
 8001438:	486f      	ldr	r0, [pc, #444]	; (80015f8 <main+0x310>)
 800143a:	f000 fec1 	bl	80021c0 <MPU6050_getStatus>
	MPU6050_Read_Accel(&hi2c1);
 800143e:	486e      	ldr	r0, [pc, #440]	; (80015f8 <main+0x310>)
 8001440:	f000 fee2 	bl	8002208 <MPU6050_Read_Accel>
	MPU6050_Read_Gyro(&hi2c1);
 8001444:	486c      	ldr	r0, [pc, #432]	; (80015f8 <main+0x310>)
 8001446:	f000 fff3 	bl	8002430 <MPU6050_Read_Gyro>
	//read_UART_input();
	//read_UART1_input();

//	VELOCITY = 0.6381/4;
//	setSpeed(VELOCITY);
	VELOCITY = pid.out;
 800144a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800144c:	4a6d      	ldr	r2, [pc, #436]	; (8001604 <main+0x31c>)
 800144e:	6013      	str	r3, [r2, #0]
	setSpeedPID(VELOCITY);
 8001450:	4b6c      	ldr	r3, [pc, #432]	; (8001604 <main+0x31c>)
 8001452:	edd3 7a00 	vldr	s15, [r3]
 8001456:	eeb0 0a67 	vmov.f32	s0, s15
 800145a:	f001 fafd 	bl	8002a58 <setSpeedPID>

	getDirection(VELOCITY);
 800145e:	4b69      	ldr	r3, [pc, #420]	; (8001604 <main+0x31c>)
 8001460:	edd3 7a00 	vldr	s15, [r3]
 8001464:	eeb0 0a67 	vmov.f32	s0, s15
 8001468:	f001 fada 	bl	8002a20 <getDirection>
	setDirection(direction);
 800146c:	4b66      	ldr	r3, [pc, #408]	; (8001608 <main+0x320>)
 800146e:	781b      	ldrb	r3, [r3, #0]
 8001470:	4618      	mov	r0, r3
 8001472:	f001 fab1 	bl	80029d8 <setDirection>

	switch(readBuf[0]){
 8001476:	4b65      	ldr	r3, [pc, #404]	; (800160c <main+0x324>)
 8001478:	781b      	ldrb	r3, [r3, #0]
 800147a:	3b42      	subs	r3, #66	; 0x42
 800147c:	2b12      	cmp	r3, #18
 800147e:	d86c      	bhi.n	800155a <main+0x272>
 8001480:	a201      	add	r2, pc, #4	; (adr r2, 8001488 <main+0x1a0>)
 8001482:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001486:	bf00      	nop
 8001488:	080014fb 	.word	0x080014fb
 800148c:	0800155b 	.word	0x0800155b
 8001490:	0800155b 	.word	0x0800155b
 8001494:	0800155b 	.word	0x0800155b
 8001498:	0800155b 	.word	0x0800155b
 800149c:	080014e1 	.word	0x080014e1
 80014a0:	0800155b 	.word	0x0800155b
 80014a4:	08001553 	.word	0x08001553
 80014a8:	0800155b 	.word	0x0800155b
 80014ac:	0800155b 	.word	0x0800155b
 80014b0:	08001515 	.word	0x08001515
 80014b4:	0800155b 	.word	0x0800155b
 80014b8:	0800155b 	.word	0x0800155b
 80014bc:	0800155b 	.word	0x0800155b
 80014c0:	0800155b 	.word	0x0800155b
 80014c4:	0800155b 	.word	0x0800155b
 80014c8:	0800152f 	.word	0x0800152f
 80014cc:	080014d5 	.word	0x080014d5
 80014d0:	08001549 	.word	0x08001549
		case STOP:
			stopMotor(&htim2,&htim3, &htim6);
 80014d4:	4a44      	ldr	r2, [pc, #272]	; (80015e8 <main+0x300>)
 80014d6:	4946      	ldr	r1, [pc, #280]	; (80015f0 <main+0x308>)
 80014d8:	4844      	ldr	r0, [pc, #272]	; (80015ec <main+0x304>)
 80014da:	f001 fc79 	bl	8002dd0 <stopMotor>
			break;
 80014de:	e03c      	b.n	800155a <main+0x272>
		case GO:
			goForward(&htim2, &htim3, &htim6, VELOCITY, 0.1);
 80014e0:	4b48      	ldr	r3, [pc, #288]	; (8001604 <main+0x31c>)
 80014e2:	edd3 7a00 	vldr	s15, [r3]
 80014e6:	eddf 0a4a 	vldr	s1, [pc, #296]	; 8001610 <main+0x328>
 80014ea:	eeb0 0a67 	vmov.f32	s0, s15
 80014ee:	4a3e      	ldr	r2, [pc, #248]	; (80015e8 <main+0x300>)
 80014f0:	493f      	ldr	r1, [pc, #252]	; (80015f0 <main+0x308>)
 80014f2:	483e      	ldr	r0, [pc, #248]	; (80015ec <main+0x304>)
 80014f4:	f001 fb30 	bl	8002b58 <goForward>
			break;
 80014f8:	e02f      	b.n	800155a <main+0x272>
		case BACK:
			goBackward(&htim2, &htim3, &htim6, VELOCITY, 0.2);
 80014fa:	4b42      	ldr	r3, [pc, #264]	; (8001604 <main+0x31c>)
 80014fc:	edd3 7a00 	vldr	s15, [r3]
 8001500:	eddf 0a44 	vldr	s1, [pc, #272]	; 8001614 <main+0x32c>
 8001504:	eeb0 0a67 	vmov.f32	s0, s15
 8001508:	4a37      	ldr	r2, [pc, #220]	; (80015e8 <main+0x300>)
 800150a:	4939      	ldr	r1, [pc, #228]	; (80015f0 <main+0x308>)
 800150c:	4837      	ldr	r0, [pc, #220]	; (80015ec <main+0x304>)
 800150e:	f001 fb65 	bl	8002bdc <goBackward>
			break;
 8001512:	e022      	b.n	800155a <main+0x272>
		case LEFT:
			rotateL(&htim2, &htim3, &htim6, VELOCITY, M_PI/2);
 8001514:	4b3b      	ldr	r3, [pc, #236]	; (8001604 <main+0x31c>)
 8001516:	edd3 7a00 	vldr	s15, [r3]
 800151a:	eddf 0a3f 	vldr	s1, [pc, #252]	; 8001618 <main+0x330>
 800151e:	eeb0 0a67 	vmov.f32	s0, s15
 8001522:	4a31      	ldr	r2, [pc, #196]	; (80015e8 <main+0x300>)
 8001524:	4932      	ldr	r1, [pc, #200]	; (80015f0 <main+0x308>)
 8001526:	4831      	ldr	r0, [pc, #196]	; (80015ec <main+0x304>)
 8001528:	f001 fb9a 	bl	8002c60 <rotateL>
			break;
 800152c:	e015      	b.n	800155a <main+0x272>
		case RIGHT:
			rotateR(&htim2, &htim3, &htim6, VELOCITY, M_PI/2);
 800152e:	4b35      	ldr	r3, [pc, #212]	; (8001604 <main+0x31c>)
 8001530:	edd3 7a00 	vldr	s15, [r3]
 8001534:	eddf 0a38 	vldr	s1, [pc, #224]	; 8001618 <main+0x330>
 8001538:	eeb0 0a67 	vmov.f32	s0, s15
 800153c:	4a2a      	ldr	r2, [pc, #168]	; (80015e8 <main+0x300>)
 800153e:	492c      	ldr	r1, [pc, #176]	; (80015f0 <main+0x308>)
 8001540:	482a      	ldr	r0, [pc, #168]	; (80015ec <main+0x304>)
 8001542:	f001 fbe9 	bl	8002d18 <rotateR>
			break;
 8001546:	e008      	b.n	800155a <main+0x272>
		case TEST:
			simpleGO(&htim2, &htim3);
 8001548:	4929      	ldr	r1, [pc, #164]	; (80015f0 <main+0x308>)
 800154a:	4828      	ldr	r0, [pc, #160]	; (80015ec <main+0x304>)
 800154c:	f001 fad6 	bl	8002afc <simpleGO>
			break;
 8001550:	e003      	b.n	800155a <main+0x272>
		case RESET_IMU:
			MPU6050_reset(&hi2c1);
 8001552:	4829      	ldr	r0, [pc, #164]	; (80015f8 <main+0x310>)
 8001554:	f000 fe1a 	bl	800218c <MPU6050_reset>
			break;
 8001558:	bf00      	nop
	}

	if(angleX > 10.0){
 800155a:	4b30      	ldr	r3, [pc, #192]	; (800161c <main+0x334>)
 800155c:	edd3 7a00 	vldr	s15, [r3]
 8001560:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001564:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001568:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800156c:	dd02      	ble.n	8001574 <main+0x28c>
		readBuf[0] = STOP;
 800156e:	4b27      	ldr	r3, [pc, #156]	; (800160c <main+0x324>)
 8001570:	2253      	movs	r2, #83	; 0x53
 8001572:	701a      	strb	r2, [r3, #0]
	}

	complementaryFilter();
 8001574:	f7ff fe18 	bl	80011a8 <complementaryFilter>

    PIDController_Update(&pid, setpoint, angleX);	//IN: angle in deg; OUT: angular speed (deg/sec)
 8001578:	4b28      	ldr	r3, [pc, #160]	; (800161c <main+0x334>)
 800157a:	edd3 7a00 	vldr	s15, [r3]
 800157e:	463b      	mov	r3, r7
 8001580:	eef0 0a67 	vmov.f32	s1, s15
 8001584:	ed97 0a17 	vldr	s0, [r7, #92]	; 0x5c
 8001588:	4618      	mov	r0, r3
 800158a:	f001 f961 	bl	8002850 <PIDController_Update>
//    pid_error = pid.prevError;
//    vel = arm_pid_f32(&PID, pid_error);


//	sprintf(uart_data_buff, "%.2f %.2f %.2f\n", (float)angleX, (float)Gy, (float)pitch);
	sprintf(uart_data_buff, "%.2f %.f\n", angleX, VELOCITY);
 800158e:	4b23      	ldr	r3, [pc, #140]	; (800161c <main+0x334>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	4618      	mov	r0, r3
 8001594:	f7fe fff8 	bl	8000588 <__aeabi_f2d>
 8001598:	4604      	mov	r4, r0
 800159a:	460d      	mov	r5, r1
 800159c:	4b19      	ldr	r3, [pc, #100]	; (8001604 <main+0x31c>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	4618      	mov	r0, r3
 80015a2:	f7fe fff1 	bl	8000588 <__aeabi_f2d>
 80015a6:	4602      	mov	r2, r0
 80015a8:	460b      	mov	r3, r1
 80015aa:	e9cd 2300 	strd	r2, r3, [sp]
 80015ae:	4622      	mov	r2, r4
 80015b0:	462b      	mov	r3, r5
 80015b2:	491b      	ldr	r1, [pc, #108]	; (8001620 <main+0x338>)
 80015b4:	481b      	ldr	r0, [pc, #108]	; (8001624 <main+0x33c>)
 80015b6:	f006 fb3d 	bl	8007c34 <siprintf>
	// Polling TX
	HAL_UART_Transmit(&huart2, (uint8_t *)uart_data_buff, sizeof(uart_data_buff), HAL_MAX_DELAY);
 80015ba:	f04f 33ff 	mov.w	r3, #4294967295
 80015be:	2220      	movs	r2, #32
 80015c0:	4918      	ldr	r1, [pc, #96]	; (8001624 <main+0x33c>)
 80015c2:	4819      	ldr	r0, [pc, #100]	; (8001628 <main+0x340>)
 80015c4:	f004 feb7 	bl	8006336 <HAL_UART_Transmit>
	dTime = HAL_GetTick() - last;
 80015c8:	e724      	b.n	8001414 <main+0x12c>
 80015ca:	bf00      	nop
 80015cc:	20000524 	.word	0x20000524
 80015d0:	c2a00000 	.word	0xc2a00000
 80015d4:	c4480000 	.word	0xc4480000
 80015d8:	b91d4952 	.word	0xb91d4952
 80015dc:	c38ca000 	.word	0xc38ca000
 80015e0:	438ca000 	.word	0x438ca000
 80015e4:	3a83126f 	.word	0x3a83126f
 80015e8:	200003f8 	.word	0x200003f8
 80015ec:	20000478 	.word	0x20000478
 80015f0:	20000304 	.word	0x20000304
 80015f4:	40020000 	.word	0x40020000
 80015f8:	20000274 	.word	0x20000274
 80015fc:	20000204 	.word	0x20000204
 8001600:	20000260 	.word	0x20000260
 8001604:	20000270 	.word	0x20000270
 8001608:	2000036a 	.word	0x2000036a
 800160c:	20000530 	.word	0x20000530
 8001610:	3dcccccd 	.word	0x3dcccccd
 8001614:	3e4ccccd 	.word	0x3e4ccccd
 8001618:	3fc90fdb 	.word	0x3fc90fdb
 800161c:	20000208 	.word	0x20000208
 8001620:	0800be60 	.word	0x0800be60
 8001624:	20000238 	.word	0x20000238
 8001628:	200004c8 	.word	0x200004c8

0800162c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b094      	sub	sp, #80	; 0x50
 8001630:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001632:	f107 031c 	add.w	r3, r7, #28
 8001636:	2234      	movs	r2, #52	; 0x34
 8001638:	2100      	movs	r1, #0
 800163a:	4618      	mov	r0, r3
 800163c:	f005 fc72 	bl	8006f24 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001640:	f107 0308 	add.w	r3, r7, #8
 8001644:	2200      	movs	r2, #0
 8001646:	601a      	str	r2, [r3, #0]
 8001648:	605a      	str	r2, [r3, #4]
 800164a:	609a      	str	r2, [r3, #8]
 800164c:	60da      	str	r2, [r3, #12]
 800164e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001650:	2300      	movs	r3, #0
 8001652:	607b      	str	r3, [r7, #4]
 8001654:	4b2a      	ldr	r3, [pc, #168]	; (8001700 <SystemClock_Config+0xd4>)
 8001656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001658:	4a29      	ldr	r2, [pc, #164]	; (8001700 <SystemClock_Config+0xd4>)
 800165a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800165e:	6413      	str	r3, [r2, #64]	; 0x40
 8001660:	4b27      	ldr	r3, [pc, #156]	; (8001700 <SystemClock_Config+0xd4>)
 8001662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001664:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001668:	607b      	str	r3, [r7, #4]
 800166a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800166c:	2300      	movs	r3, #0
 800166e:	603b      	str	r3, [r7, #0]
 8001670:	4b24      	ldr	r3, [pc, #144]	; (8001704 <SystemClock_Config+0xd8>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001678:	4a22      	ldr	r2, [pc, #136]	; (8001704 <SystemClock_Config+0xd8>)
 800167a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800167e:	6013      	str	r3, [r2, #0]
 8001680:	4b20      	ldr	r3, [pc, #128]	; (8001704 <SystemClock_Config+0xd8>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001688:	603b      	str	r3, [r7, #0]
 800168a:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800168c:	2302      	movs	r3, #2
 800168e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001690:	2301      	movs	r3, #1
 8001692:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001694:	2310      	movs	r3, #16
 8001696:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001698:	2302      	movs	r3, #2
 800169a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800169c:	2300      	movs	r3, #0
 800169e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80016a0:	2310      	movs	r3, #16
 80016a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80016a4:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80016a8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80016aa:	2304      	movs	r3, #4
 80016ac:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80016ae:	2302      	movs	r3, #2
 80016b0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80016b2:	2302      	movs	r3, #2
 80016b4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016b6:	f107 031c 	add.w	r3, r7, #28
 80016ba:	4618      	mov	r0, r3
 80016bc:	f003 fa4a 	bl	8004b54 <HAL_RCC_OscConfig>
 80016c0:	4603      	mov	r3, r0
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d001      	beq.n	80016ca <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80016c6:	f000 fa3f 	bl	8001b48 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016ca:	230f      	movs	r3, #15
 80016cc:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016ce:	2302      	movs	r3, #2
 80016d0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016d2:	2300      	movs	r3, #0
 80016d4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80016d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016da:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80016dc:	2300      	movs	r3, #0
 80016de:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80016e0:	f107 0308 	add.w	r3, r7, #8
 80016e4:	2102      	movs	r1, #2
 80016e6:	4618      	mov	r0, r3
 80016e8:	f002 ff68 	bl	80045bc <HAL_RCC_ClockConfig>
 80016ec:	4603      	mov	r3, r0
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d001      	beq.n	80016f6 <SystemClock_Config+0xca>
  {
    Error_Handler();
 80016f2:	f000 fa29 	bl	8001b48 <Error_Handler>
  }
}
 80016f6:	bf00      	nop
 80016f8:	3750      	adds	r7, #80	; 0x50
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	bf00      	nop
 8001700:	40023800 	.word	0x40023800
 8001704:	40007000 	.word	0x40007000

08001708 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800170c:	4b12      	ldr	r3, [pc, #72]	; (8001758 <MX_I2C1_Init+0x50>)
 800170e:	4a13      	ldr	r2, [pc, #76]	; (800175c <MX_I2C1_Init+0x54>)
 8001710:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001712:	4b11      	ldr	r3, [pc, #68]	; (8001758 <MX_I2C1_Init+0x50>)
 8001714:	4a12      	ldr	r2, [pc, #72]	; (8001760 <MX_I2C1_Init+0x58>)
 8001716:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001718:	4b0f      	ldr	r3, [pc, #60]	; (8001758 <MX_I2C1_Init+0x50>)
 800171a:	2200      	movs	r2, #0
 800171c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800171e:	4b0e      	ldr	r3, [pc, #56]	; (8001758 <MX_I2C1_Init+0x50>)
 8001720:	2200      	movs	r2, #0
 8001722:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001724:	4b0c      	ldr	r3, [pc, #48]	; (8001758 <MX_I2C1_Init+0x50>)
 8001726:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800172a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800172c:	4b0a      	ldr	r3, [pc, #40]	; (8001758 <MX_I2C1_Init+0x50>)
 800172e:	2200      	movs	r2, #0
 8001730:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001732:	4b09      	ldr	r3, [pc, #36]	; (8001758 <MX_I2C1_Init+0x50>)
 8001734:	2200      	movs	r2, #0
 8001736:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001738:	4b07      	ldr	r3, [pc, #28]	; (8001758 <MX_I2C1_Init+0x50>)
 800173a:	2200      	movs	r2, #0
 800173c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800173e:	4b06      	ldr	r3, [pc, #24]	; (8001758 <MX_I2C1_Init+0x50>)
 8001740:	2200      	movs	r2, #0
 8001742:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001744:	4804      	ldr	r0, [pc, #16]	; (8001758 <MX_I2C1_Init+0x50>)
 8001746:	f001 ff79 	bl	800363c <HAL_I2C_Init>
 800174a:	4603      	mov	r3, r0
 800174c:	2b00      	cmp	r3, #0
 800174e:	d001      	beq.n	8001754 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001750:	f000 f9fa 	bl	8001b48 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001754:	bf00      	nop
 8001756:	bd80      	pop	{r7, pc}
 8001758:	20000274 	.word	0x20000274
 800175c:	40005400 	.word	0x40005400
 8001760:	000186a0 	.word	0x000186a0

08001764 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b08e      	sub	sp, #56	; 0x38
 8001768:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800176a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800176e:	2200      	movs	r2, #0
 8001770:	601a      	str	r2, [r3, #0]
 8001772:	605a      	str	r2, [r3, #4]
 8001774:	609a      	str	r2, [r3, #8]
 8001776:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001778:	f107 0320 	add.w	r3, r7, #32
 800177c:	2200      	movs	r2, #0
 800177e:	601a      	str	r2, [r3, #0]
 8001780:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001782:	1d3b      	adds	r3, r7, #4
 8001784:	2200      	movs	r2, #0
 8001786:	601a      	str	r2, [r3, #0]
 8001788:	605a      	str	r2, [r3, #4]
 800178a:	609a      	str	r2, [r3, #8]
 800178c:	60da      	str	r2, [r3, #12]
 800178e:	611a      	str	r2, [r3, #16]
 8001790:	615a      	str	r2, [r3, #20]
 8001792:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001794:	4b2c      	ldr	r3, [pc, #176]	; (8001848 <MX_TIM2_Init+0xe4>)
 8001796:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800179a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 83;
 800179c:	4b2a      	ldr	r3, [pc, #168]	; (8001848 <MX_TIM2_Init+0xe4>)
 800179e:	2253      	movs	r2, #83	; 0x53
 80017a0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017a2:	4b29      	ldr	r3, [pc, #164]	; (8001848 <MX_TIM2_Init+0xe4>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99;
 80017a8:	4b27      	ldr	r3, [pc, #156]	; (8001848 <MX_TIM2_Init+0xe4>)
 80017aa:	2263      	movs	r2, #99	; 0x63
 80017ac:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017ae:	4b26      	ldr	r3, [pc, #152]	; (8001848 <MX_TIM2_Init+0xe4>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80017b4:	4b24      	ldr	r3, [pc, #144]	; (8001848 <MX_TIM2_Init+0xe4>)
 80017b6:	2280      	movs	r2, #128	; 0x80
 80017b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80017ba:	4823      	ldr	r0, [pc, #140]	; (8001848 <MX_TIM2_Init+0xe4>)
 80017bc:	f003 fc68 	bl	8005090 <HAL_TIM_Base_Init>
 80017c0:	4603      	mov	r3, r0
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d001      	beq.n	80017ca <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 80017c6:	f000 f9bf 	bl	8001b48 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017ce:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80017d0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80017d4:	4619      	mov	r1, r3
 80017d6:	481c      	ldr	r0, [pc, #112]	; (8001848 <MX_TIM2_Init+0xe4>)
 80017d8:	f004 f8c6 	bl	8005968 <HAL_TIM_ConfigClockSource>
 80017dc:	4603      	mov	r3, r0
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d001      	beq.n	80017e6 <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 80017e2:	f000 f9b1 	bl	8001b48 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 80017e6:	4818      	ldr	r0, [pc, #96]	; (8001848 <MX_TIM2_Init+0xe4>)
 80017e8:	f003 fd41 	bl	800526e <HAL_TIM_OC_Init>
 80017ec:	4603      	mov	r3, r0
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d001      	beq.n	80017f6 <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 80017f2:	f000 f9a9 	bl	8001b48 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017f6:	2300      	movs	r3, #0
 80017f8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017fa:	2300      	movs	r3, #0
 80017fc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80017fe:	f107 0320 	add.w	r3, r7, #32
 8001802:	4619      	mov	r1, r3
 8001804:	4810      	ldr	r0, [pc, #64]	; (8001848 <MX_TIM2_Init+0xe4>)
 8001806:	f004 fcb9 	bl	800617c <HAL_TIMEx_MasterConfigSynchronization>
 800180a:	4603      	mov	r3, r0
 800180c:	2b00      	cmp	r3, #0
 800180e:	d001      	beq.n	8001814 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 8001810:	f000 f99a 	bl	8001b48 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8001814:	2330      	movs	r3, #48	; 0x30
 8001816:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001818:	2300      	movs	r3, #0
 800181a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800181c:	2300      	movs	r3, #0
 800181e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001820:	2300      	movs	r3, #0
 8001822:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001824:	1d3b      	adds	r3, r7, #4
 8001826:	2200      	movs	r2, #0
 8001828:	4619      	mov	r1, r3
 800182a:	4807      	ldr	r0, [pc, #28]	; (8001848 <MX_TIM2_Init+0xe4>)
 800182c:	f004 f844 	bl	80058b8 <HAL_TIM_OC_ConfigChannel>
 8001830:	4603      	mov	r3, r0
 8001832:	2b00      	cmp	r3, #0
 8001834:	d001      	beq.n	800183a <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 8001836:	f000 f987 	bl	8001b48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800183a:	4803      	ldr	r0, [pc, #12]	; (8001848 <MX_TIM2_Init+0xe4>)
 800183c:	f000 fa5c 	bl	8001cf8 <HAL_TIM_MspPostInit>

}
 8001840:	bf00      	nop
 8001842:	3738      	adds	r7, #56	; 0x38
 8001844:	46bd      	mov	sp, r7
 8001846:	bd80      	pop	{r7, pc}
 8001848:	20000478 	.word	0x20000478

0800184c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b08e      	sub	sp, #56	; 0x38
 8001850:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001852:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001856:	2200      	movs	r2, #0
 8001858:	601a      	str	r2, [r3, #0]
 800185a:	605a      	str	r2, [r3, #4]
 800185c:	609a      	str	r2, [r3, #8]
 800185e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001860:	f107 0320 	add.w	r3, r7, #32
 8001864:	2200      	movs	r2, #0
 8001866:	601a      	str	r2, [r3, #0]
 8001868:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800186a:	1d3b      	adds	r3, r7, #4
 800186c:	2200      	movs	r2, #0
 800186e:	601a      	str	r2, [r3, #0]
 8001870:	605a      	str	r2, [r3, #4]
 8001872:	609a      	str	r2, [r3, #8]
 8001874:	60da      	str	r2, [r3, #12]
 8001876:	611a      	str	r2, [r3, #16]
 8001878:	615a      	str	r2, [r3, #20]
 800187a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800187c:	4b2c      	ldr	r3, [pc, #176]	; (8001930 <MX_TIM3_Init+0xe4>)
 800187e:	4a2d      	ldr	r2, [pc, #180]	; (8001934 <MX_TIM3_Init+0xe8>)
 8001880:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 83;
 8001882:	4b2b      	ldr	r3, [pc, #172]	; (8001930 <MX_TIM3_Init+0xe4>)
 8001884:	2253      	movs	r2, #83	; 0x53
 8001886:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001888:	4b29      	ldr	r3, [pc, #164]	; (8001930 <MX_TIM3_Init+0xe4>)
 800188a:	2200      	movs	r2, #0
 800188c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 99;
 800188e:	4b28      	ldr	r3, [pc, #160]	; (8001930 <MX_TIM3_Init+0xe4>)
 8001890:	2263      	movs	r2, #99	; 0x63
 8001892:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001894:	4b26      	ldr	r3, [pc, #152]	; (8001930 <MX_TIM3_Init+0xe4>)
 8001896:	2200      	movs	r2, #0
 8001898:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800189a:	4b25      	ldr	r3, [pc, #148]	; (8001930 <MX_TIM3_Init+0xe4>)
 800189c:	2280      	movs	r2, #128	; 0x80
 800189e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80018a0:	4823      	ldr	r0, [pc, #140]	; (8001930 <MX_TIM3_Init+0xe4>)
 80018a2:	f003 fbf5 	bl	8005090 <HAL_TIM_Base_Init>
 80018a6:	4603      	mov	r3, r0
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d001      	beq.n	80018b0 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 80018ac:	f000 f94c 	bl	8001b48 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80018b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018b4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80018b6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80018ba:	4619      	mov	r1, r3
 80018bc:	481c      	ldr	r0, [pc, #112]	; (8001930 <MX_TIM3_Init+0xe4>)
 80018be:	f004 f853 	bl	8005968 <HAL_TIM_ConfigClockSource>
 80018c2:	4603      	mov	r3, r0
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d001      	beq.n	80018cc <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 80018c8:	f000 f93e 	bl	8001b48 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 80018cc:	4818      	ldr	r0, [pc, #96]	; (8001930 <MX_TIM3_Init+0xe4>)
 80018ce:	f003 fcce 	bl	800526e <HAL_TIM_OC_Init>
 80018d2:	4603      	mov	r3, r0
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d001      	beq.n	80018dc <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 80018d8:	f000 f936 	bl	8001b48 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018dc:	2300      	movs	r3, #0
 80018de:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018e0:	2300      	movs	r3, #0
 80018e2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80018e4:	f107 0320 	add.w	r3, r7, #32
 80018e8:	4619      	mov	r1, r3
 80018ea:	4811      	ldr	r0, [pc, #68]	; (8001930 <MX_TIM3_Init+0xe4>)
 80018ec:	f004 fc46 	bl	800617c <HAL_TIMEx_MasterConfigSynchronization>
 80018f0:	4603      	mov	r3, r0
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d001      	beq.n	80018fa <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 80018f6:	f000 f927 	bl	8001b48 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 80018fa:	2330      	movs	r3, #48	; 0x30
 80018fc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80018fe:	2300      	movs	r3, #0
 8001900:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001902:	2300      	movs	r3, #0
 8001904:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001906:	2300      	movs	r3, #0
 8001908:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800190a:	1d3b      	adds	r3, r7, #4
 800190c:	2200      	movs	r2, #0
 800190e:	4619      	mov	r1, r3
 8001910:	4807      	ldr	r0, [pc, #28]	; (8001930 <MX_TIM3_Init+0xe4>)
 8001912:	f003 ffd1 	bl	80058b8 <HAL_TIM_OC_ConfigChannel>
 8001916:	4603      	mov	r3, r0
 8001918:	2b00      	cmp	r3, #0
 800191a:	d001      	beq.n	8001920 <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 800191c:	f000 f914 	bl	8001b48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001920:	4803      	ldr	r0, [pc, #12]	; (8001930 <MX_TIM3_Init+0xe4>)
 8001922:	f000 f9e9 	bl	8001cf8 <HAL_TIM_MspPostInit>

}
 8001926:	bf00      	nop
 8001928:	3738      	adds	r7, #56	; 0x38
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}
 800192e:	bf00      	nop
 8001930:	20000304 	.word	0x20000304
 8001934:	40000400 	.word	0x40000400

08001938 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b082      	sub	sp, #8
 800193c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800193e:	463b      	mov	r3, r7
 8001940:	2200      	movs	r2, #0
 8001942:	601a      	str	r2, [r3, #0]
 8001944:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001946:	4b15      	ldr	r3, [pc, #84]	; (800199c <MX_TIM6_Init+0x64>)
 8001948:	4a15      	ldr	r2, [pc, #84]	; (80019a0 <MX_TIM6_Init+0x68>)
 800194a:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 8399;
 800194c:	4b13      	ldr	r3, [pc, #76]	; (800199c <MX_TIM6_Init+0x64>)
 800194e:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8001952:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001954:	4b11      	ldr	r3, [pc, #68]	; (800199c <MX_TIM6_Init+0x64>)
 8001956:	2200      	movs	r2, #0
 8001958:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 9999;
 800195a:	4b10      	ldr	r3, [pc, #64]	; (800199c <MX_TIM6_Init+0x64>)
 800195c:	f242 720f 	movw	r2, #9999	; 0x270f
 8001960:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001962:	4b0e      	ldr	r3, [pc, #56]	; (800199c <MX_TIM6_Init+0x64>)
 8001964:	2200      	movs	r2, #0
 8001966:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001968:	480c      	ldr	r0, [pc, #48]	; (800199c <MX_TIM6_Init+0x64>)
 800196a:	f003 fb91 	bl	8005090 <HAL_TIM_Base_Init>
 800196e:	4603      	mov	r3, r0
 8001970:	2b00      	cmp	r3, #0
 8001972:	d001      	beq.n	8001978 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001974:	f000 f8e8 	bl	8001b48 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001978:	2300      	movs	r3, #0
 800197a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800197c:	2300      	movs	r3, #0
 800197e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001980:	463b      	mov	r3, r7
 8001982:	4619      	mov	r1, r3
 8001984:	4805      	ldr	r0, [pc, #20]	; (800199c <MX_TIM6_Init+0x64>)
 8001986:	f004 fbf9 	bl	800617c <HAL_TIMEx_MasterConfigSynchronization>
 800198a:	4603      	mov	r3, r0
 800198c:	2b00      	cmp	r3, #0
 800198e:	d001      	beq.n	8001994 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001990:	f000 f8da 	bl	8001b48 <Error_Handler>
  /* USER CODE BEGIN TIM6_Init 2 */
  // __HAL_TIM_CLEAR_FLAG(&htim6, TIM_SR_UIF);//Add this statement to solve the problem

  /* USER CODE END TIM6_Init 2 */

}
 8001994:	bf00      	nop
 8001996:	3708      	adds	r7, #8
 8001998:	46bd      	mov	sp, r7
 800199a:	bd80      	pop	{r7, pc}
 800199c:	200003f8 	.word	0x200003f8
 80019a0:	40001000 	.word	0x40001000

080019a4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80019a8:	4b11      	ldr	r3, [pc, #68]	; (80019f0 <MX_USART1_UART_Init+0x4c>)
 80019aa:	4a12      	ldr	r2, [pc, #72]	; (80019f4 <MX_USART1_UART_Init+0x50>)
 80019ac:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80019ae:	4b10      	ldr	r3, [pc, #64]	; (80019f0 <MX_USART1_UART_Init+0x4c>)
 80019b0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80019b4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80019b6:	4b0e      	ldr	r3, [pc, #56]	; (80019f0 <MX_USART1_UART_Init+0x4c>)
 80019b8:	2200      	movs	r2, #0
 80019ba:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80019bc:	4b0c      	ldr	r3, [pc, #48]	; (80019f0 <MX_USART1_UART_Init+0x4c>)
 80019be:	2200      	movs	r2, #0
 80019c0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80019c2:	4b0b      	ldr	r3, [pc, #44]	; (80019f0 <MX_USART1_UART_Init+0x4c>)
 80019c4:	2200      	movs	r2, #0
 80019c6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80019c8:	4b09      	ldr	r3, [pc, #36]	; (80019f0 <MX_USART1_UART_Init+0x4c>)
 80019ca:	220c      	movs	r2, #12
 80019cc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019ce:	4b08      	ldr	r3, [pc, #32]	; (80019f0 <MX_USART1_UART_Init+0x4c>)
 80019d0:	2200      	movs	r2, #0
 80019d2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80019d4:	4b06      	ldr	r3, [pc, #24]	; (80019f0 <MX_USART1_UART_Init+0x4c>)
 80019d6:	2200      	movs	r2, #0
 80019d8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80019da:	4805      	ldr	r0, [pc, #20]	; (80019f0 <MX_USART1_UART_Init+0x4c>)
 80019dc:	f004 fc5e 	bl	800629c <HAL_UART_Init>
 80019e0:	4603      	mov	r3, r0
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d001      	beq.n	80019ea <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80019e6:	f000 f8af 	bl	8001b48 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80019ea:	bf00      	nop
 80019ec:	bd80      	pop	{r7, pc}
 80019ee:	bf00      	nop
 80019f0:	20000398 	.word	0x20000398
 80019f4:	40011000 	.word	0x40011000

080019f8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80019fc:	4b11      	ldr	r3, [pc, #68]	; (8001a44 <MX_USART2_UART_Init+0x4c>)
 80019fe:	4a12      	ldr	r2, [pc, #72]	; (8001a48 <MX_USART2_UART_Init+0x50>)
 8001a00:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001a02:	4b10      	ldr	r3, [pc, #64]	; (8001a44 <MX_USART2_UART_Init+0x4c>)
 8001a04:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001a08:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001a0a:	4b0e      	ldr	r3, [pc, #56]	; (8001a44 <MX_USART2_UART_Init+0x4c>)
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001a10:	4b0c      	ldr	r3, [pc, #48]	; (8001a44 <MX_USART2_UART_Init+0x4c>)
 8001a12:	2200      	movs	r2, #0
 8001a14:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001a16:	4b0b      	ldr	r3, [pc, #44]	; (8001a44 <MX_USART2_UART_Init+0x4c>)
 8001a18:	2200      	movs	r2, #0
 8001a1a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001a1c:	4b09      	ldr	r3, [pc, #36]	; (8001a44 <MX_USART2_UART_Init+0x4c>)
 8001a1e:	220c      	movs	r2, #12
 8001a20:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a22:	4b08      	ldr	r3, [pc, #32]	; (8001a44 <MX_USART2_UART_Init+0x4c>)
 8001a24:	2200      	movs	r2, #0
 8001a26:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a28:	4b06      	ldr	r3, [pc, #24]	; (8001a44 <MX_USART2_UART_Init+0x4c>)
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001a2e:	4805      	ldr	r0, [pc, #20]	; (8001a44 <MX_USART2_UART_Init+0x4c>)
 8001a30:	f004 fc34 	bl	800629c <HAL_UART_Init>
 8001a34:	4603      	mov	r3, r0
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d001      	beq.n	8001a3e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001a3a:	f000 f885 	bl	8001b48 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001a3e:	bf00      	nop
 8001a40:	bd80      	pop	{r7, pc}
 8001a42:	bf00      	nop
 8001a44:	200004c8 	.word	0x200004c8
 8001a48:	40004400 	.word	0x40004400

08001a4c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b08a      	sub	sp, #40	; 0x28
 8001a50:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a52:	f107 0314 	add.w	r3, r7, #20
 8001a56:	2200      	movs	r2, #0
 8001a58:	601a      	str	r2, [r3, #0]
 8001a5a:	605a      	str	r2, [r3, #4]
 8001a5c:	609a      	str	r2, [r3, #8]
 8001a5e:	60da      	str	r2, [r3, #12]
 8001a60:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a62:	2300      	movs	r3, #0
 8001a64:	613b      	str	r3, [r7, #16]
 8001a66:	4b34      	ldr	r3, [pc, #208]	; (8001b38 <MX_GPIO_Init+0xec>)
 8001a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a6a:	4a33      	ldr	r2, [pc, #204]	; (8001b38 <MX_GPIO_Init+0xec>)
 8001a6c:	f043 0304 	orr.w	r3, r3, #4
 8001a70:	6313      	str	r3, [r2, #48]	; 0x30
 8001a72:	4b31      	ldr	r3, [pc, #196]	; (8001b38 <MX_GPIO_Init+0xec>)
 8001a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a76:	f003 0304 	and.w	r3, r3, #4
 8001a7a:	613b      	str	r3, [r7, #16]
 8001a7c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001a7e:	2300      	movs	r3, #0
 8001a80:	60fb      	str	r3, [r7, #12]
 8001a82:	4b2d      	ldr	r3, [pc, #180]	; (8001b38 <MX_GPIO_Init+0xec>)
 8001a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a86:	4a2c      	ldr	r2, [pc, #176]	; (8001b38 <MX_GPIO_Init+0xec>)
 8001a88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a8c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a8e:	4b2a      	ldr	r3, [pc, #168]	; (8001b38 <MX_GPIO_Init+0xec>)
 8001a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a96:	60fb      	str	r3, [r7, #12]
 8001a98:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	60bb      	str	r3, [r7, #8]
 8001a9e:	4b26      	ldr	r3, [pc, #152]	; (8001b38 <MX_GPIO_Init+0xec>)
 8001aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aa2:	4a25      	ldr	r2, [pc, #148]	; (8001b38 <MX_GPIO_Init+0xec>)
 8001aa4:	f043 0301 	orr.w	r3, r3, #1
 8001aa8:	6313      	str	r3, [r2, #48]	; 0x30
 8001aaa:	4b23      	ldr	r3, [pc, #140]	; (8001b38 <MX_GPIO_Init+0xec>)
 8001aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aae:	f003 0301 	and.w	r3, r3, #1
 8001ab2:	60bb      	str	r3, [r7, #8]
 8001ab4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	607b      	str	r3, [r7, #4]
 8001aba:	4b1f      	ldr	r3, [pc, #124]	; (8001b38 <MX_GPIO_Init+0xec>)
 8001abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001abe:	4a1e      	ldr	r2, [pc, #120]	; (8001b38 <MX_GPIO_Init+0xec>)
 8001ac0:	f043 0302 	orr.w	r3, r3, #2
 8001ac4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ac6:	4b1c      	ldr	r3, [pc, #112]	; (8001b38 <MX_GPIO_Init+0xec>)
 8001ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aca:	f003 0302 	and.w	r3, r3, #2
 8001ace:	607b      	str	r3, [r7, #4]
 8001ad0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DIR_DX_Pin|LD2_Pin|DIR_SX_Pin, GPIO_PIN_RESET);
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	21a2      	movs	r1, #162	; 0xa2
 8001ad6:	4819      	ldr	r0, [pc, #100]	; (8001b3c <MX_GPIO_Init+0xf0>)
 8001ad8:	f001 fd96 	bl	8003608 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001adc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ae0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001ae2:	4b17      	ldr	r3, [pc, #92]	; (8001b40 <MX_GPIO_Init+0xf4>)
 8001ae4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001aea:	f107 0314 	add.w	r3, r7, #20
 8001aee:	4619      	mov	r1, r3
 8001af0:	4814      	ldr	r0, [pc, #80]	; (8001b44 <MX_GPIO_Init+0xf8>)
 8001af2:	f001 fbf5 	bl	80032e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : DIR_DX_Pin DIR_SX_Pin */
  GPIO_InitStruct.Pin = DIR_DX_Pin|DIR_SX_Pin;
 8001af6:	2382      	movs	r3, #130	; 0x82
 8001af8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001afa:	2301      	movs	r3, #1
 8001afc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001afe:	2302      	movs	r3, #2
 8001b00:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b02:	2300      	movs	r3, #0
 8001b04:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b06:	f107 0314 	add.w	r3, r7, #20
 8001b0a:	4619      	mov	r1, r3
 8001b0c:	480b      	ldr	r0, [pc, #44]	; (8001b3c <MX_GPIO_Init+0xf0>)
 8001b0e:	f001 fbe7 	bl	80032e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001b12:	2320      	movs	r3, #32
 8001b14:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b16:	2301      	movs	r3, #1
 8001b18:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001b22:	f107 0314 	add.w	r3, r7, #20
 8001b26:	4619      	mov	r1, r3
 8001b28:	4804      	ldr	r0, [pc, #16]	; (8001b3c <MX_GPIO_Init+0xf0>)
 8001b2a:	f001 fbd9 	bl	80032e0 <HAL_GPIO_Init>

}
 8001b2e:	bf00      	nop
 8001b30:	3728      	adds	r7, #40	; 0x28
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bd80      	pop	{r7, pc}
 8001b36:	bf00      	nop
 8001b38:	40023800 	.word	0x40023800
 8001b3c:	40020000 	.word	0x40020000
 8001b40:	10210000 	.word	0x10210000
 8001b44:	40020800 	.word	0x40020800

08001b48 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b4c:	b672      	cpsid	i
}
 8001b4e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b50:	e7fe      	b.n	8001b50 <Error_Handler+0x8>
	...

08001b54 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b082      	sub	sp, #8
 8001b58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	607b      	str	r3, [r7, #4]
 8001b5e:	4b10      	ldr	r3, [pc, #64]	; (8001ba0 <HAL_MspInit+0x4c>)
 8001b60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b62:	4a0f      	ldr	r2, [pc, #60]	; (8001ba0 <HAL_MspInit+0x4c>)
 8001b64:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b68:	6453      	str	r3, [r2, #68]	; 0x44
 8001b6a:	4b0d      	ldr	r3, [pc, #52]	; (8001ba0 <HAL_MspInit+0x4c>)
 8001b6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b72:	607b      	str	r3, [r7, #4]
 8001b74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b76:	2300      	movs	r3, #0
 8001b78:	603b      	str	r3, [r7, #0]
 8001b7a:	4b09      	ldr	r3, [pc, #36]	; (8001ba0 <HAL_MspInit+0x4c>)
 8001b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b7e:	4a08      	ldr	r2, [pc, #32]	; (8001ba0 <HAL_MspInit+0x4c>)
 8001b80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b84:	6413      	str	r3, [r2, #64]	; 0x40
 8001b86:	4b06      	ldr	r3, [pc, #24]	; (8001ba0 <HAL_MspInit+0x4c>)
 8001b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b8e:	603b      	str	r3, [r7, #0]
 8001b90:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001b92:	2007      	movs	r0, #7
 8001b94:	f001 fad0 	bl	8003138 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b98:	bf00      	nop
 8001b9a:	3708      	adds	r7, #8
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bd80      	pop	{r7, pc}
 8001ba0:	40023800 	.word	0x40023800

08001ba4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b08a      	sub	sp, #40	; 0x28
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bac:	f107 0314 	add.w	r3, r7, #20
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	601a      	str	r2, [r3, #0]
 8001bb4:	605a      	str	r2, [r3, #4]
 8001bb6:	609a      	str	r2, [r3, #8]
 8001bb8:	60da      	str	r2, [r3, #12]
 8001bba:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4a19      	ldr	r2, [pc, #100]	; (8001c28 <HAL_I2C_MspInit+0x84>)
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	d12c      	bne.n	8001c20 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	613b      	str	r3, [r7, #16]
 8001bca:	4b18      	ldr	r3, [pc, #96]	; (8001c2c <HAL_I2C_MspInit+0x88>)
 8001bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bce:	4a17      	ldr	r2, [pc, #92]	; (8001c2c <HAL_I2C_MspInit+0x88>)
 8001bd0:	f043 0302 	orr.w	r3, r3, #2
 8001bd4:	6313      	str	r3, [r2, #48]	; 0x30
 8001bd6:	4b15      	ldr	r3, [pc, #84]	; (8001c2c <HAL_I2C_MspInit+0x88>)
 8001bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bda:	f003 0302 	and.w	r3, r3, #2
 8001bde:	613b      	str	r3, [r7, #16]
 8001be0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001be2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001be6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001be8:	2312      	movs	r3, #18
 8001bea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001bec:	2301      	movs	r3, #1
 8001bee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bf0:	2303      	movs	r3, #3
 8001bf2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001bf4:	2304      	movs	r3, #4
 8001bf6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bf8:	f107 0314 	add.w	r3, r7, #20
 8001bfc:	4619      	mov	r1, r3
 8001bfe:	480c      	ldr	r0, [pc, #48]	; (8001c30 <HAL_I2C_MspInit+0x8c>)
 8001c00:	f001 fb6e 	bl	80032e0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001c04:	2300      	movs	r3, #0
 8001c06:	60fb      	str	r3, [r7, #12]
 8001c08:	4b08      	ldr	r3, [pc, #32]	; (8001c2c <HAL_I2C_MspInit+0x88>)
 8001c0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c0c:	4a07      	ldr	r2, [pc, #28]	; (8001c2c <HAL_I2C_MspInit+0x88>)
 8001c0e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001c12:	6413      	str	r3, [r2, #64]	; 0x40
 8001c14:	4b05      	ldr	r3, [pc, #20]	; (8001c2c <HAL_I2C_MspInit+0x88>)
 8001c16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c18:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c1c:	60fb      	str	r3, [r7, #12]
 8001c1e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001c20:	bf00      	nop
 8001c22:	3728      	adds	r7, #40	; 0x28
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bd80      	pop	{r7, pc}
 8001c28:	40005400 	.word	0x40005400
 8001c2c:	40023800 	.word	0x40023800
 8001c30:	40020400 	.word	0x40020400

08001c34 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b086      	sub	sp, #24
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c44:	d116      	bne.n	8001c74 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001c46:	2300      	movs	r3, #0
 8001c48:	617b      	str	r3, [r7, #20]
 8001c4a:	4b28      	ldr	r3, [pc, #160]	; (8001cec <HAL_TIM_Base_MspInit+0xb8>)
 8001c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c4e:	4a27      	ldr	r2, [pc, #156]	; (8001cec <HAL_TIM_Base_MspInit+0xb8>)
 8001c50:	f043 0301 	orr.w	r3, r3, #1
 8001c54:	6413      	str	r3, [r2, #64]	; 0x40
 8001c56:	4b25      	ldr	r3, [pc, #148]	; (8001cec <HAL_TIM_Base_MspInit+0xb8>)
 8001c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c5a:	f003 0301 	and.w	r3, r3, #1
 8001c5e:	617b      	str	r3, [r7, #20]
 8001c60:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001c62:	2200      	movs	r2, #0
 8001c64:	2100      	movs	r1, #0
 8001c66:	201c      	movs	r0, #28
 8001c68:	f001 fa71 	bl	800314e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001c6c:	201c      	movs	r0, #28
 8001c6e:	f001 fa8a 	bl	8003186 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8001c72:	e036      	b.n	8001ce2 <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM3)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4a1d      	ldr	r2, [pc, #116]	; (8001cf0 <HAL_TIM_Base_MspInit+0xbc>)
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d116      	bne.n	8001cac <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001c7e:	2300      	movs	r3, #0
 8001c80:	613b      	str	r3, [r7, #16]
 8001c82:	4b1a      	ldr	r3, [pc, #104]	; (8001cec <HAL_TIM_Base_MspInit+0xb8>)
 8001c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c86:	4a19      	ldr	r2, [pc, #100]	; (8001cec <HAL_TIM_Base_MspInit+0xb8>)
 8001c88:	f043 0302 	orr.w	r3, r3, #2
 8001c8c:	6413      	str	r3, [r2, #64]	; 0x40
 8001c8e:	4b17      	ldr	r3, [pc, #92]	; (8001cec <HAL_TIM_Base_MspInit+0xb8>)
 8001c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c92:	f003 0302 	and.w	r3, r3, #2
 8001c96:	613b      	str	r3, [r7, #16]
 8001c98:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	2100      	movs	r1, #0
 8001c9e:	201d      	movs	r0, #29
 8001ca0:	f001 fa55 	bl	800314e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001ca4:	201d      	movs	r0, #29
 8001ca6:	f001 fa6e 	bl	8003186 <HAL_NVIC_EnableIRQ>
}
 8001caa:	e01a      	b.n	8001ce2 <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM6)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4a10      	ldr	r2, [pc, #64]	; (8001cf4 <HAL_TIM_Base_MspInit+0xc0>)
 8001cb2:	4293      	cmp	r3, r2
 8001cb4:	d115      	bne.n	8001ce2 <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	60fb      	str	r3, [r7, #12]
 8001cba:	4b0c      	ldr	r3, [pc, #48]	; (8001cec <HAL_TIM_Base_MspInit+0xb8>)
 8001cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cbe:	4a0b      	ldr	r2, [pc, #44]	; (8001cec <HAL_TIM_Base_MspInit+0xb8>)
 8001cc0:	f043 0310 	orr.w	r3, r3, #16
 8001cc4:	6413      	str	r3, [r2, #64]	; 0x40
 8001cc6:	4b09      	ldr	r3, [pc, #36]	; (8001cec <HAL_TIM_Base_MspInit+0xb8>)
 8001cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cca:	f003 0310 	and.w	r3, r3, #16
 8001cce:	60fb      	str	r3, [r7, #12]
 8001cd0:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	2100      	movs	r1, #0
 8001cd6:	2036      	movs	r0, #54	; 0x36
 8001cd8:	f001 fa39 	bl	800314e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001cdc:	2036      	movs	r0, #54	; 0x36
 8001cde:	f001 fa52 	bl	8003186 <HAL_NVIC_EnableIRQ>
}
 8001ce2:	bf00      	nop
 8001ce4:	3718      	adds	r7, #24
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}
 8001cea:	bf00      	nop
 8001cec:	40023800 	.word	0x40023800
 8001cf0:	40000400 	.word	0x40000400
 8001cf4:	40001000 	.word	0x40001000

08001cf8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b08a      	sub	sp, #40	; 0x28
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d00:	f107 0314 	add.w	r3, r7, #20
 8001d04:	2200      	movs	r2, #0
 8001d06:	601a      	str	r2, [r3, #0]
 8001d08:	605a      	str	r2, [r3, #4]
 8001d0a:	609a      	str	r2, [r3, #8]
 8001d0c:	60da      	str	r2, [r3, #12]
 8001d0e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d18:	d11e      	bne.n	8001d58 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	613b      	str	r3, [r7, #16]
 8001d1e:	4b22      	ldr	r3, [pc, #136]	; (8001da8 <HAL_TIM_MspPostInit+0xb0>)
 8001d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d22:	4a21      	ldr	r2, [pc, #132]	; (8001da8 <HAL_TIM_MspPostInit+0xb0>)
 8001d24:	f043 0301 	orr.w	r3, r3, #1
 8001d28:	6313      	str	r3, [r2, #48]	; 0x30
 8001d2a:	4b1f      	ldr	r3, [pc, #124]	; (8001da8 <HAL_TIM_MspPostInit+0xb0>)
 8001d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d2e:	f003 0301 	and.w	r3, r3, #1
 8001d32:	613b      	str	r3, [r7, #16]
 8001d34:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = STEP_DX_Pin;
 8001d36:	2301      	movs	r3, #1
 8001d38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d3a:	2302      	movs	r3, #2
 8001d3c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d3e:	2301      	movs	r3, #1
 8001d40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d42:	2302      	movs	r3, #2
 8001d44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001d46:	2301      	movs	r3, #1
 8001d48:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(STEP_DX_GPIO_Port, &GPIO_InitStruct);
 8001d4a:	f107 0314 	add.w	r3, r7, #20
 8001d4e:	4619      	mov	r1, r3
 8001d50:	4816      	ldr	r0, [pc, #88]	; (8001dac <HAL_TIM_MspPostInit+0xb4>)
 8001d52:	f001 fac5 	bl	80032e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001d56:	e022      	b.n	8001d9e <HAL_TIM_MspPostInit+0xa6>
  else if(htim->Instance==TIM3)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	4a14      	ldr	r2, [pc, #80]	; (8001db0 <HAL_TIM_MspPostInit+0xb8>)
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d11d      	bne.n	8001d9e <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d62:	2300      	movs	r3, #0
 8001d64:	60fb      	str	r3, [r7, #12]
 8001d66:	4b10      	ldr	r3, [pc, #64]	; (8001da8 <HAL_TIM_MspPostInit+0xb0>)
 8001d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d6a:	4a0f      	ldr	r2, [pc, #60]	; (8001da8 <HAL_TIM_MspPostInit+0xb0>)
 8001d6c:	f043 0301 	orr.w	r3, r3, #1
 8001d70:	6313      	str	r3, [r2, #48]	; 0x30
 8001d72:	4b0d      	ldr	r3, [pc, #52]	; (8001da8 <HAL_TIM_MspPostInit+0xb0>)
 8001d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d76:	f003 0301 	and.w	r3, r3, #1
 8001d7a:	60fb      	str	r3, [r7, #12]
 8001d7c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STEP_SX_Pin;
 8001d7e:	2340      	movs	r3, #64	; 0x40
 8001d80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d82:	2302      	movs	r3, #2
 8001d84:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d86:	2301      	movs	r3, #1
 8001d88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d8a:	2302      	movs	r3, #2
 8001d8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001d8e:	2302      	movs	r3, #2
 8001d90:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(STEP_SX_GPIO_Port, &GPIO_InitStruct);
 8001d92:	f107 0314 	add.w	r3, r7, #20
 8001d96:	4619      	mov	r1, r3
 8001d98:	4804      	ldr	r0, [pc, #16]	; (8001dac <HAL_TIM_MspPostInit+0xb4>)
 8001d9a:	f001 faa1 	bl	80032e0 <HAL_GPIO_Init>
}
 8001d9e:	bf00      	nop
 8001da0:	3728      	adds	r7, #40	; 0x28
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bd80      	pop	{r7, pc}
 8001da6:	bf00      	nop
 8001da8:	40023800 	.word	0x40023800
 8001dac:	40020000 	.word	0x40020000
 8001db0:	40000400 	.word	0x40000400

08001db4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b08c      	sub	sp, #48	; 0x30
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dbc:	f107 031c 	add.w	r3, r7, #28
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	601a      	str	r2, [r3, #0]
 8001dc4:	605a      	str	r2, [r3, #4]
 8001dc6:	609a      	str	r2, [r3, #8]
 8001dc8:	60da      	str	r2, [r3, #12]
 8001dca:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	4a3a      	ldr	r2, [pc, #232]	; (8001ebc <HAL_UART_MspInit+0x108>)
 8001dd2:	4293      	cmp	r3, r2
 8001dd4:	d135      	bne.n	8001e42 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	61bb      	str	r3, [r7, #24]
 8001dda:	4b39      	ldr	r3, [pc, #228]	; (8001ec0 <HAL_UART_MspInit+0x10c>)
 8001ddc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dde:	4a38      	ldr	r2, [pc, #224]	; (8001ec0 <HAL_UART_MspInit+0x10c>)
 8001de0:	f043 0310 	orr.w	r3, r3, #16
 8001de4:	6453      	str	r3, [r2, #68]	; 0x44
 8001de6:	4b36      	ldr	r3, [pc, #216]	; (8001ec0 <HAL_UART_MspInit+0x10c>)
 8001de8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dea:	f003 0310 	and.w	r3, r3, #16
 8001dee:	61bb      	str	r3, [r7, #24]
 8001df0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001df2:	2300      	movs	r3, #0
 8001df4:	617b      	str	r3, [r7, #20]
 8001df6:	4b32      	ldr	r3, [pc, #200]	; (8001ec0 <HAL_UART_MspInit+0x10c>)
 8001df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dfa:	4a31      	ldr	r2, [pc, #196]	; (8001ec0 <HAL_UART_MspInit+0x10c>)
 8001dfc:	f043 0301 	orr.w	r3, r3, #1
 8001e00:	6313      	str	r3, [r2, #48]	; 0x30
 8001e02:	4b2f      	ldr	r3, [pc, #188]	; (8001ec0 <HAL_UART_MspInit+0x10c>)
 8001e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e06:	f003 0301 	and.w	r3, r3, #1
 8001e0a:	617b      	str	r3, [r7, #20]
 8001e0c:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001e0e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001e12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e14:	2302      	movs	r3, #2
 8001e16:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e1c:	2303      	movs	r3, #3
 8001e1e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001e20:	2307      	movs	r3, #7
 8001e22:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e24:	f107 031c 	add.w	r3, r7, #28
 8001e28:	4619      	mov	r1, r3
 8001e2a:	4826      	ldr	r0, [pc, #152]	; (8001ec4 <HAL_UART_MspInit+0x110>)
 8001e2c:	f001 fa58 	bl	80032e0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001e30:	2200      	movs	r2, #0
 8001e32:	2100      	movs	r1, #0
 8001e34:	2025      	movs	r0, #37	; 0x25
 8001e36:	f001 f98a 	bl	800314e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001e3a:	2025      	movs	r0, #37	; 0x25
 8001e3c:	f001 f9a3 	bl	8003186 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001e40:	e038      	b.n	8001eb4 <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART2)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	4a20      	ldr	r2, [pc, #128]	; (8001ec8 <HAL_UART_MspInit+0x114>)
 8001e48:	4293      	cmp	r3, r2
 8001e4a:	d133      	bne.n	8001eb4 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	613b      	str	r3, [r7, #16]
 8001e50:	4b1b      	ldr	r3, [pc, #108]	; (8001ec0 <HAL_UART_MspInit+0x10c>)
 8001e52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e54:	4a1a      	ldr	r2, [pc, #104]	; (8001ec0 <HAL_UART_MspInit+0x10c>)
 8001e56:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e5a:	6413      	str	r3, [r2, #64]	; 0x40
 8001e5c:	4b18      	ldr	r3, [pc, #96]	; (8001ec0 <HAL_UART_MspInit+0x10c>)
 8001e5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e64:	613b      	str	r3, [r7, #16]
 8001e66:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e68:	2300      	movs	r3, #0
 8001e6a:	60fb      	str	r3, [r7, #12]
 8001e6c:	4b14      	ldr	r3, [pc, #80]	; (8001ec0 <HAL_UART_MspInit+0x10c>)
 8001e6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e70:	4a13      	ldr	r2, [pc, #76]	; (8001ec0 <HAL_UART_MspInit+0x10c>)
 8001e72:	f043 0301 	orr.w	r3, r3, #1
 8001e76:	6313      	str	r3, [r2, #48]	; 0x30
 8001e78:	4b11      	ldr	r3, [pc, #68]	; (8001ec0 <HAL_UART_MspInit+0x10c>)
 8001e7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e7c:	f003 0301 	and.w	r3, r3, #1
 8001e80:	60fb      	str	r3, [r7, #12]
 8001e82:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001e84:	230c      	movs	r3, #12
 8001e86:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e88:	2302      	movs	r3, #2
 8001e8a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e90:	2303      	movs	r3, #3
 8001e92:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001e94:	2307      	movs	r3, #7
 8001e96:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e98:	f107 031c 	add.w	r3, r7, #28
 8001e9c:	4619      	mov	r1, r3
 8001e9e:	4809      	ldr	r0, [pc, #36]	; (8001ec4 <HAL_UART_MspInit+0x110>)
 8001ea0:	f001 fa1e 	bl	80032e0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	2100      	movs	r1, #0
 8001ea8:	2026      	movs	r0, #38	; 0x26
 8001eaa:	f001 f950 	bl	800314e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001eae:	2026      	movs	r0, #38	; 0x26
 8001eb0:	f001 f969 	bl	8003186 <HAL_NVIC_EnableIRQ>
}
 8001eb4:	bf00      	nop
 8001eb6:	3730      	adds	r7, #48	; 0x30
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	bd80      	pop	{r7, pc}
 8001ebc:	40011000 	.word	0x40011000
 8001ec0:	40023800 	.word	0x40023800
 8001ec4:	40020000 	.word	0x40020000
 8001ec8:	40004400 	.word	0x40004400

08001ecc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ed0:	e7fe      	b.n	8001ed0 <NMI_Handler+0x4>

08001ed2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ed2:	b480      	push	{r7}
 8001ed4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ed6:	e7fe      	b.n	8001ed6 <HardFault_Handler+0x4>

08001ed8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001edc:	e7fe      	b.n	8001edc <MemManage_Handler+0x4>

08001ede <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ede:	b480      	push	{r7}
 8001ee0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ee2:	e7fe      	b.n	8001ee2 <BusFault_Handler+0x4>

08001ee4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ee8:	e7fe      	b.n	8001ee8 <UsageFault_Handler+0x4>

08001eea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001eea:	b480      	push	{r7}
 8001eec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001eee:	bf00      	nop
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef6:	4770      	bx	lr

08001ef8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001efc:	bf00      	nop
 8001efe:	46bd      	mov	sp, r7
 8001f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f04:	4770      	bx	lr

08001f06 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f06:	b480      	push	{r7}
 8001f08:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f0a:	bf00      	nop
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f12:	4770      	bx	lr

08001f14 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f18:	f000 fffa 	bl	8002f10 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f1c:	bf00      	nop
 8001f1e:	bd80      	pop	{r7, pc}

08001f20 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001f20:	b480      	push	{r7}
 8001f22:	af00      	add	r7, sp, #0
	return 1;
 8001f24:	2301      	movs	r3, #1
}
 8001f26:	4618      	mov	r0, r3
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2e:	4770      	bx	lr

08001f30 <_kill>:

int _kill(int pid, int sig)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b082      	sub	sp, #8
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
 8001f38:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001f3a:	f004 ffc9 	bl	8006ed0 <__errno>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	2216      	movs	r2, #22
 8001f42:	601a      	str	r2, [r3, #0]
	return -1;
 8001f44:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f48:	4618      	mov	r0, r3
 8001f4a:	3708      	adds	r7, #8
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	bd80      	pop	{r7, pc}

08001f50 <_exit>:

void _exit (int status)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b082      	sub	sp, #8
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001f58:	f04f 31ff 	mov.w	r1, #4294967295
 8001f5c:	6878      	ldr	r0, [r7, #4]
 8001f5e:	f7ff ffe7 	bl	8001f30 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001f62:	e7fe      	b.n	8001f62 <_exit+0x12>

08001f64 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b086      	sub	sp, #24
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	60f8      	str	r0, [r7, #12]
 8001f6c:	60b9      	str	r1, [r7, #8]
 8001f6e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f70:	2300      	movs	r3, #0
 8001f72:	617b      	str	r3, [r7, #20]
 8001f74:	e00a      	b.n	8001f8c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001f76:	f3af 8000 	nop.w
 8001f7a:	4601      	mov	r1, r0
 8001f7c:	68bb      	ldr	r3, [r7, #8]
 8001f7e:	1c5a      	adds	r2, r3, #1
 8001f80:	60ba      	str	r2, [r7, #8]
 8001f82:	b2ca      	uxtb	r2, r1
 8001f84:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f86:	697b      	ldr	r3, [r7, #20]
 8001f88:	3301      	adds	r3, #1
 8001f8a:	617b      	str	r3, [r7, #20]
 8001f8c:	697a      	ldr	r2, [r7, #20]
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	429a      	cmp	r2, r3
 8001f92:	dbf0      	blt.n	8001f76 <_read+0x12>
	}

return len;
 8001f94:	687b      	ldr	r3, [r7, #4]
}
 8001f96:	4618      	mov	r0, r3
 8001f98:	3718      	adds	r7, #24
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bd80      	pop	{r7, pc}

08001f9e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001f9e:	b580      	push	{r7, lr}
 8001fa0:	b086      	sub	sp, #24
 8001fa2:	af00      	add	r7, sp, #0
 8001fa4:	60f8      	str	r0, [r7, #12]
 8001fa6:	60b9      	str	r1, [r7, #8]
 8001fa8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001faa:	2300      	movs	r3, #0
 8001fac:	617b      	str	r3, [r7, #20]
 8001fae:	e009      	b.n	8001fc4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001fb0:	68bb      	ldr	r3, [r7, #8]
 8001fb2:	1c5a      	adds	r2, r3, #1
 8001fb4:	60ba      	str	r2, [r7, #8]
 8001fb6:	781b      	ldrb	r3, [r3, #0]
 8001fb8:	4618      	mov	r0, r3
 8001fba:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fbe:	697b      	ldr	r3, [r7, #20]
 8001fc0:	3301      	adds	r3, #1
 8001fc2:	617b      	str	r3, [r7, #20]
 8001fc4:	697a      	ldr	r2, [r7, #20]
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	429a      	cmp	r2, r3
 8001fca:	dbf1      	blt.n	8001fb0 <_write+0x12>
	}
	return len;
 8001fcc:	687b      	ldr	r3, [r7, #4]
}
 8001fce:	4618      	mov	r0, r3
 8001fd0:	3718      	adds	r7, #24
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bd80      	pop	{r7, pc}

08001fd6 <_close>:

int _close(int file)
{
 8001fd6:	b480      	push	{r7}
 8001fd8:	b083      	sub	sp, #12
 8001fda:	af00      	add	r7, sp, #0
 8001fdc:	6078      	str	r0, [r7, #4]
	return -1;
 8001fde:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	370c      	adds	r7, #12
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fec:	4770      	bx	lr

08001fee <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001fee:	b480      	push	{r7}
 8001ff0:	b083      	sub	sp, #12
 8001ff2:	af00      	add	r7, sp, #0
 8001ff4:	6078      	str	r0, [r7, #4]
 8001ff6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001ffe:	605a      	str	r2, [r3, #4]
	return 0;
 8002000:	2300      	movs	r3, #0
}
 8002002:	4618      	mov	r0, r3
 8002004:	370c      	adds	r7, #12
 8002006:	46bd      	mov	sp, r7
 8002008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200c:	4770      	bx	lr

0800200e <_isatty>:

int _isatty(int file)
{
 800200e:	b480      	push	{r7}
 8002010:	b083      	sub	sp, #12
 8002012:	af00      	add	r7, sp, #0
 8002014:	6078      	str	r0, [r7, #4]
	return 1;
 8002016:	2301      	movs	r3, #1
}
 8002018:	4618      	mov	r0, r3
 800201a:	370c      	adds	r7, #12
 800201c:	46bd      	mov	sp, r7
 800201e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002022:	4770      	bx	lr

08002024 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002024:	b480      	push	{r7}
 8002026:	b085      	sub	sp, #20
 8002028:	af00      	add	r7, sp, #0
 800202a:	60f8      	str	r0, [r7, #12]
 800202c:	60b9      	str	r1, [r7, #8]
 800202e:	607a      	str	r2, [r7, #4]
	return 0;
 8002030:	2300      	movs	r3, #0
}
 8002032:	4618      	mov	r0, r3
 8002034:	3714      	adds	r7, #20
 8002036:	46bd      	mov	sp, r7
 8002038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203c:	4770      	bx	lr
	...

08002040 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b086      	sub	sp, #24
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002048:	4a14      	ldr	r2, [pc, #80]	; (800209c <_sbrk+0x5c>)
 800204a:	4b15      	ldr	r3, [pc, #84]	; (80020a0 <_sbrk+0x60>)
 800204c:	1ad3      	subs	r3, r2, r3
 800204e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002050:	697b      	ldr	r3, [r7, #20]
 8002052:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002054:	4b13      	ldr	r3, [pc, #76]	; (80020a4 <_sbrk+0x64>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	2b00      	cmp	r3, #0
 800205a:	d102      	bne.n	8002062 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800205c:	4b11      	ldr	r3, [pc, #68]	; (80020a4 <_sbrk+0x64>)
 800205e:	4a12      	ldr	r2, [pc, #72]	; (80020a8 <_sbrk+0x68>)
 8002060:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002062:	4b10      	ldr	r3, [pc, #64]	; (80020a4 <_sbrk+0x64>)
 8002064:	681a      	ldr	r2, [r3, #0]
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	4413      	add	r3, r2
 800206a:	693a      	ldr	r2, [r7, #16]
 800206c:	429a      	cmp	r2, r3
 800206e:	d207      	bcs.n	8002080 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002070:	f004 ff2e 	bl	8006ed0 <__errno>
 8002074:	4603      	mov	r3, r0
 8002076:	220c      	movs	r2, #12
 8002078:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800207a:	f04f 33ff 	mov.w	r3, #4294967295
 800207e:	e009      	b.n	8002094 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002080:	4b08      	ldr	r3, [pc, #32]	; (80020a4 <_sbrk+0x64>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002086:	4b07      	ldr	r3, [pc, #28]	; (80020a4 <_sbrk+0x64>)
 8002088:	681a      	ldr	r2, [r3, #0]
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	4413      	add	r3, r2
 800208e:	4a05      	ldr	r2, [pc, #20]	; (80020a4 <_sbrk+0x64>)
 8002090:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002092:	68fb      	ldr	r3, [r7, #12]
}
 8002094:	4618      	mov	r0, r3
 8002096:	3718      	adds	r7, #24
 8002098:	46bd      	mov	sp, r7
 800209a:	bd80      	pop	{r7, pc}
 800209c:	20020000 	.word	0x20020000
 80020a0:	00000400 	.word	0x00000400
 80020a4:	20000210 	.word	0x20000210
 80020a8:	20000548 	.word	0x20000548

080020ac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80020ac:	b480      	push	{r7}
 80020ae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80020b0:	4b06      	ldr	r3, [pc, #24]	; (80020cc <SystemInit+0x20>)
 80020b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020b6:	4a05      	ldr	r2, [pc, #20]	; (80020cc <SystemInit+0x20>)
 80020b8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80020bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80020c0:	bf00      	nop
 80020c2:	46bd      	mov	sp, r7
 80020c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c8:	4770      	bx	lr
 80020ca:	bf00      	nop
 80020cc:	e000ed00 	.word	0xe000ed00

080020d0 <MPU6050_Init>:
#include "myLib/MPU6050.h"


void MPU6050_Init (I2C_HandleTypeDef* hi2c1){
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b086      	sub	sp, #24
 80020d4:	af04      	add	r7, sp, #16
 80020d6:	6078      	str	r0, [r7, #4]
	// check device ID WHO_AM_I
	HAL_I2C_Mem_Read (hi2c1, MPU6050_ADDR, WHO_AM_I_REG,1, &check, 1, 1000);
 80020d8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80020dc:	9302      	str	r3, [sp, #8]
 80020de:	2301      	movs	r3, #1
 80020e0:	9301      	str	r3, [sp, #4]
 80020e2:	4b28      	ldr	r3, [pc, #160]	; (8002184 <MPU6050_Init+0xb4>)
 80020e4:	9300      	str	r3, [sp, #0]
 80020e6:	2301      	movs	r3, #1
 80020e8:	2275      	movs	r2, #117	; 0x75
 80020ea:	21d0      	movs	r1, #208	; 0xd0
 80020ec:	6878      	ldr	r0, [r7, #4]
 80020ee:	f001 fce3 	bl	8003ab8 <HAL_I2C_Mem_Read>
	if (check == 104)  // 0x68 will be returned by the sensor if everything goes well
 80020f2:	4b24      	ldr	r3, [pc, #144]	; (8002184 <MPU6050_Init+0xb4>)
 80020f4:	781b      	ldrb	r3, [r3, #0]
 80020f6:	2b68      	cmp	r3, #104	; 0x68
 80020f8:	d13f      	bne.n	800217a <MPU6050_Init+0xaa>
	{
		// power management register 0X6B we should write all 0's to wake the sensor up
		Data = 0;
 80020fa:	4b23      	ldr	r3, [pc, #140]	; (8002188 <MPU6050_Init+0xb8>)
 80020fc:	2200      	movs	r2, #0
 80020fe:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Mem_Write(hi2c1, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1, 1000);
 8002100:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002104:	9302      	str	r3, [sp, #8]
 8002106:	2301      	movs	r3, #1
 8002108:	9301      	str	r3, [sp, #4]
 800210a:	4b1f      	ldr	r3, [pc, #124]	; (8002188 <MPU6050_Init+0xb8>)
 800210c:	9300      	str	r3, [sp, #0]
 800210e:	2301      	movs	r3, #1
 8002110:	226b      	movs	r2, #107	; 0x6b
 8002112:	21d0      	movs	r1, #208	; 0xd0
 8002114:	6878      	ldr	r0, [r7, #4]
 8002116:	f001 fbd5 	bl	80038c4 <HAL_I2C_Mem_Write>

		// Set DATA RATE of 1KHz by writing SMPLRT_DIV register
		Data = 0x07;
 800211a:	4b1b      	ldr	r3, [pc, #108]	; (8002188 <MPU6050_Init+0xb8>)
 800211c:	2207      	movs	r2, #7
 800211e:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Mem_Write(hi2c1, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, 1000);
 8002120:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002124:	9302      	str	r3, [sp, #8]
 8002126:	2301      	movs	r3, #1
 8002128:	9301      	str	r3, [sp, #4]
 800212a:	4b17      	ldr	r3, [pc, #92]	; (8002188 <MPU6050_Init+0xb8>)
 800212c:	9300      	str	r3, [sp, #0]
 800212e:	2301      	movs	r3, #1
 8002130:	2219      	movs	r2, #25
 8002132:	21d0      	movs	r1, #208	; 0xd0
 8002134:	6878      	ldr	r0, [r7, #4]
 8002136:	f001 fbc5 	bl	80038c4 <HAL_I2C_Mem_Write>

		// Set accelerometer configuration in ACCEL_CONFIG Register
		// XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> � 2g
		Data = 0x00;
 800213a:	4b13      	ldr	r3, [pc, #76]	; (8002188 <MPU6050_Init+0xb8>)
 800213c:	2200      	movs	r2, #0
 800213e:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Mem_Write(hi2c1, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, 1000);
 8002140:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002144:	9302      	str	r3, [sp, #8]
 8002146:	2301      	movs	r3, #1
 8002148:	9301      	str	r3, [sp, #4]
 800214a:	4b0f      	ldr	r3, [pc, #60]	; (8002188 <MPU6050_Init+0xb8>)
 800214c:	9300      	str	r3, [sp, #0]
 800214e:	2301      	movs	r3, #1
 8002150:	221c      	movs	r2, #28
 8002152:	21d0      	movs	r1, #208	; 0xd0
 8002154:	6878      	ldr	r0, [r7, #4]
 8002156:	f001 fbb5 	bl	80038c4 <HAL_I2C_Mem_Write>

		// Set Gyroscopic configuration in GYRO_CONFIG Register
		// XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> � 250 �/s
		Data = 0x00;
 800215a:	4b0b      	ldr	r3, [pc, #44]	; (8002188 <MPU6050_Init+0xb8>)
 800215c:	2200      	movs	r2, #0
 800215e:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Mem_Write(hi2c1, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, 1000);
 8002160:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002164:	9302      	str	r3, [sp, #8]
 8002166:	2301      	movs	r3, #1
 8002168:	9301      	str	r3, [sp, #4]
 800216a:	4b07      	ldr	r3, [pc, #28]	; (8002188 <MPU6050_Init+0xb8>)
 800216c:	9300      	str	r3, [sp, #0]
 800216e:	2301      	movs	r3, #1
 8002170:	221b      	movs	r2, #27
 8002172:	21d0      	movs	r1, #208	; 0xd0
 8002174:	6878      	ldr	r0, [r7, #4]
 8002176:	f001 fba5 	bl	80038c4 <HAL_I2C_Mem_Write>
	}

}
 800217a:	bf00      	nop
 800217c:	3708      	adds	r7, #8
 800217e:	46bd      	mov	sp, r7
 8002180:	bd80      	pop	{r7, pc}
 8002182:	bf00      	nop
 8002184:	20000394 	.word	0x20000394
 8002188:	200003dc 	.word	0x200003dc

0800218c <MPU6050_reset>:

void MPU6050_reset(I2C_HandleTypeDef* hi2c1){
 800218c:	b580      	push	{r7, lr}
 800218e:	b086      	sub	sp, #24
 8002190:	af04      	add	r7, sp, #16
 8002192:	6078      	str	r0, [r7, #4]
	// power management register 0X6B
	Data = 0x80;
 8002194:	4b09      	ldr	r3, [pc, #36]	; (80021bc <MPU6050_reset+0x30>)
 8002196:	2280      	movs	r2, #128	; 0x80
 8002198:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(hi2c1, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1, 1000);
 800219a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800219e:	9302      	str	r3, [sp, #8]
 80021a0:	2301      	movs	r3, #1
 80021a2:	9301      	str	r3, [sp, #4]
 80021a4:	4b05      	ldr	r3, [pc, #20]	; (80021bc <MPU6050_reset+0x30>)
 80021a6:	9300      	str	r3, [sp, #0]
 80021a8:	2301      	movs	r3, #1
 80021aa:	226b      	movs	r2, #107	; 0x6b
 80021ac:	21d0      	movs	r1, #208	; 0xd0
 80021ae:	6878      	ldr	r0, [r7, #4]
 80021b0:	f001 fb88 	bl	80038c4 <HAL_I2C_Mem_Write>
}
 80021b4:	bf00      	nop
 80021b6:	3708      	adds	r7, #8
 80021b8:	46bd      	mov	sp, r7
 80021ba:	bd80      	pop	{r7, pc}
 80021bc:	200003dc 	.word	0x200003dc

080021c0 <MPU6050_getStatus>:

void MPU6050_getStatus(I2C_HandleTypeDef* hi2c1){
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b086      	sub	sp, #24
 80021c4:	af04      	add	r7, sp, #16
 80021c6:	6078      	str	r0, [r7, #4]
	HAL_I2C_Mem_Read (hi2c1, MPU6050_ADDR, WHO_AM_I_REG,1, &check, 1, 1000);
 80021c8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80021cc:	9302      	str	r3, [sp, #8]
 80021ce:	2301      	movs	r3, #1
 80021d0:	9301      	str	r3, [sp, #4]
 80021d2:	4b0b      	ldr	r3, [pc, #44]	; (8002200 <MPU6050_getStatus+0x40>)
 80021d4:	9300      	str	r3, [sp, #0]
 80021d6:	2301      	movs	r3, #1
 80021d8:	2275      	movs	r2, #117	; 0x75
 80021da:	21d0      	movs	r1, #208	; 0xd0
 80021dc:	6878      	ldr	r0, [r7, #4]
 80021de:	f001 fc6b 	bl	8003ab8 <HAL_I2C_Mem_Read>
	if (check != 104){
 80021e2:	4b07      	ldr	r3, [pc, #28]	; (8002200 <MPU6050_getStatus+0x40>)
 80021e4:	781b      	ldrb	r3, [r3, #0]
 80021e6:	2b68      	cmp	r3, #104	; 0x68
 80021e8:	d005      	beq.n	80021f6 <MPU6050_getStatus+0x36>
		MPU6050_reset(hi2c1);
 80021ea:	6878      	ldr	r0, [r7, #4]
 80021ec:	f7ff ffce 	bl	800218c <MPU6050_reset>
		MPU6050_Init(hi2c1);
 80021f0:	6878      	ldr	r0, [r7, #4]
 80021f2:	f7ff ff6d 	bl	80020d0 <MPU6050_Init>
	}
}
 80021f6:	bf00      	nop
 80021f8:	3708      	adds	r7, #8
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd80      	pop	{r7, pc}
 80021fe:	bf00      	nop
 8002200:	20000394 	.word	0x20000394
 8002204:	00000000 	.word	0x00000000

08002208 <MPU6050_Read_Accel>:


void MPU6050_Read_Accel (I2C_HandleTypeDef* hi2c1){
 8002208:	b5b0      	push	{r4, r5, r7, lr}
 800220a:	ed2d 8b02 	vpush	{d8}
 800220e:	b086      	sub	sp, #24
 8002210:	af04      	add	r7, sp, #16
 8002212:	6078      	str	r0, [r7, #4]
	// Read 6 BYTES of data starting from ACCEL_XOUT_H register

	HAL_I2C_Mem_Read (hi2c1, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data_Accel, 6, 1000);
 8002214:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002218:	9302      	str	r3, [sp, #8]
 800221a:	2306      	movs	r3, #6
 800221c:	9301      	str	r3, [sp, #4]
 800221e:	4b78      	ldr	r3, [pc, #480]	; (8002400 <MPU6050_Read_Accel+0x1f8>)
 8002220:	9300      	str	r3, [sp, #0]
 8002222:	2301      	movs	r3, #1
 8002224:	223b      	movs	r2, #59	; 0x3b
 8002226:	21d0      	movs	r1, #208	; 0xd0
 8002228:	6878      	ldr	r0, [r7, #4]
 800222a:	f001 fc45 	bl	8003ab8 <HAL_I2C_Mem_Read>

	Accel_X_RAW = (int16_t)(Rec_Data_Accel[0] << 8 | Rec_Data_Accel [1]);
 800222e:	4b74      	ldr	r3, [pc, #464]	; (8002400 <MPU6050_Read_Accel+0x1f8>)
 8002230:	781b      	ldrb	r3, [r3, #0]
 8002232:	021b      	lsls	r3, r3, #8
 8002234:	b21a      	sxth	r2, r3
 8002236:	4b72      	ldr	r3, [pc, #456]	; (8002400 <MPU6050_Read_Accel+0x1f8>)
 8002238:	785b      	ldrb	r3, [r3, #1]
 800223a:	b21b      	sxth	r3, r3
 800223c:	4313      	orrs	r3, r2
 800223e:	b21a      	sxth	r2, r3
 8002240:	4b70      	ldr	r3, [pc, #448]	; (8002404 <MPU6050_Read_Accel+0x1fc>)
 8002242:	801a      	strh	r2, [r3, #0]
	Accel_Y_RAW = (int16_t)(Rec_Data_Accel[2] << 8 | Rec_Data_Accel [3]);
 8002244:	4b6e      	ldr	r3, [pc, #440]	; (8002400 <MPU6050_Read_Accel+0x1f8>)
 8002246:	789b      	ldrb	r3, [r3, #2]
 8002248:	021b      	lsls	r3, r3, #8
 800224a:	b21a      	sxth	r2, r3
 800224c:	4b6c      	ldr	r3, [pc, #432]	; (8002400 <MPU6050_Read_Accel+0x1f8>)
 800224e:	78db      	ldrb	r3, [r3, #3]
 8002250:	b21b      	sxth	r3, r3
 8002252:	4313      	orrs	r3, r2
 8002254:	b21a      	sxth	r2, r3
 8002256:	4b6c      	ldr	r3, [pc, #432]	; (8002408 <MPU6050_Read_Accel+0x200>)
 8002258:	801a      	strh	r2, [r3, #0]
	Accel_Z_RAW = (int16_t)(Rec_Data_Accel[4] << 8 | Rec_Data_Accel [5]);
 800225a:	4b69      	ldr	r3, [pc, #420]	; (8002400 <MPU6050_Read_Accel+0x1f8>)
 800225c:	791b      	ldrb	r3, [r3, #4]
 800225e:	021b      	lsls	r3, r3, #8
 8002260:	b21a      	sxth	r2, r3
 8002262:	4b67      	ldr	r3, [pc, #412]	; (8002400 <MPU6050_Read_Accel+0x1f8>)
 8002264:	795b      	ldrb	r3, [r3, #5]
 8002266:	b21b      	sxth	r3, r3
 8002268:	4313      	orrs	r3, r2
 800226a:	b21a      	sxth	r2, r3
 800226c:	4b67      	ldr	r3, [pc, #412]	; (800240c <MPU6050_Read_Accel+0x204>)
 800226e:	801a      	strh	r2, [r3, #0]
	/*** convert the RAW values into acceleration in 'g'
	     we have to divide according to the Full scale value set in FS_SEL
	     I have configured FS_SEL = 0. So I am dividing by 16384.0
	     for more details check ACCEL_CONFIG Register              ****/

	Ax = (double)(Accel_X_RAW/16384.0);
 8002270:	4b64      	ldr	r3, [pc, #400]	; (8002404 <MPU6050_Read_Accel+0x1fc>)
 8002272:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002276:	4618      	mov	r0, r3
 8002278:	f7fe f974 	bl	8000564 <__aeabi_i2d>
 800227c:	f04f 0200 	mov.w	r2, #0
 8002280:	4b63      	ldr	r3, [pc, #396]	; (8002410 <MPU6050_Read_Accel+0x208>)
 8002282:	f7fe fb03 	bl	800088c <__aeabi_ddiv>
 8002286:	4602      	mov	r2, r0
 8002288:	460b      	mov	r3, r1
 800228a:	4962      	ldr	r1, [pc, #392]	; (8002414 <MPU6050_Read_Accel+0x20c>)
 800228c:	e9c1 2300 	strd	r2, r3, [r1]
	Ay = (double)(Accel_Y_RAW/16384.0);
 8002290:	4b5d      	ldr	r3, [pc, #372]	; (8002408 <MPU6050_Read_Accel+0x200>)
 8002292:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002296:	4618      	mov	r0, r3
 8002298:	f7fe f964 	bl	8000564 <__aeabi_i2d>
 800229c:	f04f 0200 	mov.w	r2, #0
 80022a0:	4b5b      	ldr	r3, [pc, #364]	; (8002410 <MPU6050_Read_Accel+0x208>)
 80022a2:	f7fe faf3 	bl	800088c <__aeabi_ddiv>
 80022a6:	4602      	mov	r2, r0
 80022a8:	460b      	mov	r3, r1
 80022aa:	495b      	ldr	r1, [pc, #364]	; (8002418 <MPU6050_Read_Accel+0x210>)
 80022ac:	e9c1 2300 	strd	r2, r3, [r1]
	Az = (double)(Accel_Z_RAW/16384.0);
 80022b0:	4b56      	ldr	r3, [pc, #344]	; (800240c <MPU6050_Read_Accel+0x204>)
 80022b2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80022b6:	4618      	mov	r0, r3
 80022b8:	f7fe f954 	bl	8000564 <__aeabi_i2d>
 80022bc:	f04f 0200 	mov.w	r2, #0
 80022c0:	4b53      	ldr	r3, [pc, #332]	; (8002410 <MPU6050_Read_Accel+0x208>)
 80022c2:	f7fe fae3 	bl	800088c <__aeabi_ddiv>
 80022c6:	4602      	mov	r2, r0
 80022c8:	460b      	mov	r3, r1
 80022ca:	4954      	ldr	r1, [pc, #336]	; (800241c <MPU6050_Read_Accel+0x214>)
 80022cc:	e9c1 2300 	strd	r2, r3, [r1]

	if(MPU6050_Calib_status == 1){
 80022d0:	4b53      	ldr	r3, [pc, #332]	; (8002420 <MPU6050_Read_Accel+0x218>)
 80022d2:	781b      	ldrb	r3, [r3, #0]
 80022d4:	2b01      	cmp	r3, #1
 80022d6:	f040 8082 	bne.w	80023de <MPU6050_Read_Accel+0x1d6>
//		Ax = (double)((Ax - Ax_0)* 180 / M_PI);
//		Ay = (double)((Ay - Ay_0)* 180 / M_PI);
//		Az = (double)((Az - Az_0)* 180 / M_PI);

		roll	=	(double)( (atan2(Ay, sqrt(Az*Az+Ax*Ax)))* (180.0 / M_PI) ); // [-pigreco, pigreco] ---> [0, 2pigreco]
 80022da:	4b4f      	ldr	r3, [pc, #316]	; (8002418 <MPU6050_Read_Accel+0x210>)
 80022dc:	ed93 8b00 	vldr	d8, [r3]
 80022e0:	4b4e      	ldr	r3, [pc, #312]	; (800241c <MPU6050_Read_Accel+0x214>)
 80022e2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80022e6:	4b4d      	ldr	r3, [pc, #308]	; (800241c <MPU6050_Read_Accel+0x214>)
 80022e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022ec:	f7fe f9a4 	bl	8000638 <__aeabi_dmul>
 80022f0:	4602      	mov	r2, r0
 80022f2:	460b      	mov	r3, r1
 80022f4:	4614      	mov	r4, r2
 80022f6:	461d      	mov	r5, r3
 80022f8:	4b46      	ldr	r3, [pc, #280]	; (8002414 <MPU6050_Read_Accel+0x20c>)
 80022fa:	e9d3 0100 	ldrd	r0, r1, [r3]
 80022fe:	4b45      	ldr	r3, [pc, #276]	; (8002414 <MPU6050_Read_Accel+0x20c>)
 8002300:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002304:	f7fe f998 	bl	8000638 <__aeabi_dmul>
 8002308:	4602      	mov	r2, r0
 800230a:	460b      	mov	r3, r1
 800230c:	4620      	mov	r0, r4
 800230e:	4629      	mov	r1, r5
 8002310:	f7fd ffdc 	bl	80002cc <__adddf3>
 8002314:	4602      	mov	r2, r0
 8002316:	460b      	mov	r3, r1
 8002318:	ec43 2b17 	vmov	d7, r2, r3
 800231c:	eeb0 0a47 	vmov.f32	s0, s14
 8002320:	eef0 0a67 	vmov.f32	s1, s15
 8002324:	f009 fa2e 	bl	800b784 <sqrt>
 8002328:	eeb0 7a40 	vmov.f32	s14, s0
 800232c:	eef0 7a60 	vmov.f32	s15, s1
 8002330:	eeb0 1a47 	vmov.f32	s2, s14
 8002334:	eef0 1a67 	vmov.f32	s3, s15
 8002338:	eeb0 0a48 	vmov.f32	s0, s16
 800233c:	eef0 0a68 	vmov.f32	s1, s17
 8002340:	f009 fa1e 	bl	800b780 <atan2>
 8002344:	ec51 0b10 	vmov	r0, r1, d0
 8002348:	a329      	add	r3, pc, #164	; (adr r3, 80023f0 <MPU6050_Read_Accel+0x1e8>)
 800234a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800234e:	f7fe f973 	bl	8000638 <__aeabi_dmul>
 8002352:	4602      	mov	r2, r0
 8002354:	460b      	mov	r3, r1
 8002356:	4933      	ldr	r1, [pc, #204]	; (8002424 <MPU6050_Read_Accel+0x21c>)
 8002358:	e9c1 2300 	strd	r2, r3, [r1]
		pitch	=	(double)( (atan2(Ax, sqrt(Az*Az+Ay*Ay)))* (-180.0 / M_PI) );
 800235c:	4b2d      	ldr	r3, [pc, #180]	; (8002414 <MPU6050_Read_Accel+0x20c>)
 800235e:	ed93 8b00 	vldr	d8, [r3]
 8002362:	4b2e      	ldr	r3, [pc, #184]	; (800241c <MPU6050_Read_Accel+0x214>)
 8002364:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002368:	4b2c      	ldr	r3, [pc, #176]	; (800241c <MPU6050_Read_Accel+0x214>)
 800236a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800236e:	f7fe f963 	bl	8000638 <__aeabi_dmul>
 8002372:	4602      	mov	r2, r0
 8002374:	460b      	mov	r3, r1
 8002376:	4614      	mov	r4, r2
 8002378:	461d      	mov	r5, r3
 800237a:	4b27      	ldr	r3, [pc, #156]	; (8002418 <MPU6050_Read_Accel+0x210>)
 800237c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002380:	4b25      	ldr	r3, [pc, #148]	; (8002418 <MPU6050_Read_Accel+0x210>)
 8002382:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002386:	f7fe f957 	bl	8000638 <__aeabi_dmul>
 800238a:	4602      	mov	r2, r0
 800238c:	460b      	mov	r3, r1
 800238e:	4620      	mov	r0, r4
 8002390:	4629      	mov	r1, r5
 8002392:	f7fd ff9b 	bl	80002cc <__adddf3>
 8002396:	4602      	mov	r2, r0
 8002398:	460b      	mov	r3, r1
 800239a:	ec43 2b17 	vmov	d7, r2, r3
 800239e:	eeb0 0a47 	vmov.f32	s0, s14
 80023a2:	eef0 0a67 	vmov.f32	s1, s15
 80023a6:	f009 f9ed 	bl	800b784 <sqrt>
 80023aa:	eeb0 7a40 	vmov.f32	s14, s0
 80023ae:	eef0 7a60 	vmov.f32	s15, s1
 80023b2:	eeb0 1a47 	vmov.f32	s2, s14
 80023b6:	eef0 1a67 	vmov.f32	s3, s15
 80023ba:	eeb0 0a48 	vmov.f32	s0, s16
 80023be:	eef0 0a68 	vmov.f32	s1, s17
 80023c2:	f009 f9dd 	bl	800b780 <atan2>
 80023c6:	ec51 0b10 	vmov	r0, r1, d0
 80023ca:	a30b      	add	r3, pc, #44	; (adr r3, 80023f8 <MPU6050_Read_Accel+0x1f0>)
 80023cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023d0:	f7fe f932 	bl	8000638 <__aeabi_dmul>
 80023d4:	4602      	mov	r2, r0
 80023d6:	460b      	mov	r3, r1
 80023d8:	4913      	ldr	r1, [pc, #76]	; (8002428 <MPU6050_Read_Accel+0x220>)
 80023da:	e9c1 2300 	strd	r2, r3, [r1]
		//yaw		= 	(double)( (atan2(Az, sqrt(Ax*Ax+Ay*Ay)))* (-180.0 / M_PI) );
	}
}
 80023de:	bf00      	nop
 80023e0:	3708      	adds	r7, #8
 80023e2:	46bd      	mov	sp, r7
 80023e4:	ecbd 8b02 	vpop	{d8}
 80023e8:	bdb0      	pop	{r4, r5, r7, pc}
 80023ea:	bf00      	nop
 80023ec:	f3af 8000 	nop.w
 80023f0:	1a63c1f8 	.word	0x1a63c1f8
 80023f4:	404ca5dc 	.word	0x404ca5dc
 80023f8:	1a63c1f8 	.word	0x1a63c1f8
 80023fc:	c04ca5dc 	.word	0xc04ca5dc
 8002400:	200003e0 	.word	0x200003e0
 8002404:	20000228 	.word	0x20000228
 8002408:	20000300 	.word	0x20000300
 800240c:	20000368 	.word	0x20000368
 8002410:	40d00000 	.word	0x40d00000
 8002414:	200003f0 	.word	0x200003f0
 8002418:	20000350 	.word	0x20000350
 800241c:	20000450 	.word	0x20000450
 8002420:	200002f0 	.word	0x200002f0
 8002424:	20000518 	.word	0x20000518
 8002428:	20000510 	.word	0x20000510
 800242c:	00000000 	.word	0x00000000

08002430 <MPU6050_Read_Gyro>:


void MPU6050_Read_Gyro (I2C_HandleTypeDef* hi2c1){
 8002430:	b580      	push	{r7, lr}
 8002432:	b086      	sub	sp, #24
 8002434:	af04      	add	r7, sp, #16
 8002436:	6078      	str	r0, [r7, #4]
	// Read 6 BYTES of data starting from GYRO_XOUT_H register

	HAL_I2C_Mem_Read (hi2c1, MPU6050_ADDR, GYRO_XOUT_H_REG, 1, Rec_Data_Gyro, 6, 1000);
 8002438:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800243c:	9302      	str	r3, [sp, #8]
 800243e:	2306      	movs	r3, #6
 8002440:	9301      	str	r3, [sp, #4]
 8002442:	4b79      	ldr	r3, [pc, #484]	; (8002628 <MPU6050_Read_Gyro+0x1f8>)
 8002444:	9300      	str	r3, [sp, #0]
 8002446:	2301      	movs	r3, #1
 8002448:	2243      	movs	r2, #67	; 0x43
 800244a:	21d0      	movs	r1, #208	; 0xd0
 800244c:	6878      	ldr	r0, [r7, #4]
 800244e:	f001 fb33 	bl	8003ab8 <HAL_I2C_Mem_Read>

	Gyro_X_RAW = (int16_t)(Rec_Data_Gyro[0] << 8 | Rec_Data_Gyro [1]);
 8002452:	4b75      	ldr	r3, [pc, #468]	; (8002628 <MPU6050_Read_Gyro+0x1f8>)
 8002454:	781b      	ldrb	r3, [r3, #0]
 8002456:	021b      	lsls	r3, r3, #8
 8002458:	b21a      	sxth	r2, r3
 800245a:	4b73      	ldr	r3, [pc, #460]	; (8002628 <MPU6050_Read_Gyro+0x1f8>)
 800245c:	785b      	ldrb	r3, [r3, #1]
 800245e:	b21b      	sxth	r3, r3
 8002460:	4313      	orrs	r3, r2
 8002462:	b21a      	sxth	r2, r3
 8002464:	4b71      	ldr	r3, [pc, #452]	; (800262c <MPU6050_Read_Gyro+0x1fc>)
 8002466:	801a      	strh	r2, [r3, #0]
	Gyro_Y_RAW = (int16_t)(Rec_Data_Gyro[2] << 8 | Rec_Data_Gyro [3]);
 8002468:	4b6f      	ldr	r3, [pc, #444]	; (8002628 <MPU6050_Read_Gyro+0x1f8>)
 800246a:	789b      	ldrb	r3, [r3, #2]
 800246c:	021b      	lsls	r3, r3, #8
 800246e:	b21a      	sxth	r2, r3
 8002470:	4b6d      	ldr	r3, [pc, #436]	; (8002628 <MPU6050_Read_Gyro+0x1f8>)
 8002472:	78db      	ldrb	r3, [r3, #3]
 8002474:	b21b      	sxth	r3, r3
 8002476:	4313      	orrs	r3, r2
 8002478:	b21a      	sxth	r2, r3
 800247a:	4b6d      	ldr	r3, [pc, #436]	; (8002630 <MPU6050_Read_Gyro+0x200>)
 800247c:	801a      	strh	r2, [r3, #0]
	Gyro_Z_RAW = (int16_t)(Rec_Data_Gyro[4] << 8 | Rec_Data_Gyro [5]);
 800247e:	4b6a      	ldr	r3, [pc, #424]	; (8002628 <MPU6050_Read_Gyro+0x1f8>)
 8002480:	791b      	ldrb	r3, [r3, #4]
 8002482:	021b      	lsls	r3, r3, #8
 8002484:	b21a      	sxth	r2, r3
 8002486:	4b68      	ldr	r3, [pc, #416]	; (8002628 <MPU6050_Read_Gyro+0x1f8>)
 8002488:	795b      	ldrb	r3, [r3, #5]
 800248a:	b21b      	sxth	r3, r3
 800248c:	4313      	orrs	r3, r2
 800248e:	b21a      	sxth	r2, r3
 8002490:	4b68      	ldr	r3, [pc, #416]	; (8002634 <MPU6050_Read_Gyro+0x204>)
 8002492:	801a      	strh	r2, [r3, #0]
	/*** convert the RAW values into dps (�/s)
	     we have to divide according to the Full scale value set in FS_SEL
	     I have configured FS_SEL = 0. So I am dividing by 131.0
	     for more details check GYRO_CONFIG Register              ****/

	Gx = Gyro_X_RAW/131.0;
 8002494:	4b65      	ldr	r3, [pc, #404]	; (800262c <MPU6050_Read_Gyro+0x1fc>)
 8002496:	f9b3 3000 	ldrsh.w	r3, [r3]
 800249a:	4618      	mov	r0, r3
 800249c:	f7fe f862 	bl	8000564 <__aeabi_i2d>
 80024a0:	a35f      	add	r3, pc, #380	; (adr r3, 8002620 <MPU6050_Read_Gyro+0x1f0>)
 80024a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024a6:	f7fe f9f1 	bl	800088c <__aeabi_ddiv>
 80024aa:	4602      	mov	r2, r0
 80024ac:	460b      	mov	r3, r1
 80024ae:	4962      	ldr	r1, [pc, #392]	; (8002638 <MPU6050_Read_Gyro+0x208>)
 80024b0:	e9c1 2300 	strd	r2, r3, [r1]
	Gy = Gyro_Y_RAW/131.0;
 80024b4:	4b5e      	ldr	r3, [pc, #376]	; (8002630 <MPU6050_Read_Gyro+0x200>)
 80024b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80024ba:	4618      	mov	r0, r3
 80024bc:	f7fe f852 	bl	8000564 <__aeabi_i2d>
 80024c0:	a357      	add	r3, pc, #348	; (adr r3, 8002620 <MPU6050_Read_Gyro+0x1f0>)
 80024c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024c6:	f7fe f9e1 	bl	800088c <__aeabi_ddiv>
 80024ca:	4602      	mov	r2, r0
 80024cc:	460b      	mov	r3, r1
 80024ce:	495b      	ldr	r1, [pc, #364]	; (800263c <MPU6050_Read_Gyro+0x20c>)
 80024d0:	e9c1 2300 	strd	r2, r3, [r1]
	Gz = Gyro_Z_RAW/131.0;
 80024d4:	4b57      	ldr	r3, [pc, #348]	; (8002634 <MPU6050_Read_Gyro+0x204>)
 80024d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80024da:	4618      	mov	r0, r3
 80024dc:	f7fe f842 	bl	8000564 <__aeabi_i2d>
 80024e0:	a34f      	add	r3, pc, #316	; (adr r3, 8002620 <MPU6050_Read_Gyro+0x1f0>)
 80024e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024e6:	f7fe f9d1 	bl	800088c <__aeabi_ddiv>
 80024ea:	4602      	mov	r2, r0
 80024ec:	460b      	mov	r3, r1
 80024ee:	4954      	ldr	r1, [pc, #336]	; (8002640 <MPU6050_Read_Gyro+0x210>)
 80024f0:	e9c1 2300 	strd	r2, r3, [r1]

	if(MPU6050_Calib_status == 1){
 80024f4:	4b53      	ldr	r3, [pc, #332]	; (8002644 <MPU6050_Read_Gyro+0x214>)
 80024f6:	781b      	ldrb	r3, [r3, #0]
 80024f8:	2b01      	cmp	r3, #1
 80024fa:	f040 808a 	bne.w	8002612 <MPU6050_Read_Gyro+0x1e2>
		Gx = Gx - Gx_0;
 80024fe:	4b4e      	ldr	r3, [pc, #312]	; (8002638 <MPU6050_Read_Gyro+0x208>)
 8002500:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002504:	4b50      	ldr	r3, [pc, #320]	; (8002648 <MPU6050_Read_Gyro+0x218>)
 8002506:	e9d3 2300 	ldrd	r2, r3, [r3]
 800250a:	f7fd fedd 	bl	80002c8 <__aeabi_dsub>
 800250e:	4602      	mov	r2, r0
 8002510:	460b      	mov	r3, r1
 8002512:	4949      	ldr	r1, [pc, #292]	; (8002638 <MPU6050_Read_Gyro+0x208>)
 8002514:	e9c1 2300 	strd	r2, r3, [r1]
		Gy = Gy - Gy_0;
 8002518:	4b48      	ldr	r3, [pc, #288]	; (800263c <MPU6050_Read_Gyro+0x20c>)
 800251a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800251e:	4b4b      	ldr	r3, [pc, #300]	; (800264c <MPU6050_Read_Gyro+0x21c>)
 8002520:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002524:	f7fd fed0 	bl	80002c8 <__aeabi_dsub>
 8002528:	4602      	mov	r2, r0
 800252a:	460b      	mov	r3, r1
 800252c:	4943      	ldr	r1, [pc, #268]	; (800263c <MPU6050_Read_Gyro+0x20c>)
 800252e:	e9c1 2300 	strd	r2, r3, [r1]
		Gz = Gz - Gz_0;
 8002532:	4b43      	ldr	r3, [pc, #268]	; (8002640 <MPU6050_Read_Gyro+0x210>)
 8002534:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002538:	4b45      	ldr	r3, [pc, #276]	; (8002650 <MPU6050_Read_Gyro+0x220>)
 800253a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800253e:	f7fd fec3 	bl	80002c8 <__aeabi_dsub>
 8002542:	4602      	mov	r2, r0
 8002544:	460b      	mov	r3, r1
 8002546:	493e      	ldr	r1, [pc, #248]	; (8002640 <MPU6050_Read_Gyro+0x210>)
 8002548:	e9c1 2300 	strd	r2, r3, [r1]

		// angoli ottenuti solo dal giroscopio
		Gx_angle += (Gx * dTime/1000); // the gyro drifts over time
 800254c:	4b41      	ldr	r3, [pc, #260]	; (8002654 <MPU6050_Read_Gyro+0x224>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4618      	mov	r0, r3
 8002552:	f7fe f819 	bl	8000588 <__aeabi_f2d>
 8002556:	4b38      	ldr	r3, [pc, #224]	; (8002638 <MPU6050_Read_Gyro+0x208>)
 8002558:	e9d3 2300 	ldrd	r2, r3, [r3]
 800255c:	f7fe f86c 	bl	8000638 <__aeabi_dmul>
 8002560:	4602      	mov	r2, r0
 8002562:	460b      	mov	r3, r1
 8002564:	4610      	mov	r0, r2
 8002566:	4619      	mov	r1, r3
 8002568:	f04f 0200 	mov.w	r2, #0
 800256c:	4b3a      	ldr	r3, [pc, #232]	; (8002658 <MPU6050_Read_Gyro+0x228>)
 800256e:	f7fe f98d 	bl	800088c <__aeabi_ddiv>
 8002572:	4602      	mov	r2, r0
 8002574:	460b      	mov	r3, r1
 8002576:	4610      	mov	r0, r2
 8002578:	4619      	mov	r1, r3
 800257a:	4b38      	ldr	r3, [pc, #224]	; (800265c <MPU6050_Read_Gyro+0x22c>)
 800257c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002580:	f7fd fea4 	bl	80002cc <__adddf3>
 8002584:	4602      	mov	r2, r0
 8002586:	460b      	mov	r3, r1
 8002588:	4934      	ldr	r1, [pc, #208]	; (800265c <MPU6050_Read_Gyro+0x22c>)
 800258a:	e9c1 2300 	strd	r2, r3, [r1]
		Gy_angle += (Gy * dTime/1000); // the gyro drifts over time
 800258e:	4b31      	ldr	r3, [pc, #196]	; (8002654 <MPU6050_Read_Gyro+0x224>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4618      	mov	r0, r3
 8002594:	f7fd fff8 	bl	8000588 <__aeabi_f2d>
 8002598:	4b28      	ldr	r3, [pc, #160]	; (800263c <MPU6050_Read_Gyro+0x20c>)
 800259a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800259e:	f7fe f84b 	bl	8000638 <__aeabi_dmul>
 80025a2:	4602      	mov	r2, r0
 80025a4:	460b      	mov	r3, r1
 80025a6:	4610      	mov	r0, r2
 80025a8:	4619      	mov	r1, r3
 80025aa:	f04f 0200 	mov.w	r2, #0
 80025ae:	4b2a      	ldr	r3, [pc, #168]	; (8002658 <MPU6050_Read_Gyro+0x228>)
 80025b0:	f7fe f96c 	bl	800088c <__aeabi_ddiv>
 80025b4:	4602      	mov	r2, r0
 80025b6:	460b      	mov	r3, r1
 80025b8:	4610      	mov	r0, r2
 80025ba:	4619      	mov	r1, r3
 80025bc:	4b28      	ldr	r3, [pc, #160]	; (8002660 <MPU6050_Read_Gyro+0x230>)
 80025be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025c2:	f7fd fe83 	bl	80002cc <__adddf3>
 80025c6:	4602      	mov	r2, r0
 80025c8:	460b      	mov	r3, r1
 80025ca:	4925      	ldr	r1, [pc, #148]	; (8002660 <MPU6050_Read_Gyro+0x230>)
 80025cc:	e9c1 2300 	strd	r2, r3, [r1]
		Gz_angle += (Gz * dTime/1000); // the gyro drifts over time
 80025d0:	4b20      	ldr	r3, [pc, #128]	; (8002654 <MPU6050_Read_Gyro+0x224>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	4618      	mov	r0, r3
 80025d6:	f7fd ffd7 	bl	8000588 <__aeabi_f2d>
 80025da:	4b19      	ldr	r3, [pc, #100]	; (8002640 <MPU6050_Read_Gyro+0x210>)
 80025dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025e0:	f7fe f82a 	bl	8000638 <__aeabi_dmul>
 80025e4:	4602      	mov	r2, r0
 80025e6:	460b      	mov	r3, r1
 80025e8:	4610      	mov	r0, r2
 80025ea:	4619      	mov	r1, r3
 80025ec:	f04f 0200 	mov.w	r2, #0
 80025f0:	4b19      	ldr	r3, [pc, #100]	; (8002658 <MPU6050_Read_Gyro+0x228>)
 80025f2:	f7fe f94b 	bl	800088c <__aeabi_ddiv>
 80025f6:	4602      	mov	r2, r0
 80025f8:	460b      	mov	r3, r1
 80025fa:	4610      	mov	r0, r2
 80025fc:	4619      	mov	r1, r3
 80025fe:	4b19      	ldr	r3, [pc, #100]	; (8002664 <MPU6050_Read_Gyro+0x234>)
 8002600:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002604:	f7fd fe62 	bl	80002cc <__adddf3>
 8002608:	4602      	mov	r2, r0
 800260a:	460b      	mov	r3, r1
 800260c:	4915      	ldr	r1, [pc, #84]	; (8002664 <MPU6050_Read_Gyro+0x234>)
 800260e:	e9c1 2300 	strd	r2, r3, [r1]
	}
}
 8002612:	bf00      	nop
 8002614:	3708      	adds	r7, #8
 8002616:	46bd      	mov	sp, r7
 8002618:	bd80      	pop	{r7, pc}
 800261a:	bf00      	nop
 800261c:	f3af 8000 	nop.w
 8002620:	00000000 	.word	0x00000000
 8002624:	40606000 	.word	0x40606000
 8002628:	20000440 	.word	0x20000440
 800262c:	200002dc 	.word	0x200002dc
 8002630:	20000520 	.word	0x20000520
 8002634:	20000448 	.word	0x20000448
 8002638:	20000220 	.word	0x20000220
 800263c:	20000370 	.word	0x20000370
 8002640:	20000528 	.word	0x20000528
 8002644:	200002f0 	.word	0x200002f0
 8002648:	20000388 	.word	0x20000388
 800264c:	20000460 	.word	0x20000460
 8002650:	20000468 	.word	0x20000468
 8002654:	20000260 	.word	0x20000260
 8002658:	408f4000 	.word	0x408f4000
 800265c:	20000268 	.word	0x20000268
 8002660:	200002e0 	.word	0x200002e0
 8002664:	20000360 	.word	0x20000360

08002668 <MPU6050_Calibration>:

void MPU6050_Calibration(I2C_HandleTypeDef* hi2c1){
 8002668:	b580      	push	{r7, lr}
 800266a:	b084      	sub	sp, #16
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
	  for (uint8_t i = 0; i < 100; i++) { // Take the average of 100 readings
 8002670:	2300      	movs	r3, #0
 8002672:	73fb      	strb	r3, [r7, #15]
 8002674:	e059      	b.n	800272a <MPU6050_Calibration+0xc2>
		  MPU6050_Read_Accel(hi2c1);
 8002676:	6878      	ldr	r0, [r7, #4]
 8002678:	f7ff fdc6 	bl	8002208 <MPU6050_Read_Accel>
		  MPU6050_Read_Gyro(hi2c1);
 800267c:	6878      	ldr	r0, [r7, #4]
 800267e:	f7ff fed7 	bl	8002430 <MPU6050_Read_Gyro>
		  Ax_0 += Ax;
 8002682:	4b56      	ldr	r3, [pc, #344]	; (80027dc <MPU6050_Calibration+0x174>)
 8002684:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002688:	4b55      	ldr	r3, [pc, #340]	; (80027e0 <MPU6050_Calibration+0x178>)
 800268a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800268e:	f7fd fe1d 	bl	80002cc <__adddf3>
 8002692:	4602      	mov	r2, r0
 8002694:	460b      	mov	r3, r1
 8002696:	4951      	ldr	r1, [pc, #324]	; (80027dc <MPU6050_Calibration+0x174>)
 8002698:	e9c1 2300 	strd	r2, r3, [r1]
		  Ay_0 += Ay;
 800269c:	4b51      	ldr	r3, [pc, #324]	; (80027e4 <MPU6050_Calibration+0x17c>)
 800269e:	e9d3 0100 	ldrd	r0, r1, [r3]
 80026a2:	4b51      	ldr	r3, [pc, #324]	; (80027e8 <MPU6050_Calibration+0x180>)
 80026a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026a8:	f7fd fe10 	bl	80002cc <__adddf3>
 80026ac:	4602      	mov	r2, r0
 80026ae:	460b      	mov	r3, r1
 80026b0:	494c      	ldr	r1, [pc, #304]	; (80027e4 <MPU6050_Calibration+0x17c>)
 80026b2:	e9c1 2300 	strd	r2, r3, [r1]
		  Az_0 += Az;
 80026b6:	4b4d      	ldr	r3, [pc, #308]	; (80027ec <MPU6050_Calibration+0x184>)
 80026b8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80026bc:	4b4c      	ldr	r3, [pc, #304]	; (80027f0 <MPU6050_Calibration+0x188>)
 80026be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026c2:	f7fd fe03 	bl	80002cc <__adddf3>
 80026c6:	4602      	mov	r2, r0
 80026c8:	460b      	mov	r3, r1
 80026ca:	4948      	ldr	r1, [pc, #288]	; (80027ec <MPU6050_Calibration+0x184>)
 80026cc:	e9c1 2300 	strd	r2, r3, [r1]

		  Gx_0 += Gx;
 80026d0:	4b48      	ldr	r3, [pc, #288]	; (80027f4 <MPU6050_Calibration+0x18c>)
 80026d2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80026d6:	4b48      	ldr	r3, [pc, #288]	; (80027f8 <MPU6050_Calibration+0x190>)
 80026d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026dc:	f7fd fdf6 	bl	80002cc <__adddf3>
 80026e0:	4602      	mov	r2, r0
 80026e2:	460b      	mov	r3, r1
 80026e4:	4943      	ldr	r1, [pc, #268]	; (80027f4 <MPU6050_Calibration+0x18c>)
 80026e6:	e9c1 2300 	strd	r2, r3, [r1]
		  Gy_0 += Gy;
 80026ea:	4b44      	ldr	r3, [pc, #272]	; (80027fc <MPU6050_Calibration+0x194>)
 80026ec:	e9d3 0100 	ldrd	r0, r1, [r3]
 80026f0:	4b43      	ldr	r3, [pc, #268]	; (8002800 <MPU6050_Calibration+0x198>)
 80026f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026f6:	f7fd fde9 	bl	80002cc <__adddf3>
 80026fa:	4602      	mov	r2, r0
 80026fc:	460b      	mov	r3, r1
 80026fe:	493f      	ldr	r1, [pc, #252]	; (80027fc <MPU6050_Calibration+0x194>)
 8002700:	e9c1 2300 	strd	r2, r3, [r1]
		  Gz_0 += Gz;
 8002704:	4b3f      	ldr	r3, [pc, #252]	; (8002804 <MPU6050_Calibration+0x19c>)
 8002706:	e9d3 0100 	ldrd	r0, r1, [r3]
 800270a:	4b3f      	ldr	r3, [pc, #252]	; (8002808 <MPU6050_Calibration+0x1a0>)
 800270c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002710:	f7fd fddc 	bl	80002cc <__adddf3>
 8002714:	4602      	mov	r2, r0
 8002716:	460b      	mov	r3, r1
 8002718:	493a      	ldr	r1, [pc, #232]	; (8002804 <MPU6050_Calibration+0x19c>)
 800271a:	e9c1 2300 	strd	r2, r3, [r1]

		  HAL_Delay(10);
 800271e:	200a      	movs	r0, #10
 8002720:	f000 fc16 	bl	8002f50 <HAL_Delay>
	  for (uint8_t i = 0; i < 100; i++) { // Take the average of 100 readings
 8002724:	7bfb      	ldrb	r3, [r7, #15]
 8002726:	3301      	adds	r3, #1
 8002728:	73fb      	strb	r3, [r7, #15]
 800272a:	7bfb      	ldrb	r3, [r7, #15]
 800272c:	2b63      	cmp	r3, #99	; 0x63
 800272e:	d9a2      	bls.n	8002676 <MPU6050_Calibration+0xe>
	  }
	  Ax_0 = Ax_0/100;
 8002730:	4b2a      	ldr	r3, [pc, #168]	; (80027dc <MPU6050_Calibration+0x174>)
 8002732:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002736:	f04f 0200 	mov.w	r2, #0
 800273a:	4b34      	ldr	r3, [pc, #208]	; (800280c <MPU6050_Calibration+0x1a4>)
 800273c:	f7fe f8a6 	bl	800088c <__aeabi_ddiv>
 8002740:	4602      	mov	r2, r0
 8002742:	460b      	mov	r3, r1
 8002744:	4925      	ldr	r1, [pc, #148]	; (80027dc <MPU6050_Calibration+0x174>)
 8002746:	e9c1 2300 	strd	r2, r3, [r1]
	  Ay_0 = Ay_0/100;
 800274a:	4b26      	ldr	r3, [pc, #152]	; (80027e4 <MPU6050_Calibration+0x17c>)
 800274c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002750:	f04f 0200 	mov.w	r2, #0
 8002754:	4b2d      	ldr	r3, [pc, #180]	; (800280c <MPU6050_Calibration+0x1a4>)
 8002756:	f7fe f899 	bl	800088c <__aeabi_ddiv>
 800275a:	4602      	mov	r2, r0
 800275c:	460b      	mov	r3, r1
 800275e:	4921      	ldr	r1, [pc, #132]	; (80027e4 <MPU6050_Calibration+0x17c>)
 8002760:	e9c1 2300 	strd	r2, r3, [r1]
	  Az_0 = Az_0/100;
 8002764:	4b21      	ldr	r3, [pc, #132]	; (80027ec <MPU6050_Calibration+0x184>)
 8002766:	e9d3 0100 	ldrd	r0, r1, [r3]
 800276a:	f04f 0200 	mov.w	r2, #0
 800276e:	4b27      	ldr	r3, [pc, #156]	; (800280c <MPU6050_Calibration+0x1a4>)
 8002770:	f7fe f88c 	bl	800088c <__aeabi_ddiv>
 8002774:	4602      	mov	r2, r0
 8002776:	460b      	mov	r3, r1
 8002778:	491c      	ldr	r1, [pc, #112]	; (80027ec <MPU6050_Calibration+0x184>)
 800277a:	e9c1 2300 	strd	r2, r3, [r1]

	  Gx_0 = Gx_0/100;
 800277e:	4b1d      	ldr	r3, [pc, #116]	; (80027f4 <MPU6050_Calibration+0x18c>)
 8002780:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002784:	f04f 0200 	mov.w	r2, #0
 8002788:	4b20      	ldr	r3, [pc, #128]	; (800280c <MPU6050_Calibration+0x1a4>)
 800278a:	f7fe f87f 	bl	800088c <__aeabi_ddiv>
 800278e:	4602      	mov	r2, r0
 8002790:	460b      	mov	r3, r1
 8002792:	4918      	ldr	r1, [pc, #96]	; (80027f4 <MPU6050_Calibration+0x18c>)
 8002794:	e9c1 2300 	strd	r2, r3, [r1]
	  Gy_0 = Gy_0/100;
 8002798:	4b18      	ldr	r3, [pc, #96]	; (80027fc <MPU6050_Calibration+0x194>)
 800279a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800279e:	f04f 0200 	mov.w	r2, #0
 80027a2:	4b1a      	ldr	r3, [pc, #104]	; (800280c <MPU6050_Calibration+0x1a4>)
 80027a4:	f7fe f872 	bl	800088c <__aeabi_ddiv>
 80027a8:	4602      	mov	r2, r0
 80027aa:	460b      	mov	r3, r1
 80027ac:	4913      	ldr	r1, [pc, #76]	; (80027fc <MPU6050_Calibration+0x194>)
 80027ae:	e9c1 2300 	strd	r2, r3, [r1]
	  Gz_0 = Gz_0/100;
 80027b2:	4b14      	ldr	r3, [pc, #80]	; (8002804 <MPU6050_Calibration+0x19c>)
 80027b4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80027b8:	f04f 0200 	mov.w	r2, #0
 80027bc:	4b13      	ldr	r3, [pc, #76]	; (800280c <MPU6050_Calibration+0x1a4>)
 80027be:	f7fe f865 	bl	800088c <__aeabi_ddiv>
 80027c2:	4602      	mov	r2, r0
 80027c4:	460b      	mov	r3, r1
 80027c6:	490f      	ldr	r1, [pc, #60]	; (8002804 <MPU6050_Calibration+0x19c>)
 80027c8:	e9c1 2300 	strd	r2, r3, [r1]

	  MPU6050_Calib_status = 1;
 80027cc:	4b10      	ldr	r3, [pc, #64]	; (8002810 <MPU6050_Calibration+0x1a8>)
 80027ce:	2201      	movs	r2, #1
 80027d0:	701a      	strb	r2, [r3, #0]
}
 80027d2:	bf00      	nop
 80027d4:	3710      	adds	r7, #16
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bd80      	pop	{r7, pc}
 80027da:	bf00      	nop
 80027dc:	20000470 	.word	0x20000470
 80027e0:	200003f0 	.word	0x200003f0
 80027e4:	200002d0 	.word	0x200002d0
 80027e8:	20000350 	.word	0x20000350
 80027ec:	200002f8 	.word	0x200002f8
 80027f0:	20000450 	.word	0x20000450
 80027f4:	20000388 	.word	0x20000388
 80027f8:	20000220 	.word	0x20000220
 80027fc:	20000460 	.word	0x20000460
 8002800:	20000370 	.word	0x20000370
 8002804:	20000468 	.word	0x20000468
 8002808:	20000528 	.word	0x20000528
 800280c:	40590000 	.word	0x40590000
 8002810:	200002f0 	.word	0x200002f0

08002814 <PIDController_Init>:
#include "myLib/PID.h"

void PIDController_Init(PIDController *pid) {
 8002814:	b480      	push	{r7}
 8002816:	b083      	sub	sp, #12
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]

	/* Clear controller variables */
	pid->integrator = 0.0f;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	f04f 0200 	mov.w	r2, #0
 8002822:	625a      	str	r2, [r3, #36]	; 0x24
	pid->prevError  = 0.0f;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	f04f 0200 	mov.w	r2, #0
 800282a:	629a      	str	r2, [r3, #40]	; 0x28

	pid->differentiator  = 0.0f;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	f04f 0200 	mov.w	r2, #0
 8002832:	62da      	str	r2, [r3, #44]	; 0x2c
	pid->prevMeasurement = 0.0f;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	f04f 0200 	mov.w	r2, #0
 800283a:	631a      	str	r2, [r3, #48]	; 0x30

	pid->out = 0.0f;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	f04f 0200 	mov.w	r2, #0
 8002842:	635a      	str	r2, [r3, #52]	; 0x34

}
 8002844:	bf00      	nop
 8002846:	370c      	adds	r7, #12
 8002848:	46bd      	mov	sp, r7
 800284a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284e:	4770      	bx	lr

08002850 <PIDController_Update>:

float PIDController_Update(PIDController *pid, float setpoint, float measurement) {
 8002850:	b480      	push	{r7}
 8002852:	b087      	sub	sp, #28
 8002854:	af00      	add	r7, sp, #0
 8002856:	60f8      	str	r0, [r7, #12]
 8002858:	ed87 0a02 	vstr	s0, [r7, #8]
 800285c:	edc7 0a01 	vstr	s1, [r7, #4]
	//Error signal
    float error = setpoint - measurement;
 8002860:	ed97 7a02 	vldr	s14, [r7, #8]
 8002864:	edd7 7a01 	vldr	s15, [r7, #4]
 8002868:	ee77 7a67 	vsub.f32	s15, s14, s15
 800286c:	edc7 7a05 	vstr	s15, [r7, #20]
	// Proportional
	float proportional = pid->Kp * error;
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	edd3 7a00 	vldr	s15, [r3]
 8002876:	ed97 7a05 	vldr	s14, [r7, #20]
 800287a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800287e:	edc7 7a04 	vstr	s15, [r7, #16]
	// Integral
	pid->integrator = pid->integrator + 0.5f * pid->Ki * pid->T * (error + pid->prevError);
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	edd3 7a01 	vldr	s15, [r3, #4]
 800288e:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8002892:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	edd3 7a08 	vldr	s15, [r3, #32]
 800289c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	ed93 6a0a 	vldr	s12, [r3, #40]	; 0x28
 80028a6:	edd7 7a05 	vldr	s15, [r7, #20]
 80028aa:	ee76 7a27 	vadd.f32	s15, s12, s15
 80028ae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80028b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

	/* Anti-wind-up via integrator clamping */
    if (pid->integrator > pid->limMaxInt) {
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	edd3 7a07 	vldr	s15, [r3, #28]
 80028c8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80028cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028d0:	dd04      	ble.n	80028dc <PIDController_Update+0x8c>
        pid->integrator = pid->limMaxInt;
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	69da      	ldr	r2, [r3, #28]
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	625a      	str	r2, [r3, #36]	; 0x24
 80028da:	e00e      	b.n	80028fa <PIDController_Update+0xaa>
    } else if (pid->integrator < pid->limMinInt) {
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	edd3 7a06 	vldr	s15, [r3, #24]
 80028e8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80028ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028f0:	d503      	bpl.n	80028fa <PIDController_Update+0xaa>
        pid->integrator = pid->limMinInt;
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	699a      	ldr	r2, [r3, #24]
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	625a      	str	r2, [r3, #36]	; 0x24
    }

	// Derivative (band-limited differentiator)
	pid->differentiator = -(2.0f * pid->Kd * (measurement - pid->prevMeasurement)	/* Note: derivative on measurement, therefore minus sign in front of equation! */
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	edd3 7a02 	vldr	s15, [r3, #8]
 8002900:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 800290a:	edd7 6a01 	vldr	s13, [r7, #4]
 800290e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002912:	ee27 7a27 	vmul.f32	s14, s14, s15
						+ (2.0f * pid->tau - pid->T) * pid->differentiator)
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	edd3 7a03 	vldr	s15, [r3, #12]
 800291c:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	edd3 7a08 	vldr	s15, [r3, #32]
 8002926:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8002930:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002934:	ee77 7a27 	vadd.f32	s15, s14, s15
	pid->differentiator = -(2.0f * pid->Kd * (measurement - pid->prevMeasurement)	/* Note: derivative on measurement, therefore minus sign in front of equation! */
 8002938:	eef1 6a67 	vneg.f32	s13, s15
                        / (2.0f * pid->tau + pid->T);
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	edd3 7a03 	vldr	s15, [r3, #12]
 8002942:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	edd3 7a08 	vldr	s15, [r3, #32]
 800294c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002950:	eec6 7a87 	vdiv.f32	s15, s13, s14
	pid->differentiator = -(2.0f * pid->Kd * (measurement - pid->prevMeasurement)	/* Note: derivative on measurement, therefore minus sign in front of equation! */
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c

		// Compute output and apply limits
	pid->out = proportional + pid->integrator + pid->differentiator;
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8002960:	edd7 7a04 	vldr	s15, [r7, #16]
 8002964:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800296e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34

    if (pid->out > pid->limMax) {
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	edd3 7a05 	vldr	s15, [r3, #20]
 8002984:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002988:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800298c:	dd04      	ble.n	8002998 <PIDController_Update+0x148>
        pid->out = pid->limMax;
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	695a      	ldr	r2, [r3, #20]
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	635a      	str	r2, [r3, #52]	; 0x34
 8002996:	e00e      	b.n	80029b6 <PIDController_Update+0x166>
    } else if (pid->out < pid->limMin) {
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	edd3 7a04 	vldr	s15, [r3, #16]
 80029a4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80029a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029ac:	d503      	bpl.n	80029b6 <PIDController_Update+0x166>
        pid->out = pid->limMin;
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	691a      	ldr	r2, [r3, #16]
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	635a      	str	r2, [r3, #52]	; 0x34
    }

	/* Store error and measurement for later use */
    pid->prevError       = error;
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	697a      	ldr	r2, [r7, #20]
 80029ba:	629a      	str	r2, [r3, #40]	; 0x28
    pid->prevMeasurement = measurement;
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	687a      	ldr	r2, [r7, #4]
 80029c0:	631a      	str	r2, [r3, #48]	; 0x30

	/* Return controller output */
    return pid->out;
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029c6:	ee07 3a90 	vmov	s15, r3
}
 80029ca:	eeb0 0a67 	vmov.f32	s0, s15
 80029ce:	371c      	adds	r7, #28
 80029d0:	46bd      	mov	sp, r7
 80029d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d6:	4770      	bx	lr

080029d8 <setDirection>:
#include "myLib/StepperMotor.h"

//steps_per_rev_eff = (int)(steps_per_rev_motor * microsteps_set * 2);


void setDirection(uint8_t dir){
 80029d8:	b580      	push	{r7, lr}
 80029da:	b082      	sub	sp, #8
 80029dc:	af00      	add	r7, sp, #0
 80029de:	4603      	mov	r3, r0
 80029e0:	71fb      	strb	r3, [r7, #7]
	if (dir == 1){
 80029e2:	79fb      	ldrb	r3, [r7, #7]
 80029e4:	2b01      	cmp	r3, #1
 80029e6:	d10a      	bne.n	80029fe <setDirection+0x26>
		HAL_GPIO_WritePin(GPIOA, DIR_DX_Pin, GPIO_PIN_SET);
 80029e8:	2201      	movs	r2, #1
 80029ea:	2102      	movs	r1, #2
 80029ec:	480b      	ldr	r0, [pc, #44]	; (8002a1c <setDirection+0x44>)
 80029ee:	f000 fe0b 	bl	8003608 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, DIR_SX_Pin, GPIO_PIN_SET);
 80029f2:	2201      	movs	r2, #1
 80029f4:	2180      	movs	r1, #128	; 0x80
 80029f6:	4809      	ldr	r0, [pc, #36]	; (8002a1c <setDirection+0x44>)
 80029f8:	f000 fe06 	bl	8003608 <HAL_GPIO_WritePin>
	}else{
		HAL_GPIO_WritePin(GPIOA, DIR_DX_Pin, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(GPIOA, DIR_SX_Pin, GPIO_PIN_RESET);
	}
}
 80029fc:	e009      	b.n	8002a12 <setDirection+0x3a>
		HAL_GPIO_WritePin(GPIOA, DIR_DX_Pin, GPIO_PIN_RESET);
 80029fe:	2200      	movs	r2, #0
 8002a00:	2102      	movs	r1, #2
 8002a02:	4806      	ldr	r0, [pc, #24]	; (8002a1c <setDirection+0x44>)
 8002a04:	f000 fe00 	bl	8003608 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, DIR_SX_Pin, GPIO_PIN_RESET);
 8002a08:	2200      	movs	r2, #0
 8002a0a:	2180      	movs	r1, #128	; 0x80
 8002a0c:	4803      	ldr	r0, [pc, #12]	; (8002a1c <setDirection+0x44>)
 8002a0e:	f000 fdfb 	bl	8003608 <HAL_GPIO_WritePin>
}
 8002a12:	bf00      	nop
 8002a14:	3708      	adds	r7, #8
 8002a16:	46bd      	mov	sp, r7
 8002a18:	bd80      	pop	{r7, pc}
 8002a1a:	bf00      	nop
 8002a1c:	40020000 	.word	0x40020000

08002a20 <getDirection>:

void getDirection(float VELOCITY){
 8002a20:	b480      	push	{r7}
 8002a22:	b083      	sub	sp, #12
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	ed87 0a01 	vstr	s0, [r7, #4]
	if(VELOCITY>0){
 8002a2a:	edd7 7a01 	vldr	s15, [r7, #4]
 8002a2e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002a32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a36:	dd03      	ble.n	8002a40 <getDirection+0x20>
		direction = 0;
 8002a38:	4b06      	ldr	r3, [pc, #24]	; (8002a54 <getDirection+0x34>)
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	701a      	strb	r2, [r3, #0]
	}else{
		direction = 1;
	}
}
 8002a3e:	e002      	b.n	8002a46 <getDirection+0x26>
		direction = 1;
 8002a40:	4b04      	ldr	r3, [pc, #16]	; (8002a54 <getDirection+0x34>)
 8002a42:	2201      	movs	r2, #1
 8002a44:	701a      	strb	r2, [r3, #0]
}
 8002a46:	bf00      	nop
 8002a48:	370c      	adds	r7, #12
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a50:	4770      	bx	lr
 8002a52:	bf00      	nop
 8002a54:	2000036a 	.word	0x2000036a

08002a58 <setSpeedPID>:
//	float x = 0.6381375/speed;
	TIM2->ARR = (uint32_t)((100-1)*x);	// (100-1)*16
	TIM3->ARR = (uint32_t)((100-1)*x);	// (100-1)*16
}

void setSpeedPID(float speedPID){ // deg/s
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b084      	sub	sp, #16
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	ed87 0a01 	vstr	s0, [r7, #4]
//	s_per_rev =
//	s_per_pulse = s_per_rev/steps_per_rev_eff;
//	0.32 = s_per_pulse * steps_per_rev_eff;
//	angular_speed = 2*M_PI/0.32;

	if(speedPID < 0.0){
 8002a62:	edd7 7a01 	vldr	s15, [r7, #4]
 8002a66:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002a6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a6e:	d505      	bpl.n	8002a7c <setSpeedPID+0x24>
		speedPID = speedPID * (-1.0f);
 8002a70:	edd7 7a01 	vldr	s15, [r7, #4]
 8002a74:	eef1 7a67 	vneg.f32	s15, s15
 8002a78:	edc7 7a01 	vstr	s15, [r7, #4]
	}

	float x = (float)( (360.0f)/(0.32*speedPID) );	// deg/sec
 8002a7c:	6878      	ldr	r0, [r7, #4]
 8002a7e:	f7fd fd83 	bl	8000588 <__aeabi_f2d>
 8002a82:	a31c      	add	r3, pc, #112	; (adr r3, 8002af4 <setSpeedPID+0x9c>)
 8002a84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a88:	f7fd fdd6 	bl	8000638 <__aeabi_dmul>
 8002a8c:	4602      	mov	r2, r0
 8002a8e:	460b      	mov	r3, r1
 8002a90:	f04f 0000 	mov.w	r0, #0
 8002a94:	4914      	ldr	r1, [pc, #80]	; (8002ae8 <setSpeedPID+0x90>)
 8002a96:	f7fd fef9 	bl	800088c <__aeabi_ddiv>
 8002a9a:	4602      	mov	r2, r0
 8002a9c:	460b      	mov	r3, r1
 8002a9e:	4610      	mov	r0, r2
 8002aa0:	4619      	mov	r1, r3
 8002aa2:	f7fe f8c1 	bl	8000c28 <__aeabi_d2f>
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	60fb      	str	r3, [r7, #12]

	//float x = (float)( (0.32*speedPID/(2*M_PI)) );	// deg/sec
	TIM2->ARR = (uint32_t)((100-1)*x);	// (100-1)*16
 8002aaa:	edd7 7a03 	vldr	s15, [r7, #12]
 8002aae:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8002aec <setSpeedPID+0x94>
 8002ab2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002ab6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002aba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002abe:	ee17 2a90 	vmov	r2, s15
 8002ac2:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM3->ARR = (uint32_t)((100-1)*x);	// (100-1)*16
 8002ac4:	edd7 7a03 	vldr	s15, [r7, #12]
 8002ac8:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8002aec <setSpeedPID+0x94>
 8002acc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002ad0:	4b07      	ldr	r3, [pc, #28]	; (8002af0 <setSpeedPID+0x98>)
 8002ad2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002ad6:	ee17 2a90 	vmov	r2, s15
 8002ada:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8002adc:	bf00      	nop
 8002ade:	3710      	adds	r7, #16
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	bd80      	pop	{r7, pc}
 8002ae4:	f3af 8000 	nop.w
 8002ae8:	40768000 	.word	0x40768000
 8002aec:	42c60000 	.word	0x42c60000
 8002af0:	40000400 	.word	0x40000400
 8002af4:	47ae147b 	.word	0x47ae147b
 8002af8:	3fd47ae1 	.word	0x3fd47ae1

08002afc <simpleGO>:

void simpleGO(TIM_HandleTypeDef* htim2, TIM_HandleTypeDef* htim3){
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b082      	sub	sp, #8
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
 8002b04:	6039      	str	r1, [r7, #0]
	//HAL_TIM_Base_Start_IT(&htim6);

	HAL_GPIO_WritePin(GPIOA, DIR_DX_Pin, GPIO_PIN_SET);
 8002b06:	2201      	movs	r2, #1
 8002b08:	2102      	movs	r1, #2
 8002b0a:	4811      	ldr	r0, [pc, #68]	; (8002b50 <simpleGO+0x54>)
 8002b0c:	f000 fd7c 	bl	8003608 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, DIR_SX_Pin, GPIO_PIN_SET);
 8002b10:	2201      	movs	r2, #1
 8002b12:	2180      	movs	r1, #128	; 0x80
 8002b14:	480e      	ldr	r0, [pc, #56]	; (8002b50 <simpleGO+0x54>)
 8002b16:	f000 fd77 	bl	8003608 <HAL_GPIO_WritePin>

	if(HAL_TIM_OC_GetState(htim2) != HAL_TIM_STATE_BUSY){
 8002b1a:	6878      	ldr	r0, [r7, #4]
 8002b1c:	f003 f810 	bl	8005b40 <HAL_TIM_OC_GetState>
 8002b20:	4603      	mov	r3, r0
 8002b22:	2b02      	cmp	r3, #2
 8002b24:	d003      	beq.n	8002b2e <simpleGO+0x32>
		HAL_TIM_OC_Start_IT(htim2, TIM_CHANNEL_1);
 8002b26:	2100      	movs	r1, #0
 8002b28:	6878      	ldr	r0, [r7, #4]
 8002b2a:	f002 fbf9 	bl	8005320 <HAL_TIM_OC_Start_IT>
	}

	if(HAL_TIM_OC_GetState(htim3) != HAL_TIM_STATE_BUSY){
 8002b2e:	6838      	ldr	r0, [r7, #0]
 8002b30:	f003 f806 	bl	8005b40 <HAL_TIM_OC_GetState>
 8002b34:	4603      	mov	r3, r0
 8002b36:	2b02      	cmp	r3, #2
 8002b38:	d003      	beq.n	8002b42 <simpleGO+0x46>
		HAL_TIM_OC_Start_IT(htim3, TIM_CHANNEL_1);
 8002b3a:	2100      	movs	r1, #0
 8002b3c:	6838      	ldr	r0, [r7, #0]
 8002b3e:	f002 fbef 	bl	8005320 <HAL_TIM_OC_Start_IT>
	}
	readBuf[0]=0;
 8002b42:	4b04      	ldr	r3, [pc, #16]	; (8002b54 <simpleGO+0x58>)
 8002b44:	2200      	movs	r2, #0
 8002b46:	701a      	strb	r2, [r3, #0]
}
 8002b48:	bf00      	nop
 8002b4a:	3708      	adds	r7, #8
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	bd80      	pop	{r7, pc}
 8002b50:	40020000 	.word	0x40020000
 8002b54:	20000530 	.word	0x20000530

08002b58 <goForward>:

void goForward(TIM_HandleTypeDef* htim2, TIM_HandleTypeDef* htim3, TIM_HandleTypeDef* htim6, float VELOCITY, float metri){
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b088      	sub	sp, #32
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6178      	str	r0, [r7, #20]
 8002b60:	6139      	str	r1, [r7, #16]
 8002b62:	60fa      	str	r2, [r7, #12]
 8002b64:	ed87 0a02 	vstr	s0, [r7, #8]
 8002b68:	edc7 0a01 	vstr	s1, [r7, #4]
	HAL_TIM_Base_Start_IT(htim6);
 8002b6c:	68f8      	ldr	r0, [r7, #12]
 8002b6e:	f002 fadf 	bl	8005130 <HAL_TIM_Base_Start_IT>
	float seconds = metri/VELOCITY;
 8002b72:	edd7 6a01 	vldr	s13, [r7, #4]
 8002b76:	ed97 7a02 	vldr	s14, [r7, #8]
 8002b7a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002b7e:	edc7 7a07 	vstr	s15, [r7, #28]
	TIM6->ARR = (uint32_t)(10000/seconds);
 8002b82:	eddf 6a12 	vldr	s13, [pc, #72]	; 8002bcc <goForward+0x74>
 8002b86:	ed97 7a07 	vldr	s14, [r7, #28]
 8002b8a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002b8e:	4b10      	ldr	r3, [pc, #64]	; (8002bd0 <goForward+0x78>)
 8002b90:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002b94:	ee17 2a90 	vmov	r2, s15
 8002b98:	62da      	str	r2, [r3, #44]	; 0x2c

	HAL_GPIO_WritePin(GPIOA, DIR_DX_Pin, GPIO_PIN_SET);
 8002b9a:	2201      	movs	r2, #1
 8002b9c:	2102      	movs	r1, #2
 8002b9e:	480d      	ldr	r0, [pc, #52]	; (8002bd4 <goForward+0x7c>)
 8002ba0:	f000 fd32 	bl	8003608 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, DIR_SX_Pin, GPIO_PIN_SET);
 8002ba4:	2201      	movs	r2, #1
 8002ba6:	2180      	movs	r1, #128	; 0x80
 8002ba8:	480a      	ldr	r0, [pc, #40]	; (8002bd4 <goForward+0x7c>)
 8002baa:	f000 fd2d 	bl	8003608 <HAL_GPIO_WritePin>
	HAL_TIM_OC_Start_IT(htim2, TIM_CHANNEL_1);
 8002bae:	2100      	movs	r1, #0
 8002bb0:	6978      	ldr	r0, [r7, #20]
 8002bb2:	f002 fbb5 	bl	8005320 <HAL_TIM_OC_Start_IT>
	HAL_TIM_OC_Start_IT(htim3, TIM_CHANNEL_1);
 8002bb6:	2100      	movs	r1, #0
 8002bb8:	6938      	ldr	r0, [r7, #16]
 8002bba:	f002 fbb1 	bl	8005320 <HAL_TIM_OC_Start_IT>
	readBuf[0]=0;
 8002bbe:	4b06      	ldr	r3, [pc, #24]	; (8002bd8 <goForward+0x80>)
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	701a      	strb	r2, [r3, #0]
}
 8002bc4:	bf00      	nop
 8002bc6:	3720      	adds	r7, #32
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	bd80      	pop	{r7, pc}
 8002bcc:	461c4000 	.word	0x461c4000
 8002bd0:	40001000 	.word	0x40001000
 8002bd4:	40020000 	.word	0x40020000
 8002bd8:	20000530 	.word	0x20000530

08002bdc <goBackward>:

void goBackward(TIM_HandleTypeDef* htim2, TIM_HandleTypeDef* htim3, TIM_HandleTypeDef* htim6, float VELOCITY, float metri){
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b088      	sub	sp, #32
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6178      	str	r0, [r7, #20]
 8002be4:	6139      	str	r1, [r7, #16]
 8002be6:	60fa      	str	r2, [r7, #12]
 8002be8:	ed87 0a02 	vstr	s0, [r7, #8]
 8002bec:	edc7 0a01 	vstr	s1, [r7, #4]
	HAL_TIM_Base_Start_IT(htim6);
 8002bf0:	68f8      	ldr	r0, [r7, #12]
 8002bf2:	f002 fa9d 	bl	8005130 <HAL_TIM_Base_Start_IT>
	float seconds = metri/VELOCITY;
 8002bf6:	edd7 6a01 	vldr	s13, [r7, #4]
 8002bfa:	ed97 7a02 	vldr	s14, [r7, #8]
 8002bfe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002c02:	edc7 7a07 	vstr	s15, [r7, #28]
	TIM6->ARR = (uint32_t)(10000/seconds);
 8002c06:	eddf 6a12 	vldr	s13, [pc, #72]	; 8002c50 <goBackward+0x74>
 8002c0a:	ed97 7a07 	vldr	s14, [r7, #28]
 8002c0e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002c12:	4b10      	ldr	r3, [pc, #64]	; (8002c54 <goBackward+0x78>)
 8002c14:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002c18:	ee17 2a90 	vmov	r2, s15
 8002c1c:	62da      	str	r2, [r3, #44]	; 0x2c

	HAL_GPIO_WritePin(GPIOA, DIR_DX_Pin, GPIO_PIN_RESET);
 8002c1e:	2200      	movs	r2, #0
 8002c20:	2102      	movs	r1, #2
 8002c22:	480d      	ldr	r0, [pc, #52]	; (8002c58 <goBackward+0x7c>)
 8002c24:	f000 fcf0 	bl	8003608 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, DIR_SX_Pin, GPIO_PIN_RESET);
 8002c28:	2200      	movs	r2, #0
 8002c2a:	2180      	movs	r1, #128	; 0x80
 8002c2c:	480a      	ldr	r0, [pc, #40]	; (8002c58 <goBackward+0x7c>)
 8002c2e:	f000 fceb 	bl	8003608 <HAL_GPIO_WritePin>
	HAL_TIM_OC_Start_IT(htim2, TIM_CHANNEL_1);
 8002c32:	2100      	movs	r1, #0
 8002c34:	6978      	ldr	r0, [r7, #20]
 8002c36:	f002 fb73 	bl	8005320 <HAL_TIM_OC_Start_IT>
	HAL_TIM_OC_Start_IT(htim3, TIM_CHANNEL_1);
 8002c3a:	2100      	movs	r1, #0
 8002c3c:	6938      	ldr	r0, [r7, #16]
 8002c3e:	f002 fb6f 	bl	8005320 <HAL_TIM_OC_Start_IT>
	readBuf[0]=0;
 8002c42:	4b06      	ldr	r3, [pc, #24]	; (8002c5c <goBackward+0x80>)
 8002c44:	2200      	movs	r2, #0
 8002c46:	701a      	strb	r2, [r3, #0]
}
 8002c48:	bf00      	nop
 8002c4a:	3720      	adds	r7, #32
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	bd80      	pop	{r7, pc}
 8002c50:	461c4000 	.word	0x461c4000
 8002c54:	40001000 	.word	0x40001000
 8002c58:	40020000 	.word	0x40020000
 8002c5c:	20000530 	.word	0x20000530

08002c60 <rotateL>:

void rotateL(TIM_HandleTypeDef* htim2, TIM_HandleTypeDef* htim3, TIM_HandleTypeDef* htim6, float VELOCITY, float rad){
 8002c60:	b5b0      	push	{r4, r5, r7, lr}
 8002c62:	b088      	sub	sp, #32
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6178      	str	r0, [r7, #20]
 8002c68:	6139      	str	r1, [r7, #16]
 8002c6a:	60fa      	str	r2, [r7, #12]
 8002c6c:	ed87 0a02 	vstr	s0, [r7, #8]
 8002c70:	edc7 0a01 	vstr	s1, [r7, #4]
	HAL_TIM_Base_Start_IT(htim6);
 8002c74:	68f8      	ldr	r0, [r7, #12]
 8002c76:	f002 fa5b 	bl	8005130 <HAL_TIM_Base_Start_IT>
//	float metri = rad/L_body;
	float 	seconds = (rad*L_body)/VELOCITY;
 8002c7a:	6878      	ldr	r0, [r7, #4]
 8002c7c:	f7fd fc84 	bl	8000588 <__aeabi_f2d>
 8002c80:	a323      	add	r3, pc, #140	; (adr r3, 8002d10 <rotateL+0xb0>)
 8002c82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c86:	f7fd fcd7 	bl	8000638 <__aeabi_dmul>
 8002c8a:	4602      	mov	r2, r0
 8002c8c:	460b      	mov	r3, r1
 8002c8e:	4614      	mov	r4, r2
 8002c90:	461d      	mov	r5, r3
 8002c92:	68b8      	ldr	r0, [r7, #8]
 8002c94:	f7fd fc78 	bl	8000588 <__aeabi_f2d>
 8002c98:	4602      	mov	r2, r0
 8002c9a:	460b      	mov	r3, r1
 8002c9c:	4620      	mov	r0, r4
 8002c9e:	4629      	mov	r1, r5
 8002ca0:	f7fd fdf4 	bl	800088c <__aeabi_ddiv>
 8002ca4:	4602      	mov	r2, r0
 8002ca6:	460b      	mov	r3, r1
 8002ca8:	4610      	mov	r0, r2
 8002caa:	4619      	mov	r1, r3
 8002cac:	f7fd ffbc 	bl	8000c28 <__aeabi_d2f>
 8002cb0:	4603      	mov	r3, r0
 8002cb2:	61fb      	str	r3, [r7, #28]
	TIM6->ARR = (uint32_t)(10000/seconds);
 8002cb4:	eddf 6a12 	vldr	s13, [pc, #72]	; 8002d00 <rotateL+0xa0>
 8002cb8:	ed97 7a07 	vldr	s14, [r7, #28]
 8002cbc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002cc0:	4b10      	ldr	r3, [pc, #64]	; (8002d04 <rotateL+0xa4>)
 8002cc2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002cc6:	ee17 2a90 	vmov	r2, s15
 8002cca:	62da      	str	r2, [r3, #44]	; 0x2c

	HAL_GPIO_WritePin(GPIOA, DIR_DX_Pin, GPIO_PIN_SET);
 8002ccc:	2201      	movs	r2, #1
 8002cce:	2102      	movs	r1, #2
 8002cd0:	480d      	ldr	r0, [pc, #52]	; (8002d08 <rotateL+0xa8>)
 8002cd2:	f000 fc99 	bl	8003608 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, DIR_SX_Pin, GPIO_PIN_SET);
 8002cd6:	2201      	movs	r2, #1
 8002cd8:	2180      	movs	r1, #128	; 0x80
 8002cda:	480b      	ldr	r0, [pc, #44]	; (8002d08 <rotateL+0xa8>)
 8002cdc:	f000 fc94 	bl	8003608 <HAL_GPIO_WritePin>
	HAL_TIM_OC_Start_IT(htim2, TIM_CHANNEL_1);
 8002ce0:	2100      	movs	r1, #0
 8002ce2:	6978      	ldr	r0, [r7, #20]
 8002ce4:	f002 fb1c 	bl	8005320 <HAL_TIM_OC_Start_IT>
	HAL_TIM_OC_Stop_IT(htim3, TIM_CHANNEL_1);
 8002ce8:	2100      	movs	r1, #0
 8002cea:	6938      	ldr	r0, [r7, #16]
 8002cec:	f002 fc26 	bl	800553c <HAL_TIM_OC_Stop_IT>

	readBuf[0]=0;
 8002cf0:	4b06      	ldr	r3, [pc, #24]	; (8002d0c <rotateL+0xac>)
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	701a      	strb	r2, [r3, #0]
}
 8002cf6:	bf00      	nop
 8002cf8:	3720      	adds	r7, #32
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bdb0      	pop	{r4, r5, r7, pc}
 8002cfe:	bf00      	nop
 8002d00:	461c4000 	.word	0x461c4000
 8002d04:	40001000 	.word	0x40001000
 8002d08:	40020000 	.word	0x40020000
 8002d0c:	20000530 	.word	0x20000530
 8002d10:	1eb851ec 	.word	0x1eb851ec
 8002d14:	3fc1eb85 	.word	0x3fc1eb85

08002d18 <rotateR>:

void rotateR(TIM_HandleTypeDef* htim2, TIM_HandleTypeDef* htim3, TIM_HandleTypeDef* htim6, float VELOCITY, float rad){
 8002d18:	b5b0      	push	{r4, r5, r7, lr}
 8002d1a:	b088      	sub	sp, #32
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6178      	str	r0, [r7, #20]
 8002d20:	6139      	str	r1, [r7, #16]
 8002d22:	60fa      	str	r2, [r7, #12]
 8002d24:	ed87 0a02 	vstr	s0, [r7, #8]
 8002d28:	edc7 0a01 	vstr	s1, [r7, #4]
	HAL_TIM_Base_Start_IT(htim6);
 8002d2c:	68f8      	ldr	r0, [r7, #12]
 8002d2e:	f002 f9ff 	bl	8005130 <HAL_TIM_Base_Start_IT>
//	float metri = rad/L_body;
	float seconds = (rad*L_body)/VELOCITY;
 8002d32:	6878      	ldr	r0, [r7, #4]
 8002d34:	f7fd fc28 	bl	8000588 <__aeabi_f2d>
 8002d38:	a323      	add	r3, pc, #140	; (adr r3, 8002dc8 <rotateR+0xb0>)
 8002d3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d3e:	f7fd fc7b 	bl	8000638 <__aeabi_dmul>
 8002d42:	4602      	mov	r2, r0
 8002d44:	460b      	mov	r3, r1
 8002d46:	4614      	mov	r4, r2
 8002d48:	461d      	mov	r5, r3
 8002d4a:	68b8      	ldr	r0, [r7, #8]
 8002d4c:	f7fd fc1c 	bl	8000588 <__aeabi_f2d>
 8002d50:	4602      	mov	r2, r0
 8002d52:	460b      	mov	r3, r1
 8002d54:	4620      	mov	r0, r4
 8002d56:	4629      	mov	r1, r5
 8002d58:	f7fd fd98 	bl	800088c <__aeabi_ddiv>
 8002d5c:	4602      	mov	r2, r0
 8002d5e:	460b      	mov	r3, r1
 8002d60:	4610      	mov	r0, r2
 8002d62:	4619      	mov	r1, r3
 8002d64:	f7fd ff60 	bl	8000c28 <__aeabi_d2f>
 8002d68:	4603      	mov	r3, r0
 8002d6a:	61fb      	str	r3, [r7, #28]
	TIM6->ARR = (uint32_t)(10000/seconds);
 8002d6c:	eddf 6a12 	vldr	s13, [pc, #72]	; 8002db8 <rotateR+0xa0>
 8002d70:	ed97 7a07 	vldr	s14, [r7, #28]
 8002d74:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002d78:	4b10      	ldr	r3, [pc, #64]	; (8002dbc <rotateR+0xa4>)
 8002d7a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002d7e:	ee17 2a90 	vmov	r2, s15
 8002d82:	62da      	str	r2, [r3, #44]	; 0x2c
	HAL_GPIO_WritePin(GPIOA, DIR_DX_Pin, GPIO_PIN_SET);
 8002d84:	2201      	movs	r2, #1
 8002d86:	2102      	movs	r1, #2
 8002d88:	480d      	ldr	r0, [pc, #52]	; (8002dc0 <rotateR+0xa8>)
 8002d8a:	f000 fc3d 	bl	8003608 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, DIR_SX_Pin, GPIO_PIN_SET);
 8002d8e:	2201      	movs	r2, #1
 8002d90:	2180      	movs	r1, #128	; 0x80
 8002d92:	480b      	ldr	r0, [pc, #44]	; (8002dc0 <rotateR+0xa8>)
 8002d94:	f000 fc38 	bl	8003608 <HAL_GPIO_WritePin>
	HAL_TIM_OC_Stop_IT(htim2, TIM_CHANNEL_1);
 8002d98:	2100      	movs	r1, #0
 8002d9a:	6978      	ldr	r0, [r7, #20]
 8002d9c:	f002 fbce 	bl	800553c <HAL_TIM_OC_Stop_IT>
	HAL_TIM_OC_Start_IT(htim3, TIM_CHANNEL_1);
 8002da0:	2100      	movs	r1, #0
 8002da2:	6938      	ldr	r0, [r7, #16]
 8002da4:	f002 fabc 	bl	8005320 <HAL_TIM_OC_Start_IT>
	readBuf[0]=0;
 8002da8:	4b06      	ldr	r3, [pc, #24]	; (8002dc4 <rotateR+0xac>)
 8002daa:	2200      	movs	r2, #0
 8002dac:	701a      	strb	r2, [r3, #0]

}
 8002dae:	bf00      	nop
 8002db0:	3720      	adds	r7, #32
 8002db2:	46bd      	mov	sp, r7
 8002db4:	bdb0      	pop	{r4, r5, r7, pc}
 8002db6:	bf00      	nop
 8002db8:	461c4000 	.word	0x461c4000
 8002dbc:	40001000 	.word	0x40001000
 8002dc0:	40020000 	.word	0x40020000
 8002dc4:	20000530 	.word	0x20000530
 8002dc8:	1eb851ec 	.word	0x1eb851ec
 8002dcc:	3fc1eb85 	.word	0x3fc1eb85

08002dd0 <stopMotor>:

void stopMotor(TIM_HandleTypeDef* htim2, TIM_HandleTypeDef* htim3, TIM_HandleTypeDef* htim6){
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b084      	sub	sp, #16
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	60f8      	str	r0, [r7, #12]
 8002dd8:	60b9      	str	r1, [r7, #8]
 8002dda:	607a      	str	r2, [r7, #4]
	HAL_TIM_OC_Stop_IT(htim2, TIM_CHANNEL_1);
 8002ddc:	2100      	movs	r1, #0
 8002dde:	68f8      	ldr	r0, [r7, #12]
 8002de0:	f002 fbac 	bl	800553c <HAL_TIM_OC_Stop_IT>
	HAL_TIM_OC_Stop_IT(htim3, TIM_CHANNEL_1);
 8002de4:	2100      	movs	r1, #0
 8002de6:	68b8      	ldr	r0, [r7, #8]
 8002de8:	f002 fba8 	bl	800553c <HAL_TIM_OC_Stop_IT>
	HAL_TIM_Base_Stop_IT(htim6);
 8002dec:	6878      	ldr	r0, [r7, #4]
 8002dee:	f002 fa0f 	bl	8005210 <HAL_TIM_Base_Stop_IT>
	__HAL_TIM_CLEAR_FLAG(htim6, TIM_SR_UIF);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f06f 0201 	mvn.w	r2, #1
 8002dfa:	611a      	str	r2, [r3, #16]
	__HAL_TIM_CLEAR_FLAG(htim6, TIM_IT_UPDATE);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f06f 0201 	mvn.w	r2, #1
 8002e04:	611a      	str	r2, [r3, #16]
	readBuf[0]=0;
 8002e06:	4b03      	ldr	r3, [pc, #12]	; (8002e14 <stopMotor+0x44>)
 8002e08:	2200      	movs	r2, #0
 8002e0a:	701a      	strb	r2, [r3, #0]
//	i=0; // escludo eventuali overflow
//	j=0;
}
 8002e0c:	bf00      	nop
 8002e0e:	3710      	adds	r7, #16
 8002e10:	46bd      	mov	sp, r7
 8002e12:	bd80      	pop	{r7, pc}
 8002e14:	20000530 	.word	0x20000530

08002e18 <Reset_Handler>:
    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  

  ldr   sp, =_estack      /* set stack pointer */
 8002e18:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002e50 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002e1c:	480d      	ldr	r0, [pc, #52]	; (8002e54 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002e1e:	490e      	ldr	r1, [pc, #56]	; (8002e58 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002e20:	4a0e      	ldr	r2, [pc, #56]	; (8002e5c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002e22:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002e24:	e002      	b.n	8002e2c <LoopCopyDataInit>

08002e26 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002e26:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002e28:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002e2a:	3304      	adds	r3, #4

08002e2c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002e2c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002e2e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002e30:	d3f9      	bcc.n	8002e26 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002e32:	4a0b      	ldr	r2, [pc, #44]	; (8002e60 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002e34:	4c0b      	ldr	r4, [pc, #44]	; (8002e64 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002e36:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002e38:	e001      	b.n	8002e3e <LoopFillZerobss>

08002e3a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002e3a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002e3c:	3204      	adds	r2, #4

08002e3e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002e3e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002e40:	d3fb      	bcc.n	8002e3a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002e42:	f7ff f933 	bl	80020ac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002e46:	f004 f849 	bl	8006edc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002e4a:	f7fe fa4d 	bl	80012e8 <main>
  bx  lr    
 8002e4e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002e50:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002e54:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002e58:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8002e5c:	0800c3c0 	.word	0x0800c3c0
  ldr r2, =_sbss
 8002e60:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8002e64:	20000548 	.word	0x20000548

08002e68 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002e68:	e7fe      	b.n	8002e68 <ADC_IRQHandler>
	...

08002e6c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002e70:	4b0e      	ldr	r3, [pc, #56]	; (8002eac <HAL_Init+0x40>)
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	4a0d      	ldr	r2, [pc, #52]	; (8002eac <HAL_Init+0x40>)
 8002e76:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002e7a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002e7c:	4b0b      	ldr	r3, [pc, #44]	; (8002eac <HAL_Init+0x40>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	4a0a      	ldr	r2, [pc, #40]	; (8002eac <HAL_Init+0x40>)
 8002e82:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002e86:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002e88:	4b08      	ldr	r3, [pc, #32]	; (8002eac <HAL_Init+0x40>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	4a07      	ldr	r2, [pc, #28]	; (8002eac <HAL_Init+0x40>)
 8002e8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e92:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002e94:	2003      	movs	r0, #3
 8002e96:	f000 f94f 	bl	8003138 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002e9a:	2000      	movs	r0, #0
 8002e9c:	f000 f808 	bl	8002eb0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002ea0:	f7fe fe58 	bl	8001b54 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002ea4:	2300      	movs	r3, #0
}
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	bd80      	pop	{r7, pc}
 8002eaa:	bf00      	nop
 8002eac:	40023c00 	.word	0x40023c00

08002eb0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b082      	sub	sp, #8
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002eb8:	4b12      	ldr	r3, [pc, #72]	; (8002f04 <HAL_InitTick+0x54>)
 8002eba:	681a      	ldr	r2, [r3, #0]
 8002ebc:	4b12      	ldr	r3, [pc, #72]	; (8002f08 <HAL_InitTick+0x58>)
 8002ebe:	781b      	ldrb	r3, [r3, #0]
 8002ec0:	4619      	mov	r1, r3
 8002ec2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002ec6:	fbb3 f3f1 	udiv	r3, r3, r1
 8002eca:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ece:	4618      	mov	r0, r3
 8002ed0:	f000 f967 	bl	80031a2 <HAL_SYSTICK_Config>
 8002ed4:	4603      	mov	r3, r0
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d001      	beq.n	8002ede <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002eda:	2301      	movs	r3, #1
 8002edc:	e00e      	b.n	8002efc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2b0f      	cmp	r3, #15
 8002ee2:	d80a      	bhi.n	8002efa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	6879      	ldr	r1, [r7, #4]
 8002ee8:	f04f 30ff 	mov.w	r0, #4294967295
 8002eec:	f000 f92f 	bl	800314e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002ef0:	4a06      	ldr	r2, [pc, #24]	; (8002f0c <HAL_InitTick+0x5c>)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	e000      	b.n	8002efc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002efa:	2301      	movs	r3, #1
}
 8002efc:	4618      	mov	r0, r3
 8002efe:	3708      	adds	r7, #8
 8002f00:	46bd      	mov	sp, r7
 8002f02:	bd80      	pop	{r7, pc}
 8002f04:	20000004 	.word	0x20000004
 8002f08:	2000000c 	.word	0x2000000c
 8002f0c:	20000008 	.word	0x20000008

08002f10 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002f10:	b480      	push	{r7}
 8002f12:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002f14:	4b06      	ldr	r3, [pc, #24]	; (8002f30 <HAL_IncTick+0x20>)
 8002f16:	781b      	ldrb	r3, [r3, #0]
 8002f18:	461a      	mov	r2, r3
 8002f1a:	4b06      	ldr	r3, [pc, #24]	; (8002f34 <HAL_IncTick+0x24>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	4413      	add	r3, r2
 8002f20:	4a04      	ldr	r2, [pc, #16]	; (8002f34 <HAL_IncTick+0x24>)
 8002f22:	6013      	str	r3, [r2, #0]
}
 8002f24:	bf00      	nop
 8002f26:	46bd      	mov	sp, r7
 8002f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2c:	4770      	bx	lr
 8002f2e:	bf00      	nop
 8002f30:	2000000c 	.word	0x2000000c
 8002f34:	20000534 	.word	0x20000534

08002f38 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002f38:	b480      	push	{r7}
 8002f3a:	af00      	add	r7, sp, #0
  return uwTick;
 8002f3c:	4b03      	ldr	r3, [pc, #12]	; (8002f4c <HAL_GetTick+0x14>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
}
 8002f40:	4618      	mov	r0, r3
 8002f42:	46bd      	mov	sp, r7
 8002f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f48:	4770      	bx	lr
 8002f4a:	bf00      	nop
 8002f4c:	20000534 	.word	0x20000534

08002f50 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b084      	sub	sp, #16
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002f58:	f7ff ffee 	bl	8002f38 <HAL_GetTick>
 8002f5c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f68:	d005      	beq.n	8002f76 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002f6a:	4b0a      	ldr	r3, [pc, #40]	; (8002f94 <HAL_Delay+0x44>)
 8002f6c:	781b      	ldrb	r3, [r3, #0]
 8002f6e:	461a      	mov	r2, r3
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	4413      	add	r3, r2
 8002f74:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002f76:	bf00      	nop
 8002f78:	f7ff ffde 	bl	8002f38 <HAL_GetTick>
 8002f7c:	4602      	mov	r2, r0
 8002f7e:	68bb      	ldr	r3, [r7, #8]
 8002f80:	1ad3      	subs	r3, r2, r3
 8002f82:	68fa      	ldr	r2, [r7, #12]
 8002f84:	429a      	cmp	r2, r3
 8002f86:	d8f7      	bhi.n	8002f78 <HAL_Delay+0x28>
  {
  }
}
 8002f88:	bf00      	nop
 8002f8a:	bf00      	nop
 8002f8c:	3710      	adds	r7, #16
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	bd80      	pop	{r7, pc}
 8002f92:	bf00      	nop
 8002f94:	2000000c 	.word	0x2000000c

08002f98 <__NVIC_SetPriorityGrouping>:
{
 8002f98:	b480      	push	{r7}
 8002f9a:	b085      	sub	sp, #20
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	f003 0307 	and.w	r3, r3, #7
 8002fa6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002fa8:	4b0c      	ldr	r3, [pc, #48]	; (8002fdc <__NVIC_SetPriorityGrouping+0x44>)
 8002faa:	68db      	ldr	r3, [r3, #12]
 8002fac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002fae:	68ba      	ldr	r2, [r7, #8]
 8002fb0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002fb4:	4013      	ands	r3, r2
 8002fb6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002fbc:	68bb      	ldr	r3, [r7, #8]
 8002fbe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002fc0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002fc4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002fc8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002fca:	4a04      	ldr	r2, [pc, #16]	; (8002fdc <__NVIC_SetPriorityGrouping+0x44>)
 8002fcc:	68bb      	ldr	r3, [r7, #8]
 8002fce:	60d3      	str	r3, [r2, #12]
}
 8002fd0:	bf00      	nop
 8002fd2:	3714      	adds	r7, #20
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fda:	4770      	bx	lr
 8002fdc:	e000ed00 	.word	0xe000ed00

08002fe0 <__NVIC_GetPriorityGrouping>:
{
 8002fe0:	b480      	push	{r7}
 8002fe2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002fe4:	4b04      	ldr	r3, [pc, #16]	; (8002ff8 <__NVIC_GetPriorityGrouping+0x18>)
 8002fe6:	68db      	ldr	r3, [r3, #12]
 8002fe8:	0a1b      	lsrs	r3, r3, #8
 8002fea:	f003 0307 	and.w	r3, r3, #7
}
 8002fee:	4618      	mov	r0, r3
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff6:	4770      	bx	lr
 8002ff8:	e000ed00 	.word	0xe000ed00

08002ffc <__NVIC_EnableIRQ>:
{
 8002ffc:	b480      	push	{r7}
 8002ffe:	b083      	sub	sp, #12
 8003000:	af00      	add	r7, sp, #0
 8003002:	4603      	mov	r3, r0
 8003004:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003006:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800300a:	2b00      	cmp	r3, #0
 800300c:	db0b      	blt.n	8003026 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800300e:	79fb      	ldrb	r3, [r7, #7]
 8003010:	f003 021f 	and.w	r2, r3, #31
 8003014:	4907      	ldr	r1, [pc, #28]	; (8003034 <__NVIC_EnableIRQ+0x38>)
 8003016:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800301a:	095b      	lsrs	r3, r3, #5
 800301c:	2001      	movs	r0, #1
 800301e:	fa00 f202 	lsl.w	r2, r0, r2
 8003022:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003026:	bf00      	nop
 8003028:	370c      	adds	r7, #12
 800302a:	46bd      	mov	sp, r7
 800302c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003030:	4770      	bx	lr
 8003032:	bf00      	nop
 8003034:	e000e100 	.word	0xe000e100

08003038 <__NVIC_SetPriority>:
{
 8003038:	b480      	push	{r7}
 800303a:	b083      	sub	sp, #12
 800303c:	af00      	add	r7, sp, #0
 800303e:	4603      	mov	r3, r0
 8003040:	6039      	str	r1, [r7, #0]
 8003042:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003044:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003048:	2b00      	cmp	r3, #0
 800304a:	db0a      	blt.n	8003062 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	b2da      	uxtb	r2, r3
 8003050:	490c      	ldr	r1, [pc, #48]	; (8003084 <__NVIC_SetPriority+0x4c>)
 8003052:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003056:	0112      	lsls	r2, r2, #4
 8003058:	b2d2      	uxtb	r2, r2
 800305a:	440b      	add	r3, r1
 800305c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003060:	e00a      	b.n	8003078 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	b2da      	uxtb	r2, r3
 8003066:	4908      	ldr	r1, [pc, #32]	; (8003088 <__NVIC_SetPriority+0x50>)
 8003068:	79fb      	ldrb	r3, [r7, #7]
 800306a:	f003 030f 	and.w	r3, r3, #15
 800306e:	3b04      	subs	r3, #4
 8003070:	0112      	lsls	r2, r2, #4
 8003072:	b2d2      	uxtb	r2, r2
 8003074:	440b      	add	r3, r1
 8003076:	761a      	strb	r2, [r3, #24]
}
 8003078:	bf00      	nop
 800307a:	370c      	adds	r7, #12
 800307c:	46bd      	mov	sp, r7
 800307e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003082:	4770      	bx	lr
 8003084:	e000e100 	.word	0xe000e100
 8003088:	e000ed00 	.word	0xe000ed00

0800308c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800308c:	b480      	push	{r7}
 800308e:	b089      	sub	sp, #36	; 0x24
 8003090:	af00      	add	r7, sp, #0
 8003092:	60f8      	str	r0, [r7, #12]
 8003094:	60b9      	str	r1, [r7, #8]
 8003096:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	f003 0307 	and.w	r3, r3, #7
 800309e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80030a0:	69fb      	ldr	r3, [r7, #28]
 80030a2:	f1c3 0307 	rsb	r3, r3, #7
 80030a6:	2b04      	cmp	r3, #4
 80030a8:	bf28      	it	cs
 80030aa:	2304      	movcs	r3, #4
 80030ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80030ae:	69fb      	ldr	r3, [r7, #28]
 80030b0:	3304      	adds	r3, #4
 80030b2:	2b06      	cmp	r3, #6
 80030b4:	d902      	bls.n	80030bc <NVIC_EncodePriority+0x30>
 80030b6:	69fb      	ldr	r3, [r7, #28]
 80030b8:	3b03      	subs	r3, #3
 80030ba:	e000      	b.n	80030be <NVIC_EncodePriority+0x32>
 80030bc:	2300      	movs	r3, #0
 80030be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030c0:	f04f 32ff 	mov.w	r2, #4294967295
 80030c4:	69bb      	ldr	r3, [r7, #24]
 80030c6:	fa02 f303 	lsl.w	r3, r2, r3
 80030ca:	43da      	mvns	r2, r3
 80030cc:	68bb      	ldr	r3, [r7, #8]
 80030ce:	401a      	ands	r2, r3
 80030d0:	697b      	ldr	r3, [r7, #20]
 80030d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80030d4:	f04f 31ff 	mov.w	r1, #4294967295
 80030d8:	697b      	ldr	r3, [r7, #20]
 80030da:	fa01 f303 	lsl.w	r3, r1, r3
 80030de:	43d9      	mvns	r1, r3
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030e4:	4313      	orrs	r3, r2
         );
}
 80030e6:	4618      	mov	r0, r3
 80030e8:	3724      	adds	r7, #36	; 0x24
 80030ea:	46bd      	mov	sp, r7
 80030ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f0:	4770      	bx	lr
	...

080030f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b082      	sub	sp, #8
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	3b01      	subs	r3, #1
 8003100:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003104:	d301      	bcc.n	800310a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003106:	2301      	movs	r3, #1
 8003108:	e00f      	b.n	800312a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800310a:	4a0a      	ldr	r2, [pc, #40]	; (8003134 <SysTick_Config+0x40>)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	3b01      	subs	r3, #1
 8003110:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003112:	210f      	movs	r1, #15
 8003114:	f04f 30ff 	mov.w	r0, #4294967295
 8003118:	f7ff ff8e 	bl	8003038 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800311c:	4b05      	ldr	r3, [pc, #20]	; (8003134 <SysTick_Config+0x40>)
 800311e:	2200      	movs	r2, #0
 8003120:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003122:	4b04      	ldr	r3, [pc, #16]	; (8003134 <SysTick_Config+0x40>)
 8003124:	2207      	movs	r2, #7
 8003126:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003128:	2300      	movs	r3, #0
}
 800312a:	4618      	mov	r0, r3
 800312c:	3708      	adds	r7, #8
 800312e:	46bd      	mov	sp, r7
 8003130:	bd80      	pop	{r7, pc}
 8003132:	bf00      	nop
 8003134:	e000e010 	.word	0xe000e010

08003138 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b082      	sub	sp, #8
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003140:	6878      	ldr	r0, [r7, #4]
 8003142:	f7ff ff29 	bl	8002f98 <__NVIC_SetPriorityGrouping>
}
 8003146:	bf00      	nop
 8003148:	3708      	adds	r7, #8
 800314a:	46bd      	mov	sp, r7
 800314c:	bd80      	pop	{r7, pc}

0800314e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800314e:	b580      	push	{r7, lr}
 8003150:	b086      	sub	sp, #24
 8003152:	af00      	add	r7, sp, #0
 8003154:	4603      	mov	r3, r0
 8003156:	60b9      	str	r1, [r7, #8]
 8003158:	607a      	str	r2, [r7, #4]
 800315a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800315c:	2300      	movs	r3, #0
 800315e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003160:	f7ff ff3e 	bl	8002fe0 <__NVIC_GetPriorityGrouping>
 8003164:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003166:	687a      	ldr	r2, [r7, #4]
 8003168:	68b9      	ldr	r1, [r7, #8]
 800316a:	6978      	ldr	r0, [r7, #20]
 800316c:	f7ff ff8e 	bl	800308c <NVIC_EncodePriority>
 8003170:	4602      	mov	r2, r0
 8003172:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003176:	4611      	mov	r1, r2
 8003178:	4618      	mov	r0, r3
 800317a:	f7ff ff5d 	bl	8003038 <__NVIC_SetPriority>
}
 800317e:	bf00      	nop
 8003180:	3718      	adds	r7, #24
 8003182:	46bd      	mov	sp, r7
 8003184:	bd80      	pop	{r7, pc}

08003186 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003186:	b580      	push	{r7, lr}
 8003188:	b082      	sub	sp, #8
 800318a:	af00      	add	r7, sp, #0
 800318c:	4603      	mov	r3, r0
 800318e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003190:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003194:	4618      	mov	r0, r3
 8003196:	f7ff ff31 	bl	8002ffc <__NVIC_EnableIRQ>
}
 800319a:	bf00      	nop
 800319c:	3708      	adds	r7, #8
 800319e:	46bd      	mov	sp, r7
 80031a0:	bd80      	pop	{r7, pc}

080031a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80031a2:	b580      	push	{r7, lr}
 80031a4:	b082      	sub	sp, #8
 80031a6:	af00      	add	r7, sp, #0
 80031a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80031aa:	6878      	ldr	r0, [r7, #4]
 80031ac:	f7ff ffa2 	bl	80030f4 <SysTick_Config>
 80031b0:	4603      	mov	r3, r0
}
 80031b2:	4618      	mov	r0, r3
 80031b4:	3708      	adds	r7, #8
 80031b6:	46bd      	mov	sp, r7
 80031b8:	bd80      	pop	{r7, pc}

080031ba <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80031ba:	b580      	push	{r7, lr}
 80031bc:	b084      	sub	sp, #16
 80031be:	af00      	add	r7, sp, #0
 80031c0:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031c6:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80031c8:	f7ff feb6 	bl	8002f38 <HAL_GetTick>
 80031cc:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80031d4:	b2db      	uxtb	r3, r3
 80031d6:	2b02      	cmp	r3, #2
 80031d8:	d008      	beq.n	80031ec <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	2280      	movs	r2, #128	; 0x80
 80031de:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2200      	movs	r2, #0
 80031e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80031e8:	2301      	movs	r3, #1
 80031ea:	e052      	b.n	8003292 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	681a      	ldr	r2, [r3, #0]
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f022 0216 	bic.w	r2, r2, #22
 80031fa:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	695a      	ldr	r2, [r3, #20]
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800320a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003210:	2b00      	cmp	r3, #0
 8003212:	d103      	bne.n	800321c <HAL_DMA_Abort+0x62>
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003218:	2b00      	cmp	r3, #0
 800321a:	d007      	beq.n	800322c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	681a      	ldr	r2, [r3, #0]
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f022 0208 	bic.w	r2, r2, #8
 800322a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	681a      	ldr	r2, [r3, #0]
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f022 0201 	bic.w	r2, r2, #1
 800323a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800323c:	e013      	b.n	8003266 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800323e:	f7ff fe7b 	bl	8002f38 <HAL_GetTick>
 8003242:	4602      	mov	r2, r0
 8003244:	68bb      	ldr	r3, [r7, #8]
 8003246:	1ad3      	subs	r3, r2, r3
 8003248:	2b05      	cmp	r3, #5
 800324a:	d90c      	bls.n	8003266 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2220      	movs	r2, #32
 8003250:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	2200      	movs	r2, #0
 8003256:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	2203      	movs	r2, #3
 800325e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8003262:	2303      	movs	r3, #3
 8003264:	e015      	b.n	8003292 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f003 0301 	and.w	r3, r3, #1
 8003270:	2b00      	cmp	r3, #0
 8003272:	d1e4      	bne.n	800323e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003278:	223f      	movs	r2, #63	; 0x3f
 800327a:	409a      	lsls	r2, r3
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2200      	movs	r2, #0
 8003284:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2201      	movs	r2, #1
 800328c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8003290:	2300      	movs	r3, #0
}
 8003292:	4618      	mov	r0, r3
 8003294:	3710      	adds	r7, #16
 8003296:	46bd      	mov	sp, r7
 8003298:	bd80      	pop	{r7, pc}

0800329a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800329a:	b480      	push	{r7}
 800329c:	b083      	sub	sp, #12
 800329e:	af00      	add	r7, sp, #0
 80032a0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80032a8:	b2db      	uxtb	r3, r3
 80032aa:	2b02      	cmp	r3, #2
 80032ac:	d004      	beq.n	80032b8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	2280      	movs	r2, #128	; 0x80
 80032b2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80032b4:	2301      	movs	r3, #1
 80032b6:	e00c      	b.n	80032d2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2205      	movs	r2, #5
 80032bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	681a      	ldr	r2, [r3, #0]
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f022 0201 	bic.w	r2, r2, #1
 80032ce:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80032d0:	2300      	movs	r3, #0
}
 80032d2:	4618      	mov	r0, r3
 80032d4:	370c      	adds	r7, #12
 80032d6:	46bd      	mov	sp, r7
 80032d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032dc:	4770      	bx	lr
	...

080032e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80032e0:	b480      	push	{r7}
 80032e2:	b089      	sub	sp, #36	; 0x24
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
 80032e8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80032ea:	2300      	movs	r3, #0
 80032ec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80032ee:	2300      	movs	r3, #0
 80032f0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80032f2:	2300      	movs	r3, #0
 80032f4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80032f6:	2300      	movs	r3, #0
 80032f8:	61fb      	str	r3, [r7, #28]
 80032fa:	e165      	b.n	80035c8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80032fc:	2201      	movs	r2, #1
 80032fe:	69fb      	ldr	r3, [r7, #28]
 8003300:	fa02 f303 	lsl.w	r3, r2, r3
 8003304:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	697a      	ldr	r2, [r7, #20]
 800330c:	4013      	ands	r3, r2
 800330e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003310:	693a      	ldr	r2, [r7, #16]
 8003312:	697b      	ldr	r3, [r7, #20]
 8003314:	429a      	cmp	r2, r3
 8003316:	f040 8154 	bne.w	80035c2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	685b      	ldr	r3, [r3, #4]
 800331e:	f003 0303 	and.w	r3, r3, #3
 8003322:	2b01      	cmp	r3, #1
 8003324:	d005      	beq.n	8003332 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	685b      	ldr	r3, [r3, #4]
 800332a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800332e:	2b02      	cmp	r3, #2
 8003330:	d130      	bne.n	8003394 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	689b      	ldr	r3, [r3, #8]
 8003336:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003338:	69fb      	ldr	r3, [r7, #28]
 800333a:	005b      	lsls	r3, r3, #1
 800333c:	2203      	movs	r2, #3
 800333e:	fa02 f303 	lsl.w	r3, r2, r3
 8003342:	43db      	mvns	r3, r3
 8003344:	69ba      	ldr	r2, [r7, #24]
 8003346:	4013      	ands	r3, r2
 8003348:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	68da      	ldr	r2, [r3, #12]
 800334e:	69fb      	ldr	r3, [r7, #28]
 8003350:	005b      	lsls	r3, r3, #1
 8003352:	fa02 f303 	lsl.w	r3, r2, r3
 8003356:	69ba      	ldr	r2, [r7, #24]
 8003358:	4313      	orrs	r3, r2
 800335a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	69ba      	ldr	r2, [r7, #24]
 8003360:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	685b      	ldr	r3, [r3, #4]
 8003366:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003368:	2201      	movs	r2, #1
 800336a:	69fb      	ldr	r3, [r7, #28]
 800336c:	fa02 f303 	lsl.w	r3, r2, r3
 8003370:	43db      	mvns	r3, r3
 8003372:	69ba      	ldr	r2, [r7, #24]
 8003374:	4013      	ands	r3, r2
 8003376:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	685b      	ldr	r3, [r3, #4]
 800337c:	091b      	lsrs	r3, r3, #4
 800337e:	f003 0201 	and.w	r2, r3, #1
 8003382:	69fb      	ldr	r3, [r7, #28]
 8003384:	fa02 f303 	lsl.w	r3, r2, r3
 8003388:	69ba      	ldr	r2, [r7, #24]
 800338a:	4313      	orrs	r3, r2
 800338c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	69ba      	ldr	r2, [r7, #24]
 8003392:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	f003 0303 	and.w	r3, r3, #3
 800339c:	2b03      	cmp	r3, #3
 800339e:	d017      	beq.n	80033d0 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	68db      	ldr	r3, [r3, #12]
 80033a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80033a6:	69fb      	ldr	r3, [r7, #28]
 80033a8:	005b      	lsls	r3, r3, #1
 80033aa:	2203      	movs	r2, #3
 80033ac:	fa02 f303 	lsl.w	r3, r2, r3
 80033b0:	43db      	mvns	r3, r3
 80033b2:	69ba      	ldr	r2, [r7, #24]
 80033b4:	4013      	ands	r3, r2
 80033b6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	689a      	ldr	r2, [r3, #8]
 80033bc:	69fb      	ldr	r3, [r7, #28]
 80033be:	005b      	lsls	r3, r3, #1
 80033c0:	fa02 f303 	lsl.w	r3, r2, r3
 80033c4:	69ba      	ldr	r2, [r7, #24]
 80033c6:	4313      	orrs	r3, r2
 80033c8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	69ba      	ldr	r2, [r7, #24]
 80033ce:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	685b      	ldr	r3, [r3, #4]
 80033d4:	f003 0303 	and.w	r3, r3, #3
 80033d8:	2b02      	cmp	r3, #2
 80033da:	d123      	bne.n	8003424 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80033dc:	69fb      	ldr	r3, [r7, #28]
 80033de:	08da      	lsrs	r2, r3, #3
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	3208      	adds	r2, #8
 80033e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80033e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80033ea:	69fb      	ldr	r3, [r7, #28]
 80033ec:	f003 0307 	and.w	r3, r3, #7
 80033f0:	009b      	lsls	r3, r3, #2
 80033f2:	220f      	movs	r2, #15
 80033f4:	fa02 f303 	lsl.w	r3, r2, r3
 80033f8:	43db      	mvns	r3, r3
 80033fa:	69ba      	ldr	r2, [r7, #24]
 80033fc:	4013      	ands	r3, r2
 80033fe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	691a      	ldr	r2, [r3, #16]
 8003404:	69fb      	ldr	r3, [r7, #28]
 8003406:	f003 0307 	and.w	r3, r3, #7
 800340a:	009b      	lsls	r3, r3, #2
 800340c:	fa02 f303 	lsl.w	r3, r2, r3
 8003410:	69ba      	ldr	r2, [r7, #24]
 8003412:	4313      	orrs	r3, r2
 8003414:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003416:	69fb      	ldr	r3, [r7, #28]
 8003418:	08da      	lsrs	r2, r3, #3
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	3208      	adds	r2, #8
 800341e:	69b9      	ldr	r1, [r7, #24]
 8003420:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800342a:	69fb      	ldr	r3, [r7, #28]
 800342c:	005b      	lsls	r3, r3, #1
 800342e:	2203      	movs	r2, #3
 8003430:	fa02 f303 	lsl.w	r3, r2, r3
 8003434:	43db      	mvns	r3, r3
 8003436:	69ba      	ldr	r2, [r7, #24]
 8003438:	4013      	ands	r3, r2
 800343a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	685b      	ldr	r3, [r3, #4]
 8003440:	f003 0203 	and.w	r2, r3, #3
 8003444:	69fb      	ldr	r3, [r7, #28]
 8003446:	005b      	lsls	r3, r3, #1
 8003448:	fa02 f303 	lsl.w	r3, r2, r3
 800344c:	69ba      	ldr	r2, [r7, #24]
 800344e:	4313      	orrs	r3, r2
 8003450:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	69ba      	ldr	r2, [r7, #24]
 8003456:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003460:	2b00      	cmp	r3, #0
 8003462:	f000 80ae 	beq.w	80035c2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003466:	2300      	movs	r3, #0
 8003468:	60fb      	str	r3, [r7, #12]
 800346a:	4b5d      	ldr	r3, [pc, #372]	; (80035e0 <HAL_GPIO_Init+0x300>)
 800346c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800346e:	4a5c      	ldr	r2, [pc, #368]	; (80035e0 <HAL_GPIO_Init+0x300>)
 8003470:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003474:	6453      	str	r3, [r2, #68]	; 0x44
 8003476:	4b5a      	ldr	r3, [pc, #360]	; (80035e0 <HAL_GPIO_Init+0x300>)
 8003478:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800347a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800347e:	60fb      	str	r3, [r7, #12]
 8003480:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003482:	4a58      	ldr	r2, [pc, #352]	; (80035e4 <HAL_GPIO_Init+0x304>)
 8003484:	69fb      	ldr	r3, [r7, #28]
 8003486:	089b      	lsrs	r3, r3, #2
 8003488:	3302      	adds	r3, #2
 800348a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800348e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003490:	69fb      	ldr	r3, [r7, #28]
 8003492:	f003 0303 	and.w	r3, r3, #3
 8003496:	009b      	lsls	r3, r3, #2
 8003498:	220f      	movs	r2, #15
 800349a:	fa02 f303 	lsl.w	r3, r2, r3
 800349e:	43db      	mvns	r3, r3
 80034a0:	69ba      	ldr	r2, [r7, #24]
 80034a2:	4013      	ands	r3, r2
 80034a4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	4a4f      	ldr	r2, [pc, #316]	; (80035e8 <HAL_GPIO_Init+0x308>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d025      	beq.n	80034fa <HAL_GPIO_Init+0x21a>
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	4a4e      	ldr	r2, [pc, #312]	; (80035ec <HAL_GPIO_Init+0x30c>)
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d01f      	beq.n	80034f6 <HAL_GPIO_Init+0x216>
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	4a4d      	ldr	r2, [pc, #308]	; (80035f0 <HAL_GPIO_Init+0x310>)
 80034ba:	4293      	cmp	r3, r2
 80034bc:	d019      	beq.n	80034f2 <HAL_GPIO_Init+0x212>
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	4a4c      	ldr	r2, [pc, #304]	; (80035f4 <HAL_GPIO_Init+0x314>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d013      	beq.n	80034ee <HAL_GPIO_Init+0x20e>
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	4a4b      	ldr	r2, [pc, #300]	; (80035f8 <HAL_GPIO_Init+0x318>)
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d00d      	beq.n	80034ea <HAL_GPIO_Init+0x20a>
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	4a4a      	ldr	r2, [pc, #296]	; (80035fc <HAL_GPIO_Init+0x31c>)
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d007      	beq.n	80034e6 <HAL_GPIO_Init+0x206>
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	4a49      	ldr	r2, [pc, #292]	; (8003600 <HAL_GPIO_Init+0x320>)
 80034da:	4293      	cmp	r3, r2
 80034dc:	d101      	bne.n	80034e2 <HAL_GPIO_Init+0x202>
 80034de:	2306      	movs	r3, #6
 80034e0:	e00c      	b.n	80034fc <HAL_GPIO_Init+0x21c>
 80034e2:	2307      	movs	r3, #7
 80034e4:	e00a      	b.n	80034fc <HAL_GPIO_Init+0x21c>
 80034e6:	2305      	movs	r3, #5
 80034e8:	e008      	b.n	80034fc <HAL_GPIO_Init+0x21c>
 80034ea:	2304      	movs	r3, #4
 80034ec:	e006      	b.n	80034fc <HAL_GPIO_Init+0x21c>
 80034ee:	2303      	movs	r3, #3
 80034f0:	e004      	b.n	80034fc <HAL_GPIO_Init+0x21c>
 80034f2:	2302      	movs	r3, #2
 80034f4:	e002      	b.n	80034fc <HAL_GPIO_Init+0x21c>
 80034f6:	2301      	movs	r3, #1
 80034f8:	e000      	b.n	80034fc <HAL_GPIO_Init+0x21c>
 80034fa:	2300      	movs	r3, #0
 80034fc:	69fa      	ldr	r2, [r7, #28]
 80034fe:	f002 0203 	and.w	r2, r2, #3
 8003502:	0092      	lsls	r2, r2, #2
 8003504:	4093      	lsls	r3, r2
 8003506:	69ba      	ldr	r2, [r7, #24]
 8003508:	4313      	orrs	r3, r2
 800350a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800350c:	4935      	ldr	r1, [pc, #212]	; (80035e4 <HAL_GPIO_Init+0x304>)
 800350e:	69fb      	ldr	r3, [r7, #28]
 8003510:	089b      	lsrs	r3, r3, #2
 8003512:	3302      	adds	r3, #2
 8003514:	69ba      	ldr	r2, [r7, #24]
 8003516:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800351a:	4b3a      	ldr	r3, [pc, #232]	; (8003604 <HAL_GPIO_Init+0x324>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003520:	693b      	ldr	r3, [r7, #16]
 8003522:	43db      	mvns	r3, r3
 8003524:	69ba      	ldr	r2, [r7, #24]
 8003526:	4013      	ands	r3, r2
 8003528:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	685b      	ldr	r3, [r3, #4]
 800352e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003532:	2b00      	cmp	r3, #0
 8003534:	d003      	beq.n	800353e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8003536:	69ba      	ldr	r2, [r7, #24]
 8003538:	693b      	ldr	r3, [r7, #16]
 800353a:	4313      	orrs	r3, r2
 800353c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800353e:	4a31      	ldr	r2, [pc, #196]	; (8003604 <HAL_GPIO_Init+0x324>)
 8003540:	69bb      	ldr	r3, [r7, #24]
 8003542:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003544:	4b2f      	ldr	r3, [pc, #188]	; (8003604 <HAL_GPIO_Init+0x324>)
 8003546:	685b      	ldr	r3, [r3, #4]
 8003548:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800354a:	693b      	ldr	r3, [r7, #16]
 800354c:	43db      	mvns	r3, r3
 800354e:	69ba      	ldr	r2, [r7, #24]
 8003550:	4013      	ands	r3, r2
 8003552:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	685b      	ldr	r3, [r3, #4]
 8003558:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800355c:	2b00      	cmp	r3, #0
 800355e:	d003      	beq.n	8003568 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003560:	69ba      	ldr	r2, [r7, #24]
 8003562:	693b      	ldr	r3, [r7, #16]
 8003564:	4313      	orrs	r3, r2
 8003566:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003568:	4a26      	ldr	r2, [pc, #152]	; (8003604 <HAL_GPIO_Init+0x324>)
 800356a:	69bb      	ldr	r3, [r7, #24]
 800356c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800356e:	4b25      	ldr	r3, [pc, #148]	; (8003604 <HAL_GPIO_Init+0x324>)
 8003570:	689b      	ldr	r3, [r3, #8]
 8003572:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003574:	693b      	ldr	r3, [r7, #16]
 8003576:	43db      	mvns	r3, r3
 8003578:	69ba      	ldr	r2, [r7, #24]
 800357a:	4013      	ands	r3, r2
 800357c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	685b      	ldr	r3, [r3, #4]
 8003582:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003586:	2b00      	cmp	r3, #0
 8003588:	d003      	beq.n	8003592 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800358a:	69ba      	ldr	r2, [r7, #24]
 800358c:	693b      	ldr	r3, [r7, #16]
 800358e:	4313      	orrs	r3, r2
 8003590:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003592:	4a1c      	ldr	r2, [pc, #112]	; (8003604 <HAL_GPIO_Init+0x324>)
 8003594:	69bb      	ldr	r3, [r7, #24]
 8003596:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003598:	4b1a      	ldr	r3, [pc, #104]	; (8003604 <HAL_GPIO_Init+0x324>)
 800359a:	68db      	ldr	r3, [r3, #12]
 800359c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800359e:	693b      	ldr	r3, [r7, #16]
 80035a0:	43db      	mvns	r3, r3
 80035a2:	69ba      	ldr	r2, [r7, #24]
 80035a4:	4013      	ands	r3, r2
 80035a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	685b      	ldr	r3, [r3, #4]
 80035ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d003      	beq.n	80035bc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80035b4:	69ba      	ldr	r2, [r7, #24]
 80035b6:	693b      	ldr	r3, [r7, #16]
 80035b8:	4313      	orrs	r3, r2
 80035ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80035bc:	4a11      	ldr	r2, [pc, #68]	; (8003604 <HAL_GPIO_Init+0x324>)
 80035be:	69bb      	ldr	r3, [r7, #24]
 80035c0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80035c2:	69fb      	ldr	r3, [r7, #28]
 80035c4:	3301      	adds	r3, #1
 80035c6:	61fb      	str	r3, [r7, #28]
 80035c8:	69fb      	ldr	r3, [r7, #28]
 80035ca:	2b0f      	cmp	r3, #15
 80035cc:	f67f ae96 	bls.w	80032fc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80035d0:	bf00      	nop
 80035d2:	bf00      	nop
 80035d4:	3724      	adds	r7, #36	; 0x24
 80035d6:	46bd      	mov	sp, r7
 80035d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035dc:	4770      	bx	lr
 80035de:	bf00      	nop
 80035e0:	40023800 	.word	0x40023800
 80035e4:	40013800 	.word	0x40013800
 80035e8:	40020000 	.word	0x40020000
 80035ec:	40020400 	.word	0x40020400
 80035f0:	40020800 	.word	0x40020800
 80035f4:	40020c00 	.word	0x40020c00
 80035f8:	40021000 	.word	0x40021000
 80035fc:	40021400 	.word	0x40021400
 8003600:	40021800 	.word	0x40021800
 8003604:	40013c00 	.word	0x40013c00

08003608 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003608:	b480      	push	{r7}
 800360a:	b083      	sub	sp, #12
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
 8003610:	460b      	mov	r3, r1
 8003612:	807b      	strh	r3, [r7, #2]
 8003614:	4613      	mov	r3, r2
 8003616:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003618:	787b      	ldrb	r3, [r7, #1]
 800361a:	2b00      	cmp	r3, #0
 800361c:	d003      	beq.n	8003626 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800361e:	887a      	ldrh	r2, [r7, #2]
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003624:	e003      	b.n	800362e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003626:	887b      	ldrh	r3, [r7, #2]
 8003628:	041a      	lsls	r2, r3, #16
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	619a      	str	r2, [r3, #24]
}
 800362e:	bf00      	nop
 8003630:	370c      	adds	r7, #12
 8003632:	46bd      	mov	sp, r7
 8003634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003638:	4770      	bx	lr
	...

0800363c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b084      	sub	sp, #16
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2b00      	cmp	r3, #0
 8003648:	d101      	bne.n	800364e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800364a:	2301      	movs	r3, #1
 800364c:	e12b      	b.n	80038a6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003654:	b2db      	uxtb	r3, r3
 8003656:	2b00      	cmp	r3, #0
 8003658:	d106      	bne.n	8003668 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2200      	movs	r2, #0
 800365e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003662:	6878      	ldr	r0, [r7, #4]
 8003664:	f7fe fa9e 	bl	8001ba4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2224      	movs	r2, #36	; 0x24
 800366c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	681a      	ldr	r2, [r3, #0]
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f022 0201 	bic.w	r2, r2, #1
 800367e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	681a      	ldr	r2, [r3, #0]
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800368e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	681a      	ldr	r2, [r3, #0]
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800369e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80036a0:	f001 f87e 	bl	80047a0 <HAL_RCC_GetPCLK1Freq>
 80036a4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	685b      	ldr	r3, [r3, #4]
 80036aa:	4a81      	ldr	r2, [pc, #516]	; (80038b0 <HAL_I2C_Init+0x274>)
 80036ac:	4293      	cmp	r3, r2
 80036ae:	d807      	bhi.n	80036c0 <HAL_I2C_Init+0x84>
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	4a80      	ldr	r2, [pc, #512]	; (80038b4 <HAL_I2C_Init+0x278>)
 80036b4:	4293      	cmp	r3, r2
 80036b6:	bf94      	ite	ls
 80036b8:	2301      	movls	r3, #1
 80036ba:	2300      	movhi	r3, #0
 80036bc:	b2db      	uxtb	r3, r3
 80036be:	e006      	b.n	80036ce <HAL_I2C_Init+0x92>
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	4a7d      	ldr	r2, [pc, #500]	; (80038b8 <HAL_I2C_Init+0x27c>)
 80036c4:	4293      	cmp	r3, r2
 80036c6:	bf94      	ite	ls
 80036c8:	2301      	movls	r3, #1
 80036ca:	2300      	movhi	r3, #0
 80036cc:	b2db      	uxtb	r3, r3
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d001      	beq.n	80036d6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80036d2:	2301      	movs	r3, #1
 80036d4:	e0e7      	b.n	80038a6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	4a78      	ldr	r2, [pc, #480]	; (80038bc <HAL_I2C_Init+0x280>)
 80036da:	fba2 2303 	umull	r2, r3, r2, r3
 80036de:	0c9b      	lsrs	r3, r3, #18
 80036e0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	685b      	ldr	r3, [r3, #4]
 80036e8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	68ba      	ldr	r2, [r7, #8]
 80036f2:	430a      	orrs	r2, r1
 80036f4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	6a1b      	ldr	r3, [r3, #32]
 80036fc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	685b      	ldr	r3, [r3, #4]
 8003704:	4a6a      	ldr	r2, [pc, #424]	; (80038b0 <HAL_I2C_Init+0x274>)
 8003706:	4293      	cmp	r3, r2
 8003708:	d802      	bhi.n	8003710 <HAL_I2C_Init+0xd4>
 800370a:	68bb      	ldr	r3, [r7, #8]
 800370c:	3301      	adds	r3, #1
 800370e:	e009      	b.n	8003724 <HAL_I2C_Init+0xe8>
 8003710:	68bb      	ldr	r3, [r7, #8]
 8003712:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003716:	fb02 f303 	mul.w	r3, r2, r3
 800371a:	4a69      	ldr	r2, [pc, #420]	; (80038c0 <HAL_I2C_Init+0x284>)
 800371c:	fba2 2303 	umull	r2, r3, r2, r3
 8003720:	099b      	lsrs	r3, r3, #6
 8003722:	3301      	adds	r3, #1
 8003724:	687a      	ldr	r2, [r7, #4]
 8003726:	6812      	ldr	r2, [r2, #0]
 8003728:	430b      	orrs	r3, r1
 800372a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	69db      	ldr	r3, [r3, #28]
 8003732:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003736:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	685b      	ldr	r3, [r3, #4]
 800373e:	495c      	ldr	r1, [pc, #368]	; (80038b0 <HAL_I2C_Init+0x274>)
 8003740:	428b      	cmp	r3, r1
 8003742:	d819      	bhi.n	8003778 <HAL_I2C_Init+0x13c>
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	1e59      	subs	r1, r3, #1
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	685b      	ldr	r3, [r3, #4]
 800374c:	005b      	lsls	r3, r3, #1
 800374e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003752:	1c59      	adds	r1, r3, #1
 8003754:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003758:	400b      	ands	r3, r1
 800375a:	2b00      	cmp	r3, #0
 800375c:	d00a      	beq.n	8003774 <HAL_I2C_Init+0x138>
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	1e59      	subs	r1, r3, #1
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	685b      	ldr	r3, [r3, #4]
 8003766:	005b      	lsls	r3, r3, #1
 8003768:	fbb1 f3f3 	udiv	r3, r1, r3
 800376c:	3301      	adds	r3, #1
 800376e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003772:	e051      	b.n	8003818 <HAL_I2C_Init+0x1dc>
 8003774:	2304      	movs	r3, #4
 8003776:	e04f      	b.n	8003818 <HAL_I2C_Init+0x1dc>
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	689b      	ldr	r3, [r3, #8]
 800377c:	2b00      	cmp	r3, #0
 800377e:	d111      	bne.n	80037a4 <HAL_I2C_Init+0x168>
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	1e58      	subs	r0, r3, #1
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6859      	ldr	r1, [r3, #4]
 8003788:	460b      	mov	r3, r1
 800378a:	005b      	lsls	r3, r3, #1
 800378c:	440b      	add	r3, r1
 800378e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003792:	3301      	adds	r3, #1
 8003794:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003798:	2b00      	cmp	r3, #0
 800379a:	bf0c      	ite	eq
 800379c:	2301      	moveq	r3, #1
 800379e:	2300      	movne	r3, #0
 80037a0:	b2db      	uxtb	r3, r3
 80037a2:	e012      	b.n	80037ca <HAL_I2C_Init+0x18e>
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	1e58      	subs	r0, r3, #1
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6859      	ldr	r1, [r3, #4]
 80037ac:	460b      	mov	r3, r1
 80037ae:	009b      	lsls	r3, r3, #2
 80037b0:	440b      	add	r3, r1
 80037b2:	0099      	lsls	r1, r3, #2
 80037b4:	440b      	add	r3, r1
 80037b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80037ba:	3301      	adds	r3, #1
 80037bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	bf0c      	ite	eq
 80037c4:	2301      	moveq	r3, #1
 80037c6:	2300      	movne	r3, #0
 80037c8:	b2db      	uxtb	r3, r3
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d001      	beq.n	80037d2 <HAL_I2C_Init+0x196>
 80037ce:	2301      	movs	r3, #1
 80037d0:	e022      	b.n	8003818 <HAL_I2C_Init+0x1dc>
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	689b      	ldr	r3, [r3, #8]
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d10e      	bne.n	80037f8 <HAL_I2C_Init+0x1bc>
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	1e58      	subs	r0, r3, #1
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6859      	ldr	r1, [r3, #4]
 80037e2:	460b      	mov	r3, r1
 80037e4:	005b      	lsls	r3, r3, #1
 80037e6:	440b      	add	r3, r1
 80037e8:	fbb0 f3f3 	udiv	r3, r0, r3
 80037ec:	3301      	adds	r3, #1
 80037ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80037f6:	e00f      	b.n	8003818 <HAL_I2C_Init+0x1dc>
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	1e58      	subs	r0, r3, #1
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6859      	ldr	r1, [r3, #4]
 8003800:	460b      	mov	r3, r1
 8003802:	009b      	lsls	r3, r3, #2
 8003804:	440b      	add	r3, r1
 8003806:	0099      	lsls	r1, r3, #2
 8003808:	440b      	add	r3, r1
 800380a:	fbb0 f3f3 	udiv	r3, r0, r3
 800380e:	3301      	adds	r3, #1
 8003810:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003814:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003818:	6879      	ldr	r1, [r7, #4]
 800381a:	6809      	ldr	r1, [r1, #0]
 800381c:	4313      	orrs	r3, r2
 800381e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	69da      	ldr	r2, [r3, #28]
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6a1b      	ldr	r3, [r3, #32]
 8003832:	431a      	orrs	r2, r3
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	430a      	orrs	r2, r1
 800383a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	689b      	ldr	r3, [r3, #8]
 8003842:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003846:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800384a:	687a      	ldr	r2, [r7, #4]
 800384c:	6911      	ldr	r1, [r2, #16]
 800384e:	687a      	ldr	r2, [r7, #4]
 8003850:	68d2      	ldr	r2, [r2, #12]
 8003852:	4311      	orrs	r1, r2
 8003854:	687a      	ldr	r2, [r7, #4]
 8003856:	6812      	ldr	r2, [r2, #0]
 8003858:	430b      	orrs	r3, r1
 800385a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	68db      	ldr	r3, [r3, #12]
 8003862:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	695a      	ldr	r2, [r3, #20]
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	699b      	ldr	r3, [r3, #24]
 800386e:	431a      	orrs	r2, r3
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	430a      	orrs	r2, r1
 8003876:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	681a      	ldr	r2, [r3, #0]
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f042 0201 	orr.w	r2, r2, #1
 8003886:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2200      	movs	r2, #0
 800388c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2220      	movs	r2, #32
 8003892:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	2200      	movs	r2, #0
 800389a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2200      	movs	r2, #0
 80038a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80038a4:	2300      	movs	r3, #0
}
 80038a6:	4618      	mov	r0, r3
 80038a8:	3710      	adds	r7, #16
 80038aa:	46bd      	mov	sp, r7
 80038ac:	bd80      	pop	{r7, pc}
 80038ae:	bf00      	nop
 80038b0:	000186a0 	.word	0x000186a0
 80038b4:	001e847f 	.word	0x001e847f
 80038b8:	003d08ff 	.word	0x003d08ff
 80038bc:	431bde83 	.word	0x431bde83
 80038c0:	10624dd3 	.word	0x10624dd3

080038c4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b088      	sub	sp, #32
 80038c8:	af02      	add	r7, sp, #8
 80038ca:	60f8      	str	r0, [r7, #12]
 80038cc:	4608      	mov	r0, r1
 80038ce:	4611      	mov	r1, r2
 80038d0:	461a      	mov	r2, r3
 80038d2:	4603      	mov	r3, r0
 80038d4:	817b      	strh	r3, [r7, #10]
 80038d6:	460b      	mov	r3, r1
 80038d8:	813b      	strh	r3, [r7, #8]
 80038da:	4613      	mov	r3, r2
 80038dc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80038de:	f7ff fb2b 	bl	8002f38 <HAL_GetTick>
 80038e2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038ea:	b2db      	uxtb	r3, r3
 80038ec:	2b20      	cmp	r3, #32
 80038ee:	f040 80d9 	bne.w	8003aa4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80038f2:	697b      	ldr	r3, [r7, #20]
 80038f4:	9300      	str	r3, [sp, #0]
 80038f6:	2319      	movs	r3, #25
 80038f8:	2201      	movs	r2, #1
 80038fa:	496d      	ldr	r1, [pc, #436]	; (8003ab0 <HAL_I2C_Mem_Write+0x1ec>)
 80038fc:	68f8      	ldr	r0, [r7, #12]
 80038fe:	f000 fc7f 	bl	8004200 <I2C_WaitOnFlagUntilTimeout>
 8003902:	4603      	mov	r3, r0
 8003904:	2b00      	cmp	r3, #0
 8003906:	d001      	beq.n	800390c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003908:	2302      	movs	r3, #2
 800390a:	e0cc      	b.n	8003aa6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003912:	2b01      	cmp	r3, #1
 8003914:	d101      	bne.n	800391a <HAL_I2C_Mem_Write+0x56>
 8003916:	2302      	movs	r3, #2
 8003918:	e0c5      	b.n	8003aa6 <HAL_I2C_Mem_Write+0x1e2>
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	2201      	movs	r2, #1
 800391e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f003 0301 	and.w	r3, r3, #1
 800392c:	2b01      	cmp	r3, #1
 800392e:	d007      	beq.n	8003940 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	681a      	ldr	r2, [r3, #0]
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f042 0201 	orr.w	r2, r2, #1
 800393e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	681a      	ldr	r2, [r3, #0]
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800394e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	2221      	movs	r2, #33	; 0x21
 8003954:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	2240      	movs	r2, #64	; 0x40
 800395c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	2200      	movs	r2, #0
 8003964:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	6a3a      	ldr	r2, [r7, #32]
 800396a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003970:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003976:	b29a      	uxth	r2, r3
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	4a4d      	ldr	r2, [pc, #308]	; (8003ab4 <HAL_I2C_Mem_Write+0x1f0>)
 8003980:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003982:	88f8      	ldrh	r0, [r7, #6]
 8003984:	893a      	ldrh	r2, [r7, #8]
 8003986:	8979      	ldrh	r1, [r7, #10]
 8003988:	697b      	ldr	r3, [r7, #20]
 800398a:	9301      	str	r3, [sp, #4]
 800398c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800398e:	9300      	str	r3, [sp, #0]
 8003990:	4603      	mov	r3, r0
 8003992:	68f8      	ldr	r0, [r7, #12]
 8003994:	f000 fab6 	bl	8003f04 <I2C_RequestMemoryWrite>
 8003998:	4603      	mov	r3, r0
 800399a:	2b00      	cmp	r3, #0
 800399c:	d052      	beq.n	8003a44 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800399e:	2301      	movs	r3, #1
 80039a0:	e081      	b.n	8003aa6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80039a2:	697a      	ldr	r2, [r7, #20]
 80039a4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80039a6:	68f8      	ldr	r0, [r7, #12]
 80039a8:	f000 fd00 	bl	80043ac <I2C_WaitOnTXEFlagUntilTimeout>
 80039ac:	4603      	mov	r3, r0
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d00d      	beq.n	80039ce <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039b6:	2b04      	cmp	r3, #4
 80039b8:	d107      	bne.n	80039ca <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	681a      	ldr	r2, [r3, #0]
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80039c8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80039ca:	2301      	movs	r3, #1
 80039cc:	e06b      	b.n	8003aa6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039d2:	781a      	ldrb	r2, [r3, #0]
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039de:	1c5a      	adds	r2, r3, #1
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039e8:	3b01      	subs	r3, #1
 80039ea:	b29a      	uxth	r2, r3
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039f4:	b29b      	uxth	r3, r3
 80039f6:	3b01      	subs	r3, #1
 80039f8:	b29a      	uxth	r2, r3
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	695b      	ldr	r3, [r3, #20]
 8003a04:	f003 0304 	and.w	r3, r3, #4
 8003a08:	2b04      	cmp	r3, #4
 8003a0a:	d11b      	bne.n	8003a44 <HAL_I2C_Mem_Write+0x180>
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d017      	beq.n	8003a44 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a18:	781a      	ldrb	r2, [r3, #0]
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a24:	1c5a      	adds	r2, r3, #1
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a2e:	3b01      	subs	r3, #1
 8003a30:	b29a      	uxth	r2, r3
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a3a:	b29b      	uxth	r3, r3
 8003a3c:	3b01      	subs	r3, #1
 8003a3e:	b29a      	uxth	r2, r3
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d1aa      	bne.n	80039a2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a4c:	697a      	ldr	r2, [r7, #20]
 8003a4e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003a50:	68f8      	ldr	r0, [r7, #12]
 8003a52:	f000 fcec 	bl	800442e <I2C_WaitOnBTFFlagUntilTimeout>
 8003a56:	4603      	mov	r3, r0
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d00d      	beq.n	8003a78 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a60:	2b04      	cmp	r3, #4
 8003a62:	d107      	bne.n	8003a74 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	681a      	ldr	r2, [r3, #0]
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a72:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003a74:	2301      	movs	r3, #1
 8003a76:	e016      	b.n	8003aa6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	681a      	ldr	r2, [r3, #0]
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a86:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	2220      	movs	r2, #32
 8003a8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	2200      	movs	r2, #0
 8003a94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	e000      	b.n	8003aa6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003aa4:	2302      	movs	r3, #2
  }
}
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	3718      	adds	r7, #24
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	bd80      	pop	{r7, pc}
 8003aae:	bf00      	nop
 8003ab0:	00100002 	.word	0x00100002
 8003ab4:	ffff0000 	.word	0xffff0000

08003ab8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	b08c      	sub	sp, #48	; 0x30
 8003abc:	af02      	add	r7, sp, #8
 8003abe:	60f8      	str	r0, [r7, #12]
 8003ac0:	4608      	mov	r0, r1
 8003ac2:	4611      	mov	r1, r2
 8003ac4:	461a      	mov	r2, r3
 8003ac6:	4603      	mov	r3, r0
 8003ac8:	817b      	strh	r3, [r7, #10]
 8003aca:	460b      	mov	r3, r1
 8003acc:	813b      	strh	r3, [r7, #8]
 8003ace:	4613      	mov	r3, r2
 8003ad0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003ad2:	f7ff fa31 	bl	8002f38 <HAL_GetTick>
 8003ad6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ade:	b2db      	uxtb	r3, r3
 8003ae0:	2b20      	cmp	r3, #32
 8003ae2:	f040 8208 	bne.w	8003ef6 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ae8:	9300      	str	r3, [sp, #0]
 8003aea:	2319      	movs	r3, #25
 8003aec:	2201      	movs	r2, #1
 8003aee:	497b      	ldr	r1, [pc, #492]	; (8003cdc <HAL_I2C_Mem_Read+0x224>)
 8003af0:	68f8      	ldr	r0, [r7, #12]
 8003af2:	f000 fb85 	bl	8004200 <I2C_WaitOnFlagUntilTimeout>
 8003af6:	4603      	mov	r3, r0
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d001      	beq.n	8003b00 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003afc:	2302      	movs	r3, #2
 8003afe:	e1fb      	b.n	8003ef8 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b06:	2b01      	cmp	r3, #1
 8003b08:	d101      	bne.n	8003b0e <HAL_I2C_Mem_Read+0x56>
 8003b0a:	2302      	movs	r3, #2
 8003b0c:	e1f4      	b.n	8003ef8 <HAL_I2C_Mem_Read+0x440>
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	2201      	movs	r2, #1
 8003b12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f003 0301 	and.w	r3, r3, #1
 8003b20:	2b01      	cmp	r3, #1
 8003b22:	d007      	beq.n	8003b34 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	681a      	ldr	r2, [r3, #0]
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f042 0201 	orr.w	r2, r2, #1
 8003b32:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	681a      	ldr	r2, [r3, #0]
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003b42:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	2222      	movs	r2, #34	; 0x22
 8003b48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	2240      	movs	r2, #64	; 0x40
 8003b50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	2200      	movs	r2, #0
 8003b58:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b5e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003b64:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b6a:	b29a      	uxth	r2, r3
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	4a5b      	ldr	r2, [pc, #364]	; (8003ce0 <HAL_I2C_Mem_Read+0x228>)
 8003b74:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003b76:	88f8      	ldrh	r0, [r7, #6]
 8003b78:	893a      	ldrh	r2, [r7, #8]
 8003b7a:	8979      	ldrh	r1, [r7, #10]
 8003b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b7e:	9301      	str	r3, [sp, #4]
 8003b80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b82:	9300      	str	r3, [sp, #0]
 8003b84:	4603      	mov	r3, r0
 8003b86:	68f8      	ldr	r0, [r7, #12]
 8003b88:	f000 fa52 	bl	8004030 <I2C_RequestMemoryRead>
 8003b8c:	4603      	mov	r3, r0
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d001      	beq.n	8003b96 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003b92:	2301      	movs	r3, #1
 8003b94:	e1b0      	b.n	8003ef8 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d113      	bne.n	8003bc6 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	623b      	str	r3, [r7, #32]
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	695b      	ldr	r3, [r3, #20]
 8003ba8:	623b      	str	r3, [r7, #32]
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	699b      	ldr	r3, [r3, #24]
 8003bb0:	623b      	str	r3, [r7, #32]
 8003bb2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	681a      	ldr	r2, [r3, #0]
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003bc2:	601a      	str	r2, [r3, #0]
 8003bc4:	e184      	b.n	8003ed0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bca:	2b01      	cmp	r3, #1
 8003bcc:	d11b      	bne.n	8003c06 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	681a      	ldr	r2, [r3, #0]
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003bdc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003bde:	2300      	movs	r3, #0
 8003be0:	61fb      	str	r3, [r7, #28]
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	695b      	ldr	r3, [r3, #20]
 8003be8:	61fb      	str	r3, [r7, #28]
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	699b      	ldr	r3, [r3, #24]
 8003bf0:	61fb      	str	r3, [r7, #28]
 8003bf2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	681a      	ldr	r2, [r3, #0]
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c02:	601a      	str	r2, [r3, #0]
 8003c04:	e164      	b.n	8003ed0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c0a:	2b02      	cmp	r3, #2
 8003c0c:	d11b      	bne.n	8003c46 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	681a      	ldr	r2, [r3, #0]
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c1c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	681a      	ldr	r2, [r3, #0]
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003c2c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c2e:	2300      	movs	r3, #0
 8003c30:	61bb      	str	r3, [r7, #24]
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	695b      	ldr	r3, [r3, #20]
 8003c38:	61bb      	str	r3, [r7, #24]
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	699b      	ldr	r3, [r3, #24]
 8003c40:	61bb      	str	r3, [r7, #24]
 8003c42:	69bb      	ldr	r3, [r7, #24]
 8003c44:	e144      	b.n	8003ed0 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c46:	2300      	movs	r3, #0
 8003c48:	617b      	str	r3, [r7, #20]
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	695b      	ldr	r3, [r3, #20]
 8003c50:	617b      	str	r3, [r7, #20]
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	699b      	ldr	r3, [r3, #24]
 8003c58:	617b      	str	r3, [r7, #20]
 8003c5a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003c5c:	e138      	b.n	8003ed0 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c62:	2b03      	cmp	r3, #3
 8003c64:	f200 80f1 	bhi.w	8003e4a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c6c:	2b01      	cmp	r3, #1
 8003c6e:	d123      	bne.n	8003cb8 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c72:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003c74:	68f8      	ldr	r0, [r7, #12]
 8003c76:	f000 fc1b 	bl	80044b0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003c7a:	4603      	mov	r3, r0
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d001      	beq.n	8003c84 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003c80:	2301      	movs	r3, #1
 8003c82:	e139      	b.n	8003ef8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	691a      	ldr	r2, [r3, #16]
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c8e:	b2d2      	uxtb	r2, r2
 8003c90:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c96:	1c5a      	adds	r2, r3, #1
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ca0:	3b01      	subs	r3, #1
 8003ca2:	b29a      	uxth	r2, r3
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cac:	b29b      	uxth	r3, r3
 8003cae:	3b01      	subs	r3, #1
 8003cb0:	b29a      	uxth	r2, r3
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003cb6:	e10b      	b.n	8003ed0 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cbc:	2b02      	cmp	r3, #2
 8003cbe:	d14e      	bne.n	8003d5e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cc2:	9300      	str	r3, [sp, #0]
 8003cc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	4906      	ldr	r1, [pc, #24]	; (8003ce4 <HAL_I2C_Mem_Read+0x22c>)
 8003cca:	68f8      	ldr	r0, [r7, #12]
 8003ccc:	f000 fa98 	bl	8004200 <I2C_WaitOnFlagUntilTimeout>
 8003cd0:	4603      	mov	r3, r0
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d008      	beq.n	8003ce8 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003cd6:	2301      	movs	r3, #1
 8003cd8:	e10e      	b.n	8003ef8 <HAL_I2C_Mem_Read+0x440>
 8003cda:	bf00      	nop
 8003cdc:	00100002 	.word	0x00100002
 8003ce0:	ffff0000 	.word	0xffff0000
 8003ce4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	681a      	ldr	r2, [r3, #0]
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003cf6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	691a      	ldr	r2, [r3, #16]
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d02:	b2d2      	uxtb	r2, r2
 8003d04:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d0a:	1c5a      	adds	r2, r3, #1
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d14:	3b01      	subs	r3, #1
 8003d16:	b29a      	uxth	r2, r3
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d20:	b29b      	uxth	r3, r3
 8003d22:	3b01      	subs	r3, #1
 8003d24:	b29a      	uxth	r2, r3
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	691a      	ldr	r2, [r3, #16]
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d34:	b2d2      	uxtb	r2, r2
 8003d36:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d3c:	1c5a      	adds	r2, r3, #1
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d46:	3b01      	subs	r3, #1
 8003d48:	b29a      	uxth	r2, r3
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d52:	b29b      	uxth	r3, r3
 8003d54:	3b01      	subs	r3, #1
 8003d56:	b29a      	uxth	r2, r3
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003d5c:	e0b8      	b.n	8003ed0 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d60:	9300      	str	r3, [sp, #0]
 8003d62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d64:	2200      	movs	r2, #0
 8003d66:	4966      	ldr	r1, [pc, #408]	; (8003f00 <HAL_I2C_Mem_Read+0x448>)
 8003d68:	68f8      	ldr	r0, [r7, #12]
 8003d6a:	f000 fa49 	bl	8004200 <I2C_WaitOnFlagUntilTimeout>
 8003d6e:	4603      	mov	r3, r0
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d001      	beq.n	8003d78 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003d74:	2301      	movs	r3, #1
 8003d76:	e0bf      	b.n	8003ef8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	681a      	ldr	r2, [r3, #0]
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d86:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	691a      	ldr	r2, [r3, #16]
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d92:	b2d2      	uxtb	r2, r2
 8003d94:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d9a:	1c5a      	adds	r2, r3, #1
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003da4:	3b01      	subs	r3, #1
 8003da6:	b29a      	uxth	r2, r3
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003db0:	b29b      	uxth	r3, r3
 8003db2:	3b01      	subs	r3, #1
 8003db4:	b29a      	uxth	r2, r3
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dbc:	9300      	str	r3, [sp, #0]
 8003dbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	494f      	ldr	r1, [pc, #316]	; (8003f00 <HAL_I2C_Mem_Read+0x448>)
 8003dc4:	68f8      	ldr	r0, [r7, #12]
 8003dc6:	f000 fa1b 	bl	8004200 <I2C_WaitOnFlagUntilTimeout>
 8003dca:	4603      	mov	r3, r0
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d001      	beq.n	8003dd4 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003dd0:	2301      	movs	r3, #1
 8003dd2:	e091      	b.n	8003ef8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	681a      	ldr	r2, [r3, #0]
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003de2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	691a      	ldr	r2, [r3, #16]
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dee:	b2d2      	uxtb	r2, r2
 8003df0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003df6:	1c5a      	adds	r2, r3, #1
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e00:	3b01      	subs	r3, #1
 8003e02:	b29a      	uxth	r2, r3
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e0c:	b29b      	uxth	r3, r3
 8003e0e:	3b01      	subs	r3, #1
 8003e10:	b29a      	uxth	r2, r3
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	691a      	ldr	r2, [r3, #16]
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e20:	b2d2      	uxtb	r2, r2
 8003e22:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e28:	1c5a      	adds	r2, r3, #1
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e32:	3b01      	subs	r3, #1
 8003e34:	b29a      	uxth	r2, r3
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e3e:	b29b      	uxth	r3, r3
 8003e40:	3b01      	subs	r3, #1
 8003e42:	b29a      	uxth	r2, r3
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003e48:	e042      	b.n	8003ed0 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e4c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003e4e:	68f8      	ldr	r0, [r7, #12]
 8003e50:	f000 fb2e 	bl	80044b0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003e54:	4603      	mov	r3, r0
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d001      	beq.n	8003e5e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	e04c      	b.n	8003ef8 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	691a      	ldr	r2, [r3, #16]
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e68:	b2d2      	uxtb	r2, r2
 8003e6a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e70:	1c5a      	adds	r2, r3, #1
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e7a:	3b01      	subs	r3, #1
 8003e7c:	b29a      	uxth	r2, r3
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e86:	b29b      	uxth	r3, r3
 8003e88:	3b01      	subs	r3, #1
 8003e8a:	b29a      	uxth	r2, r3
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	695b      	ldr	r3, [r3, #20]
 8003e96:	f003 0304 	and.w	r3, r3, #4
 8003e9a:	2b04      	cmp	r3, #4
 8003e9c:	d118      	bne.n	8003ed0 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	691a      	ldr	r2, [r3, #16]
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ea8:	b2d2      	uxtb	r2, r2
 8003eaa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eb0:	1c5a      	adds	r2, r3, #1
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003eba:	3b01      	subs	r3, #1
 8003ebc:	b29a      	uxth	r2, r3
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ec6:	b29b      	uxth	r3, r3
 8003ec8:	3b01      	subs	r3, #1
 8003eca:	b29a      	uxth	r2, r3
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	f47f aec2 	bne.w	8003c5e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	2220      	movs	r2, #32
 8003ede:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	2200      	movs	r2, #0
 8003eee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	e000      	b.n	8003ef8 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003ef6:	2302      	movs	r3, #2
  }
}
 8003ef8:	4618      	mov	r0, r3
 8003efa:	3728      	adds	r7, #40	; 0x28
 8003efc:	46bd      	mov	sp, r7
 8003efe:	bd80      	pop	{r7, pc}
 8003f00:	00010004 	.word	0x00010004

08003f04 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b088      	sub	sp, #32
 8003f08:	af02      	add	r7, sp, #8
 8003f0a:	60f8      	str	r0, [r7, #12]
 8003f0c:	4608      	mov	r0, r1
 8003f0e:	4611      	mov	r1, r2
 8003f10:	461a      	mov	r2, r3
 8003f12:	4603      	mov	r3, r0
 8003f14:	817b      	strh	r3, [r7, #10]
 8003f16:	460b      	mov	r3, r1
 8003f18:	813b      	strh	r3, [r7, #8]
 8003f1a:	4613      	mov	r3, r2
 8003f1c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	681a      	ldr	r2, [r3, #0]
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003f2c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f30:	9300      	str	r3, [sp, #0]
 8003f32:	6a3b      	ldr	r3, [r7, #32]
 8003f34:	2200      	movs	r2, #0
 8003f36:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003f3a:	68f8      	ldr	r0, [r7, #12]
 8003f3c:	f000 f960 	bl	8004200 <I2C_WaitOnFlagUntilTimeout>
 8003f40:	4603      	mov	r3, r0
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d00d      	beq.n	8003f62 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f50:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f54:	d103      	bne.n	8003f5e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003f5c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003f5e:	2303      	movs	r3, #3
 8003f60:	e05f      	b.n	8004022 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003f62:	897b      	ldrh	r3, [r7, #10]
 8003f64:	b2db      	uxtb	r3, r3
 8003f66:	461a      	mov	r2, r3
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003f70:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f74:	6a3a      	ldr	r2, [r7, #32]
 8003f76:	492d      	ldr	r1, [pc, #180]	; (800402c <I2C_RequestMemoryWrite+0x128>)
 8003f78:	68f8      	ldr	r0, [r7, #12]
 8003f7a:	f000 f998 	bl	80042ae <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003f7e:	4603      	mov	r3, r0
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d001      	beq.n	8003f88 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003f84:	2301      	movs	r3, #1
 8003f86:	e04c      	b.n	8004022 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f88:	2300      	movs	r3, #0
 8003f8a:	617b      	str	r3, [r7, #20]
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	695b      	ldr	r3, [r3, #20]
 8003f92:	617b      	str	r3, [r7, #20]
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	699b      	ldr	r3, [r3, #24]
 8003f9a:	617b      	str	r3, [r7, #20]
 8003f9c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fa0:	6a39      	ldr	r1, [r7, #32]
 8003fa2:	68f8      	ldr	r0, [r7, #12]
 8003fa4:	f000 fa02 	bl	80043ac <I2C_WaitOnTXEFlagUntilTimeout>
 8003fa8:	4603      	mov	r3, r0
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d00d      	beq.n	8003fca <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fb2:	2b04      	cmp	r3, #4
 8003fb4:	d107      	bne.n	8003fc6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	681a      	ldr	r2, [r3, #0]
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003fc4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003fc6:	2301      	movs	r3, #1
 8003fc8:	e02b      	b.n	8004022 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003fca:	88fb      	ldrh	r3, [r7, #6]
 8003fcc:	2b01      	cmp	r3, #1
 8003fce:	d105      	bne.n	8003fdc <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003fd0:	893b      	ldrh	r3, [r7, #8]
 8003fd2:	b2da      	uxtb	r2, r3
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	611a      	str	r2, [r3, #16]
 8003fda:	e021      	b.n	8004020 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003fdc:	893b      	ldrh	r3, [r7, #8]
 8003fde:	0a1b      	lsrs	r3, r3, #8
 8003fe0:	b29b      	uxth	r3, r3
 8003fe2:	b2da      	uxtb	r2, r3
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003fea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fec:	6a39      	ldr	r1, [r7, #32]
 8003fee:	68f8      	ldr	r0, [r7, #12]
 8003ff0:	f000 f9dc 	bl	80043ac <I2C_WaitOnTXEFlagUntilTimeout>
 8003ff4:	4603      	mov	r3, r0
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d00d      	beq.n	8004016 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ffe:	2b04      	cmp	r3, #4
 8004000:	d107      	bne.n	8004012 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	681a      	ldr	r2, [r3, #0]
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004010:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004012:	2301      	movs	r3, #1
 8004014:	e005      	b.n	8004022 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004016:	893b      	ldrh	r3, [r7, #8]
 8004018:	b2da      	uxtb	r2, r3
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004020:	2300      	movs	r3, #0
}
 8004022:	4618      	mov	r0, r3
 8004024:	3718      	adds	r7, #24
 8004026:	46bd      	mov	sp, r7
 8004028:	bd80      	pop	{r7, pc}
 800402a:	bf00      	nop
 800402c:	00010002 	.word	0x00010002

08004030 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004030:	b580      	push	{r7, lr}
 8004032:	b088      	sub	sp, #32
 8004034:	af02      	add	r7, sp, #8
 8004036:	60f8      	str	r0, [r7, #12]
 8004038:	4608      	mov	r0, r1
 800403a:	4611      	mov	r1, r2
 800403c:	461a      	mov	r2, r3
 800403e:	4603      	mov	r3, r0
 8004040:	817b      	strh	r3, [r7, #10]
 8004042:	460b      	mov	r3, r1
 8004044:	813b      	strh	r3, [r7, #8]
 8004046:	4613      	mov	r3, r2
 8004048:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	681a      	ldr	r2, [r3, #0]
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004058:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	681a      	ldr	r2, [r3, #0]
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004068:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800406a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800406c:	9300      	str	r3, [sp, #0]
 800406e:	6a3b      	ldr	r3, [r7, #32]
 8004070:	2200      	movs	r2, #0
 8004072:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004076:	68f8      	ldr	r0, [r7, #12]
 8004078:	f000 f8c2 	bl	8004200 <I2C_WaitOnFlagUntilTimeout>
 800407c:	4603      	mov	r3, r0
 800407e:	2b00      	cmp	r3, #0
 8004080:	d00d      	beq.n	800409e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800408c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004090:	d103      	bne.n	800409a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004098:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800409a:	2303      	movs	r3, #3
 800409c:	e0aa      	b.n	80041f4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800409e:	897b      	ldrh	r3, [r7, #10]
 80040a0:	b2db      	uxtb	r3, r3
 80040a2:	461a      	mov	r2, r3
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80040ac:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80040ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040b0:	6a3a      	ldr	r2, [r7, #32]
 80040b2:	4952      	ldr	r1, [pc, #328]	; (80041fc <I2C_RequestMemoryRead+0x1cc>)
 80040b4:	68f8      	ldr	r0, [r7, #12]
 80040b6:	f000 f8fa 	bl	80042ae <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80040ba:	4603      	mov	r3, r0
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d001      	beq.n	80040c4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80040c0:	2301      	movs	r3, #1
 80040c2:	e097      	b.n	80041f4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040c4:	2300      	movs	r3, #0
 80040c6:	617b      	str	r3, [r7, #20]
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	695b      	ldr	r3, [r3, #20]
 80040ce:	617b      	str	r3, [r7, #20]
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	699b      	ldr	r3, [r3, #24]
 80040d6:	617b      	str	r3, [r7, #20]
 80040d8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80040da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040dc:	6a39      	ldr	r1, [r7, #32]
 80040de:	68f8      	ldr	r0, [r7, #12]
 80040e0:	f000 f964 	bl	80043ac <I2C_WaitOnTXEFlagUntilTimeout>
 80040e4:	4603      	mov	r3, r0
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d00d      	beq.n	8004106 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ee:	2b04      	cmp	r3, #4
 80040f0:	d107      	bne.n	8004102 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	681a      	ldr	r2, [r3, #0]
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004100:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004102:	2301      	movs	r3, #1
 8004104:	e076      	b.n	80041f4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004106:	88fb      	ldrh	r3, [r7, #6]
 8004108:	2b01      	cmp	r3, #1
 800410a:	d105      	bne.n	8004118 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800410c:	893b      	ldrh	r3, [r7, #8]
 800410e:	b2da      	uxtb	r2, r3
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	611a      	str	r2, [r3, #16]
 8004116:	e021      	b.n	800415c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004118:	893b      	ldrh	r3, [r7, #8]
 800411a:	0a1b      	lsrs	r3, r3, #8
 800411c:	b29b      	uxth	r3, r3
 800411e:	b2da      	uxtb	r2, r3
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004126:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004128:	6a39      	ldr	r1, [r7, #32]
 800412a:	68f8      	ldr	r0, [r7, #12]
 800412c:	f000 f93e 	bl	80043ac <I2C_WaitOnTXEFlagUntilTimeout>
 8004130:	4603      	mov	r3, r0
 8004132:	2b00      	cmp	r3, #0
 8004134:	d00d      	beq.n	8004152 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800413a:	2b04      	cmp	r3, #4
 800413c:	d107      	bne.n	800414e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	681a      	ldr	r2, [r3, #0]
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800414c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800414e:	2301      	movs	r3, #1
 8004150:	e050      	b.n	80041f4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004152:	893b      	ldrh	r3, [r7, #8]
 8004154:	b2da      	uxtb	r2, r3
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800415c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800415e:	6a39      	ldr	r1, [r7, #32]
 8004160:	68f8      	ldr	r0, [r7, #12]
 8004162:	f000 f923 	bl	80043ac <I2C_WaitOnTXEFlagUntilTimeout>
 8004166:	4603      	mov	r3, r0
 8004168:	2b00      	cmp	r3, #0
 800416a:	d00d      	beq.n	8004188 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004170:	2b04      	cmp	r3, #4
 8004172:	d107      	bne.n	8004184 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	681a      	ldr	r2, [r3, #0]
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004182:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004184:	2301      	movs	r3, #1
 8004186:	e035      	b.n	80041f4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	681a      	ldr	r2, [r3, #0]
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004196:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800419a:	9300      	str	r3, [sp, #0]
 800419c:	6a3b      	ldr	r3, [r7, #32]
 800419e:	2200      	movs	r2, #0
 80041a0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80041a4:	68f8      	ldr	r0, [r7, #12]
 80041a6:	f000 f82b 	bl	8004200 <I2C_WaitOnFlagUntilTimeout>
 80041aa:	4603      	mov	r3, r0
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d00d      	beq.n	80041cc <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80041be:	d103      	bne.n	80041c8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80041c6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80041c8:	2303      	movs	r3, #3
 80041ca:	e013      	b.n	80041f4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80041cc:	897b      	ldrh	r3, [r7, #10]
 80041ce:	b2db      	uxtb	r3, r3
 80041d0:	f043 0301 	orr.w	r3, r3, #1
 80041d4:	b2da      	uxtb	r2, r3
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80041dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041de:	6a3a      	ldr	r2, [r7, #32]
 80041e0:	4906      	ldr	r1, [pc, #24]	; (80041fc <I2C_RequestMemoryRead+0x1cc>)
 80041e2:	68f8      	ldr	r0, [r7, #12]
 80041e4:	f000 f863 	bl	80042ae <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80041e8:	4603      	mov	r3, r0
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d001      	beq.n	80041f2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80041ee:	2301      	movs	r3, #1
 80041f0:	e000      	b.n	80041f4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80041f2:	2300      	movs	r3, #0
}
 80041f4:	4618      	mov	r0, r3
 80041f6:	3718      	adds	r7, #24
 80041f8:	46bd      	mov	sp, r7
 80041fa:	bd80      	pop	{r7, pc}
 80041fc:	00010002 	.word	0x00010002

08004200 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004200:	b580      	push	{r7, lr}
 8004202:	b084      	sub	sp, #16
 8004204:	af00      	add	r7, sp, #0
 8004206:	60f8      	str	r0, [r7, #12]
 8004208:	60b9      	str	r1, [r7, #8]
 800420a:	603b      	str	r3, [r7, #0]
 800420c:	4613      	mov	r3, r2
 800420e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004210:	e025      	b.n	800425e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004218:	d021      	beq.n	800425e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800421a:	f7fe fe8d 	bl	8002f38 <HAL_GetTick>
 800421e:	4602      	mov	r2, r0
 8004220:	69bb      	ldr	r3, [r7, #24]
 8004222:	1ad3      	subs	r3, r2, r3
 8004224:	683a      	ldr	r2, [r7, #0]
 8004226:	429a      	cmp	r2, r3
 8004228:	d302      	bcc.n	8004230 <I2C_WaitOnFlagUntilTimeout+0x30>
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	2b00      	cmp	r3, #0
 800422e:	d116      	bne.n	800425e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	2200      	movs	r2, #0
 8004234:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	2220      	movs	r2, #32
 800423a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	2200      	movs	r2, #0
 8004242:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800424a:	f043 0220 	orr.w	r2, r3, #32
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	2200      	movs	r2, #0
 8004256:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800425a:	2301      	movs	r3, #1
 800425c:	e023      	b.n	80042a6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800425e:	68bb      	ldr	r3, [r7, #8]
 8004260:	0c1b      	lsrs	r3, r3, #16
 8004262:	b2db      	uxtb	r3, r3
 8004264:	2b01      	cmp	r3, #1
 8004266:	d10d      	bne.n	8004284 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	695b      	ldr	r3, [r3, #20]
 800426e:	43da      	mvns	r2, r3
 8004270:	68bb      	ldr	r3, [r7, #8]
 8004272:	4013      	ands	r3, r2
 8004274:	b29b      	uxth	r3, r3
 8004276:	2b00      	cmp	r3, #0
 8004278:	bf0c      	ite	eq
 800427a:	2301      	moveq	r3, #1
 800427c:	2300      	movne	r3, #0
 800427e:	b2db      	uxtb	r3, r3
 8004280:	461a      	mov	r2, r3
 8004282:	e00c      	b.n	800429e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	699b      	ldr	r3, [r3, #24]
 800428a:	43da      	mvns	r2, r3
 800428c:	68bb      	ldr	r3, [r7, #8]
 800428e:	4013      	ands	r3, r2
 8004290:	b29b      	uxth	r3, r3
 8004292:	2b00      	cmp	r3, #0
 8004294:	bf0c      	ite	eq
 8004296:	2301      	moveq	r3, #1
 8004298:	2300      	movne	r3, #0
 800429a:	b2db      	uxtb	r3, r3
 800429c:	461a      	mov	r2, r3
 800429e:	79fb      	ldrb	r3, [r7, #7]
 80042a0:	429a      	cmp	r2, r3
 80042a2:	d0b6      	beq.n	8004212 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80042a4:	2300      	movs	r3, #0
}
 80042a6:	4618      	mov	r0, r3
 80042a8:	3710      	adds	r7, #16
 80042aa:	46bd      	mov	sp, r7
 80042ac:	bd80      	pop	{r7, pc}

080042ae <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80042ae:	b580      	push	{r7, lr}
 80042b0:	b084      	sub	sp, #16
 80042b2:	af00      	add	r7, sp, #0
 80042b4:	60f8      	str	r0, [r7, #12]
 80042b6:	60b9      	str	r1, [r7, #8]
 80042b8:	607a      	str	r2, [r7, #4]
 80042ba:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80042bc:	e051      	b.n	8004362 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	695b      	ldr	r3, [r3, #20]
 80042c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042cc:	d123      	bne.n	8004316 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	681a      	ldr	r2, [r3, #0]
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80042dc:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80042e6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	2200      	movs	r2, #0
 80042ec:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	2220      	movs	r2, #32
 80042f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	2200      	movs	r2, #0
 80042fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004302:	f043 0204 	orr.w	r2, r3, #4
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	2200      	movs	r2, #0
 800430e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004312:	2301      	movs	r3, #1
 8004314:	e046      	b.n	80043a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	f1b3 3fff 	cmp.w	r3, #4294967295
 800431c:	d021      	beq.n	8004362 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800431e:	f7fe fe0b 	bl	8002f38 <HAL_GetTick>
 8004322:	4602      	mov	r2, r0
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	1ad3      	subs	r3, r2, r3
 8004328:	687a      	ldr	r2, [r7, #4]
 800432a:	429a      	cmp	r2, r3
 800432c:	d302      	bcc.n	8004334 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	2b00      	cmp	r3, #0
 8004332:	d116      	bne.n	8004362 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	2200      	movs	r2, #0
 8004338:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	2220      	movs	r2, #32
 800433e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	2200      	movs	r2, #0
 8004346:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800434e:	f043 0220 	orr.w	r2, r3, #32
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	2200      	movs	r2, #0
 800435a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800435e:	2301      	movs	r3, #1
 8004360:	e020      	b.n	80043a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004362:	68bb      	ldr	r3, [r7, #8]
 8004364:	0c1b      	lsrs	r3, r3, #16
 8004366:	b2db      	uxtb	r3, r3
 8004368:	2b01      	cmp	r3, #1
 800436a:	d10c      	bne.n	8004386 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	695b      	ldr	r3, [r3, #20]
 8004372:	43da      	mvns	r2, r3
 8004374:	68bb      	ldr	r3, [r7, #8]
 8004376:	4013      	ands	r3, r2
 8004378:	b29b      	uxth	r3, r3
 800437a:	2b00      	cmp	r3, #0
 800437c:	bf14      	ite	ne
 800437e:	2301      	movne	r3, #1
 8004380:	2300      	moveq	r3, #0
 8004382:	b2db      	uxtb	r3, r3
 8004384:	e00b      	b.n	800439e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	699b      	ldr	r3, [r3, #24]
 800438c:	43da      	mvns	r2, r3
 800438e:	68bb      	ldr	r3, [r7, #8]
 8004390:	4013      	ands	r3, r2
 8004392:	b29b      	uxth	r3, r3
 8004394:	2b00      	cmp	r3, #0
 8004396:	bf14      	ite	ne
 8004398:	2301      	movne	r3, #1
 800439a:	2300      	moveq	r3, #0
 800439c:	b2db      	uxtb	r3, r3
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d18d      	bne.n	80042be <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80043a2:	2300      	movs	r3, #0
}
 80043a4:	4618      	mov	r0, r3
 80043a6:	3710      	adds	r7, #16
 80043a8:	46bd      	mov	sp, r7
 80043aa:	bd80      	pop	{r7, pc}

080043ac <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b084      	sub	sp, #16
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	60f8      	str	r0, [r7, #12]
 80043b4:	60b9      	str	r1, [r7, #8]
 80043b6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80043b8:	e02d      	b.n	8004416 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80043ba:	68f8      	ldr	r0, [r7, #12]
 80043bc:	f000 f8ce 	bl	800455c <I2C_IsAcknowledgeFailed>
 80043c0:	4603      	mov	r3, r0
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d001      	beq.n	80043ca <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80043c6:	2301      	movs	r3, #1
 80043c8:	e02d      	b.n	8004426 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043ca:	68bb      	ldr	r3, [r7, #8]
 80043cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043d0:	d021      	beq.n	8004416 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043d2:	f7fe fdb1 	bl	8002f38 <HAL_GetTick>
 80043d6:	4602      	mov	r2, r0
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	1ad3      	subs	r3, r2, r3
 80043dc:	68ba      	ldr	r2, [r7, #8]
 80043de:	429a      	cmp	r2, r3
 80043e0:	d302      	bcc.n	80043e8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80043e2:	68bb      	ldr	r3, [r7, #8]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d116      	bne.n	8004416 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	2200      	movs	r2, #0
 80043ec:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	2220      	movs	r2, #32
 80043f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	2200      	movs	r2, #0
 80043fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004402:	f043 0220 	orr.w	r2, r3, #32
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	2200      	movs	r2, #0
 800440e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004412:	2301      	movs	r3, #1
 8004414:	e007      	b.n	8004426 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	695b      	ldr	r3, [r3, #20]
 800441c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004420:	2b80      	cmp	r3, #128	; 0x80
 8004422:	d1ca      	bne.n	80043ba <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004424:	2300      	movs	r3, #0
}
 8004426:	4618      	mov	r0, r3
 8004428:	3710      	adds	r7, #16
 800442a:	46bd      	mov	sp, r7
 800442c:	bd80      	pop	{r7, pc}

0800442e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800442e:	b580      	push	{r7, lr}
 8004430:	b084      	sub	sp, #16
 8004432:	af00      	add	r7, sp, #0
 8004434:	60f8      	str	r0, [r7, #12]
 8004436:	60b9      	str	r1, [r7, #8]
 8004438:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800443a:	e02d      	b.n	8004498 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800443c:	68f8      	ldr	r0, [r7, #12]
 800443e:	f000 f88d 	bl	800455c <I2C_IsAcknowledgeFailed>
 8004442:	4603      	mov	r3, r0
 8004444:	2b00      	cmp	r3, #0
 8004446:	d001      	beq.n	800444c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004448:	2301      	movs	r3, #1
 800444a:	e02d      	b.n	80044a8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800444c:	68bb      	ldr	r3, [r7, #8]
 800444e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004452:	d021      	beq.n	8004498 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004454:	f7fe fd70 	bl	8002f38 <HAL_GetTick>
 8004458:	4602      	mov	r2, r0
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	1ad3      	subs	r3, r2, r3
 800445e:	68ba      	ldr	r2, [r7, #8]
 8004460:	429a      	cmp	r2, r3
 8004462:	d302      	bcc.n	800446a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004464:	68bb      	ldr	r3, [r7, #8]
 8004466:	2b00      	cmp	r3, #0
 8004468:	d116      	bne.n	8004498 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	2200      	movs	r2, #0
 800446e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	2220      	movs	r2, #32
 8004474:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	2200      	movs	r2, #0
 800447c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004484:	f043 0220 	orr.w	r2, r3, #32
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	2200      	movs	r2, #0
 8004490:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004494:	2301      	movs	r3, #1
 8004496:	e007      	b.n	80044a8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	695b      	ldr	r3, [r3, #20]
 800449e:	f003 0304 	and.w	r3, r3, #4
 80044a2:	2b04      	cmp	r3, #4
 80044a4:	d1ca      	bne.n	800443c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80044a6:	2300      	movs	r3, #0
}
 80044a8:	4618      	mov	r0, r3
 80044aa:	3710      	adds	r7, #16
 80044ac:	46bd      	mov	sp, r7
 80044ae:	bd80      	pop	{r7, pc}

080044b0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80044b0:	b580      	push	{r7, lr}
 80044b2:	b084      	sub	sp, #16
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	60f8      	str	r0, [r7, #12]
 80044b8:	60b9      	str	r1, [r7, #8]
 80044ba:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80044bc:	e042      	b.n	8004544 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	695b      	ldr	r3, [r3, #20]
 80044c4:	f003 0310 	and.w	r3, r3, #16
 80044c8:	2b10      	cmp	r3, #16
 80044ca:	d119      	bne.n	8004500 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f06f 0210 	mvn.w	r2, #16
 80044d4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	2200      	movs	r2, #0
 80044da:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	2220      	movs	r2, #32
 80044e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	2200      	movs	r2, #0
 80044e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	2200      	movs	r2, #0
 80044f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80044fc:	2301      	movs	r3, #1
 80044fe:	e029      	b.n	8004554 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004500:	f7fe fd1a 	bl	8002f38 <HAL_GetTick>
 8004504:	4602      	mov	r2, r0
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	1ad3      	subs	r3, r2, r3
 800450a:	68ba      	ldr	r2, [r7, #8]
 800450c:	429a      	cmp	r2, r3
 800450e:	d302      	bcc.n	8004516 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004510:	68bb      	ldr	r3, [r7, #8]
 8004512:	2b00      	cmp	r3, #0
 8004514:	d116      	bne.n	8004544 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	2200      	movs	r2, #0
 800451a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	2220      	movs	r2, #32
 8004520:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	2200      	movs	r2, #0
 8004528:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004530:	f043 0220 	orr.w	r2, r3, #32
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	2200      	movs	r2, #0
 800453c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004540:	2301      	movs	r3, #1
 8004542:	e007      	b.n	8004554 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	695b      	ldr	r3, [r3, #20]
 800454a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800454e:	2b40      	cmp	r3, #64	; 0x40
 8004550:	d1b5      	bne.n	80044be <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004552:	2300      	movs	r3, #0
}
 8004554:	4618      	mov	r0, r3
 8004556:	3710      	adds	r7, #16
 8004558:	46bd      	mov	sp, r7
 800455a:	bd80      	pop	{r7, pc}

0800455c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800455c:	b480      	push	{r7}
 800455e:	b083      	sub	sp, #12
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	695b      	ldr	r3, [r3, #20]
 800456a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800456e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004572:	d11b      	bne.n	80045ac <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800457c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	2200      	movs	r2, #0
 8004582:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2220      	movs	r2, #32
 8004588:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2200      	movs	r2, #0
 8004590:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004598:	f043 0204 	orr.w	r2, r3, #4
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2200      	movs	r2, #0
 80045a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80045a8:	2301      	movs	r3, #1
 80045aa:	e000      	b.n	80045ae <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80045ac:	2300      	movs	r3, #0
}
 80045ae:	4618      	mov	r0, r3
 80045b0:	370c      	adds	r7, #12
 80045b2:	46bd      	mov	sp, r7
 80045b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b8:	4770      	bx	lr
	...

080045bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80045bc:	b580      	push	{r7, lr}
 80045be:	b084      	sub	sp, #16
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
 80045c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d101      	bne.n	80045d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80045cc:	2301      	movs	r3, #1
 80045ce:	e0cc      	b.n	800476a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80045d0:	4b68      	ldr	r3, [pc, #416]	; (8004774 <HAL_RCC_ClockConfig+0x1b8>)
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f003 030f 	and.w	r3, r3, #15
 80045d8:	683a      	ldr	r2, [r7, #0]
 80045da:	429a      	cmp	r2, r3
 80045dc:	d90c      	bls.n	80045f8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045de:	4b65      	ldr	r3, [pc, #404]	; (8004774 <HAL_RCC_ClockConfig+0x1b8>)
 80045e0:	683a      	ldr	r2, [r7, #0]
 80045e2:	b2d2      	uxtb	r2, r2
 80045e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80045e6:	4b63      	ldr	r3, [pc, #396]	; (8004774 <HAL_RCC_ClockConfig+0x1b8>)
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f003 030f 	and.w	r3, r3, #15
 80045ee:	683a      	ldr	r2, [r7, #0]
 80045f0:	429a      	cmp	r2, r3
 80045f2:	d001      	beq.n	80045f8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80045f4:	2301      	movs	r3, #1
 80045f6:	e0b8      	b.n	800476a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f003 0302 	and.w	r3, r3, #2
 8004600:	2b00      	cmp	r3, #0
 8004602:	d020      	beq.n	8004646 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f003 0304 	and.w	r3, r3, #4
 800460c:	2b00      	cmp	r3, #0
 800460e:	d005      	beq.n	800461c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004610:	4b59      	ldr	r3, [pc, #356]	; (8004778 <HAL_RCC_ClockConfig+0x1bc>)
 8004612:	689b      	ldr	r3, [r3, #8]
 8004614:	4a58      	ldr	r2, [pc, #352]	; (8004778 <HAL_RCC_ClockConfig+0x1bc>)
 8004616:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800461a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f003 0308 	and.w	r3, r3, #8
 8004624:	2b00      	cmp	r3, #0
 8004626:	d005      	beq.n	8004634 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004628:	4b53      	ldr	r3, [pc, #332]	; (8004778 <HAL_RCC_ClockConfig+0x1bc>)
 800462a:	689b      	ldr	r3, [r3, #8]
 800462c:	4a52      	ldr	r2, [pc, #328]	; (8004778 <HAL_RCC_ClockConfig+0x1bc>)
 800462e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004632:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004634:	4b50      	ldr	r3, [pc, #320]	; (8004778 <HAL_RCC_ClockConfig+0x1bc>)
 8004636:	689b      	ldr	r3, [r3, #8]
 8004638:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	689b      	ldr	r3, [r3, #8]
 8004640:	494d      	ldr	r1, [pc, #308]	; (8004778 <HAL_RCC_ClockConfig+0x1bc>)
 8004642:	4313      	orrs	r3, r2
 8004644:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f003 0301 	and.w	r3, r3, #1
 800464e:	2b00      	cmp	r3, #0
 8004650:	d044      	beq.n	80046dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	685b      	ldr	r3, [r3, #4]
 8004656:	2b01      	cmp	r3, #1
 8004658:	d107      	bne.n	800466a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800465a:	4b47      	ldr	r3, [pc, #284]	; (8004778 <HAL_RCC_ClockConfig+0x1bc>)
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004662:	2b00      	cmp	r3, #0
 8004664:	d119      	bne.n	800469a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004666:	2301      	movs	r3, #1
 8004668:	e07f      	b.n	800476a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	685b      	ldr	r3, [r3, #4]
 800466e:	2b02      	cmp	r3, #2
 8004670:	d003      	beq.n	800467a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004676:	2b03      	cmp	r3, #3
 8004678:	d107      	bne.n	800468a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800467a:	4b3f      	ldr	r3, [pc, #252]	; (8004778 <HAL_RCC_ClockConfig+0x1bc>)
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004682:	2b00      	cmp	r3, #0
 8004684:	d109      	bne.n	800469a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004686:	2301      	movs	r3, #1
 8004688:	e06f      	b.n	800476a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800468a:	4b3b      	ldr	r3, [pc, #236]	; (8004778 <HAL_RCC_ClockConfig+0x1bc>)
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f003 0302 	and.w	r3, r3, #2
 8004692:	2b00      	cmp	r3, #0
 8004694:	d101      	bne.n	800469a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004696:	2301      	movs	r3, #1
 8004698:	e067      	b.n	800476a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800469a:	4b37      	ldr	r3, [pc, #220]	; (8004778 <HAL_RCC_ClockConfig+0x1bc>)
 800469c:	689b      	ldr	r3, [r3, #8]
 800469e:	f023 0203 	bic.w	r2, r3, #3
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	685b      	ldr	r3, [r3, #4]
 80046a6:	4934      	ldr	r1, [pc, #208]	; (8004778 <HAL_RCC_ClockConfig+0x1bc>)
 80046a8:	4313      	orrs	r3, r2
 80046aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80046ac:	f7fe fc44 	bl	8002f38 <HAL_GetTick>
 80046b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046b2:	e00a      	b.n	80046ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80046b4:	f7fe fc40 	bl	8002f38 <HAL_GetTick>
 80046b8:	4602      	mov	r2, r0
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	1ad3      	subs	r3, r2, r3
 80046be:	f241 3288 	movw	r2, #5000	; 0x1388
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d901      	bls.n	80046ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80046c6:	2303      	movs	r3, #3
 80046c8:	e04f      	b.n	800476a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046ca:	4b2b      	ldr	r3, [pc, #172]	; (8004778 <HAL_RCC_ClockConfig+0x1bc>)
 80046cc:	689b      	ldr	r3, [r3, #8]
 80046ce:	f003 020c 	and.w	r2, r3, #12
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	685b      	ldr	r3, [r3, #4]
 80046d6:	009b      	lsls	r3, r3, #2
 80046d8:	429a      	cmp	r2, r3
 80046da:	d1eb      	bne.n	80046b4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80046dc:	4b25      	ldr	r3, [pc, #148]	; (8004774 <HAL_RCC_ClockConfig+0x1b8>)
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f003 030f 	and.w	r3, r3, #15
 80046e4:	683a      	ldr	r2, [r7, #0]
 80046e6:	429a      	cmp	r2, r3
 80046e8:	d20c      	bcs.n	8004704 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046ea:	4b22      	ldr	r3, [pc, #136]	; (8004774 <HAL_RCC_ClockConfig+0x1b8>)
 80046ec:	683a      	ldr	r2, [r7, #0]
 80046ee:	b2d2      	uxtb	r2, r2
 80046f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80046f2:	4b20      	ldr	r3, [pc, #128]	; (8004774 <HAL_RCC_ClockConfig+0x1b8>)
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f003 030f 	and.w	r3, r3, #15
 80046fa:	683a      	ldr	r2, [r7, #0]
 80046fc:	429a      	cmp	r2, r3
 80046fe:	d001      	beq.n	8004704 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004700:	2301      	movs	r3, #1
 8004702:	e032      	b.n	800476a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f003 0304 	and.w	r3, r3, #4
 800470c:	2b00      	cmp	r3, #0
 800470e:	d008      	beq.n	8004722 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004710:	4b19      	ldr	r3, [pc, #100]	; (8004778 <HAL_RCC_ClockConfig+0x1bc>)
 8004712:	689b      	ldr	r3, [r3, #8]
 8004714:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	68db      	ldr	r3, [r3, #12]
 800471c:	4916      	ldr	r1, [pc, #88]	; (8004778 <HAL_RCC_ClockConfig+0x1bc>)
 800471e:	4313      	orrs	r3, r2
 8004720:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f003 0308 	and.w	r3, r3, #8
 800472a:	2b00      	cmp	r3, #0
 800472c:	d009      	beq.n	8004742 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800472e:	4b12      	ldr	r3, [pc, #72]	; (8004778 <HAL_RCC_ClockConfig+0x1bc>)
 8004730:	689b      	ldr	r3, [r3, #8]
 8004732:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	691b      	ldr	r3, [r3, #16]
 800473a:	00db      	lsls	r3, r3, #3
 800473c:	490e      	ldr	r1, [pc, #56]	; (8004778 <HAL_RCC_ClockConfig+0x1bc>)
 800473e:	4313      	orrs	r3, r2
 8004740:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004742:	f000 f855 	bl	80047f0 <HAL_RCC_GetSysClockFreq>
 8004746:	4602      	mov	r2, r0
 8004748:	4b0b      	ldr	r3, [pc, #44]	; (8004778 <HAL_RCC_ClockConfig+0x1bc>)
 800474a:	689b      	ldr	r3, [r3, #8]
 800474c:	091b      	lsrs	r3, r3, #4
 800474e:	f003 030f 	and.w	r3, r3, #15
 8004752:	490a      	ldr	r1, [pc, #40]	; (800477c <HAL_RCC_ClockConfig+0x1c0>)
 8004754:	5ccb      	ldrb	r3, [r1, r3]
 8004756:	fa22 f303 	lsr.w	r3, r2, r3
 800475a:	4a09      	ldr	r2, [pc, #36]	; (8004780 <HAL_RCC_ClockConfig+0x1c4>)
 800475c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800475e:	4b09      	ldr	r3, [pc, #36]	; (8004784 <HAL_RCC_ClockConfig+0x1c8>)
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	4618      	mov	r0, r3
 8004764:	f7fe fba4 	bl	8002eb0 <HAL_InitTick>

  return HAL_OK;
 8004768:	2300      	movs	r3, #0
}
 800476a:	4618      	mov	r0, r3
 800476c:	3710      	adds	r7, #16
 800476e:	46bd      	mov	sp, r7
 8004770:	bd80      	pop	{r7, pc}
 8004772:	bf00      	nop
 8004774:	40023c00 	.word	0x40023c00
 8004778:	40023800 	.word	0x40023800
 800477c:	0800be6c 	.word	0x0800be6c
 8004780:	20000004 	.word	0x20000004
 8004784:	20000008 	.word	0x20000008

08004788 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004788:	b480      	push	{r7}
 800478a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800478c:	4b03      	ldr	r3, [pc, #12]	; (800479c <HAL_RCC_GetHCLKFreq+0x14>)
 800478e:	681b      	ldr	r3, [r3, #0]
}
 8004790:	4618      	mov	r0, r3
 8004792:	46bd      	mov	sp, r7
 8004794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004798:	4770      	bx	lr
 800479a:	bf00      	nop
 800479c:	20000004 	.word	0x20000004

080047a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80047a4:	f7ff fff0 	bl	8004788 <HAL_RCC_GetHCLKFreq>
 80047a8:	4602      	mov	r2, r0
 80047aa:	4b05      	ldr	r3, [pc, #20]	; (80047c0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80047ac:	689b      	ldr	r3, [r3, #8]
 80047ae:	0a9b      	lsrs	r3, r3, #10
 80047b0:	f003 0307 	and.w	r3, r3, #7
 80047b4:	4903      	ldr	r1, [pc, #12]	; (80047c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80047b6:	5ccb      	ldrb	r3, [r1, r3]
 80047b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80047bc:	4618      	mov	r0, r3
 80047be:	bd80      	pop	{r7, pc}
 80047c0:	40023800 	.word	0x40023800
 80047c4:	0800be7c 	.word	0x0800be7c

080047c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80047c8:	b580      	push	{r7, lr}
 80047ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80047cc:	f7ff ffdc 	bl	8004788 <HAL_RCC_GetHCLKFreq>
 80047d0:	4602      	mov	r2, r0
 80047d2:	4b05      	ldr	r3, [pc, #20]	; (80047e8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80047d4:	689b      	ldr	r3, [r3, #8]
 80047d6:	0b5b      	lsrs	r3, r3, #13
 80047d8:	f003 0307 	and.w	r3, r3, #7
 80047dc:	4903      	ldr	r1, [pc, #12]	; (80047ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80047de:	5ccb      	ldrb	r3, [r1, r3]
 80047e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80047e4:	4618      	mov	r0, r3
 80047e6:	bd80      	pop	{r7, pc}
 80047e8:	40023800 	.word	0x40023800
 80047ec:	0800be7c 	.word	0x0800be7c

080047f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80047f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80047f4:	b088      	sub	sp, #32
 80047f6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80047f8:	2300      	movs	r3, #0
 80047fa:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 80047fc:	2300      	movs	r3, #0
 80047fe:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 8004800:	2300      	movs	r3, #0
 8004802:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 8004804:	2300      	movs	r3, #0
 8004806:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 8004808:	2300      	movs	r3, #0
 800480a:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800480c:	4bce      	ldr	r3, [pc, #824]	; (8004b48 <HAL_RCC_GetSysClockFreq+0x358>)
 800480e:	689b      	ldr	r3, [r3, #8]
 8004810:	f003 030c 	and.w	r3, r3, #12
 8004814:	2b0c      	cmp	r3, #12
 8004816:	f200 818d 	bhi.w	8004b34 <HAL_RCC_GetSysClockFreq+0x344>
 800481a:	a201      	add	r2, pc, #4	; (adr r2, 8004820 <HAL_RCC_GetSysClockFreq+0x30>)
 800481c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004820:	08004855 	.word	0x08004855
 8004824:	08004b35 	.word	0x08004b35
 8004828:	08004b35 	.word	0x08004b35
 800482c:	08004b35 	.word	0x08004b35
 8004830:	0800485b 	.word	0x0800485b
 8004834:	08004b35 	.word	0x08004b35
 8004838:	08004b35 	.word	0x08004b35
 800483c:	08004b35 	.word	0x08004b35
 8004840:	08004861 	.word	0x08004861
 8004844:	08004b35 	.word	0x08004b35
 8004848:	08004b35 	.word	0x08004b35
 800484c:	08004b35 	.word	0x08004b35
 8004850:	080049d5 	.word	0x080049d5
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004854:	4bbd      	ldr	r3, [pc, #756]	; (8004b4c <HAL_RCC_GetSysClockFreq+0x35c>)
 8004856:	61bb      	str	r3, [r7, #24]
       break;
 8004858:	e16f      	b.n	8004b3a <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800485a:	4bbd      	ldr	r3, [pc, #756]	; (8004b50 <HAL_RCC_GetSysClockFreq+0x360>)
 800485c:	61bb      	str	r3, [r7, #24]
      break;
 800485e:	e16c      	b.n	8004b3a <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004860:	4bb9      	ldr	r3, [pc, #740]	; (8004b48 <HAL_RCC_GetSysClockFreq+0x358>)
 8004862:	685b      	ldr	r3, [r3, #4]
 8004864:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004868:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800486a:	4bb7      	ldr	r3, [pc, #732]	; (8004b48 <HAL_RCC_GetSysClockFreq+0x358>)
 800486c:	685b      	ldr	r3, [r3, #4]
 800486e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004872:	2b00      	cmp	r3, #0
 8004874:	d053      	beq.n	800491e <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004876:	4bb4      	ldr	r3, [pc, #720]	; (8004b48 <HAL_RCC_GetSysClockFreq+0x358>)
 8004878:	685b      	ldr	r3, [r3, #4]
 800487a:	099b      	lsrs	r3, r3, #6
 800487c:	461a      	mov	r2, r3
 800487e:	f04f 0300 	mov.w	r3, #0
 8004882:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004886:	f04f 0100 	mov.w	r1, #0
 800488a:	ea02 0400 	and.w	r4, r2, r0
 800488e:	603c      	str	r4, [r7, #0]
 8004890:	400b      	ands	r3, r1
 8004892:	607b      	str	r3, [r7, #4]
 8004894:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004898:	4620      	mov	r0, r4
 800489a:	4629      	mov	r1, r5
 800489c:	f04f 0200 	mov.w	r2, #0
 80048a0:	f04f 0300 	mov.w	r3, #0
 80048a4:	014b      	lsls	r3, r1, #5
 80048a6:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80048aa:	0142      	lsls	r2, r0, #5
 80048ac:	4610      	mov	r0, r2
 80048ae:	4619      	mov	r1, r3
 80048b0:	4623      	mov	r3, r4
 80048b2:	1ac0      	subs	r0, r0, r3
 80048b4:	462b      	mov	r3, r5
 80048b6:	eb61 0103 	sbc.w	r1, r1, r3
 80048ba:	f04f 0200 	mov.w	r2, #0
 80048be:	f04f 0300 	mov.w	r3, #0
 80048c2:	018b      	lsls	r3, r1, #6
 80048c4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80048c8:	0182      	lsls	r2, r0, #6
 80048ca:	1a12      	subs	r2, r2, r0
 80048cc:	eb63 0301 	sbc.w	r3, r3, r1
 80048d0:	f04f 0000 	mov.w	r0, #0
 80048d4:	f04f 0100 	mov.w	r1, #0
 80048d8:	00d9      	lsls	r1, r3, #3
 80048da:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80048de:	00d0      	lsls	r0, r2, #3
 80048e0:	4602      	mov	r2, r0
 80048e2:	460b      	mov	r3, r1
 80048e4:	4621      	mov	r1, r4
 80048e6:	1852      	adds	r2, r2, r1
 80048e8:	4629      	mov	r1, r5
 80048ea:	eb43 0101 	adc.w	r1, r3, r1
 80048ee:	460b      	mov	r3, r1
 80048f0:	f04f 0000 	mov.w	r0, #0
 80048f4:	f04f 0100 	mov.w	r1, #0
 80048f8:	0259      	lsls	r1, r3, #9
 80048fa:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80048fe:	0250      	lsls	r0, r2, #9
 8004900:	4602      	mov	r2, r0
 8004902:	460b      	mov	r3, r1
 8004904:	4610      	mov	r0, r2
 8004906:	4619      	mov	r1, r3
 8004908:	697b      	ldr	r3, [r7, #20]
 800490a:	461a      	mov	r2, r3
 800490c:	f04f 0300 	mov.w	r3, #0
 8004910:	f7fc f9da 	bl	8000cc8 <__aeabi_uldivmod>
 8004914:	4602      	mov	r2, r0
 8004916:	460b      	mov	r3, r1
 8004918:	4613      	mov	r3, r2
 800491a:	61fb      	str	r3, [r7, #28]
 800491c:	e04c      	b.n	80049b8 <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800491e:	4b8a      	ldr	r3, [pc, #552]	; (8004b48 <HAL_RCC_GetSysClockFreq+0x358>)
 8004920:	685b      	ldr	r3, [r3, #4]
 8004922:	099b      	lsrs	r3, r3, #6
 8004924:	461a      	mov	r2, r3
 8004926:	f04f 0300 	mov.w	r3, #0
 800492a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800492e:	f04f 0100 	mov.w	r1, #0
 8004932:	ea02 0a00 	and.w	sl, r2, r0
 8004936:	ea03 0b01 	and.w	fp, r3, r1
 800493a:	4650      	mov	r0, sl
 800493c:	4659      	mov	r1, fp
 800493e:	f04f 0200 	mov.w	r2, #0
 8004942:	f04f 0300 	mov.w	r3, #0
 8004946:	014b      	lsls	r3, r1, #5
 8004948:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800494c:	0142      	lsls	r2, r0, #5
 800494e:	4610      	mov	r0, r2
 8004950:	4619      	mov	r1, r3
 8004952:	ebb0 000a 	subs.w	r0, r0, sl
 8004956:	eb61 010b 	sbc.w	r1, r1, fp
 800495a:	f04f 0200 	mov.w	r2, #0
 800495e:	f04f 0300 	mov.w	r3, #0
 8004962:	018b      	lsls	r3, r1, #6
 8004964:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004968:	0182      	lsls	r2, r0, #6
 800496a:	1a12      	subs	r2, r2, r0
 800496c:	eb63 0301 	sbc.w	r3, r3, r1
 8004970:	f04f 0000 	mov.w	r0, #0
 8004974:	f04f 0100 	mov.w	r1, #0
 8004978:	00d9      	lsls	r1, r3, #3
 800497a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800497e:	00d0      	lsls	r0, r2, #3
 8004980:	4602      	mov	r2, r0
 8004982:	460b      	mov	r3, r1
 8004984:	eb12 020a 	adds.w	r2, r2, sl
 8004988:	eb43 030b 	adc.w	r3, r3, fp
 800498c:	f04f 0000 	mov.w	r0, #0
 8004990:	f04f 0100 	mov.w	r1, #0
 8004994:	0299      	lsls	r1, r3, #10
 8004996:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800499a:	0290      	lsls	r0, r2, #10
 800499c:	4602      	mov	r2, r0
 800499e:	460b      	mov	r3, r1
 80049a0:	4610      	mov	r0, r2
 80049a2:	4619      	mov	r1, r3
 80049a4:	697b      	ldr	r3, [r7, #20]
 80049a6:	461a      	mov	r2, r3
 80049a8:	f04f 0300 	mov.w	r3, #0
 80049ac:	f7fc f98c 	bl	8000cc8 <__aeabi_uldivmod>
 80049b0:	4602      	mov	r2, r0
 80049b2:	460b      	mov	r3, r1
 80049b4:	4613      	mov	r3, r2
 80049b6:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80049b8:	4b63      	ldr	r3, [pc, #396]	; (8004b48 <HAL_RCC_GetSysClockFreq+0x358>)
 80049ba:	685b      	ldr	r3, [r3, #4]
 80049bc:	0c1b      	lsrs	r3, r3, #16
 80049be:	f003 0303 	and.w	r3, r3, #3
 80049c2:	3301      	adds	r3, #1
 80049c4:	005b      	lsls	r3, r3, #1
 80049c6:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 80049c8:	69fa      	ldr	r2, [r7, #28]
 80049ca:	693b      	ldr	r3, [r7, #16]
 80049cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80049d0:	61bb      	str	r3, [r7, #24]
      break;
 80049d2:	e0b2      	b.n	8004b3a <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80049d4:	4b5c      	ldr	r3, [pc, #368]	; (8004b48 <HAL_RCC_GetSysClockFreq+0x358>)
 80049d6:	685b      	ldr	r3, [r3, #4]
 80049d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80049dc:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80049de:	4b5a      	ldr	r3, [pc, #360]	; (8004b48 <HAL_RCC_GetSysClockFreq+0x358>)
 80049e0:	685b      	ldr	r3, [r3, #4]
 80049e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d04d      	beq.n	8004a86 <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80049ea:	4b57      	ldr	r3, [pc, #348]	; (8004b48 <HAL_RCC_GetSysClockFreq+0x358>)
 80049ec:	685b      	ldr	r3, [r3, #4]
 80049ee:	099b      	lsrs	r3, r3, #6
 80049f0:	461a      	mov	r2, r3
 80049f2:	f04f 0300 	mov.w	r3, #0
 80049f6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80049fa:	f04f 0100 	mov.w	r1, #0
 80049fe:	ea02 0800 	and.w	r8, r2, r0
 8004a02:	ea03 0901 	and.w	r9, r3, r1
 8004a06:	4640      	mov	r0, r8
 8004a08:	4649      	mov	r1, r9
 8004a0a:	f04f 0200 	mov.w	r2, #0
 8004a0e:	f04f 0300 	mov.w	r3, #0
 8004a12:	014b      	lsls	r3, r1, #5
 8004a14:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004a18:	0142      	lsls	r2, r0, #5
 8004a1a:	4610      	mov	r0, r2
 8004a1c:	4619      	mov	r1, r3
 8004a1e:	ebb0 0008 	subs.w	r0, r0, r8
 8004a22:	eb61 0109 	sbc.w	r1, r1, r9
 8004a26:	f04f 0200 	mov.w	r2, #0
 8004a2a:	f04f 0300 	mov.w	r3, #0
 8004a2e:	018b      	lsls	r3, r1, #6
 8004a30:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004a34:	0182      	lsls	r2, r0, #6
 8004a36:	1a12      	subs	r2, r2, r0
 8004a38:	eb63 0301 	sbc.w	r3, r3, r1
 8004a3c:	f04f 0000 	mov.w	r0, #0
 8004a40:	f04f 0100 	mov.w	r1, #0
 8004a44:	00d9      	lsls	r1, r3, #3
 8004a46:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004a4a:	00d0      	lsls	r0, r2, #3
 8004a4c:	4602      	mov	r2, r0
 8004a4e:	460b      	mov	r3, r1
 8004a50:	eb12 0208 	adds.w	r2, r2, r8
 8004a54:	eb43 0309 	adc.w	r3, r3, r9
 8004a58:	f04f 0000 	mov.w	r0, #0
 8004a5c:	f04f 0100 	mov.w	r1, #0
 8004a60:	0259      	lsls	r1, r3, #9
 8004a62:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8004a66:	0250      	lsls	r0, r2, #9
 8004a68:	4602      	mov	r2, r0
 8004a6a:	460b      	mov	r3, r1
 8004a6c:	4610      	mov	r0, r2
 8004a6e:	4619      	mov	r1, r3
 8004a70:	697b      	ldr	r3, [r7, #20]
 8004a72:	461a      	mov	r2, r3
 8004a74:	f04f 0300 	mov.w	r3, #0
 8004a78:	f7fc f926 	bl	8000cc8 <__aeabi_uldivmod>
 8004a7c:	4602      	mov	r2, r0
 8004a7e:	460b      	mov	r3, r1
 8004a80:	4613      	mov	r3, r2
 8004a82:	61fb      	str	r3, [r7, #28]
 8004a84:	e04a      	b.n	8004b1c <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a86:	4b30      	ldr	r3, [pc, #192]	; (8004b48 <HAL_RCC_GetSysClockFreq+0x358>)
 8004a88:	685b      	ldr	r3, [r3, #4]
 8004a8a:	099b      	lsrs	r3, r3, #6
 8004a8c:	461a      	mov	r2, r3
 8004a8e:	f04f 0300 	mov.w	r3, #0
 8004a92:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004a96:	f04f 0100 	mov.w	r1, #0
 8004a9a:	ea02 0400 	and.w	r4, r2, r0
 8004a9e:	ea03 0501 	and.w	r5, r3, r1
 8004aa2:	4620      	mov	r0, r4
 8004aa4:	4629      	mov	r1, r5
 8004aa6:	f04f 0200 	mov.w	r2, #0
 8004aaa:	f04f 0300 	mov.w	r3, #0
 8004aae:	014b      	lsls	r3, r1, #5
 8004ab0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004ab4:	0142      	lsls	r2, r0, #5
 8004ab6:	4610      	mov	r0, r2
 8004ab8:	4619      	mov	r1, r3
 8004aba:	1b00      	subs	r0, r0, r4
 8004abc:	eb61 0105 	sbc.w	r1, r1, r5
 8004ac0:	f04f 0200 	mov.w	r2, #0
 8004ac4:	f04f 0300 	mov.w	r3, #0
 8004ac8:	018b      	lsls	r3, r1, #6
 8004aca:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004ace:	0182      	lsls	r2, r0, #6
 8004ad0:	1a12      	subs	r2, r2, r0
 8004ad2:	eb63 0301 	sbc.w	r3, r3, r1
 8004ad6:	f04f 0000 	mov.w	r0, #0
 8004ada:	f04f 0100 	mov.w	r1, #0
 8004ade:	00d9      	lsls	r1, r3, #3
 8004ae0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004ae4:	00d0      	lsls	r0, r2, #3
 8004ae6:	4602      	mov	r2, r0
 8004ae8:	460b      	mov	r3, r1
 8004aea:	1912      	adds	r2, r2, r4
 8004aec:	eb45 0303 	adc.w	r3, r5, r3
 8004af0:	f04f 0000 	mov.w	r0, #0
 8004af4:	f04f 0100 	mov.w	r1, #0
 8004af8:	0299      	lsls	r1, r3, #10
 8004afa:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004afe:	0290      	lsls	r0, r2, #10
 8004b00:	4602      	mov	r2, r0
 8004b02:	460b      	mov	r3, r1
 8004b04:	4610      	mov	r0, r2
 8004b06:	4619      	mov	r1, r3
 8004b08:	697b      	ldr	r3, [r7, #20]
 8004b0a:	461a      	mov	r2, r3
 8004b0c:	f04f 0300 	mov.w	r3, #0
 8004b10:	f7fc f8da 	bl	8000cc8 <__aeabi_uldivmod>
 8004b14:	4602      	mov	r2, r0
 8004b16:	460b      	mov	r3, r1
 8004b18:	4613      	mov	r3, r2
 8004b1a:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004b1c:	4b0a      	ldr	r3, [pc, #40]	; (8004b48 <HAL_RCC_GetSysClockFreq+0x358>)
 8004b1e:	685b      	ldr	r3, [r3, #4]
 8004b20:	0f1b      	lsrs	r3, r3, #28
 8004b22:	f003 0307 	and.w	r3, r3, #7
 8004b26:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 8004b28:	69fa      	ldr	r2, [r7, #28]
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b30:	61bb      	str	r3, [r7, #24]
      break;
 8004b32:	e002      	b.n	8004b3a <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004b34:	4b05      	ldr	r3, [pc, #20]	; (8004b4c <HAL_RCC_GetSysClockFreq+0x35c>)
 8004b36:	61bb      	str	r3, [r7, #24]
      break;
 8004b38:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004b3a:	69bb      	ldr	r3, [r7, #24]
}
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	3720      	adds	r7, #32
 8004b40:	46bd      	mov	sp, r7
 8004b42:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004b46:	bf00      	nop
 8004b48:	40023800 	.word	0x40023800
 8004b4c:	00f42400 	.word	0x00f42400
 8004b50:	007a1200 	.word	0x007a1200

08004b54 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004b54:	b580      	push	{r7, lr}
 8004b56:	b086      	sub	sp, #24
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d101      	bne.n	8004b66 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004b62:	2301      	movs	r3, #1
 8004b64:	e28d      	b.n	8005082 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f003 0301 	and.w	r3, r3, #1
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	f000 8083 	beq.w	8004c7a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004b74:	4b94      	ldr	r3, [pc, #592]	; (8004dc8 <HAL_RCC_OscConfig+0x274>)
 8004b76:	689b      	ldr	r3, [r3, #8]
 8004b78:	f003 030c 	and.w	r3, r3, #12
 8004b7c:	2b04      	cmp	r3, #4
 8004b7e:	d019      	beq.n	8004bb4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004b80:	4b91      	ldr	r3, [pc, #580]	; (8004dc8 <HAL_RCC_OscConfig+0x274>)
 8004b82:	689b      	ldr	r3, [r3, #8]
 8004b84:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004b88:	2b08      	cmp	r3, #8
 8004b8a:	d106      	bne.n	8004b9a <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004b8c:	4b8e      	ldr	r3, [pc, #568]	; (8004dc8 <HAL_RCC_OscConfig+0x274>)
 8004b8e:	685b      	ldr	r3, [r3, #4]
 8004b90:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b94:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004b98:	d00c      	beq.n	8004bb4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004b9a:	4b8b      	ldr	r3, [pc, #556]	; (8004dc8 <HAL_RCC_OscConfig+0x274>)
 8004b9c:	689b      	ldr	r3, [r3, #8]
 8004b9e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004ba2:	2b0c      	cmp	r3, #12
 8004ba4:	d112      	bne.n	8004bcc <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004ba6:	4b88      	ldr	r3, [pc, #544]	; (8004dc8 <HAL_RCC_OscConfig+0x274>)
 8004ba8:	685b      	ldr	r3, [r3, #4]
 8004baa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004bae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004bb2:	d10b      	bne.n	8004bcc <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004bb4:	4b84      	ldr	r3, [pc, #528]	; (8004dc8 <HAL_RCC_OscConfig+0x274>)
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d05b      	beq.n	8004c78 <HAL_RCC_OscConfig+0x124>
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	685b      	ldr	r3, [r3, #4]
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d157      	bne.n	8004c78 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8004bc8:	2301      	movs	r3, #1
 8004bca:	e25a      	b.n	8005082 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	685b      	ldr	r3, [r3, #4]
 8004bd0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004bd4:	d106      	bne.n	8004be4 <HAL_RCC_OscConfig+0x90>
 8004bd6:	4b7c      	ldr	r3, [pc, #496]	; (8004dc8 <HAL_RCC_OscConfig+0x274>)
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	4a7b      	ldr	r2, [pc, #492]	; (8004dc8 <HAL_RCC_OscConfig+0x274>)
 8004bdc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004be0:	6013      	str	r3, [r2, #0]
 8004be2:	e01d      	b.n	8004c20 <HAL_RCC_OscConfig+0xcc>
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	685b      	ldr	r3, [r3, #4]
 8004be8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004bec:	d10c      	bne.n	8004c08 <HAL_RCC_OscConfig+0xb4>
 8004bee:	4b76      	ldr	r3, [pc, #472]	; (8004dc8 <HAL_RCC_OscConfig+0x274>)
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	4a75      	ldr	r2, [pc, #468]	; (8004dc8 <HAL_RCC_OscConfig+0x274>)
 8004bf4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004bf8:	6013      	str	r3, [r2, #0]
 8004bfa:	4b73      	ldr	r3, [pc, #460]	; (8004dc8 <HAL_RCC_OscConfig+0x274>)
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	4a72      	ldr	r2, [pc, #456]	; (8004dc8 <HAL_RCC_OscConfig+0x274>)
 8004c00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c04:	6013      	str	r3, [r2, #0]
 8004c06:	e00b      	b.n	8004c20 <HAL_RCC_OscConfig+0xcc>
 8004c08:	4b6f      	ldr	r3, [pc, #444]	; (8004dc8 <HAL_RCC_OscConfig+0x274>)
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	4a6e      	ldr	r2, [pc, #440]	; (8004dc8 <HAL_RCC_OscConfig+0x274>)
 8004c0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c12:	6013      	str	r3, [r2, #0]
 8004c14:	4b6c      	ldr	r3, [pc, #432]	; (8004dc8 <HAL_RCC_OscConfig+0x274>)
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	4a6b      	ldr	r2, [pc, #428]	; (8004dc8 <HAL_RCC_OscConfig+0x274>)
 8004c1a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004c1e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	685b      	ldr	r3, [r3, #4]
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d013      	beq.n	8004c50 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c28:	f7fe f986 	bl	8002f38 <HAL_GetTick>
 8004c2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c2e:	e008      	b.n	8004c42 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004c30:	f7fe f982 	bl	8002f38 <HAL_GetTick>
 8004c34:	4602      	mov	r2, r0
 8004c36:	693b      	ldr	r3, [r7, #16]
 8004c38:	1ad3      	subs	r3, r2, r3
 8004c3a:	2b64      	cmp	r3, #100	; 0x64
 8004c3c:	d901      	bls.n	8004c42 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004c3e:	2303      	movs	r3, #3
 8004c40:	e21f      	b.n	8005082 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c42:	4b61      	ldr	r3, [pc, #388]	; (8004dc8 <HAL_RCC_OscConfig+0x274>)
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d0f0      	beq.n	8004c30 <HAL_RCC_OscConfig+0xdc>
 8004c4e:	e014      	b.n	8004c7a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c50:	f7fe f972 	bl	8002f38 <HAL_GetTick>
 8004c54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c56:	e008      	b.n	8004c6a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004c58:	f7fe f96e 	bl	8002f38 <HAL_GetTick>
 8004c5c:	4602      	mov	r2, r0
 8004c5e:	693b      	ldr	r3, [r7, #16]
 8004c60:	1ad3      	subs	r3, r2, r3
 8004c62:	2b64      	cmp	r3, #100	; 0x64
 8004c64:	d901      	bls.n	8004c6a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8004c66:	2303      	movs	r3, #3
 8004c68:	e20b      	b.n	8005082 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c6a:	4b57      	ldr	r3, [pc, #348]	; (8004dc8 <HAL_RCC_OscConfig+0x274>)
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d1f0      	bne.n	8004c58 <HAL_RCC_OscConfig+0x104>
 8004c76:	e000      	b.n	8004c7a <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c78:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f003 0302 	and.w	r3, r3, #2
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d06f      	beq.n	8004d66 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004c86:	4b50      	ldr	r3, [pc, #320]	; (8004dc8 <HAL_RCC_OscConfig+0x274>)
 8004c88:	689b      	ldr	r3, [r3, #8]
 8004c8a:	f003 030c 	and.w	r3, r3, #12
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d017      	beq.n	8004cc2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004c92:	4b4d      	ldr	r3, [pc, #308]	; (8004dc8 <HAL_RCC_OscConfig+0x274>)
 8004c94:	689b      	ldr	r3, [r3, #8]
 8004c96:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004c9a:	2b08      	cmp	r3, #8
 8004c9c:	d105      	bne.n	8004caa <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004c9e:	4b4a      	ldr	r3, [pc, #296]	; (8004dc8 <HAL_RCC_OscConfig+0x274>)
 8004ca0:	685b      	ldr	r3, [r3, #4]
 8004ca2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d00b      	beq.n	8004cc2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004caa:	4b47      	ldr	r3, [pc, #284]	; (8004dc8 <HAL_RCC_OscConfig+0x274>)
 8004cac:	689b      	ldr	r3, [r3, #8]
 8004cae:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004cb2:	2b0c      	cmp	r3, #12
 8004cb4:	d11c      	bne.n	8004cf0 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004cb6:	4b44      	ldr	r3, [pc, #272]	; (8004dc8 <HAL_RCC_OscConfig+0x274>)
 8004cb8:	685b      	ldr	r3, [r3, #4]
 8004cba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d116      	bne.n	8004cf0 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004cc2:	4b41      	ldr	r3, [pc, #260]	; (8004dc8 <HAL_RCC_OscConfig+0x274>)
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f003 0302 	and.w	r3, r3, #2
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d005      	beq.n	8004cda <HAL_RCC_OscConfig+0x186>
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	68db      	ldr	r3, [r3, #12]
 8004cd2:	2b01      	cmp	r3, #1
 8004cd4:	d001      	beq.n	8004cda <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8004cd6:	2301      	movs	r3, #1
 8004cd8:	e1d3      	b.n	8005082 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004cda:	4b3b      	ldr	r3, [pc, #236]	; (8004dc8 <HAL_RCC_OscConfig+0x274>)
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	691b      	ldr	r3, [r3, #16]
 8004ce6:	00db      	lsls	r3, r3, #3
 8004ce8:	4937      	ldr	r1, [pc, #220]	; (8004dc8 <HAL_RCC_OscConfig+0x274>)
 8004cea:	4313      	orrs	r3, r2
 8004cec:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004cee:	e03a      	b.n	8004d66 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	68db      	ldr	r3, [r3, #12]
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d020      	beq.n	8004d3a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004cf8:	4b34      	ldr	r3, [pc, #208]	; (8004dcc <HAL_RCC_OscConfig+0x278>)
 8004cfa:	2201      	movs	r2, #1
 8004cfc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cfe:	f7fe f91b 	bl	8002f38 <HAL_GetTick>
 8004d02:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d04:	e008      	b.n	8004d18 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004d06:	f7fe f917 	bl	8002f38 <HAL_GetTick>
 8004d0a:	4602      	mov	r2, r0
 8004d0c:	693b      	ldr	r3, [r7, #16]
 8004d0e:	1ad3      	subs	r3, r2, r3
 8004d10:	2b02      	cmp	r3, #2
 8004d12:	d901      	bls.n	8004d18 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004d14:	2303      	movs	r3, #3
 8004d16:	e1b4      	b.n	8005082 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d18:	4b2b      	ldr	r3, [pc, #172]	; (8004dc8 <HAL_RCC_OscConfig+0x274>)
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f003 0302 	and.w	r3, r3, #2
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d0f0      	beq.n	8004d06 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d24:	4b28      	ldr	r3, [pc, #160]	; (8004dc8 <HAL_RCC_OscConfig+0x274>)
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	691b      	ldr	r3, [r3, #16]
 8004d30:	00db      	lsls	r3, r3, #3
 8004d32:	4925      	ldr	r1, [pc, #148]	; (8004dc8 <HAL_RCC_OscConfig+0x274>)
 8004d34:	4313      	orrs	r3, r2
 8004d36:	600b      	str	r3, [r1, #0]
 8004d38:	e015      	b.n	8004d66 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004d3a:	4b24      	ldr	r3, [pc, #144]	; (8004dcc <HAL_RCC_OscConfig+0x278>)
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d40:	f7fe f8fa 	bl	8002f38 <HAL_GetTick>
 8004d44:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d46:	e008      	b.n	8004d5a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004d48:	f7fe f8f6 	bl	8002f38 <HAL_GetTick>
 8004d4c:	4602      	mov	r2, r0
 8004d4e:	693b      	ldr	r3, [r7, #16]
 8004d50:	1ad3      	subs	r3, r2, r3
 8004d52:	2b02      	cmp	r3, #2
 8004d54:	d901      	bls.n	8004d5a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004d56:	2303      	movs	r3, #3
 8004d58:	e193      	b.n	8005082 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d5a:	4b1b      	ldr	r3, [pc, #108]	; (8004dc8 <HAL_RCC_OscConfig+0x274>)
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f003 0302 	and.w	r3, r3, #2
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d1f0      	bne.n	8004d48 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f003 0308 	and.w	r3, r3, #8
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d036      	beq.n	8004de0 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	695b      	ldr	r3, [r3, #20]
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d016      	beq.n	8004da8 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004d7a:	4b15      	ldr	r3, [pc, #84]	; (8004dd0 <HAL_RCC_OscConfig+0x27c>)
 8004d7c:	2201      	movs	r2, #1
 8004d7e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d80:	f7fe f8da 	bl	8002f38 <HAL_GetTick>
 8004d84:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d86:	e008      	b.n	8004d9a <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004d88:	f7fe f8d6 	bl	8002f38 <HAL_GetTick>
 8004d8c:	4602      	mov	r2, r0
 8004d8e:	693b      	ldr	r3, [r7, #16]
 8004d90:	1ad3      	subs	r3, r2, r3
 8004d92:	2b02      	cmp	r3, #2
 8004d94:	d901      	bls.n	8004d9a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8004d96:	2303      	movs	r3, #3
 8004d98:	e173      	b.n	8005082 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d9a:	4b0b      	ldr	r3, [pc, #44]	; (8004dc8 <HAL_RCC_OscConfig+0x274>)
 8004d9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d9e:	f003 0302 	and.w	r3, r3, #2
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d0f0      	beq.n	8004d88 <HAL_RCC_OscConfig+0x234>
 8004da6:	e01b      	b.n	8004de0 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004da8:	4b09      	ldr	r3, [pc, #36]	; (8004dd0 <HAL_RCC_OscConfig+0x27c>)
 8004daa:	2200      	movs	r2, #0
 8004dac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004dae:	f7fe f8c3 	bl	8002f38 <HAL_GetTick>
 8004db2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004db4:	e00e      	b.n	8004dd4 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004db6:	f7fe f8bf 	bl	8002f38 <HAL_GetTick>
 8004dba:	4602      	mov	r2, r0
 8004dbc:	693b      	ldr	r3, [r7, #16]
 8004dbe:	1ad3      	subs	r3, r2, r3
 8004dc0:	2b02      	cmp	r3, #2
 8004dc2:	d907      	bls.n	8004dd4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8004dc4:	2303      	movs	r3, #3
 8004dc6:	e15c      	b.n	8005082 <HAL_RCC_OscConfig+0x52e>
 8004dc8:	40023800 	.word	0x40023800
 8004dcc:	42470000 	.word	0x42470000
 8004dd0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004dd4:	4b8a      	ldr	r3, [pc, #552]	; (8005000 <HAL_RCC_OscConfig+0x4ac>)
 8004dd6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004dd8:	f003 0302 	and.w	r3, r3, #2
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d1ea      	bne.n	8004db6 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f003 0304 	and.w	r3, r3, #4
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	f000 8097 	beq.w	8004f1c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004dee:	2300      	movs	r3, #0
 8004df0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004df2:	4b83      	ldr	r3, [pc, #524]	; (8005000 <HAL_RCC_OscConfig+0x4ac>)
 8004df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004df6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d10f      	bne.n	8004e1e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004dfe:	2300      	movs	r3, #0
 8004e00:	60bb      	str	r3, [r7, #8]
 8004e02:	4b7f      	ldr	r3, [pc, #508]	; (8005000 <HAL_RCC_OscConfig+0x4ac>)
 8004e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e06:	4a7e      	ldr	r2, [pc, #504]	; (8005000 <HAL_RCC_OscConfig+0x4ac>)
 8004e08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e0c:	6413      	str	r3, [r2, #64]	; 0x40
 8004e0e:	4b7c      	ldr	r3, [pc, #496]	; (8005000 <HAL_RCC_OscConfig+0x4ac>)
 8004e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e16:	60bb      	str	r3, [r7, #8]
 8004e18:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004e1a:	2301      	movs	r3, #1
 8004e1c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e1e:	4b79      	ldr	r3, [pc, #484]	; (8005004 <HAL_RCC_OscConfig+0x4b0>)
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d118      	bne.n	8004e5c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004e2a:	4b76      	ldr	r3, [pc, #472]	; (8005004 <HAL_RCC_OscConfig+0x4b0>)
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	4a75      	ldr	r2, [pc, #468]	; (8005004 <HAL_RCC_OscConfig+0x4b0>)
 8004e30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e34:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004e36:	f7fe f87f 	bl	8002f38 <HAL_GetTick>
 8004e3a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e3c:	e008      	b.n	8004e50 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e3e:	f7fe f87b 	bl	8002f38 <HAL_GetTick>
 8004e42:	4602      	mov	r2, r0
 8004e44:	693b      	ldr	r3, [r7, #16]
 8004e46:	1ad3      	subs	r3, r2, r3
 8004e48:	2b02      	cmp	r3, #2
 8004e4a:	d901      	bls.n	8004e50 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004e4c:	2303      	movs	r3, #3
 8004e4e:	e118      	b.n	8005082 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e50:	4b6c      	ldr	r3, [pc, #432]	; (8005004 <HAL_RCC_OscConfig+0x4b0>)
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d0f0      	beq.n	8004e3e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	689b      	ldr	r3, [r3, #8]
 8004e60:	2b01      	cmp	r3, #1
 8004e62:	d106      	bne.n	8004e72 <HAL_RCC_OscConfig+0x31e>
 8004e64:	4b66      	ldr	r3, [pc, #408]	; (8005000 <HAL_RCC_OscConfig+0x4ac>)
 8004e66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e68:	4a65      	ldr	r2, [pc, #404]	; (8005000 <HAL_RCC_OscConfig+0x4ac>)
 8004e6a:	f043 0301 	orr.w	r3, r3, #1
 8004e6e:	6713      	str	r3, [r2, #112]	; 0x70
 8004e70:	e01c      	b.n	8004eac <HAL_RCC_OscConfig+0x358>
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	689b      	ldr	r3, [r3, #8]
 8004e76:	2b05      	cmp	r3, #5
 8004e78:	d10c      	bne.n	8004e94 <HAL_RCC_OscConfig+0x340>
 8004e7a:	4b61      	ldr	r3, [pc, #388]	; (8005000 <HAL_RCC_OscConfig+0x4ac>)
 8004e7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e7e:	4a60      	ldr	r2, [pc, #384]	; (8005000 <HAL_RCC_OscConfig+0x4ac>)
 8004e80:	f043 0304 	orr.w	r3, r3, #4
 8004e84:	6713      	str	r3, [r2, #112]	; 0x70
 8004e86:	4b5e      	ldr	r3, [pc, #376]	; (8005000 <HAL_RCC_OscConfig+0x4ac>)
 8004e88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e8a:	4a5d      	ldr	r2, [pc, #372]	; (8005000 <HAL_RCC_OscConfig+0x4ac>)
 8004e8c:	f043 0301 	orr.w	r3, r3, #1
 8004e90:	6713      	str	r3, [r2, #112]	; 0x70
 8004e92:	e00b      	b.n	8004eac <HAL_RCC_OscConfig+0x358>
 8004e94:	4b5a      	ldr	r3, [pc, #360]	; (8005000 <HAL_RCC_OscConfig+0x4ac>)
 8004e96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e98:	4a59      	ldr	r2, [pc, #356]	; (8005000 <HAL_RCC_OscConfig+0x4ac>)
 8004e9a:	f023 0301 	bic.w	r3, r3, #1
 8004e9e:	6713      	str	r3, [r2, #112]	; 0x70
 8004ea0:	4b57      	ldr	r3, [pc, #348]	; (8005000 <HAL_RCC_OscConfig+0x4ac>)
 8004ea2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ea4:	4a56      	ldr	r2, [pc, #344]	; (8005000 <HAL_RCC_OscConfig+0x4ac>)
 8004ea6:	f023 0304 	bic.w	r3, r3, #4
 8004eaa:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	689b      	ldr	r3, [r3, #8]
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d015      	beq.n	8004ee0 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004eb4:	f7fe f840 	bl	8002f38 <HAL_GetTick>
 8004eb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004eba:	e00a      	b.n	8004ed2 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004ebc:	f7fe f83c 	bl	8002f38 <HAL_GetTick>
 8004ec0:	4602      	mov	r2, r0
 8004ec2:	693b      	ldr	r3, [r7, #16]
 8004ec4:	1ad3      	subs	r3, r2, r3
 8004ec6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004eca:	4293      	cmp	r3, r2
 8004ecc:	d901      	bls.n	8004ed2 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8004ece:	2303      	movs	r3, #3
 8004ed0:	e0d7      	b.n	8005082 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ed2:	4b4b      	ldr	r3, [pc, #300]	; (8005000 <HAL_RCC_OscConfig+0x4ac>)
 8004ed4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ed6:	f003 0302 	and.w	r3, r3, #2
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d0ee      	beq.n	8004ebc <HAL_RCC_OscConfig+0x368>
 8004ede:	e014      	b.n	8004f0a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ee0:	f7fe f82a 	bl	8002f38 <HAL_GetTick>
 8004ee4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004ee6:	e00a      	b.n	8004efe <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004ee8:	f7fe f826 	bl	8002f38 <HAL_GetTick>
 8004eec:	4602      	mov	r2, r0
 8004eee:	693b      	ldr	r3, [r7, #16]
 8004ef0:	1ad3      	subs	r3, r2, r3
 8004ef2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ef6:	4293      	cmp	r3, r2
 8004ef8:	d901      	bls.n	8004efe <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004efa:	2303      	movs	r3, #3
 8004efc:	e0c1      	b.n	8005082 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004efe:	4b40      	ldr	r3, [pc, #256]	; (8005000 <HAL_RCC_OscConfig+0x4ac>)
 8004f00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f02:	f003 0302 	and.w	r3, r3, #2
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d1ee      	bne.n	8004ee8 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004f0a:	7dfb      	ldrb	r3, [r7, #23]
 8004f0c:	2b01      	cmp	r3, #1
 8004f0e:	d105      	bne.n	8004f1c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f10:	4b3b      	ldr	r3, [pc, #236]	; (8005000 <HAL_RCC_OscConfig+0x4ac>)
 8004f12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f14:	4a3a      	ldr	r2, [pc, #232]	; (8005000 <HAL_RCC_OscConfig+0x4ac>)
 8004f16:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004f1a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	699b      	ldr	r3, [r3, #24]
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	f000 80ad 	beq.w	8005080 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004f26:	4b36      	ldr	r3, [pc, #216]	; (8005000 <HAL_RCC_OscConfig+0x4ac>)
 8004f28:	689b      	ldr	r3, [r3, #8]
 8004f2a:	f003 030c 	and.w	r3, r3, #12
 8004f2e:	2b08      	cmp	r3, #8
 8004f30:	d060      	beq.n	8004ff4 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	699b      	ldr	r3, [r3, #24]
 8004f36:	2b02      	cmp	r3, #2
 8004f38:	d145      	bne.n	8004fc6 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f3a:	4b33      	ldr	r3, [pc, #204]	; (8005008 <HAL_RCC_OscConfig+0x4b4>)
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f40:	f7fd fffa 	bl	8002f38 <HAL_GetTick>
 8004f44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f46:	e008      	b.n	8004f5a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f48:	f7fd fff6 	bl	8002f38 <HAL_GetTick>
 8004f4c:	4602      	mov	r2, r0
 8004f4e:	693b      	ldr	r3, [r7, #16]
 8004f50:	1ad3      	subs	r3, r2, r3
 8004f52:	2b02      	cmp	r3, #2
 8004f54:	d901      	bls.n	8004f5a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8004f56:	2303      	movs	r3, #3
 8004f58:	e093      	b.n	8005082 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f5a:	4b29      	ldr	r3, [pc, #164]	; (8005000 <HAL_RCC_OscConfig+0x4ac>)
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d1f0      	bne.n	8004f48 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	69da      	ldr	r2, [r3, #28]
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6a1b      	ldr	r3, [r3, #32]
 8004f6e:	431a      	orrs	r2, r3
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f74:	019b      	lsls	r3, r3, #6
 8004f76:	431a      	orrs	r2, r3
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f7c:	085b      	lsrs	r3, r3, #1
 8004f7e:	3b01      	subs	r3, #1
 8004f80:	041b      	lsls	r3, r3, #16
 8004f82:	431a      	orrs	r2, r3
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f88:	061b      	lsls	r3, r3, #24
 8004f8a:	431a      	orrs	r2, r3
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f90:	071b      	lsls	r3, r3, #28
 8004f92:	491b      	ldr	r1, [pc, #108]	; (8005000 <HAL_RCC_OscConfig+0x4ac>)
 8004f94:	4313      	orrs	r3, r2
 8004f96:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004f98:	4b1b      	ldr	r3, [pc, #108]	; (8005008 <HAL_RCC_OscConfig+0x4b4>)
 8004f9a:	2201      	movs	r2, #1
 8004f9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f9e:	f7fd ffcb 	bl	8002f38 <HAL_GetTick>
 8004fa2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004fa4:	e008      	b.n	8004fb8 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004fa6:	f7fd ffc7 	bl	8002f38 <HAL_GetTick>
 8004faa:	4602      	mov	r2, r0
 8004fac:	693b      	ldr	r3, [r7, #16]
 8004fae:	1ad3      	subs	r3, r2, r3
 8004fb0:	2b02      	cmp	r3, #2
 8004fb2:	d901      	bls.n	8004fb8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004fb4:	2303      	movs	r3, #3
 8004fb6:	e064      	b.n	8005082 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004fb8:	4b11      	ldr	r3, [pc, #68]	; (8005000 <HAL_RCC_OscConfig+0x4ac>)
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d0f0      	beq.n	8004fa6 <HAL_RCC_OscConfig+0x452>
 8004fc4:	e05c      	b.n	8005080 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004fc6:	4b10      	ldr	r3, [pc, #64]	; (8005008 <HAL_RCC_OscConfig+0x4b4>)
 8004fc8:	2200      	movs	r2, #0
 8004fca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fcc:	f7fd ffb4 	bl	8002f38 <HAL_GetTick>
 8004fd0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004fd2:	e008      	b.n	8004fe6 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004fd4:	f7fd ffb0 	bl	8002f38 <HAL_GetTick>
 8004fd8:	4602      	mov	r2, r0
 8004fda:	693b      	ldr	r3, [r7, #16]
 8004fdc:	1ad3      	subs	r3, r2, r3
 8004fde:	2b02      	cmp	r3, #2
 8004fe0:	d901      	bls.n	8004fe6 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8004fe2:	2303      	movs	r3, #3
 8004fe4:	e04d      	b.n	8005082 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004fe6:	4b06      	ldr	r3, [pc, #24]	; (8005000 <HAL_RCC_OscConfig+0x4ac>)
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d1f0      	bne.n	8004fd4 <HAL_RCC_OscConfig+0x480>
 8004ff2:	e045      	b.n	8005080 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	699b      	ldr	r3, [r3, #24]
 8004ff8:	2b01      	cmp	r3, #1
 8004ffa:	d107      	bne.n	800500c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8004ffc:	2301      	movs	r3, #1
 8004ffe:	e040      	b.n	8005082 <HAL_RCC_OscConfig+0x52e>
 8005000:	40023800 	.word	0x40023800
 8005004:	40007000 	.word	0x40007000
 8005008:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800500c:	4b1f      	ldr	r3, [pc, #124]	; (800508c <HAL_RCC_OscConfig+0x538>)
 800500e:	685b      	ldr	r3, [r3, #4]
 8005010:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	699b      	ldr	r3, [r3, #24]
 8005016:	2b01      	cmp	r3, #1
 8005018:	d030      	beq.n	800507c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005024:	429a      	cmp	r2, r3
 8005026:	d129      	bne.n	800507c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005032:	429a      	cmp	r2, r3
 8005034:	d122      	bne.n	800507c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005036:	68fa      	ldr	r2, [r7, #12]
 8005038:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800503c:	4013      	ands	r3, r2
 800503e:	687a      	ldr	r2, [r7, #4]
 8005040:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005042:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005044:	4293      	cmp	r3, r2
 8005046:	d119      	bne.n	800507c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005052:	085b      	lsrs	r3, r3, #1
 8005054:	3b01      	subs	r3, #1
 8005056:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005058:	429a      	cmp	r2, r3
 800505a:	d10f      	bne.n	800507c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005066:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005068:	429a      	cmp	r2, r3
 800506a:	d107      	bne.n	800507c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005076:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005078:	429a      	cmp	r2, r3
 800507a:	d001      	beq.n	8005080 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 800507c:	2301      	movs	r3, #1
 800507e:	e000      	b.n	8005082 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8005080:	2300      	movs	r3, #0
}
 8005082:	4618      	mov	r0, r3
 8005084:	3718      	adds	r7, #24
 8005086:	46bd      	mov	sp, r7
 8005088:	bd80      	pop	{r7, pc}
 800508a:	bf00      	nop
 800508c:	40023800 	.word	0x40023800

08005090 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005090:	b580      	push	{r7, lr}
 8005092:	b082      	sub	sp, #8
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2b00      	cmp	r3, #0
 800509c:	d101      	bne.n	80050a2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800509e:	2301      	movs	r3, #1
 80050a0:	e041      	b.n	8005126 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050a8:	b2db      	uxtb	r3, r3
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d106      	bne.n	80050bc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	2200      	movs	r2, #0
 80050b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80050b6:	6878      	ldr	r0, [r7, #4]
 80050b8:	f7fc fdbc 	bl	8001c34 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2202      	movs	r2, #2
 80050c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681a      	ldr	r2, [r3, #0]
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	3304      	adds	r3, #4
 80050cc:	4619      	mov	r1, r3
 80050ce:	4610      	mov	r0, r2
 80050d0:	f000 fd44 	bl	8005b5c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2201      	movs	r2, #1
 80050d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	2201      	movs	r2, #1
 80050e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2201      	movs	r2, #1
 80050e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2201      	movs	r2, #1
 80050f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2201      	movs	r2, #1
 80050f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2201      	movs	r2, #1
 8005100:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2201      	movs	r2, #1
 8005108:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2201      	movs	r2, #1
 8005110:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2201      	movs	r2, #1
 8005118:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2201      	movs	r2, #1
 8005120:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005124:	2300      	movs	r3, #0
}
 8005126:	4618      	mov	r0, r3
 8005128:	3708      	adds	r7, #8
 800512a:	46bd      	mov	sp, r7
 800512c:	bd80      	pop	{r7, pc}
	...

08005130 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005130:	b480      	push	{r7}
 8005132:	b085      	sub	sp, #20
 8005134:	af00      	add	r7, sp, #0
 8005136:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800513e:	b2db      	uxtb	r3, r3
 8005140:	2b01      	cmp	r3, #1
 8005142:	d001      	beq.n	8005148 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005144:	2301      	movs	r3, #1
 8005146:	e04e      	b.n	80051e6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2202      	movs	r2, #2
 800514c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	68da      	ldr	r2, [r3, #12]
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f042 0201 	orr.w	r2, r2, #1
 800515e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	4a23      	ldr	r2, [pc, #140]	; (80051f4 <HAL_TIM_Base_Start_IT+0xc4>)
 8005166:	4293      	cmp	r3, r2
 8005168:	d022      	beq.n	80051b0 <HAL_TIM_Base_Start_IT+0x80>
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005172:	d01d      	beq.n	80051b0 <HAL_TIM_Base_Start_IT+0x80>
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	4a1f      	ldr	r2, [pc, #124]	; (80051f8 <HAL_TIM_Base_Start_IT+0xc8>)
 800517a:	4293      	cmp	r3, r2
 800517c:	d018      	beq.n	80051b0 <HAL_TIM_Base_Start_IT+0x80>
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	4a1e      	ldr	r2, [pc, #120]	; (80051fc <HAL_TIM_Base_Start_IT+0xcc>)
 8005184:	4293      	cmp	r3, r2
 8005186:	d013      	beq.n	80051b0 <HAL_TIM_Base_Start_IT+0x80>
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	4a1c      	ldr	r2, [pc, #112]	; (8005200 <HAL_TIM_Base_Start_IT+0xd0>)
 800518e:	4293      	cmp	r3, r2
 8005190:	d00e      	beq.n	80051b0 <HAL_TIM_Base_Start_IT+0x80>
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	4a1b      	ldr	r2, [pc, #108]	; (8005204 <HAL_TIM_Base_Start_IT+0xd4>)
 8005198:	4293      	cmp	r3, r2
 800519a:	d009      	beq.n	80051b0 <HAL_TIM_Base_Start_IT+0x80>
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	4a19      	ldr	r2, [pc, #100]	; (8005208 <HAL_TIM_Base_Start_IT+0xd8>)
 80051a2:	4293      	cmp	r3, r2
 80051a4:	d004      	beq.n	80051b0 <HAL_TIM_Base_Start_IT+0x80>
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	4a18      	ldr	r2, [pc, #96]	; (800520c <HAL_TIM_Base_Start_IT+0xdc>)
 80051ac:	4293      	cmp	r3, r2
 80051ae:	d111      	bne.n	80051d4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	689b      	ldr	r3, [r3, #8]
 80051b6:	f003 0307 	and.w	r3, r3, #7
 80051ba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	2b06      	cmp	r3, #6
 80051c0:	d010      	beq.n	80051e4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	681a      	ldr	r2, [r3, #0]
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f042 0201 	orr.w	r2, r2, #1
 80051d0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051d2:	e007      	b.n	80051e4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	681a      	ldr	r2, [r3, #0]
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f042 0201 	orr.w	r2, r2, #1
 80051e2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80051e4:	2300      	movs	r3, #0
}
 80051e6:	4618      	mov	r0, r3
 80051e8:	3714      	adds	r7, #20
 80051ea:	46bd      	mov	sp, r7
 80051ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f0:	4770      	bx	lr
 80051f2:	bf00      	nop
 80051f4:	40010000 	.word	0x40010000
 80051f8:	40000400 	.word	0x40000400
 80051fc:	40000800 	.word	0x40000800
 8005200:	40000c00 	.word	0x40000c00
 8005204:	40010400 	.word	0x40010400
 8005208:	40014000 	.word	0x40014000
 800520c:	40001800 	.word	0x40001800

08005210 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8005210:	b480      	push	{r7}
 8005212:	b083      	sub	sp, #12
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	68da      	ldr	r2, [r3, #12]
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f022 0201 	bic.w	r2, r2, #1
 8005226:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	6a1a      	ldr	r2, [r3, #32]
 800522e:	f241 1311 	movw	r3, #4369	; 0x1111
 8005232:	4013      	ands	r3, r2
 8005234:	2b00      	cmp	r3, #0
 8005236:	d10f      	bne.n	8005258 <HAL_TIM_Base_Stop_IT+0x48>
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	6a1a      	ldr	r2, [r3, #32]
 800523e:	f240 4344 	movw	r3, #1092	; 0x444
 8005242:	4013      	ands	r3, r2
 8005244:	2b00      	cmp	r3, #0
 8005246:	d107      	bne.n	8005258 <HAL_TIM_Base_Stop_IT+0x48>
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	681a      	ldr	r2, [r3, #0]
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f022 0201 	bic.w	r2, r2, #1
 8005256:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2201      	movs	r2, #1
 800525c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8005260:	2300      	movs	r3, #0
}
 8005262:	4618      	mov	r0, r3
 8005264:	370c      	adds	r7, #12
 8005266:	46bd      	mov	sp, r7
 8005268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526c:	4770      	bx	lr

0800526e <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800526e:	b580      	push	{r7, lr}
 8005270:	b082      	sub	sp, #8
 8005272:	af00      	add	r7, sp, #0
 8005274:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	2b00      	cmp	r3, #0
 800527a:	d101      	bne.n	8005280 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800527c:	2301      	movs	r3, #1
 800527e:	e041      	b.n	8005304 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005286:	b2db      	uxtb	r3, r3
 8005288:	2b00      	cmp	r3, #0
 800528a:	d106      	bne.n	800529a <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2200      	movs	r2, #0
 8005290:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8005294:	6878      	ldr	r0, [r7, #4]
 8005296:	f000 f839 	bl	800530c <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	2202      	movs	r2, #2
 800529e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681a      	ldr	r2, [r3, #0]
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	3304      	adds	r3, #4
 80052aa:	4619      	mov	r1, r3
 80052ac:	4610      	mov	r0, r2
 80052ae:	f000 fc55 	bl	8005b5c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	2201      	movs	r2, #1
 80052b6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	2201      	movs	r2, #1
 80052be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	2201      	movs	r2, #1
 80052c6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	2201      	movs	r2, #1
 80052ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	2201      	movs	r2, #1
 80052d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	2201      	movs	r2, #1
 80052de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	2201      	movs	r2, #1
 80052e6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	2201      	movs	r2, #1
 80052ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	2201      	movs	r2, #1
 80052f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	2201      	movs	r2, #1
 80052fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005302:	2300      	movs	r3, #0
}
 8005304:	4618      	mov	r0, r3
 8005306:	3708      	adds	r7, #8
 8005308:	46bd      	mov	sp, r7
 800530a:	bd80      	pop	{r7, pc}

0800530c <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800530c:	b480      	push	{r7}
 800530e:	b083      	sub	sp, #12
 8005310:	af00      	add	r7, sp, #0
 8005312:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8005314:	bf00      	nop
 8005316:	370c      	adds	r7, #12
 8005318:	46bd      	mov	sp, r7
 800531a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531e:	4770      	bx	lr

08005320 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005320:	b580      	push	{r7, lr}
 8005322:	b084      	sub	sp, #16
 8005324:	af00      	add	r7, sp, #0
 8005326:	6078      	str	r0, [r7, #4]
 8005328:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800532a:	683b      	ldr	r3, [r7, #0]
 800532c:	2b00      	cmp	r3, #0
 800532e:	d109      	bne.n	8005344 <HAL_TIM_OC_Start_IT+0x24>
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005336:	b2db      	uxtb	r3, r3
 8005338:	2b01      	cmp	r3, #1
 800533a:	bf14      	ite	ne
 800533c:	2301      	movne	r3, #1
 800533e:	2300      	moveq	r3, #0
 8005340:	b2db      	uxtb	r3, r3
 8005342:	e022      	b.n	800538a <HAL_TIM_OC_Start_IT+0x6a>
 8005344:	683b      	ldr	r3, [r7, #0]
 8005346:	2b04      	cmp	r3, #4
 8005348:	d109      	bne.n	800535e <HAL_TIM_OC_Start_IT+0x3e>
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005350:	b2db      	uxtb	r3, r3
 8005352:	2b01      	cmp	r3, #1
 8005354:	bf14      	ite	ne
 8005356:	2301      	movne	r3, #1
 8005358:	2300      	moveq	r3, #0
 800535a:	b2db      	uxtb	r3, r3
 800535c:	e015      	b.n	800538a <HAL_TIM_OC_Start_IT+0x6a>
 800535e:	683b      	ldr	r3, [r7, #0]
 8005360:	2b08      	cmp	r3, #8
 8005362:	d109      	bne.n	8005378 <HAL_TIM_OC_Start_IT+0x58>
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800536a:	b2db      	uxtb	r3, r3
 800536c:	2b01      	cmp	r3, #1
 800536e:	bf14      	ite	ne
 8005370:	2301      	movne	r3, #1
 8005372:	2300      	moveq	r3, #0
 8005374:	b2db      	uxtb	r3, r3
 8005376:	e008      	b.n	800538a <HAL_TIM_OC_Start_IT+0x6a>
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800537e:	b2db      	uxtb	r3, r3
 8005380:	2b01      	cmp	r3, #1
 8005382:	bf14      	ite	ne
 8005384:	2301      	movne	r3, #1
 8005386:	2300      	moveq	r3, #0
 8005388:	b2db      	uxtb	r3, r3
 800538a:	2b00      	cmp	r3, #0
 800538c:	d001      	beq.n	8005392 <HAL_TIM_OC_Start_IT+0x72>
  {
    return HAL_ERROR;
 800538e:	2301      	movs	r3, #1
 8005390:	e0c2      	b.n	8005518 <HAL_TIM_OC_Start_IT+0x1f8>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005392:	683b      	ldr	r3, [r7, #0]
 8005394:	2b00      	cmp	r3, #0
 8005396:	d104      	bne.n	80053a2 <HAL_TIM_OC_Start_IT+0x82>
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2202      	movs	r2, #2
 800539c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80053a0:	e013      	b.n	80053ca <HAL_TIM_OC_Start_IT+0xaa>
 80053a2:	683b      	ldr	r3, [r7, #0]
 80053a4:	2b04      	cmp	r3, #4
 80053a6:	d104      	bne.n	80053b2 <HAL_TIM_OC_Start_IT+0x92>
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2202      	movs	r2, #2
 80053ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80053b0:	e00b      	b.n	80053ca <HAL_TIM_OC_Start_IT+0xaa>
 80053b2:	683b      	ldr	r3, [r7, #0]
 80053b4:	2b08      	cmp	r3, #8
 80053b6:	d104      	bne.n	80053c2 <HAL_TIM_OC_Start_IT+0xa2>
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2202      	movs	r2, #2
 80053bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80053c0:	e003      	b.n	80053ca <HAL_TIM_OC_Start_IT+0xaa>
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	2202      	movs	r2, #2
 80053c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80053ca:	683b      	ldr	r3, [r7, #0]
 80053cc:	2b0c      	cmp	r3, #12
 80053ce:	d841      	bhi.n	8005454 <HAL_TIM_OC_Start_IT+0x134>
 80053d0:	a201      	add	r2, pc, #4	; (adr r2, 80053d8 <HAL_TIM_OC_Start_IT+0xb8>)
 80053d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053d6:	bf00      	nop
 80053d8:	0800540d 	.word	0x0800540d
 80053dc:	08005455 	.word	0x08005455
 80053e0:	08005455 	.word	0x08005455
 80053e4:	08005455 	.word	0x08005455
 80053e8:	0800541f 	.word	0x0800541f
 80053ec:	08005455 	.word	0x08005455
 80053f0:	08005455 	.word	0x08005455
 80053f4:	08005455 	.word	0x08005455
 80053f8:	08005431 	.word	0x08005431
 80053fc:	08005455 	.word	0x08005455
 8005400:	08005455 	.word	0x08005455
 8005404:	08005455 	.word	0x08005455
 8005408:	08005443 	.word	0x08005443
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	68da      	ldr	r2, [r3, #12]
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f042 0202 	orr.w	r2, r2, #2
 800541a:	60da      	str	r2, [r3, #12]
      break;
 800541c:	e01b      	b.n	8005456 <HAL_TIM_OC_Start_IT+0x136>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	68da      	ldr	r2, [r3, #12]
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f042 0204 	orr.w	r2, r2, #4
 800542c:	60da      	str	r2, [r3, #12]
      break;
 800542e:	e012      	b.n	8005456 <HAL_TIM_OC_Start_IT+0x136>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	68da      	ldr	r2, [r3, #12]
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f042 0208 	orr.w	r2, r2, #8
 800543e:	60da      	str	r2, [r3, #12]
      break;
 8005440:	e009      	b.n	8005456 <HAL_TIM_OC_Start_IT+0x136>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	68da      	ldr	r2, [r3, #12]
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f042 0210 	orr.w	r2, r2, #16
 8005450:	60da      	str	r2, [r3, #12]
      break;
 8005452:	e000      	b.n	8005456 <HAL_TIM_OC_Start_IT+0x136>
    }

    default:
      break;
 8005454:	bf00      	nop
  }

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	2201      	movs	r2, #1
 800545c:	6839      	ldr	r1, [r7, #0]
 800545e:	4618      	mov	r0, r3
 8005460:	f000 fe66 	bl	8006130 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	4a2d      	ldr	r2, [pc, #180]	; (8005520 <HAL_TIM_OC_Start_IT+0x200>)
 800546a:	4293      	cmp	r3, r2
 800546c:	d004      	beq.n	8005478 <HAL_TIM_OC_Start_IT+0x158>
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	4a2c      	ldr	r2, [pc, #176]	; (8005524 <HAL_TIM_OC_Start_IT+0x204>)
 8005474:	4293      	cmp	r3, r2
 8005476:	d101      	bne.n	800547c <HAL_TIM_OC_Start_IT+0x15c>
 8005478:	2301      	movs	r3, #1
 800547a:	e000      	b.n	800547e <HAL_TIM_OC_Start_IT+0x15e>
 800547c:	2300      	movs	r3, #0
 800547e:	2b00      	cmp	r3, #0
 8005480:	d007      	beq.n	8005492 <HAL_TIM_OC_Start_IT+0x172>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005490:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	4a22      	ldr	r2, [pc, #136]	; (8005520 <HAL_TIM_OC_Start_IT+0x200>)
 8005498:	4293      	cmp	r3, r2
 800549a:	d022      	beq.n	80054e2 <HAL_TIM_OC_Start_IT+0x1c2>
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054a4:	d01d      	beq.n	80054e2 <HAL_TIM_OC_Start_IT+0x1c2>
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	4a1f      	ldr	r2, [pc, #124]	; (8005528 <HAL_TIM_OC_Start_IT+0x208>)
 80054ac:	4293      	cmp	r3, r2
 80054ae:	d018      	beq.n	80054e2 <HAL_TIM_OC_Start_IT+0x1c2>
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	4a1d      	ldr	r2, [pc, #116]	; (800552c <HAL_TIM_OC_Start_IT+0x20c>)
 80054b6:	4293      	cmp	r3, r2
 80054b8:	d013      	beq.n	80054e2 <HAL_TIM_OC_Start_IT+0x1c2>
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	4a1c      	ldr	r2, [pc, #112]	; (8005530 <HAL_TIM_OC_Start_IT+0x210>)
 80054c0:	4293      	cmp	r3, r2
 80054c2:	d00e      	beq.n	80054e2 <HAL_TIM_OC_Start_IT+0x1c2>
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	4a16      	ldr	r2, [pc, #88]	; (8005524 <HAL_TIM_OC_Start_IT+0x204>)
 80054ca:	4293      	cmp	r3, r2
 80054cc:	d009      	beq.n	80054e2 <HAL_TIM_OC_Start_IT+0x1c2>
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	4a18      	ldr	r2, [pc, #96]	; (8005534 <HAL_TIM_OC_Start_IT+0x214>)
 80054d4:	4293      	cmp	r3, r2
 80054d6:	d004      	beq.n	80054e2 <HAL_TIM_OC_Start_IT+0x1c2>
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	4a16      	ldr	r2, [pc, #88]	; (8005538 <HAL_TIM_OC_Start_IT+0x218>)
 80054de:	4293      	cmp	r3, r2
 80054e0:	d111      	bne.n	8005506 <HAL_TIM_OC_Start_IT+0x1e6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	689b      	ldr	r3, [r3, #8]
 80054e8:	f003 0307 	and.w	r3, r3, #7
 80054ec:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	2b06      	cmp	r3, #6
 80054f2:	d010      	beq.n	8005516 <HAL_TIM_OC_Start_IT+0x1f6>
    {
      __HAL_TIM_ENABLE(htim);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	681a      	ldr	r2, [r3, #0]
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f042 0201 	orr.w	r2, r2, #1
 8005502:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005504:	e007      	b.n	8005516 <HAL_TIM_OC_Start_IT+0x1f6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	681a      	ldr	r2, [r3, #0]
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f042 0201 	orr.w	r2, r2, #1
 8005514:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005516:	2300      	movs	r3, #0
}
 8005518:	4618      	mov	r0, r3
 800551a:	3710      	adds	r7, #16
 800551c:	46bd      	mov	sp, r7
 800551e:	bd80      	pop	{r7, pc}
 8005520:	40010000 	.word	0x40010000
 8005524:	40010400 	.word	0x40010400
 8005528:	40000400 	.word	0x40000400
 800552c:	40000800 	.word	0x40000800
 8005530:	40000c00 	.word	0x40000c00
 8005534:	40014000 	.word	0x40014000
 8005538:	40001800 	.word	0x40001800

0800553c <HAL_TIM_OC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800553c:	b580      	push	{r7, lr}
 800553e:	b082      	sub	sp, #8
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
 8005544:	6039      	str	r1, [r7, #0]
 8005546:	683b      	ldr	r3, [r7, #0]
 8005548:	2b0c      	cmp	r3, #12
 800554a:	d841      	bhi.n	80055d0 <HAL_TIM_OC_Stop_IT+0x94>
 800554c:	a201      	add	r2, pc, #4	; (adr r2, 8005554 <HAL_TIM_OC_Stop_IT+0x18>)
 800554e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005552:	bf00      	nop
 8005554:	08005589 	.word	0x08005589
 8005558:	080055d1 	.word	0x080055d1
 800555c:	080055d1 	.word	0x080055d1
 8005560:	080055d1 	.word	0x080055d1
 8005564:	0800559b 	.word	0x0800559b
 8005568:	080055d1 	.word	0x080055d1
 800556c:	080055d1 	.word	0x080055d1
 8005570:	080055d1 	.word	0x080055d1
 8005574:	080055ad 	.word	0x080055ad
 8005578:	080055d1 	.word	0x080055d1
 800557c:	080055d1 	.word	0x080055d1
 8005580:	080055d1 	.word	0x080055d1
 8005584:	080055bf 	.word	0x080055bf
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	68da      	ldr	r2, [r3, #12]
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f022 0202 	bic.w	r2, r2, #2
 8005596:	60da      	str	r2, [r3, #12]
      break;
 8005598:	e01b      	b.n	80055d2 <HAL_TIM_OC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	68da      	ldr	r2, [r3, #12]
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f022 0204 	bic.w	r2, r2, #4
 80055a8:	60da      	str	r2, [r3, #12]
      break;
 80055aa:	e012      	b.n	80055d2 <HAL_TIM_OC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	68da      	ldr	r2, [r3, #12]
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	f022 0208 	bic.w	r2, r2, #8
 80055ba:	60da      	str	r2, [r3, #12]
      break;
 80055bc:	e009      	b.n	80055d2 <HAL_TIM_OC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	68da      	ldr	r2, [r3, #12]
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f022 0210 	bic.w	r2, r2, #16
 80055cc:	60da      	str	r2, [r3, #12]
      break;
 80055ce:	e000      	b.n	80055d2 <HAL_TIM_OC_Stop_IT+0x96>
    }

    default:
      break;
 80055d0:	bf00      	nop
  }

  /* Disable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	2200      	movs	r2, #0
 80055d8:	6839      	ldr	r1, [r7, #0]
 80055da:	4618      	mov	r0, r3
 80055dc:	f000 fda8 	bl	8006130 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	4a2e      	ldr	r2, [pc, #184]	; (80056a0 <HAL_TIM_OC_Stop_IT+0x164>)
 80055e6:	4293      	cmp	r3, r2
 80055e8:	d004      	beq.n	80055f4 <HAL_TIM_OC_Stop_IT+0xb8>
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	4a2d      	ldr	r2, [pc, #180]	; (80056a4 <HAL_TIM_OC_Stop_IT+0x168>)
 80055f0:	4293      	cmp	r3, r2
 80055f2:	d101      	bne.n	80055f8 <HAL_TIM_OC_Stop_IT+0xbc>
 80055f4:	2301      	movs	r3, #1
 80055f6:	e000      	b.n	80055fa <HAL_TIM_OC_Stop_IT+0xbe>
 80055f8:	2300      	movs	r3, #0
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d017      	beq.n	800562e <HAL_TIM_OC_Stop_IT+0xf2>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	6a1a      	ldr	r2, [r3, #32]
 8005604:	f241 1311 	movw	r3, #4369	; 0x1111
 8005608:	4013      	ands	r3, r2
 800560a:	2b00      	cmp	r3, #0
 800560c:	d10f      	bne.n	800562e <HAL_TIM_OC_Stop_IT+0xf2>
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	6a1a      	ldr	r2, [r3, #32]
 8005614:	f240 4344 	movw	r3, #1092	; 0x444
 8005618:	4013      	ands	r3, r2
 800561a:	2b00      	cmp	r3, #0
 800561c:	d107      	bne.n	800562e <HAL_TIM_OC_Stop_IT+0xf2>
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800562c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	6a1a      	ldr	r2, [r3, #32]
 8005634:	f241 1311 	movw	r3, #4369	; 0x1111
 8005638:	4013      	ands	r3, r2
 800563a:	2b00      	cmp	r3, #0
 800563c:	d10f      	bne.n	800565e <HAL_TIM_OC_Stop_IT+0x122>
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	6a1a      	ldr	r2, [r3, #32]
 8005644:	f240 4344 	movw	r3, #1092	; 0x444
 8005648:	4013      	ands	r3, r2
 800564a:	2b00      	cmp	r3, #0
 800564c:	d107      	bne.n	800565e <HAL_TIM_OC_Stop_IT+0x122>
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	681a      	ldr	r2, [r3, #0]
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f022 0201 	bic.w	r2, r2, #1
 800565c:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800565e:	683b      	ldr	r3, [r7, #0]
 8005660:	2b00      	cmp	r3, #0
 8005662:	d104      	bne.n	800566e <HAL_TIM_OC_Stop_IT+0x132>
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	2201      	movs	r2, #1
 8005668:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800566c:	e013      	b.n	8005696 <HAL_TIM_OC_Stop_IT+0x15a>
 800566e:	683b      	ldr	r3, [r7, #0]
 8005670:	2b04      	cmp	r3, #4
 8005672:	d104      	bne.n	800567e <HAL_TIM_OC_Stop_IT+0x142>
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2201      	movs	r2, #1
 8005678:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800567c:	e00b      	b.n	8005696 <HAL_TIM_OC_Stop_IT+0x15a>
 800567e:	683b      	ldr	r3, [r7, #0]
 8005680:	2b08      	cmp	r3, #8
 8005682:	d104      	bne.n	800568e <HAL_TIM_OC_Stop_IT+0x152>
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2201      	movs	r2, #1
 8005688:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800568c:	e003      	b.n	8005696 <HAL_TIM_OC_Stop_IT+0x15a>
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	2201      	movs	r2, #1
 8005692:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8005696:	2300      	movs	r3, #0
}
 8005698:	4618      	mov	r0, r3
 800569a:	3708      	adds	r7, #8
 800569c:	46bd      	mov	sp, r7
 800569e:	bd80      	pop	{r7, pc}
 80056a0:	40010000 	.word	0x40010000
 80056a4:	40010400 	.word	0x40010400

080056a8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80056a8:	b580      	push	{r7, lr}
 80056aa:	b082      	sub	sp, #8
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	691b      	ldr	r3, [r3, #16]
 80056b6:	f003 0302 	and.w	r3, r3, #2
 80056ba:	2b02      	cmp	r3, #2
 80056bc:	d122      	bne.n	8005704 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	68db      	ldr	r3, [r3, #12]
 80056c4:	f003 0302 	and.w	r3, r3, #2
 80056c8:	2b02      	cmp	r3, #2
 80056ca:	d11b      	bne.n	8005704 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f06f 0202 	mvn.w	r2, #2
 80056d4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	2201      	movs	r2, #1
 80056da:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	699b      	ldr	r3, [r3, #24]
 80056e2:	f003 0303 	and.w	r3, r3, #3
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d003      	beq.n	80056f2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80056ea:	6878      	ldr	r0, [r7, #4]
 80056ec:	f000 fa0a 	bl	8005b04 <HAL_TIM_IC_CaptureCallback>
 80056f0:	e005      	b.n	80056fe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80056f2:	6878      	ldr	r0, [r7, #4]
 80056f4:	f000 f9fc 	bl	8005af0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056f8:	6878      	ldr	r0, [r7, #4]
 80056fa:	f000 fa0d 	bl	8005b18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	2200      	movs	r2, #0
 8005702:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	691b      	ldr	r3, [r3, #16]
 800570a:	f003 0304 	and.w	r3, r3, #4
 800570e:	2b04      	cmp	r3, #4
 8005710:	d122      	bne.n	8005758 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	68db      	ldr	r3, [r3, #12]
 8005718:	f003 0304 	and.w	r3, r3, #4
 800571c:	2b04      	cmp	r3, #4
 800571e:	d11b      	bne.n	8005758 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	f06f 0204 	mvn.w	r2, #4
 8005728:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	2202      	movs	r2, #2
 800572e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	699b      	ldr	r3, [r3, #24]
 8005736:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800573a:	2b00      	cmp	r3, #0
 800573c:	d003      	beq.n	8005746 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800573e:	6878      	ldr	r0, [r7, #4]
 8005740:	f000 f9e0 	bl	8005b04 <HAL_TIM_IC_CaptureCallback>
 8005744:	e005      	b.n	8005752 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005746:	6878      	ldr	r0, [r7, #4]
 8005748:	f000 f9d2 	bl	8005af0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800574c:	6878      	ldr	r0, [r7, #4]
 800574e:	f000 f9e3 	bl	8005b18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	2200      	movs	r2, #0
 8005756:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	691b      	ldr	r3, [r3, #16]
 800575e:	f003 0308 	and.w	r3, r3, #8
 8005762:	2b08      	cmp	r3, #8
 8005764:	d122      	bne.n	80057ac <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	68db      	ldr	r3, [r3, #12]
 800576c:	f003 0308 	and.w	r3, r3, #8
 8005770:	2b08      	cmp	r3, #8
 8005772:	d11b      	bne.n	80057ac <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	f06f 0208 	mvn.w	r2, #8
 800577c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	2204      	movs	r2, #4
 8005782:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	69db      	ldr	r3, [r3, #28]
 800578a:	f003 0303 	and.w	r3, r3, #3
 800578e:	2b00      	cmp	r3, #0
 8005790:	d003      	beq.n	800579a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005792:	6878      	ldr	r0, [r7, #4]
 8005794:	f000 f9b6 	bl	8005b04 <HAL_TIM_IC_CaptureCallback>
 8005798:	e005      	b.n	80057a6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800579a:	6878      	ldr	r0, [r7, #4]
 800579c:	f000 f9a8 	bl	8005af0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057a0:	6878      	ldr	r0, [r7, #4]
 80057a2:	f000 f9b9 	bl	8005b18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	2200      	movs	r2, #0
 80057aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	691b      	ldr	r3, [r3, #16]
 80057b2:	f003 0310 	and.w	r3, r3, #16
 80057b6:	2b10      	cmp	r3, #16
 80057b8:	d122      	bne.n	8005800 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	68db      	ldr	r3, [r3, #12]
 80057c0:	f003 0310 	and.w	r3, r3, #16
 80057c4:	2b10      	cmp	r3, #16
 80057c6:	d11b      	bne.n	8005800 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f06f 0210 	mvn.w	r2, #16
 80057d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	2208      	movs	r2, #8
 80057d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	69db      	ldr	r3, [r3, #28]
 80057de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d003      	beq.n	80057ee <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80057e6:	6878      	ldr	r0, [r7, #4]
 80057e8:	f000 f98c 	bl	8005b04 <HAL_TIM_IC_CaptureCallback>
 80057ec:	e005      	b.n	80057fa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80057ee:	6878      	ldr	r0, [r7, #4]
 80057f0:	f000 f97e 	bl	8005af0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057f4:	6878      	ldr	r0, [r7, #4]
 80057f6:	f000 f98f 	bl	8005b18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	2200      	movs	r2, #0
 80057fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	691b      	ldr	r3, [r3, #16]
 8005806:	f003 0301 	and.w	r3, r3, #1
 800580a:	2b01      	cmp	r3, #1
 800580c:	d10e      	bne.n	800582c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	68db      	ldr	r3, [r3, #12]
 8005814:	f003 0301 	and.w	r3, r3, #1
 8005818:	2b01      	cmp	r3, #1
 800581a:	d107      	bne.n	800582c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	f06f 0201 	mvn.w	r2, #1
 8005824:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005826:	6878      	ldr	r0, [r7, #4]
 8005828:	f7fb fc96 	bl	8001158 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	691b      	ldr	r3, [r3, #16]
 8005832:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005836:	2b80      	cmp	r3, #128	; 0x80
 8005838:	d10e      	bne.n	8005858 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	68db      	ldr	r3, [r3, #12]
 8005840:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005844:	2b80      	cmp	r3, #128	; 0x80
 8005846:	d107      	bne.n	8005858 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005850:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005852:	6878      	ldr	r0, [r7, #4]
 8005854:	f000 fd18 	bl	8006288 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	691b      	ldr	r3, [r3, #16]
 800585e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005862:	2b40      	cmp	r3, #64	; 0x40
 8005864:	d10e      	bne.n	8005884 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	68db      	ldr	r3, [r3, #12]
 800586c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005870:	2b40      	cmp	r3, #64	; 0x40
 8005872:	d107      	bne.n	8005884 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800587c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800587e:	6878      	ldr	r0, [r7, #4]
 8005880:	f000 f954 	bl	8005b2c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	691b      	ldr	r3, [r3, #16]
 800588a:	f003 0320 	and.w	r3, r3, #32
 800588e:	2b20      	cmp	r3, #32
 8005890:	d10e      	bne.n	80058b0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	68db      	ldr	r3, [r3, #12]
 8005898:	f003 0320 	and.w	r3, r3, #32
 800589c:	2b20      	cmp	r3, #32
 800589e:	d107      	bne.n	80058b0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	f06f 0220 	mvn.w	r2, #32
 80058a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80058aa:	6878      	ldr	r0, [r7, #4]
 80058ac:	f000 fce2 	bl	8006274 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80058b0:	bf00      	nop
 80058b2:	3708      	adds	r7, #8
 80058b4:	46bd      	mov	sp, r7
 80058b6:	bd80      	pop	{r7, pc}

080058b8 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80058b8:	b580      	push	{r7, lr}
 80058ba:	b084      	sub	sp, #16
 80058bc:	af00      	add	r7, sp, #0
 80058be:	60f8      	str	r0, [r7, #12]
 80058c0:	60b9      	str	r1, [r7, #8]
 80058c2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80058ca:	2b01      	cmp	r3, #1
 80058cc:	d101      	bne.n	80058d2 <HAL_TIM_OC_ConfigChannel+0x1a>
 80058ce:	2302      	movs	r3, #2
 80058d0:	e046      	b.n	8005960 <HAL_TIM_OC_ConfigChannel+0xa8>
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	2201      	movs	r2, #1
 80058d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	2b0c      	cmp	r3, #12
 80058de:	d839      	bhi.n	8005954 <HAL_TIM_OC_ConfigChannel+0x9c>
 80058e0:	a201      	add	r2, pc, #4	; (adr r2, 80058e8 <HAL_TIM_OC_ConfigChannel+0x30>)
 80058e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058e6:	bf00      	nop
 80058e8:	0800591d 	.word	0x0800591d
 80058ec:	08005955 	.word	0x08005955
 80058f0:	08005955 	.word	0x08005955
 80058f4:	08005955 	.word	0x08005955
 80058f8:	0800592b 	.word	0x0800592b
 80058fc:	08005955 	.word	0x08005955
 8005900:	08005955 	.word	0x08005955
 8005904:	08005955 	.word	0x08005955
 8005908:	08005939 	.word	0x08005939
 800590c:	08005955 	.word	0x08005955
 8005910:	08005955 	.word	0x08005955
 8005914:	08005955 	.word	0x08005955
 8005918:	08005947 	.word	0x08005947
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	68b9      	ldr	r1, [r7, #8]
 8005922:	4618      	mov	r0, r3
 8005924:	f000 f9ba 	bl	8005c9c <TIM_OC1_SetConfig>
      break;
 8005928:	e015      	b.n	8005956 <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	68b9      	ldr	r1, [r7, #8]
 8005930:	4618      	mov	r0, r3
 8005932:	f000 fa23 	bl	8005d7c <TIM_OC2_SetConfig>
      break;
 8005936:	e00e      	b.n	8005956 <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	68b9      	ldr	r1, [r7, #8]
 800593e:	4618      	mov	r0, r3
 8005940:	f000 fa92 	bl	8005e68 <TIM_OC3_SetConfig>
      break;
 8005944:	e007      	b.n	8005956 <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	68b9      	ldr	r1, [r7, #8]
 800594c:	4618      	mov	r0, r3
 800594e:	f000 faff 	bl	8005f50 <TIM_OC4_SetConfig>
      break;
 8005952:	e000      	b.n	8005956 <HAL_TIM_OC_ConfigChannel+0x9e>
    }

    default:
      break;
 8005954:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	2200      	movs	r2, #0
 800595a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800595e:	2300      	movs	r3, #0
}
 8005960:	4618      	mov	r0, r3
 8005962:	3710      	adds	r7, #16
 8005964:	46bd      	mov	sp, r7
 8005966:	bd80      	pop	{r7, pc}

08005968 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005968:	b580      	push	{r7, lr}
 800596a:	b084      	sub	sp, #16
 800596c:	af00      	add	r7, sp, #0
 800596e:	6078      	str	r0, [r7, #4]
 8005970:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005978:	2b01      	cmp	r3, #1
 800597a:	d101      	bne.n	8005980 <HAL_TIM_ConfigClockSource+0x18>
 800597c:	2302      	movs	r3, #2
 800597e:	e0b3      	b.n	8005ae8 <HAL_TIM_ConfigClockSource+0x180>
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	2201      	movs	r2, #1
 8005984:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	2202      	movs	r2, #2
 800598c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	689b      	ldr	r3, [r3, #8]
 8005996:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800599e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80059a6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	68fa      	ldr	r2, [r7, #12]
 80059ae:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80059b0:	683b      	ldr	r3, [r7, #0]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80059b8:	d03e      	beq.n	8005a38 <HAL_TIM_ConfigClockSource+0xd0>
 80059ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80059be:	f200 8087 	bhi.w	8005ad0 <HAL_TIM_ConfigClockSource+0x168>
 80059c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80059c6:	f000 8085 	beq.w	8005ad4 <HAL_TIM_ConfigClockSource+0x16c>
 80059ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80059ce:	d87f      	bhi.n	8005ad0 <HAL_TIM_ConfigClockSource+0x168>
 80059d0:	2b70      	cmp	r3, #112	; 0x70
 80059d2:	d01a      	beq.n	8005a0a <HAL_TIM_ConfigClockSource+0xa2>
 80059d4:	2b70      	cmp	r3, #112	; 0x70
 80059d6:	d87b      	bhi.n	8005ad0 <HAL_TIM_ConfigClockSource+0x168>
 80059d8:	2b60      	cmp	r3, #96	; 0x60
 80059da:	d050      	beq.n	8005a7e <HAL_TIM_ConfigClockSource+0x116>
 80059dc:	2b60      	cmp	r3, #96	; 0x60
 80059de:	d877      	bhi.n	8005ad0 <HAL_TIM_ConfigClockSource+0x168>
 80059e0:	2b50      	cmp	r3, #80	; 0x50
 80059e2:	d03c      	beq.n	8005a5e <HAL_TIM_ConfigClockSource+0xf6>
 80059e4:	2b50      	cmp	r3, #80	; 0x50
 80059e6:	d873      	bhi.n	8005ad0 <HAL_TIM_ConfigClockSource+0x168>
 80059e8:	2b40      	cmp	r3, #64	; 0x40
 80059ea:	d058      	beq.n	8005a9e <HAL_TIM_ConfigClockSource+0x136>
 80059ec:	2b40      	cmp	r3, #64	; 0x40
 80059ee:	d86f      	bhi.n	8005ad0 <HAL_TIM_ConfigClockSource+0x168>
 80059f0:	2b30      	cmp	r3, #48	; 0x30
 80059f2:	d064      	beq.n	8005abe <HAL_TIM_ConfigClockSource+0x156>
 80059f4:	2b30      	cmp	r3, #48	; 0x30
 80059f6:	d86b      	bhi.n	8005ad0 <HAL_TIM_ConfigClockSource+0x168>
 80059f8:	2b20      	cmp	r3, #32
 80059fa:	d060      	beq.n	8005abe <HAL_TIM_ConfigClockSource+0x156>
 80059fc:	2b20      	cmp	r3, #32
 80059fe:	d867      	bhi.n	8005ad0 <HAL_TIM_ConfigClockSource+0x168>
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d05c      	beq.n	8005abe <HAL_TIM_ConfigClockSource+0x156>
 8005a04:	2b10      	cmp	r3, #16
 8005a06:	d05a      	beq.n	8005abe <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8005a08:	e062      	b.n	8005ad0 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	6818      	ldr	r0, [r3, #0]
 8005a0e:	683b      	ldr	r3, [r7, #0]
 8005a10:	6899      	ldr	r1, [r3, #8]
 8005a12:	683b      	ldr	r3, [r7, #0]
 8005a14:	685a      	ldr	r2, [r3, #4]
 8005a16:	683b      	ldr	r3, [r7, #0]
 8005a18:	68db      	ldr	r3, [r3, #12]
 8005a1a:	f000 fb69 	bl	80060f0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	689b      	ldr	r3, [r3, #8]
 8005a24:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005a2c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	68fa      	ldr	r2, [r7, #12]
 8005a34:	609a      	str	r2, [r3, #8]
      break;
 8005a36:	e04e      	b.n	8005ad6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	6818      	ldr	r0, [r3, #0]
 8005a3c:	683b      	ldr	r3, [r7, #0]
 8005a3e:	6899      	ldr	r1, [r3, #8]
 8005a40:	683b      	ldr	r3, [r7, #0]
 8005a42:	685a      	ldr	r2, [r3, #4]
 8005a44:	683b      	ldr	r3, [r7, #0]
 8005a46:	68db      	ldr	r3, [r3, #12]
 8005a48:	f000 fb52 	bl	80060f0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	689a      	ldr	r2, [r3, #8]
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005a5a:	609a      	str	r2, [r3, #8]
      break;
 8005a5c:	e03b      	b.n	8005ad6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	6818      	ldr	r0, [r3, #0]
 8005a62:	683b      	ldr	r3, [r7, #0]
 8005a64:	6859      	ldr	r1, [r3, #4]
 8005a66:	683b      	ldr	r3, [r7, #0]
 8005a68:	68db      	ldr	r3, [r3, #12]
 8005a6a:	461a      	mov	r2, r3
 8005a6c:	f000 fac6 	bl	8005ffc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	2150      	movs	r1, #80	; 0x50
 8005a76:	4618      	mov	r0, r3
 8005a78:	f000 fb1f 	bl	80060ba <TIM_ITRx_SetConfig>
      break;
 8005a7c:	e02b      	b.n	8005ad6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	6818      	ldr	r0, [r3, #0]
 8005a82:	683b      	ldr	r3, [r7, #0]
 8005a84:	6859      	ldr	r1, [r3, #4]
 8005a86:	683b      	ldr	r3, [r7, #0]
 8005a88:	68db      	ldr	r3, [r3, #12]
 8005a8a:	461a      	mov	r2, r3
 8005a8c:	f000 fae5 	bl	800605a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	2160      	movs	r1, #96	; 0x60
 8005a96:	4618      	mov	r0, r3
 8005a98:	f000 fb0f 	bl	80060ba <TIM_ITRx_SetConfig>
      break;
 8005a9c:	e01b      	b.n	8005ad6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	6818      	ldr	r0, [r3, #0]
 8005aa2:	683b      	ldr	r3, [r7, #0]
 8005aa4:	6859      	ldr	r1, [r3, #4]
 8005aa6:	683b      	ldr	r3, [r7, #0]
 8005aa8:	68db      	ldr	r3, [r3, #12]
 8005aaa:	461a      	mov	r2, r3
 8005aac:	f000 faa6 	bl	8005ffc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	2140      	movs	r1, #64	; 0x40
 8005ab6:	4618      	mov	r0, r3
 8005ab8:	f000 faff 	bl	80060ba <TIM_ITRx_SetConfig>
      break;
 8005abc:	e00b      	b.n	8005ad6 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681a      	ldr	r2, [r3, #0]
 8005ac2:	683b      	ldr	r3, [r7, #0]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	4619      	mov	r1, r3
 8005ac8:	4610      	mov	r0, r2
 8005aca:	f000 faf6 	bl	80060ba <TIM_ITRx_SetConfig>
        break;
 8005ace:	e002      	b.n	8005ad6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8005ad0:	bf00      	nop
 8005ad2:	e000      	b.n	8005ad6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8005ad4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	2201      	movs	r2, #1
 8005ada:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	2200      	movs	r2, #0
 8005ae2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005ae6:	2300      	movs	r3, #0
}
 8005ae8:	4618      	mov	r0, r3
 8005aea:	3710      	adds	r7, #16
 8005aec:	46bd      	mov	sp, r7
 8005aee:	bd80      	pop	{r7, pc}

08005af0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005af0:	b480      	push	{r7}
 8005af2:	b083      	sub	sp, #12
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005af8:	bf00      	nop
 8005afa:	370c      	adds	r7, #12
 8005afc:	46bd      	mov	sp, r7
 8005afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b02:	4770      	bx	lr

08005b04 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005b04:	b480      	push	{r7}
 8005b06:	b083      	sub	sp, #12
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005b0c:	bf00      	nop
 8005b0e:	370c      	adds	r7, #12
 8005b10:	46bd      	mov	sp, r7
 8005b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b16:	4770      	bx	lr

08005b18 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005b18:	b480      	push	{r7}
 8005b1a:	b083      	sub	sp, #12
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005b20:	bf00      	nop
 8005b22:	370c      	adds	r7, #12
 8005b24:	46bd      	mov	sp, r7
 8005b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2a:	4770      	bx	lr

08005b2c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005b2c:	b480      	push	{r7}
 8005b2e:	b083      	sub	sp, #12
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005b34:	bf00      	nop
 8005b36:	370c      	adds	r7, #12
 8005b38:	46bd      	mov	sp, r7
 8005b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3e:	4770      	bx	lr

08005b40 <HAL_TIM_OC_GetState>:
  * @brief  Return the TIM OC handle state.
  * @param  htim TIM Output Compare handle
  * @retval HAL state
  */
HAL_TIM_StateTypeDef HAL_TIM_OC_GetState(TIM_HandleTypeDef *htim)
{
 8005b40:	b480      	push	{r7}
 8005b42:	b083      	sub	sp, #12
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	6078      	str	r0, [r7, #4]
  return htim->State;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b4e:	b2db      	uxtb	r3, r3
}
 8005b50:	4618      	mov	r0, r3
 8005b52:	370c      	adds	r7, #12
 8005b54:	46bd      	mov	sp, r7
 8005b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5a:	4770      	bx	lr

08005b5c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005b5c:	b480      	push	{r7}
 8005b5e:	b085      	sub	sp, #20
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	6078      	str	r0, [r7, #4]
 8005b64:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	4a40      	ldr	r2, [pc, #256]	; (8005c70 <TIM_Base_SetConfig+0x114>)
 8005b70:	4293      	cmp	r3, r2
 8005b72:	d013      	beq.n	8005b9c <TIM_Base_SetConfig+0x40>
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b7a:	d00f      	beq.n	8005b9c <TIM_Base_SetConfig+0x40>
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	4a3d      	ldr	r2, [pc, #244]	; (8005c74 <TIM_Base_SetConfig+0x118>)
 8005b80:	4293      	cmp	r3, r2
 8005b82:	d00b      	beq.n	8005b9c <TIM_Base_SetConfig+0x40>
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	4a3c      	ldr	r2, [pc, #240]	; (8005c78 <TIM_Base_SetConfig+0x11c>)
 8005b88:	4293      	cmp	r3, r2
 8005b8a:	d007      	beq.n	8005b9c <TIM_Base_SetConfig+0x40>
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	4a3b      	ldr	r2, [pc, #236]	; (8005c7c <TIM_Base_SetConfig+0x120>)
 8005b90:	4293      	cmp	r3, r2
 8005b92:	d003      	beq.n	8005b9c <TIM_Base_SetConfig+0x40>
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	4a3a      	ldr	r2, [pc, #232]	; (8005c80 <TIM_Base_SetConfig+0x124>)
 8005b98:	4293      	cmp	r3, r2
 8005b9a:	d108      	bne.n	8005bae <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ba2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005ba4:	683b      	ldr	r3, [r7, #0]
 8005ba6:	685b      	ldr	r3, [r3, #4]
 8005ba8:	68fa      	ldr	r2, [r7, #12]
 8005baa:	4313      	orrs	r3, r2
 8005bac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	4a2f      	ldr	r2, [pc, #188]	; (8005c70 <TIM_Base_SetConfig+0x114>)
 8005bb2:	4293      	cmp	r3, r2
 8005bb4:	d02b      	beq.n	8005c0e <TIM_Base_SetConfig+0xb2>
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005bbc:	d027      	beq.n	8005c0e <TIM_Base_SetConfig+0xb2>
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	4a2c      	ldr	r2, [pc, #176]	; (8005c74 <TIM_Base_SetConfig+0x118>)
 8005bc2:	4293      	cmp	r3, r2
 8005bc4:	d023      	beq.n	8005c0e <TIM_Base_SetConfig+0xb2>
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	4a2b      	ldr	r2, [pc, #172]	; (8005c78 <TIM_Base_SetConfig+0x11c>)
 8005bca:	4293      	cmp	r3, r2
 8005bcc:	d01f      	beq.n	8005c0e <TIM_Base_SetConfig+0xb2>
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	4a2a      	ldr	r2, [pc, #168]	; (8005c7c <TIM_Base_SetConfig+0x120>)
 8005bd2:	4293      	cmp	r3, r2
 8005bd4:	d01b      	beq.n	8005c0e <TIM_Base_SetConfig+0xb2>
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	4a29      	ldr	r2, [pc, #164]	; (8005c80 <TIM_Base_SetConfig+0x124>)
 8005bda:	4293      	cmp	r3, r2
 8005bdc:	d017      	beq.n	8005c0e <TIM_Base_SetConfig+0xb2>
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	4a28      	ldr	r2, [pc, #160]	; (8005c84 <TIM_Base_SetConfig+0x128>)
 8005be2:	4293      	cmp	r3, r2
 8005be4:	d013      	beq.n	8005c0e <TIM_Base_SetConfig+0xb2>
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	4a27      	ldr	r2, [pc, #156]	; (8005c88 <TIM_Base_SetConfig+0x12c>)
 8005bea:	4293      	cmp	r3, r2
 8005bec:	d00f      	beq.n	8005c0e <TIM_Base_SetConfig+0xb2>
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	4a26      	ldr	r2, [pc, #152]	; (8005c8c <TIM_Base_SetConfig+0x130>)
 8005bf2:	4293      	cmp	r3, r2
 8005bf4:	d00b      	beq.n	8005c0e <TIM_Base_SetConfig+0xb2>
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	4a25      	ldr	r2, [pc, #148]	; (8005c90 <TIM_Base_SetConfig+0x134>)
 8005bfa:	4293      	cmp	r3, r2
 8005bfc:	d007      	beq.n	8005c0e <TIM_Base_SetConfig+0xb2>
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	4a24      	ldr	r2, [pc, #144]	; (8005c94 <TIM_Base_SetConfig+0x138>)
 8005c02:	4293      	cmp	r3, r2
 8005c04:	d003      	beq.n	8005c0e <TIM_Base_SetConfig+0xb2>
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	4a23      	ldr	r2, [pc, #140]	; (8005c98 <TIM_Base_SetConfig+0x13c>)
 8005c0a:	4293      	cmp	r3, r2
 8005c0c:	d108      	bne.n	8005c20 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c14:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005c16:	683b      	ldr	r3, [r7, #0]
 8005c18:	68db      	ldr	r3, [r3, #12]
 8005c1a:	68fa      	ldr	r2, [r7, #12]
 8005c1c:	4313      	orrs	r3, r2
 8005c1e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005c26:	683b      	ldr	r3, [r7, #0]
 8005c28:	695b      	ldr	r3, [r3, #20]
 8005c2a:	4313      	orrs	r3, r2
 8005c2c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	68fa      	ldr	r2, [r7, #12]
 8005c32:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005c34:	683b      	ldr	r3, [r7, #0]
 8005c36:	689a      	ldr	r2, [r3, #8]
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005c3c:	683b      	ldr	r3, [r7, #0]
 8005c3e:	681a      	ldr	r2, [r3, #0]
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	4a0a      	ldr	r2, [pc, #40]	; (8005c70 <TIM_Base_SetConfig+0x114>)
 8005c48:	4293      	cmp	r3, r2
 8005c4a:	d003      	beq.n	8005c54 <TIM_Base_SetConfig+0xf8>
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	4a0c      	ldr	r2, [pc, #48]	; (8005c80 <TIM_Base_SetConfig+0x124>)
 8005c50:	4293      	cmp	r3, r2
 8005c52:	d103      	bne.n	8005c5c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005c54:	683b      	ldr	r3, [r7, #0]
 8005c56:	691a      	ldr	r2, [r3, #16]
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	2201      	movs	r2, #1
 8005c60:	615a      	str	r2, [r3, #20]
}
 8005c62:	bf00      	nop
 8005c64:	3714      	adds	r7, #20
 8005c66:	46bd      	mov	sp, r7
 8005c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6c:	4770      	bx	lr
 8005c6e:	bf00      	nop
 8005c70:	40010000 	.word	0x40010000
 8005c74:	40000400 	.word	0x40000400
 8005c78:	40000800 	.word	0x40000800
 8005c7c:	40000c00 	.word	0x40000c00
 8005c80:	40010400 	.word	0x40010400
 8005c84:	40014000 	.word	0x40014000
 8005c88:	40014400 	.word	0x40014400
 8005c8c:	40014800 	.word	0x40014800
 8005c90:	40001800 	.word	0x40001800
 8005c94:	40001c00 	.word	0x40001c00
 8005c98:	40002000 	.word	0x40002000

08005c9c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005c9c:	b480      	push	{r7}
 8005c9e:	b087      	sub	sp, #28
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	6078      	str	r0, [r7, #4]
 8005ca4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	6a1b      	ldr	r3, [r3, #32]
 8005caa:	f023 0201 	bic.w	r2, r3, #1
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	6a1b      	ldr	r3, [r3, #32]
 8005cb6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	685b      	ldr	r3, [r3, #4]
 8005cbc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	699b      	ldr	r3, [r3, #24]
 8005cc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	f023 0303 	bic.w	r3, r3, #3
 8005cd2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005cd4:	683b      	ldr	r3, [r7, #0]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	68fa      	ldr	r2, [r7, #12]
 8005cda:	4313      	orrs	r3, r2
 8005cdc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005cde:	697b      	ldr	r3, [r7, #20]
 8005ce0:	f023 0302 	bic.w	r3, r3, #2
 8005ce4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005ce6:	683b      	ldr	r3, [r7, #0]
 8005ce8:	689b      	ldr	r3, [r3, #8]
 8005cea:	697a      	ldr	r2, [r7, #20]
 8005cec:	4313      	orrs	r3, r2
 8005cee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	4a20      	ldr	r2, [pc, #128]	; (8005d74 <TIM_OC1_SetConfig+0xd8>)
 8005cf4:	4293      	cmp	r3, r2
 8005cf6:	d003      	beq.n	8005d00 <TIM_OC1_SetConfig+0x64>
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	4a1f      	ldr	r2, [pc, #124]	; (8005d78 <TIM_OC1_SetConfig+0xdc>)
 8005cfc:	4293      	cmp	r3, r2
 8005cfe:	d10c      	bne.n	8005d1a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005d00:	697b      	ldr	r3, [r7, #20]
 8005d02:	f023 0308 	bic.w	r3, r3, #8
 8005d06:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005d08:	683b      	ldr	r3, [r7, #0]
 8005d0a:	68db      	ldr	r3, [r3, #12]
 8005d0c:	697a      	ldr	r2, [r7, #20]
 8005d0e:	4313      	orrs	r3, r2
 8005d10:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005d12:	697b      	ldr	r3, [r7, #20]
 8005d14:	f023 0304 	bic.w	r3, r3, #4
 8005d18:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	4a15      	ldr	r2, [pc, #84]	; (8005d74 <TIM_OC1_SetConfig+0xd8>)
 8005d1e:	4293      	cmp	r3, r2
 8005d20:	d003      	beq.n	8005d2a <TIM_OC1_SetConfig+0x8e>
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	4a14      	ldr	r2, [pc, #80]	; (8005d78 <TIM_OC1_SetConfig+0xdc>)
 8005d26:	4293      	cmp	r3, r2
 8005d28:	d111      	bne.n	8005d4e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005d2a:	693b      	ldr	r3, [r7, #16]
 8005d2c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005d30:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005d32:	693b      	ldr	r3, [r7, #16]
 8005d34:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005d38:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005d3a:	683b      	ldr	r3, [r7, #0]
 8005d3c:	695b      	ldr	r3, [r3, #20]
 8005d3e:	693a      	ldr	r2, [r7, #16]
 8005d40:	4313      	orrs	r3, r2
 8005d42:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005d44:	683b      	ldr	r3, [r7, #0]
 8005d46:	699b      	ldr	r3, [r3, #24]
 8005d48:	693a      	ldr	r2, [r7, #16]
 8005d4a:	4313      	orrs	r3, r2
 8005d4c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	693a      	ldr	r2, [r7, #16]
 8005d52:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	68fa      	ldr	r2, [r7, #12]
 8005d58:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005d5a:	683b      	ldr	r3, [r7, #0]
 8005d5c:	685a      	ldr	r2, [r3, #4]
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	697a      	ldr	r2, [r7, #20]
 8005d66:	621a      	str	r2, [r3, #32]
}
 8005d68:	bf00      	nop
 8005d6a:	371c      	adds	r7, #28
 8005d6c:	46bd      	mov	sp, r7
 8005d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d72:	4770      	bx	lr
 8005d74:	40010000 	.word	0x40010000
 8005d78:	40010400 	.word	0x40010400

08005d7c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005d7c:	b480      	push	{r7}
 8005d7e:	b087      	sub	sp, #28
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	6078      	str	r0, [r7, #4]
 8005d84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	6a1b      	ldr	r3, [r3, #32]
 8005d8a:	f023 0210 	bic.w	r2, r3, #16
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	6a1b      	ldr	r3, [r3, #32]
 8005d96:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	685b      	ldr	r3, [r3, #4]
 8005d9c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	699b      	ldr	r3, [r3, #24]
 8005da2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005daa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005db2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005db4:	683b      	ldr	r3, [r7, #0]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	021b      	lsls	r3, r3, #8
 8005dba:	68fa      	ldr	r2, [r7, #12]
 8005dbc:	4313      	orrs	r3, r2
 8005dbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005dc0:	697b      	ldr	r3, [r7, #20]
 8005dc2:	f023 0320 	bic.w	r3, r3, #32
 8005dc6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005dc8:	683b      	ldr	r3, [r7, #0]
 8005dca:	689b      	ldr	r3, [r3, #8]
 8005dcc:	011b      	lsls	r3, r3, #4
 8005dce:	697a      	ldr	r2, [r7, #20]
 8005dd0:	4313      	orrs	r3, r2
 8005dd2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	4a22      	ldr	r2, [pc, #136]	; (8005e60 <TIM_OC2_SetConfig+0xe4>)
 8005dd8:	4293      	cmp	r3, r2
 8005dda:	d003      	beq.n	8005de4 <TIM_OC2_SetConfig+0x68>
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	4a21      	ldr	r2, [pc, #132]	; (8005e64 <TIM_OC2_SetConfig+0xe8>)
 8005de0:	4293      	cmp	r3, r2
 8005de2:	d10d      	bne.n	8005e00 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005de4:	697b      	ldr	r3, [r7, #20]
 8005de6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005dea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005dec:	683b      	ldr	r3, [r7, #0]
 8005dee:	68db      	ldr	r3, [r3, #12]
 8005df0:	011b      	lsls	r3, r3, #4
 8005df2:	697a      	ldr	r2, [r7, #20]
 8005df4:	4313      	orrs	r3, r2
 8005df6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005df8:	697b      	ldr	r3, [r7, #20]
 8005dfa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005dfe:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	4a17      	ldr	r2, [pc, #92]	; (8005e60 <TIM_OC2_SetConfig+0xe4>)
 8005e04:	4293      	cmp	r3, r2
 8005e06:	d003      	beq.n	8005e10 <TIM_OC2_SetConfig+0x94>
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	4a16      	ldr	r2, [pc, #88]	; (8005e64 <TIM_OC2_SetConfig+0xe8>)
 8005e0c:	4293      	cmp	r3, r2
 8005e0e:	d113      	bne.n	8005e38 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005e10:	693b      	ldr	r3, [r7, #16]
 8005e12:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005e16:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005e18:	693b      	ldr	r3, [r7, #16]
 8005e1a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005e1e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005e20:	683b      	ldr	r3, [r7, #0]
 8005e22:	695b      	ldr	r3, [r3, #20]
 8005e24:	009b      	lsls	r3, r3, #2
 8005e26:	693a      	ldr	r2, [r7, #16]
 8005e28:	4313      	orrs	r3, r2
 8005e2a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005e2c:	683b      	ldr	r3, [r7, #0]
 8005e2e:	699b      	ldr	r3, [r3, #24]
 8005e30:	009b      	lsls	r3, r3, #2
 8005e32:	693a      	ldr	r2, [r7, #16]
 8005e34:	4313      	orrs	r3, r2
 8005e36:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	693a      	ldr	r2, [r7, #16]
 8005e3c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	68fa      	ldr	r2, [r7, #12]
 8005e42:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005e44:	683b      	ldr	r3, [r7, #0]
 8005e46:	685a      	ldr	r2, [r3, #4]
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	697a      	ldr	r2, [r7, #20]
 8005e50:	621a      	str	r2, [r3, #32]
}
 8005e52:	bf00      	nop
 8005e54:	371c      	adds	r7, #28
 8005e56:	46bd      	mov	sp, r7
 8005e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5c:	4770      	bx	lr
 8005e5e:	bf00      	nop
 8005e60:	40010000 	.word	0x40010000
 8005e64:	40010400 	.word	0x40010400

08005e68 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005e68:	b480      	push	{r7}
 8005e6a:	b087      	sub	sp, #28
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	6078      	str	r0, [r7, #4]
 8005e70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	6a1b      	ldr	r3, [r3, #32]
 8005e76:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	6a1b      	ldr	r3, [r3, #32]
 8005e82:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	685b      	ldr	r3, [r3, #4]
 8005e88:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	69db      	ldr	r3, [r3, #28]
 8005e8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	f023 0303 	bic.w	r3, r3, #3
 8005e9e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005ea0:	683b      	ldr	r3, [r7, #0]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	68fa      	ldr	r2, [r7, #12]
 8005ea6:	4313      	orrs	r3, r2
 8005ea8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005eaa:	697b      	ldr	r3, [r7, #20]
 8005eac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005eb0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005eb2:	683b      	ldr	r3, [r7, #0]
 8005eb4:	689b      	ldr	r3, [r3, #8]
 8005eb6:	021b      	lsls	r3, r3, #8
 8005eb8:	697a      	ldr	r2, [r7, #20]
 8005eba:	4313      	orrs	r3, r2
 8005ebc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	4a21      	ldr	r2, [pc, #132]	; (8005f48 <TIM_OC3_SetConfig+0xe0>)
 8005ec2:	4293      	cmp	r3, r2
 8005ec4:	d003      	beq.n	8005ece <TIM_OC3_SetConfig+0x66>
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	4a20      	ldr	r2, [pc, #128]	; (8005f4c <TIM_OC3_SetConfig+0xe4>)
 8005eca:	4293      	cmp	r3, r2
 8005ecc:	d10d      	bne.n	8005eea <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005ece:	697b      	ldr	r3, [r7, #20]
 8005ed0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005ed4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005ed6:	683b      	ldr	r3, [r7, #0]
 8005ed8:	68db      	ldr	r3, [r3, #12]
 8005eda:	021b      	lsls	r3, r3, #8
 8005edc:	697a      	ldr	r2, [r7, #20]
 8005ede:	4313      	orrs	r3, r2
 8005ee0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005ee2:	697b      	ldr	r3, [r7, #20]
 8005ee4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005ee8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	4a16      	ldr	r2, [pc, #88]	; (8005f48 <TIM_OC3_SetConfig+0xe0>)
 8005eee:	4293      	cmp	r3, r2
 8005ef0:	d003      	beq.n	8005efa <TIM_OC3_SetConfig+0x92>
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	4a15      	ldr	r2, [pc, #84]	; (8005f4c <TIM_OC3_SetConfig+0xe4>)
 8005ef6:	4293      	cmp	r3, r2
 8005ef8:	d113      	bne.n	8005f22 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005efa:	693b      	ldr	r3, [r7, #16]
 8005efc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005f00:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005f02:	693b      	ldr	r3, [r7, #16]
 8005f04:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005f08:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005f0a:	683b      	ldr	r3, [r7, #0]
 8005f0c:	695b      	ldr	r3, [r3, #20]
 8005f0e:	011b      	lsls	r3, r3, #4
 8005f10:	693a      	ldr	r2, [r7, #16]
 8005f12:	4313      	orrs	r3, r2
 8005f14:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005f16:	683b      	ldr	r3, [r7, #0]
 8005f18:	699b      	ldr	r3, [r3, #24]
 8005f1a:	011b      	lsls	r3, r3, #4
 8005f1c:	693a      	ldr	r2, [r7, #16]
 8005f1e:	4313      	orrs	r3, r2
 8005f20:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	693a      	ldr	r2, [r7, #16]
 8005f26:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	68fa      	ldr	r2, [r7, #12]
 8005f2c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005f2e:	683b      	ldr	r3, [r7, #0]
 8005f30:	685a      	ldr	r2, [r3, #4]
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	697a      	ldr	r2, [r7, #20]
 8005f3a:	621a      	str	r2, [r3, #32]
}
 8005f3c:	bf00      	nop
 8005f3e:	371c      	adds	r7, #28
 8005f40:	46bd      	mov	sp, r7
 8005f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f46:	4770      	bx	lr
 8005f48:	40010000 	.word	0x40010000
 8005f4c:	40010400 	.word	0x40010400

08005f50 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005f50:	b480      	push	{r7}
 8005f52:	b087      	sub	sp, #28
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	6078      	str	r0, [r7, #4]
 8005f58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	6a1b      	ldr	r3, [r3, #32]
 8005f5e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	6a1b      	ldr	r3, [r3, #32]
 8005f6a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	685b      	ldr	r3, [r3, #4]
 8005f70:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	69db      	ldr	r3, [r3, #28]
 8005f76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f86:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005f88:	683b      	ldr	r3, [r7, #0]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	021b      	lsls	r3, r3, #8
 8005f8e:	68fa      	ldr	r2, [r7, #12]
 8005f90:	4313      	orrs	r3, r2
 8005f92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005f94:	693b      	ldr	r3, [r7, #16]
 8005f96:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005f9a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005f9c:	683b      	ldr	r3, [r7, #0]
 8005f9e:	689b      	ldr	r3, [r3, #8]
 8005fa0:	031b      	lsls	r3, r3, #12
 8005fa2:	693a      	ldr	r2, [r7, #16]
 8005fa4:	4313      	orrs	r3, r2
 8005fa6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	4a12      	ldr	r2, [pc, #72]	; (8005ff4 <TIM_OC4_SetConfig+0xa4>)
 8005fac:	4293      	cmp	r3, r2
 8005fae:	d003      	beq.n	8005fb8 <TIM_OC4_SetConfig+0x68>
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	4a11      	ldr	r2, [pc, #68]	; (8005ff8 <TIM_OC4_SetConfig+0xa8>)
 8005fb4:	4293      	cmp	r3, r2
 8005fb6:	d109      	bne.n	8005fcc <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005fb8:	697b      	ldr	r3, [r7, #20]
 8005fba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005fbe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005fc0:	683b      	ldr	r3, [r7, #0]
 8005fc2:	695b      	ldr	r3, [r3, #20]
 8005fc4:	019b      	lsls	r3, r3, #6
 8005fc6:	697a      	ldr	r2, [r7, #20]
 8005fc8:	4313      	orrs	r3, r2
 8005fca:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	697a      	ldr	r2, [r7, #20]
 8005fd0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	68fa      	ldr	r2, [r7, #12]
 8005fd6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005fd8:	683b      	ldr	r3, [r7, #0]
 8005fda:	685a      	ldr	r2, [r3, #4]
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	693a      	ldr	r2, [r7, #16]
 8005fe4:	621a      	str	r2, [r3, #32]
}
 8005fe6:	bf00      	nop
 8005fe8:	371c      	adds	r7, #28
 8005fea:	46bd      	mov	sp, r7
 8005fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff0:	4770      	bx	lr
 8005ff2:	bf00      	nop
 8005ff4:	40010000 	.word	0x40010000
 8005ff8:	40010400 	.word	0x40010400

08005ffc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005ffc:	b480      	push	{r7}
 8005ffe:	b087      	sub	sp, #28
 8006000:	af00      	add	r7, sp, #0
 8006002:	60f8      	str	r0, [r7, #12]
 8006004:	60b9      	str	r1, [r7, #8]
 8006006:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	6a1b      	ldr	r3, [r3, #32]
 800600c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	6a1b      	ldr	r3, [r3, #32]
 8006012:	f023 0201 	bic.w	r2, r3, #1
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	699b      	ldr	r3, [r3, #24]
 800601e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006020:	693b      	ldr	r3, [r7, #16]
 8006022:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006026:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	011b      	lsls	r3, r3, #4
 800602c:	693a      	ldr	r2, [r7, #16]
 800602e:	4313      	orrs	r3, r2
 8006030:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006032:	697b      	ldr	r3, [r7, #20]
 8006034:	f023 030a 	bic.w	r3, r3, #10
 8006038:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800603a:	697a      	ldr	r2, [r7, #20]
 800603c:	68bb      	ldr	r3, [r7, #8]
 800603e:	4313      	orrs	r3, r2
 8006040:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	693a      	ldr	r2, [r7, #16]
 8006046:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	697a      	ldr	r2, [r7, #20]
 800604c:	621a      	str	r2, [r3, #32]
}
 800604e:	bf00      	nop
 8006050:	371c      	adds	r7, #28
 8006052:	46bd      	mov	sp, r7
 8006054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006058:	4770      	bx	lr

0800605a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800605a:	b480      	push	{r7}
 800605c:	b087      	sub	sp, #28
 800605e:	af00      	add	r7, sp, #0
 8006060:	60f8      	str	r0, [r7, #12]
 8006062:	60b9      	str	r1, [r7, #8]
 8006064:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	6a1b      	ldr	r3, [r3, #32]
 800606a:	f023 0210 	bic.w	r2, r3, #16
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	699b      	ldr	r3, [r3, #24]
 8006076:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	6a1b      	ldr	r3, [r3, #32]
 800607c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800607e:	697b      	ldr	r3, [r7, #20]
 8006080:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006084:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	031b      	lsls	r3, r3, #12
 800608a:	697a      	ldr	r2, [r7, #20]
 800608c:	4313      	orrs	r3, r2
 800608e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006090:	693b      	ldr	r3, [r7, #16]
 8006092:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006096:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006098:	68bb      	ldr	r3, [r7, #8]
 800609a:	011b      	lsls	r3, r3, #4
 800609c:	693a      	ldr	r2, [r7, #16]
 800609e:	4313      	orrs	r3, r2
 80060a0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	697a      	ldr	r2, [r7, #20]
 80060a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	693a      	ldr	r2, [r7, #16]
 80060ac:	621a      	str	r2, [r3, #32]
}
 80060ae:	bf00      	nop
 80060b0:	371c      	adds	r7, #28
 80060b2:	46bd      	mov	sp, r7
 80060b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b8:	4770      	bx	lr

080060ba <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80060ba:	b480      	push	{r7}
 80060bc:	b085      	sub	sp, #20
 80060be:	af00      	add	r7, sp, #0
 80060c0:	6078      	str	r0, [r7, #4]
 80060c2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	689b      	ldr	r3, [r3, #8]
 80060c8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060d0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80060d2:	683a      	ldr	r2, [r7, #0]
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	4313      	orrs	r3, r2
 80060d8:	f043 0307 	orr.w	r3, r3, #7
 80060dc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	68fa      	ldr	r2, [r7, #12]
 80060e2:	609a      	str	r2, [r3, #8]
}
 80060e4:	bf00      	nop
 80060e6:	3714      	adds	r7, #20
 80060e8:	46bd      	mov	sp, r7
 80060ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ee:	4770      	bx	lr

080060f0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80060f0:	b480      	push	{r7}
 80060f2:	b087      	sub	sp, #28
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	60f8      	str	r0, [r7, #12]
 80060f8:	60b9      	str	r1, [r7, #8]
 80060fa:	607a      	str	r2, [r7, #4]
 80060fc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	689b      	ldr	r3, [r3, #8]
 8006102:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006104:	697b      	ldr	r3, [r7, #20]
 8006106:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800610a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800610c:	683b      	ldr	r3, [r7, #0]
 800610e:	021a      	lsls	r2, r3, #8
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	431a      	orrs	r2, r3
 8006114:	68bb      	ldr	r3, [r7, #8]
 8006116:	4313      	orrs	r3, r2
 8006118:	697a      	ldr	r2, [r7, #20]
 800611a:	4313      	orrs	r3, r2
 800611c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	697a      	ldr	r2, [r7, #20]
 8006122:	609a      	str	r2, [r3, #8]
}
 8006124:	bf00      	nop
 8006126:	371c      	adds	r7, #28
 8006128:	46bd      	mov	sp, r7
 800612a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612e:	4770      	bx	lr

08006130 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006130:	b480      	push	{r7}
 8006132:	b087      	sub	sp, #28
 8006134:	af00      	add	r7, sp, #0
 8006136:	60f8      	str	r0, [r7, #12]
 8006138:	60b9      	str	r1, [r7, #8]
 800613a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800613c:	68bb      	ldr	r3, [r7, #8]
 800613e:	f003 031f 	and.w	r3, r3, #31
 8006142:	2201      	movs	r2, #1
 8006144:	fa02 f303 	lsl.w	r3, r2, r3
 8006148:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	6a1a      	ldr	r2, [r3, #32]
 800614e:	697b      	ldr	r3, [r7, #20]
 8006150:	43db      	mvns	r3, r3
 8006152:	401a      	ands	r2, r3
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	6a1a      	ldr	r2, [r3, #32]
 800615c:	68bb      	ldr	r3, [r7, #8]
 800615e:	f003 031f 	and.w	r3, r3, #31
 8006162:	6879      	ldr	r1, [r7, #4]
 8006164:	fa01 f303 	lsl.w	r3, r1, r3
 8006168:	431a      	orrs	r2, r3
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	621a      	str	r2, [r3, #32]
}
 800616e:	bf00      	nop
 8006170:	371c      	adds	r7, #28
 8006172:	46bd      	mov	sp, r7
 8006174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006178:	4770      	bx	lr
	...

0800617c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800617c:	b480      	push	{r7}
 800617e:	b085      	sub	sp, #20
 8006180:	af00      	add	r7, sp, #0
 8006182:	6078      	str	r0, [r7, #4]
 8006184:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800618c:	2b01      	cmp	r3, #1
 800618e:	d101      	bne.n	8006194 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006190:	2302      	movs	r3, #2
 8006192:	e05a      	b.n	800624a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	2201      	movs	r2, #1
 8006198:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	2202      	movs	r2, #2
 80061a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	685b      	ldr	r3, [r3, #4]
 80061aa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	689b      	ldr	r3, [r3, #8]
 80061b2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061ba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80061bc:	683b      	ldr	r3, [r7, #0]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	68fa      	ldr	r2, [r7, #12]
 80061c2:	4313      	orrs	r3, r2
 80061c4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	68fa      	ldr	r2, [r7, #12]
 80061cc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	4a21      	ldr	r2, [pc, #132]	; (8006258 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80061d4:	4293      	cmp	r3, r2
 80061d6:	d022      	beq.n	800621e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80061e0:	d01d      	beq.n	800621e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	4a1d      	ldr	r2, [pc, #116]	; (800625c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80061e8:	4293      	cmp	r3, r2
 80061ea:	d018      	beq.n	800621e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	4a1b      	ldr	r2, [pc, #108]	; (8006260 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80061f2:	4293      	cmp	r3, r2
 80061f4:	d013      	beq.n	800621e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	4a1a      	ldr	r2, [pc, #104]	; (8006264 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80061fc:	4293      	cmp	r3, r2
 80061fe:	d00e      	beq.n	800621e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	4a18      	ldr	r2, [pc, #96]	; (8006268 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006206:	4293      	cmp	r3, r2
 8006208:	d009      	beq.n	800621e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	4a17      	ldr	r2, [pc, #92]	; (800626c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006210:	4293      	cmp	r3, r2
 8006212:	d004      	beq.n	800621e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	4a15      	ldr	r2, [pc, #84]	; (8006270 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800621a:	4293      	cmp	r3, r2
 800621c:	d10c      	bne.n	8006238 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800621e:	68bb      	ldr	r3, [r7, #8]
 8006220:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006224:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006226:	683b      	ldr	r3, [r7, #0]
 8006228:	685b      	ldr	r3, [r3, #4]
 800622a:	68ba      	ldr	r2, [r7, #8]
 800622c:	4313      	orrs	r3, r2
 800622e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	68ba      	ldr	r2, [r7, #8]
 8006236:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	2201      	movs	r2, #1
 800623c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	2200      	movs	r2, #0
 8006244:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006248:	2300      	movs	r3, #0
}
 800624a:	4618      	mov	r0, r3
 800624c:	3714      	adds	r7, #20
 800624e:	46bd      	mov	sp, r7
 8006250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006254:	4770      	bx	lr
 8006256:	bf00      	nop
 8006258:	40010000 	.word	0x40010000
 800625c:	40000400 	.word	0x40000400
 8006260:	40000800 	.word	0x40000800
 8006264:	40000c00 	.word	0x40000c00
 8006268:	40010400 	.word	0x40010400
 800626c:	40014000 	.word	0x40014000
 8006270:	40001800 	.word	0x40001800

08006274 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006274:	b480      	push	{r7}
 8006276:	b083      	sub	sp, #12
 8006278:	af00      	add	r7, sp, #0
 800627a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800627c:	bf00      	nop
 800627e:	370c      	adds	r7, #12
 8006280:	46bd      	mov	sp, r7
 8006282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006286:	4770      	bx	lr

08006288 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006288:	b480      	push	{r7}
 800628a:	b083      	sub	sp, #12
 800628c:	af00      	add	r7, sp, #0
 800628e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006290:	bf00      	nop
 8006292:	370c      	adds	r7, #12
 8006294:	46bd      	mov	sp, r7
 8006296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800629a:	4770      	bx	lr

0800629c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800629c:	b580      	push	{r7, lr}
 800629e:	b082      	sub	sp, #8
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d101      	bne.n	80062ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80062aa:	2301      	movs	r3, #1
 80062ac:	e03f      	b.n	800632e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80062b4:	b2db      	uxtb	r3, r3
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d106      	bne.n	80062c8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	2200      	movs	r2, #0
 80062be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80062c2:	6878      	ldr	r0, [r7, #4]
 80062c4:	f7fb fd76 	bl	8001db4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	2224      	movs	r2, #36	; 0x24
 80062cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	68da      	ldr	r2, [r3, #12]
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80062de:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80062e0:	6878      	ldr	r0, [r7, #4]
 80062e2:	f000 fc11 	bl	8006b08 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	691a      	ldr	r2, [r3, #16]
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80062f4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	695a      	ldr	r2, [r3, #20]
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006304:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	68da      	ldr	r2, [r3, #12]
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006314:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	2200      	movs	r2, #0
 800631a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	2220      	movs	r2, #32
 8006320:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	2220      	movs	r2, #32
 8006328:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800632c:	2300      	movs	r3, #0
}
 800632e:	4618      	mov	r0, r3
 8006330:	3708      	adds	r7, #8
 8006332:	46bd      	mov	sp, r7
 8006334:	bd80      	pop	{r7, pc}

08006336 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006336:	b580      	push	{r7, lr}
 8006338:	b08a      	sub	sp, #40	; 0x28
 800633a:	af02      	add	r7, sp, #8
 800633c:	60f8      	str	r0, [r7, #12]
 800633e:	60b9      	str	r1, [r7, #8]
 8006340:	603b      	str	r3, [r7, #0]
 8006342:	4613      	mov	r3, r2
 8006344:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006346:	2300      	movs	r3, #0
 8006348:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006350:	b2db      	uxtb	r3, r3
 8006352:	2b20      	cmp	r3, #32
 8006354:	d17c      	bne.n	8006450 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006356:	68bb      	ldr	r3, [r7, #8]
 8006358:	2b00      	cmp	r3, #0
 800635a:	d002      	beq.n	8006362 <HAL_UART_Transmit+0x2c>
 800635c:	88fb      	ldrh	r3, [r7, #6]
 800635e:	2b00      	cmp	r3, #0
 8006360:	d101      	bne.n	8006366 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006362:	2301      	movs	r3, #1
 8006364:	e075      	b.n	8006452 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800636c:	2b01      	cmp	r3, #1
 800636e:	d101      	bne.n	8006374 <HAL_UART_Transmit+0x3e>
 8006370:	2302      	movs	r3, #2
 8006372:	e06e      	b.n	8006452 <HAL_UART_Transmit+0x11c>
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	2201      	movs	r2, #1
 8006378:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	2200      	movs	r2, #0
 8006380:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	2221      	movs	r2, #33	; 0x21
 8006386:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800638a:	f7fc fdd5 	bl	8002f38 <HAL_GetTick>
 800638e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	88fa      	ldrh	r2, [r7, #6]
 8006394:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	88fa      	ldrh	r2, [r7, #6]
 800639a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	689b      	ldr	r3, [r3, #8]
 80063a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80063a4:	d108      	bne.n	80063b8 <HAL_UART_Transmit+0x82>
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	691b      	ldr	r3, [r3, #16]
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d104      	bne.n	80063b8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80063ae:	2300      	movs	r3, #0
 80063b0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80063b2:	68bb      	ldr	r3, [r7, #8]
 80063b4:	61bb      	str	r3, [r7, #24]
 80063b6:	e003      	b.n	80063c0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80063b8:	68bb      	ldr	r3, [r7, #8]
 80063ba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80063bc:	2300      	movs	r3, #0
 80063be:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	2200      	movs	r2, #0
 80063c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80063c8:	e02a      	b.n	8006420 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80063ca:	683b      	ldr	r3, [r7, #0]
 80063cc:	9300      	str	r3, [sp, #0]
 80063ce:	697b      	ldr	r3, [r7, #20]
 80063d0:	2200      	movs	r2, #0
 80063d2:	2180      	movs	r1, #128	; 0x80
 80063d4:	68f8      	ldr	r0, [r7, #12]
 80063d6:	f000 fa0d 	bl	80067f4 <UART_WaitOnFlagUntilTimeout>
 80063da:	4603      	mov	r3, r0
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d001      	beq.n	80063e4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80063e0:	2303      	movs	r3, #3
 80063e2:	e036      	b.n	8006452 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80063e4:	69fb      	ldr	r3, [r7, #28]
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d10b      	bne.n	8006402 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80063ea:	69bb      	ldr	r3, [r7, #24]
 80063ec:	881b      	ldrh	r3, [r3, #0]
 80063ee:	461a      	mov	r2, r3
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80063f8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80063fa:	69bb      	ldr	r3, [r7, #24]
 80063fc:	3302      	adds	r3, #2
 80063fe:	61bb      	str	r3, [r7, #24]
 8006400:	e007      	b.n	8006412 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006402:	69fb      	ldr	r3, [r7, #28]
 8006404:	781a      	ldrb	r2, [r3, #0]
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800640c:	69fb      	ldr	r3, [r7, #28]
 800640e:	3301      	adds	r3, #1
 8006410:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006416:	b29b      	uxth	r3, r3
 8006418:	3b01      	subs	r3, #1
 800641a:	b29a      	uxth	r2, r3
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006424:	b29b      	uxth	r3, r3
 8006426:	2b00      	cmp	r3, #0
 8006428:	d1cf      	bne.n	80063ca <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800642a:	683b      	ldr	r3, [r7, #0]
 800642c:	9300      	str	r3, [sp, #0]
 800642e:	697b      	ldr	r3, [r7, #20]
 8006430:	2200      	movs	r2, #0
 8006432:	2140      	movs	r1, #64	; 0x40
 8006434:	68f8      	ldr	r0, [r7, #12]
 8006436:	f000 f9dd 	bl	80067f4 <UART_WaitOnFlagUntilTimeout>
 800643a:	4603      	mov	r3, r0
 800643c:	2b00      	cmp	r3, #0
 800643e:	d001      	beq.n	8006444 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006440:	2303      	movs	r3, #3
 8006442:	e006      	b.n	8006452 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	2220      	movs	r2, #32
 8006448:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800644c:	2300      	movs	r3, #0
 800644e:	e000      	b.n	8006452 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006450:	2302      	movs	r3, #2
  }
}
 8006452:	4618      	mov	r0, r3
 8006454:	3720      	adds	r7, #32
 8006456:	46bd      	mov	sp, r7
 8006458:	bd80      	pop	{r7, pc}
	...

0800645c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800645c:	b580      	push	{r7, lr}
 800645e:	b08a      	sub	sp, #40	; 0x28
 8006460:	af00      	add	r7, sp, #0
 8006462:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	68db      	ldr	r3, [r3, #12]
 8006472:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	695b      	ldr	r3, [r3, #20]
 800647a:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 800647c:	2300      	movs	r3, #0
 800647e:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8006480:	2300      	movs	r3, #0
 8006482:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006486:	f003 030f 	and.w	r3, r3, #15
 800648a:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 800648c:	69bb      	ldr	r3, [r7, #24]
 800648e:	2b00      	cmp	r3, #0
 8006490:	d10d      	bne.n	80064ae <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006494:	f003 0320 	and.w	r3, r3, #32
 8006498:	2b00      	cmp	r3, #0
 800649a:	d008      	beq.n	80064ae <HAL_UART_IRQHandler+0x52>
 800649c:	6a3b      	ldr	r3, [r7, #32]
 800649e:	f003 0320 	and.w	r3, r3, #32
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d003      	beq.n	80064ae <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80064a6:	6878      	ldr	r0, [r7, #4]
 80064a8:	f000 fa97 	bl	80069da <UART_Receive_IT>
      return;
 80064ac:	e17c      	b.n	80067a8 <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80064ae:	69bb      	ldr	r3, [r7, #24]
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	f000 80b1 	beq.w	8006618 <HAL_UART_IRQHandler+0x1bc>
 80064b6:	69fb      	ldr	r3, [r7, #28]
 80064b8:	f003 0301 	and.w	r3, r3, #1
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d105      	bne.n	80064cc <HAL_UART_IRQHandler+0x70>
 80064c0:	6a3b      	ldr	r3, [r7, #32]
 80064c2:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	f000 80a6 	beq.w	8006618 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80064cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064ce:	f003 0301 	and.w	r3, r3, #1
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d00a      	beq.n	80064ec <HAL_UART_IRQHandler+0x90>
 80064d6:	6a3b      	ldr	r3, [r7, #32]
 80064d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d005      	beq.n	80064ec <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064e4:	f043 0201 	orr.w	r2, r3, #1
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80064ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064ee:	f003 0304 	and.w	r3, r3, #4
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d00a      	beq.n	800650c <HAL_UART_IRQHandler+0xb0>
 80064f6:	69fb      	ldr	r3, [r7, #28]
 80064f8:	f003 0301 	and.w	r3, r3, #1
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d005      	beq.n	800650c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006504:	f043 0202 	orr.w	r2, r3, #2
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800650c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800650e:	f003 0302 	and.w	r3, r3, #2
 8006512:	2b00      	cmp	r3, #0
 8006514:	d00a      	beq.n	800652c <HAL_UART_IRQHandler+0xd0>
 8006516:	69fb      	ldr	r3, [r7, #28]
 8006518:	f003 0301 	and.w	r3, r3, #1
 800651c:	2b00      	cmp	r3, #0
 800651e:	d005      	beq.n	800652c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006524:	f043 0204 	orr.w	r2, r3, #4
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800652c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800652e:	f003 0308 	and.w	r3, r3, #8
 8006532:	2b00      	cmp	r3, #0
 8006534:	d00f      	beq.n	8006556 <HAL_UART_IRQHandler+0xfa>
 8006536:	6a3b      	ldr	r3, [r7, #32]
 8006538:	f003 0320 	and.w	r3, r3, #32
 800653c:	2b00      	cmp	r3, #0
 800653e:	d104      	bne.n	800654a <HAL_UART_IRQHandler+0xee>
 8006540:	69fb      	ldr	r3, [r7, #28]
 8006542:	f003 0301 	and.w	r3, r3, #1
 8006546:	2b00      	cmp	r3, #0
 8006548:	d005      	beq.n	8006556 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800654e:	f043 0208 	orr.w	r2, r3, #8
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800655a:	2b00      	cmp	r3, #0
 800655c:	f000 811f 	beq.w	800679e <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006562:	f003 0320 	and.w	r3, r3, #32
 8006566:	2b00      	cmp	r3, #0
 8006568:	d007      	beq.n	800657a <HAL_UART_IRQHandler+0x11e>
 800656a:	6a3b      	ldr	r3, [r7, #32]
 800656c:	f003 0320 	and.w	r3, r3, #32
 8006570:	2b00      	cmp	r3, #0
 8006572:	d002      	beq.n	800657a <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8006574:	6878      	ldr	r0, [r7, #4]
 8006576:	f000 fa30 	bl	80069da <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	695b      	ldr	r3, [r3, #20]
 8006580:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006584:	2b40      	cmp	r3, #64	; 0x40
 8006586:	bf0c      	ite	eq
 8006588:	2301      	moveq	r3, #1
 800658a:	2300      	movne	r3, #0
 800658c:	b2db      	uxtb	r3, r3
 800658e:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006594:	f003 0308 	and.w	r3, r3, #8
 8006598:	2b00      	cmp	r3, #0
 800659a:	d102      	bne.n	80065a2 <HAL_UART_IRQHandler+0x146>
 800659c:	697b      	ldr	r3, [r7, #20]
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d031      	beq.n	8006606 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80065a2:	6878      	ldr	r0, [r7, #4]
 80065a4:	f000 f970 	bl	8006888 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	695b      	ldr	r3, [r3, #20]
 80065ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065b2:	2b40      	cmp	r3, #64	; 0x40
 80065b4:	d123      	bne.n	80065fe <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	695a      	ldr	r2, [r3, #20]
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80065c4:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d013      	beq.n	80065f6 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065d2:	4a77      	ldr	r2, [pc, #476]	; (80067b0 <HAL_UART_IRQHandler+0x354>)
 80065d4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065da:	4618      	mov	r0, r3
 80065dc:	f7fc fe5d 	bl	800329a <HAL_DMA_Abort_IT>
 80065e0:	4603      	mov	r3, r0
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d016      	beq.n	8006614 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80065ec:	687a      	ldr	r2, [r7, #4]
 80065ee:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80065f0:	4610      	mov	r0, r2
 80065f2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80065f4:	e00e      	b.n	8006614 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80065f6:	6878      	ldr	r0, [r7, #4]
 80065f8:	f000 f8e6 	bl	80067c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80065fc:	e00a      	b.n	8006614 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80065fe:	6878      	ldr	r0, [r7, #4]
 8006600:	f000 f8e2 	bl	80067c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006604:	e006      	b.n	8006614 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006606:	6878      	ldr	r0, [r7, #4]
 8006608:	f000 f8de 	bl	80067c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	2200      	movs	r2, #0
 8006610:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8006612:	e0c4      	b.n	800679e <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006614:	bf00      	nop
    return;
 8006616:	e0c2      	b.n	800679e <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800661c:	2b01      	cmp	r3, #1
 800661e:	f040 80a2 	bne.w	8006766 <HAL_UART_IRQHandler+0x30a>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8006622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006624:	f003 0310 	and.w	r3, r3, #16
 8006628:	2b00      	cmp	r3, #0
 800662a:	f000 809c 	beq.w	8006766 <HAL_UART_IRQHandler+0x30a>
      &&((cr1its & USART_SR_IDLE) != 0U))
 800662e:	6a3b      	ldr	r3, [r7, #32]
 8006630:	f003 0310 	and.w	r3, r3, #16
 8006634:	2b00      	cmp	r3, #0
 8006636:	f000 8096 	beq.w	8006766 <HAL_UART_IRQHandler+0x30a>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800663a:	2300      	movs	r3, #0
 800663c:	60fb      	str	r3, [r7, #12]
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	60fb      	str	r3, [r7, #12]
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	685b      	ldr	r3, [r3, #4]
 800664c:	60fb      	str	r3, [r7, #12]
 800664e:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	695b      	ldr	r3, [r3, #20]
 8006656:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800665a:	2b40      	cmp	r3, #64	; 0x40
 800665c:	d14f      	bne.n	80066fe <HAL_UART_IRQHandler+0x2a2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	685b      	ldr	r3, [r3, #4]
 8006666:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8006668:	8a3b      	ldrh	r3, [r7, #16]
 800666a:	2b00      	cmp	r3, #0
 800666c:	f000 8099 	beq.w	80067a2 <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006674:	8a3a      	ldrh	r2, [r7, #16]
 8006676:	429a      	cmp	r2, r3
 8006678:	f080 8093 	bcs.w	80067a2 <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	8a3a      	ldrh	r2, [r7, #16]
 8006680:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006686:	69db      	ldr	r3, [r3, #28]
 8006688:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800668c:	d02b      	beq.n	80066e6 <HAL_UART_IRQHandler+0x28a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	68da      	ldr	r2, [r3, #12]
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800669c:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	695a      	ldr	r2, [r3, #20]
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	f022 0201 	bic.w	r2, r2, #1
 80066ac:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	695a      	ldr	r2, [r3, #20]
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80066bc:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	2220      	movs	r2, #32
 80066c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	2200      	movs	r2, #0
 80066ca:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	68da      	ldr	r2, [r3, #12]
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	f022 0210 	bic.w	r2, r2, #16
 80066da:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066e0:	4618      	mov	r0, r3
 80066e2:	f7fc fd6a 	bl	80031ba <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80066ee:	b29b      	uxth	r3, r3
 80066f0:	1ad3      	subs	r3, r2, r3
 80066f2:	b29b      	uxth	r3, r3
 80066f4:	4619      	mov	r1, r3
 80066f6:	6878      	ldr	r0, [r7, #4]
 80066f8:	f000 f870 	bl	80067dc <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80066fc:	e051      	b.n	80067a2 <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006706:	b29b      	uxth	r3, r3
 8006708:	1ad3      	subs	r3, r2, r3
 800670a:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006710:	b29b      	uxth	r3, r3
 8006712:	2b00      	cmp	r3, #0
 8006714:	d047      	beq.n	80067a6 <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 8006716:	8a7b      	ldrh	r3, [r7, #18]
 8006718:	2b00      	cmp	r3, #0
 800671a:	d044      	beq.n	80067a6 <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	68da      	ldr	r2, [r3, #12]
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800672a:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	695a      	ldr	r2, [r3, #20]
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	f022 0201 	bic.w	r2, r2, #1
 800673a:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	2220      	movs	r2, #32
 8006740:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	2200      	movs	r2, #0
 8006748:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	68da      	ldr	r2, [r3, #12]
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	f022 0210 	bic.w	r2, r2, #16
 8006758:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800675a:	8a7b      	ldrh	r3, [r7, #18]
 800675c:	4619      	mov	r1, r3
 800675e:	6878      	ldr	r0, [r7, #4]
 8006760:	f000 f83c 	bl	80067dc <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8006764:	e01f      	b.n	80067a6 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006768:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800676c:	2b00      	cmp	r3, #0
 800676e:	d008      	beq.n	8006782 <HAL_UART_IRQHandler+0x326>
 8006770:	6a3b      	ldr	r3, [r7, #32]
 8006772:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006776:	2b00      	cmp	r3, #0
 8006778:	d003      	beq.n	8006782 <HAL_UART_IRQHandler+0x326>
  {
    UART_Transmit_IT(huart);
 800677a:	6878      	ldr	r0, [r7, #4]
 800677c:	f000 f8c5 	bl	800690a <UART_Transmit_IT>
    return;
 8006780:	e012      	b.n	80067a8 <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006784:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006788:	2b00      	cmp	r3, #0
 800678a:	d00d      	beq.n	80067a8 <HAL_UART_IRQHandler+0x34c>
 800678c:	6a3b      	ldr	r3, [r7, #32]
 800678e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006792:	2b00      	cmp	r3, #0
 8006794:	d008      	beq.n	80067a8 <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 8006796:	6878      	ldr	r0, [r7, #4]
 8006798:	f000 f907 	bl	80069aa <UART_EndTransmit_IT>
    return;
 800679c:	e004      	b.n	80067a8 <HAL_UART_IRQHandler+0x34c>
    return;
 800679e:	bf00      	nop
 80067a0:	e002      	b.n	80067a8 <HAL_UART_IRQHandler+0x34c>
      return;
 80067a2:	bf00      	nop
 80067a4:	e000      	b.n	80067a8 <HAL_UART_IRQHandler+0x34c>
      return;
 80067a6:	bf00      	nop
  }
}
 80067a8:	3728      	adds	r7, #40	; 0x28
 80067aa:	46bd      	mov	sp, r7
 80067ac:	bd80      	pop	{r7, pc}
 80067ae:	bf00      	nop
 80067b0:	080068e3 	.word	0x080068e3

080067b4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80067b4:	b480      	push	{r7}
 80067b6:	b083      	sub	sp, #12
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80067bc:	bf00      	nop
 80067be:	370c      	adds	r7, #12
 80067c0:	46bd      	mov	sp, r7
 80067c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c6:	4770      	bx	lr

080067c8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80067c8:	b480      	push	{r7}
 80067ca:	b083      	sub	sp, #12
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80067d0:	bf00      	nop
 80067d2:	370c      	adds	r7, #12
 80067d4:	46bd      	mov	sp, r7
 80067d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067da:	4770      	bx	lr

080067dc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80067dc:	b480      	push	{r7}
 80067de:	b083      	sub	sp, #12
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	6078      	str	r0, [r7, #4]
 80067e4:	460b      	mov	r3, r1
 80067e6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80067e8:	bf00      	nop
 80067ea:	370c      	adds	r7, #12
 80067ec:	46bd      	mov	sp, r7
 80067ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f2:	4770      	bx	lr

080067f4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80067f4:	b580      	push	{r7, lr}
 80067f6:	b084      	sub	sp, #16
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	60f8      	str	r0, [r7, #12]
 80067fc:	60b9      	str	r1, [r7, #8]
 80067fe:	603b      	str	r3, [r7, #0]
 8006800:	4613      	mov	r3, r2
 8006802:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006804:	e02c      	b.n	8006860 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006806:	69bb      	ldr	r3, [r7, #24]
 8006808:	f1b3 3fff 	cmp.w	r3, #4294967295
 800680c:	d028      	beq.n	8006860 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800680e:	69bb      	ldr	r3, [r7, #24]
 8006810:	2b00      	cmp	r3, #0
 8006812:	d007      	beq.n	8006824 <UART_WaitOnFlagUntilTimeout+0x30>
 8006814:	f7fc fb90 	bl	8002f38 <HAL_GetTick>
 8006818:	4602      	mov	r2, r0
 800681a:	683b      	ldr	r3, [r7, #0]
 800681c:	1ad3      	subs	r3, r2, r3
 800681e:	69ba      	ldr	r2, [r7, #24]
 8006820:	429a      	cmp	r2, r3
 8006822:	d21d      	bcs.n	8006860 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	68da      	ldr	r2, [r3, #12]
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006832:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	695a      	ldr	r2, [r3, #20]
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	f022 0201 	bic.w	r2, r2, #1
 8006842:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	2220      	movs	r2, #32
 8006848:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	2220      	movs	r2, #32
 8006850:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	2200      	movs	r2, #0
 8006858:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800685c:	2303      	movs	r3, #3
 800685e:	e00f      	b.n	8006880 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	681a      	ldr	r2, [r3, #0]
 8006866:	68bb      	ldr	r3, [r7, #8]
 8006868:	4013      	ands	r3, r2
 800686a:	68ba      	ldr	r2, [r7, #8]
 800686c:	429a      	cmp	r2, r3
 800686e:	bf0c      	ite	eq
 8006870:	2301      	moveq	r3, #1
 8006872:	2300      	movne	r3, #0
 8006874:	b2db      	uxtb	r3, r3
 8006876:	461a      	mov	r2, r3
 8006878:	79fb      	ldrb	r3, [r7, #7]
 800687a:	429a      	cmp	r2, r3
 800687c:	d0c3      	beq.n	8006806 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800687e:	2300      	movs	r3, #0
}
 8006880:	4618      	mov	r0, r3
 8006882:	3710      	adds	r7, #16
 8006884:	46bd      	mov	sp, r7
 8006886:	bd80      	pop	{r7, pc}

08006888 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006888:	b480      	push	{r7}
 800688a:	b083      	sub	sp, #12
 800688c:	af00      	add	r7, sp, #0
 800688e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	68da      	ldr	r2, [r3, #12]
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800689e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	695a      	ldr	r2, [r3, #20]
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	f022 0201 	bic.w	r2, r2, #1
 80068ae:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068b4:	2b01      	cmp	r3, #1
 80068b6:	d107      	bne.n	80068c8 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	68da      	ldr	r2, [r3, #12]
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	f022 0210 	bic.w	r2, r2, #16
 80068c6:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	2220      	movs	r2, #32
 80068cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	2200      	movs	r2, #0
 80068d4:	631a      	str	r2, [r3, #48]	; 0x30
}
 80068d6:	bf00      	nop
 80068d8:	370c      	adds	r7, #12
 80068da:	46bd      	mov	sp, r7
 80068dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e0:	4770      	bx	lr

080068e2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80068e2:	b580      	push	{r7, lr}
 80068e4:	b084      	sub	sp, #16
 80068e6:	af00      	add	r7, sp, #0
 80068e8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068ee:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	2200      	movs	r2, #0
 80068f4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	2200      	movs	r2, #0
 80068fa:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80068fc:	68f8      	ldr	r0, [r7, #12]
 80068fe:	f7ff ff63 	bl	80067c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006902:	bf00      	nop
 8006904:	3710      	adds	r7, #16
 8006906:	46bd      	mov	sp, r7
 8006908:	bd80      	pop	{r7, pc}

0800690a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800690a:	b480      	push	{r7}
 800690c:	b085      	sub	sp, #20
 800690e:	af00      	add	r7, sp, #0
 8006910:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006918:	b2db      	uxtb	r3, r3
 800691a:	2b21      	cmp	r3, #33	; 0x21
 800691c:	d13e      	bne.n	800699c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	689b      	ldr	r3, [r3, #8]
 8006922:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006926:	d114      	bne.n	8006952 <UART_Transmit_IT+0x48>
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	691b      	ldr	r3, [r3, #16]
 800692c:	2b00      	cmp	r3, #0
 800692e:	d110      	bne.n	8006952 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	6a1b      	ldr	r3, [r3, #32]
 8006934:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	881b      	ldrh	r3, [r3, #0]
 800693a:	461a      	mov	r2, r3
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006944:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	6a1b      	ldr	r3, [r3, #32]
 800694a:	1c9a      	adds	r2, r3, #2
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	621a      	str	r2, [r3, #32]
 8006950:	e008      	b.n	8006964 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	6a1b      	ldr	r3, [r3, #32]
 8006956:	1c59      	adds	r1, r3, #1
 8006958:	687a      	ldr	r2, [r7, #4]
 800695a:	6211      	str	r1, [r2, #32]
 800695c:	781a      	ldrb	r2, [r3, #0]
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006968:	b29b      	uxth	r3, r3
 800696a:	3b01      	subs	r3, #1
 800696c:	b29b      	uxth	r3, r3
 800696e:	687a      	ldr	r2, [r7, #4]
 8006970:	4619      	mov	r1, r3
 8006972:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006974:	2b00      	cmp	r3, #0
 8006976:	d10f      	bne.n	8006998 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	68da      	ldr	r2, [r3, #12]
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006986:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	68da      	ldr	r2, [r3, #12]
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006996:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006998:	2300      	movs	r3, #0
 800699a:	e000      	b.n	800699e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800699c:	2302      	movs	r3, #2
  }
}
 800699e:	4618      	mov	r0, r3
 80069a0:	3714      	adds	r7, #20
 80069a2:	46bd      	mov	sp, r7
 80069a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a8:	4770      	bx	lr

080069aa <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80069aa:	b580      	push	{r7, lr}
 80069ac:	b082      	sub	sp, #8
 80069ae:	af00      	add	r7, sp, #0
 80069b0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	68da      	ldr	r2, [r3, #12]
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80069c0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	2220      	movs	r2, #32
 80069c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80069ca:	6878      	ldr	r0, [r7, #4]
 80069cc:	f7ff fef2 	bl	80067b4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80069d0:	2300      	movs	r3, #0
}
 80069d2:	4618      	mov	r0, r3
 80069d4:	3708      	adds	r7, #8
 80069d6:	46bd      	mov	sp, r7
 80069d8:	bd80      	pop	{r7, pc}

080069da <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80069da:	b580      	push	{r7, lr}
 80069dc:	b084      	sub	sp, #16
 80069de:	af00      	add	r7, sp, #0
 80069e0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80069e8:	b2db      	uxtb	r3, r3
 80069ea:	2b22      	cmp	r3, #34	; 0x22
 80069ec:	f040 8087 	bne.w	8006afe <UART_Receive_IT+0x124>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	689b      	ldr	r3, [r3, #8]
 80069f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80069f8:	d117      	bne.n	8006a2a <UART_Receive_IT+0x50>
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	691b      	ldr	r3, [r3, #16]
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d113      	bne.n	8006a2a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006a02:	2300      	movs	r3, #0
 8006a04:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a0a:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	685b      	ldr	r3, [r3, #4]
 8006a12:	b29b      	uxth	r3, r3
 8006a14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a18:	b29a      	uxth	r2, r3
 8006a1a:	68bb      	ldr	r3, [r7, #8]
 8006a1c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a22:	1c9a      	adds	r2, r3, #2
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	629a      	str	r2, [r3, #40]	; 0x28
 8006a28:	e026      	b.n	8006a78 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a2e:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8006a30:	2300      	movs	r3, #0
 8006a32:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	689b      	ldr	r3, [r3, #8]
 8006a38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a3c:	d007      	beq.n	8006a4e <UART_Receive_IT+0x74>
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	689b      	ldr	r3, [r3, #8]
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d10a      	bne.n	8006a5c <UART_Receive_IT+0x82>
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	691b      	ldr	r3, [r3, #16]
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d106      	bne.n	8006a5c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	685b      	ldr	r3, [r3, #4]
 8006a54:	b2da      	uxtb	r2, r3
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	701a      	strb	r2, [r3, #0]
 8006a5a:	e008      	b.n	8006a6e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	685b      	ldr	r3, [r3, #4]
 8006a62:	b2db      	uxtb	r3, r3
 8006a64:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006a68:	b2da      	uxtb	r2, r3
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a72:	1c5a      	adds	r2, r3, #1
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006a7c:	b29b      	uxth	r3, r3
 8006a7e:	3b01      	subs	r3, #1
 8006a80:	b29b      	uxth	r3, r3
 8006a82:	687a      	ldr	r2, [r7, #4]
 8006a84:	4619      	mov	r1, r3
 8006a86:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d136      	bne.n	8006afa <UART_Receive_IT+0x120>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	68da      	ldr	r2, [r3, #12]
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	f022 0220 	bic.w	r2, r2, #32
 8006a9a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	68da      	ldr	r2, [r3, #12]
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006aaa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	695a      	ldr	r2, [r3, #20]
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	f022 0201 	bic.w	r2, r2, #1
 8006aba:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	2220      	movs	r2, #32
 8006ac0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ac8:	2b01      	cmp	r3, #1
 8006aca:	d10e      	bne.n	8006aea <UART_Receive_IT+0x110>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	68da      	ldr	r2, [r3, #12]
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	f022 0210 	bic.w	r2, r2, #16
 8006ada:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006ae0:	4619      	mov	r1, r3
 8006ae2:	6878      	ldr	r0, [r7, #4]
 8006ae4:	f7ff fe7a 	bl	80067dc <HAL_UARTEx_RxEventCallback>
 8006ae8:	e002      	b.n	8006af0 <UART_Receive_IT+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8006aea:	6878      	ldr	r0, [r7, #4]
 8006aec:	f7fa fafa 	bl	80010e4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	2200      	movs	r2, #0
 8006af4:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_OK;
 8006af6:	2300      	movs	r3, #0
 8006af8:	e002      	b.n	8006b00 <UART_Receive_IT+0x126>
    }
    return HAL_OK;
 8006afa:	2300      	movs	r3, #0
 8006afc:	e000      	b.n	8006b00 <UART_Receive_IT+0x126>
  }
  else
  {
    return HAL_BUSY;
 8006afe:	2302      	movs	r3, #2
  }
}
 8006b00:	4618      	mov	r0, r3
 8006b02:	3710      	adds	r7, #16
 8006b04:	46bd      	mov	sp, r7
 8006b06:	bd80      	pop	{r7, pc}

08006b08 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006b08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b0c:	b09f      	sub	sp, #124	; 0x7c
 8006b0e:	af00      	add	r7, sp, #0
 8006b10:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006b12:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	691b      	ldr	r3, [r3, #16]
 8006b18:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006b1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b1e:	68d9      	ldr	r1, [r3, #12]
 8006b20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b22:	681a      	ldr	r2, [r3, #0]
 8006b24:	ea40 0301 	orr.w	r3, r0, r1
 8006b28:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006b2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b2c:	689a      	ldr	r2, [r3, #8]
 8006b2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b30:	691b      	ldr	r3, [r3, #16]
 8006b32:	431a      	orrs	r2, r3
 8006b34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b36:	695b      	ldr	r3, [r3, #20]
 8006b38:	431a      	orrs	r2, r3
 8006b3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b3c:	69db      	ldr	r3, [r3, #28]
 8006b3e:	4313      	orrs	r3, r2
 8006b40:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8006b42:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	68db      	ldr	r3, [r3, #12]
 8006b48:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006b4c:	f021 010c 	bic.w	r1, r1, #12
 8006b50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b52:	681a      	ldr	r2, [r3, #0]
 8006b54:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006b56:	430b      	orrs	r3, r1
 8006b58:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006b5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	695b      	ldr	r3, [r3, #20]
 8006b60:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006b64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b66:	6999      	ldr	r1, [r3, #24]
 8006b68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b6a:	681a      	ldr	r2, [r3, #0]
 8006b6c:	ea40 0301 	orr.w	r3, r0, r1
 8006b70:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006b72:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b74:	681a      	ldr	r2, [r3, #0]
 8006b76:	4bc5      	ldr	r3, [pc, #788]	; (8006e8c <UART_SetConfig+0x384>)
 8006b78:	429a      	cmp	r2, r3
 8006b7a:	d004      	beq.n	8006b86 <UART_SetConfig+0x7e>
 8006b7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b7e:	681a      	ldr	r2, [r3, #0]
 8006b80:	4bc3      	ldr	r3, [pc, #780]	; (8006e90 <UART_SetConfig+0x388>)
 8006b82:	429a      	cmp	r2, r3
 8006b84:	d103      	bne.n	8006b8e <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006b86:	f7fd fe1f 	bl	80047c8 <HAL_RCC_GetPCLK2Freq>
 8006b8a:	6778      	str	r0, [r7, #116]	; 0x74
 8006b8c:	e002      	b.n	8006b94 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006b8e:	f7fd fe07 	bl	80047a0 <HAL_RCC_GetPCLK1Freq>
 8006b92:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006b94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b96:	69db      	ldr	r3, [r3, #28]
 8006b98:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006b9c:	f040 80b6 	bne.w	8006d0c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006ba0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006ba2:	461c      	mov	r4, r3
 8006ba4:	f04f 0500 	mov.w	r5, #0
 8006ba8:	4622      	mov	r2, r4
 8006baa:	462b      	mov	r3, r5
 8006bac:	1891      	adds	r1, r2, r2
 8006bae:	6439      	str	r1, [r7, #64]	; 0x40
 8006bb0:	415b      	adcs	r3, r3
 8006bb2:	647b      	str	r3, [r7, #68]	; 0x44
 8006bb4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006bb8:	1912      	adds	r2, r2, r4
 8006bba:	eb45 0303 	adc.w	r3, r5, r3
 8006bbe:	f04f 0000 	mov.w	r0, #0
 8006bc2:	f04f 0100 	mov.w	r1, #0
 8006bc6:	00d9      	lsls	r1, r3, #3
 8006bc8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006bcc:	00d0      	lsls	r0, r2, #3
 8006bce:	4602      	mov	r2, r0
 8006bd0:	460b      	mov	r3, r1
 8006bd2:	1911      	adds	r1, r2, r4
 8006bd4:	6639      	str	r1, [r7, #96]	; 0x60
 8006bd6:	416b      	adcs	r3, r5
 8006bd8:	667b      	str	r3, [r7, #100]	; 0x64
 8006bda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006bdc:	685b      	ldr	r3, [r3, #4]
 8006bde:	461a      	mov	r2, r3
 8006be0:	f04f 0300 	mov.w	r3, #0
 8006be4:	1891      	adds	r1, r2, r2
 8006be6:	63b9      	str	r1, [r7, #56]	; 0x38
 8006be8:	415b      	adcs	r3, r3
 8006bea:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006bec:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006bf0:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8006bf4:	f7fa f868 	bl	8000cc8 <__aeabi_uldivmod>
 8006bf8:	4602      	mov	r2, r0
 8006bfa:	460b      	mov	r3, r1
 8006bfc:	4ba5      	ldr	r3, [pc, #660]	; (8006e94 <UART_SetConfig+0x38c>)
 8006bfe:	fba3 2302 	umull	r2, r3, r3, r2
 8006c02:	095b      	lsrs	r3, r3, #5
 8006c04:	011e      	lsls	r6, r3, #4
 8006c06:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006c08:	461c      	mov	r4, r3
 8006c0a:	f04f 0500 	mov.w	r5, #0
 8006c0e:	4622      	mov	r2, r4
 8006c10:	462b      	mov	r3, r5
 8006c12:	1891      	adds	r1, r2, r2
 8006c14:	6339      	str	r1, [r7, #48]	; 0x30
 8006c16:	415b      	adcs	r3, r3
 8006c18:	637b      	str	r3, [r7, #52]	; 0x34
 8006c1a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8006c1e:	1912      	adds	r2, r2, r4
 8006c20:	eb45 0303 	adc.w	r3, r5, r3
 8006c24:	f04f 0000 	mov.w	r0, #0
 8006c28:	f04f 0100 	mov.w	r1, #0
 8006c2c:	00d9      	lsls	r1, r3, #3
 8006c2e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006c32:	00d0      	lsls	r0, r2, #3
 8006c34:	4602      	mov	r2, r0
 8006c36:	460b      	mov	r3, r1
 8006c38:	1911      	adds	r1, r2, r4
 8006c3a:	65b9      	str	r1, [r7, #88]	; 0x58
 8006c3c:	416b      	adcs	r3, r5
 8006c3e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006c40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c42:	685b      	ldr	r3, [r3, #4]
 8006c44:	461a      	mov	r2, r3
 8006c46:	f04f 0300 	mov.w	r3, #0
 8006c4a:	1891      	adds	r1, r2, r2
 8006c4c:	62b9      	str	r1, [r7, #40]	; 0x28
 8006c4e:	415b      	adcs	r3, r3
 8006c50:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006c52:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006c56:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8006c5a:	f7fa f835 	bl	8000cc8 <__aeabi_uldivmod>
 8006c5e:	4602      	mov	r2, r0
 8006c60:	460b      	mov	r3, r1
 8006c62:	4b8c      	ldr	r3, [pc, #560]	; (8006e94 <UART_SetConfig+0x38c>)
 8006c64:	fba3 1302 	umull	r1, r3, r3, r2
 8006c68:	095b      	lsrs	r3, r3, #5
 8006c6a:	2164      	movs	r1, #100	; 0x64
 8006c6c:	fb01 f303 	mul.w	r3, r1, r3
 8006c70:	1ad3      	subs	r3, r2, r3
 8006c72:	00db      	lsls	r3, r3, #3
 8006c74:	3332      	adds	r3, #50	; 0x32
 8006c76:	4a87      	ldr	r2, [pc, #540]	; (8006e94 <UART_SetConfig+0x38c>)
 8006c78:	fba2 2303 	umull	r2, r3, r2, r3
 8006c7c:	095b      	lsrs	r3, r3, #5
 8006c7e:	005b      	lsls	r3, r3, #1
 8006c80:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006c84:	441e      	add	r6, r3
 8006c86:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006c88:	4618      	mov	r0, r3
 8006c8a:	f04f 0100 	mov.w	r1, #0
 8006c8e:	4602      	mov	r2, r0
 8006c90:	460b      	mov	r3, r1
 8006c92:	1894      	adds	r4, r2, r2
 8006c94:	623c      	str	r4, [r7, #32]
 8006c96:	415b      	adcs	r3, r3
 8006c98:	627b      	str	r3, [r7, #36]	; 0x24
 8006c9a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006c9e:	1812      	adds	r2, r2, r0
 8006ca0:	eb41 0303 	adc.w	r3, r1, r3
 8006ca4:	f04f 0400 	mov.w	r4, #0
 8006ca8:	f04f 0500 	mov.w	r5, #0
 8006cac:	00dd      	lsls	r5, r3, #3
 8006cae:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006cb2:	00d4      	lsls	r4, r2, #3
 8006cb4:	4622      	mov	r2, r4
 8006cb6:	462b      	mov	r3, r5
 8006cb8:	1814      	adds	r4, r2, r0
 8006cba:	653c      	str	r4, [r7, #80]	; 0x50
 8006cbc:	414b      	adcs	r3, r1
 8006cbe:	657b      	str	r3, [r7, #84]	; 0x54
 8006cc0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006cc2:	685b      	ldr	r3, [r3, #4]
 8006cc4:	461a      	mov	r2, r3
 8006cc6:	f04f 0300 	mov.w	r3, #0
 8006cca:	1891      	adds	r1, r2, r2
 8006ccc:	61b9      	str	r1, [r7, #24]
 8006cce:	415b      	adcs	r3, r3
 8006cd0:	61fb      	str	r3, [r7, #28]
 8006cd2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006cd6:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8006cda:	f7f9 fff5 	bl	8000cc8 <__aeabi_uldivmod>
 8006cde:	4602      	mov	r2, r0
 8006ce0:	460b      	mov	r3, r1
 8006ce2:	4b6c      	ldr	r3, [pc, #432]	; (8006e94 <UART_SetConfig+0x38c>)
 8006ce4:	fba3 1302 	umull	r1, r3, r3, r2
 8006ce8:	095b      	lsrs	r3, r3, #5
 8006cea:	2164      	movs	r1, #100	; 0x64
 8006cec:	fb01 f303 	mul.w	r3, r1, r3
 8006cf0:	1ad3      	subs	r3, r2, r3
 8006cf2:	00db      	lsls	r3, r3, #3
 8006cf4:	3332      	adds	r3, #50	; 0x32
 8006cf6:	4a67      	ldr	r2, [pc, #412]	; (8006e94 <UART_SetConfig+0x38c>)
 8006cf8:	fba2 2303 	umull	r2, r3, r2, r3
 8006cfc:	095b      	lsrs	r3, r3, #5
 8006cfe:	f003 0207 	and.w	r2, r3, #7
 8006d02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	4432      	add	r2, r6
 8006d08:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006d0a:	e0b9      	b.n	8006e80 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006d0c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006d0e:	461c      	mov	r4, r3
 8006d10:	f04f 0500 	mov.w	r5, #0
 8006d14:	4622      	mov	r2, r4
 8006d16:	462b      	mov	r3, r5
 8006d18:	1891      	adds	r1, r2, r2
 8006d1a:	6139      	str	r1, [r7, #16]
 8006d1c:	415b      	adcs	r3, r3
 8006d1e:	617b      	str	r3, [r7, #20]
 8006d20:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006d24:	1912      	adds	r2, r2, r4
 8006d26:	eb45 0303 	adc.w	r3, r5, r3
 8006d2a:	f04f 0000 	mov.w	r0, #0
 8006d2e:	f04f 0100 	mov.w	r1, #0
 8006d32:	00d9      	lsls	r1, r3, #3
 8006d34:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006d38:	00d0      	lsls	r0, r2, #3
 8006d3a:	4602      	mov	r2, r0
 8006d3c:	460b      	mov	r3, r1
 8006d3e:	eb12 0804 	adds.w	r8, r2, r4
 8006d42:	eb43 0905 	adc.w	r9, r3, r5
 8006d46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d48:	685b      	ldr	r3, [r3, #4]
 8006d4a:	4618      	mov	r0, r3
 8006d4c:	f04f 0100 	mov.w	r1, #0
 8006d50:	f04f 0200 	mov.w	r2, #0
 8006d54:	f04f 0300 	mov.w	r3, #0
 8006d58:	008b      	lsls	r3, r1, #2
 8006d5a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006d5e:	0082      	lsls	r2, r0, #2
 8006d60:	4640      	mov	r0, r8
 8006d62:	4649      	mov	r1, r9
 8006d64:	f7f9 ffb0 	bl	8000cc8 <__aeabi_uldivmod>
 8006d68:	4602      	mov	r2, r0
 8006d6a:	460b      	mov	r3, r1
 8006d6c:	4b49      	ldr	r3, [pc, #292]	; (8006e94 <UART_SetConfig+0x38c>)
 8006d6e:	fba3 2302 	umull	r2, r3, r3, r2
 8006d72:	095b      	lsrs	r3, r3, #5
 8006d74:	011e      	lsls	r6, r3, #4
 8006d76:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006d78:	4618      	mov	r0, r3
 8006d7a:	f04f 0100 	mov.w	r1, #0
 8006d7e:	4602      	mov	r2, r0
 8006d80:	460b      	mov	r3, r1
 8006d82:	1894      	adds	r4, r2, r2
 8006d84:	60bc      	str	r4, [r7, #8]
 8006d86:	415b      	adcs	r3, r3
 8006d88:	60fb      	str	r3, [r7, #12]
 8006d8a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006d8e:	1812      	adds	r2, r2, r0
 8006d90:	eb41 0303 	adc.w	r3, r1, r3
 8006d94:	f04f 0400 	mov.w	r4, #0
 8006d98:	f04f 0500 	mov.w	r5, #0
 8006d9c:	00dd      	lsls	r5, r3, #3
 8006d9e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006da2:	00d4      	lsls	r4, r2, #3
 8006da4:	4622      	mov	r2, r4
 8006da6:	462b      	mov	r3, r5
 8006da8:	1814      	adds	r4, r2, r0
 8006daa:	64bc      	str	r4, [r7, #72]	; 0x48
 8006dac:	414b      	adcs	r3, r1
 8006dae:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006db0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006db2:	685b      	ldr	r3, [r3, #4]
 8006db4:	4618      	mov	r0, r3
 8006db6:	f04f 0100 	mov.w	r1, #0
 8006dba:	f04f 0200 	mov.w	r2, #0
 8006dbe:	f04f 0300 	mov.w	r3, #0
 8006dc2:	008b      	lsls	r3, r1, #2
 8006dc4:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006dc8:	0082      	lsls	r2, r0, #2
 8006dca:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8006dce:	f7f9 ff7b 	bl	8000cc8 <__aeabi_uldivmod>
 8006dd2:	4602      	mov	r2, r0
 8006dd4:	460b      	mov	r3, r1
 8006dd6:	4b2f      	ldr	r3, [pc, #188]	; (8006e94 <UART_SetConfig+0x38c>)
 8006dd8:	fba3 1302 	umull	r1, r3, r3, r2
 8006ddc:	095b      	lsrs	r3, r3, #5
 8006dde:	2164      	movs	r1, #100	; 0x64
 8006de0:	fb01 f303 	mul.w	r3, r1, r3
 8006de4:	1ad3      	subs	r3, r2, r3
 8006de6:	011b      	lsls	r3, r3, #4
 8006de8:	3332      	adds	r3, #50	; 0x32
 8006dea:	4a2a      	ldr	r2, [pc, #168]	; (8006e94 <UART_SetConfig+0x38c>)
 8006dec:	fba2 2303 	umull	r2, r3, r2, r3
 8006df0:	095b      	lsrs	r3, r3, #5
 8006df2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006df6:	441e      	add	r6, r3
 8006df8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006dfa:	4618      	mov	r0, r3
 8006dfc:	f04f 0100 	mov.w	r1, #0
 8006e00:	4602      	mov	r2, r0
 8006e02:	460b      	mov	r3, r1
 8006e04:	1894      	adds	r4, r2, r2
 8006e06:	603c      	str	r4, [r7, #0]
 8006e08:	415b      	adcs	r3, r3
 8006e0a:	607b      	str	r3, [r7, #4]
 8006e0c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006e10:	1812      	adds	r2, r2, r0
 8006e12:	eb41 0303 	adc.w	r3, r1, r3
 8006e16:	f04f 0400 	mov.w	r4, #0
 8006e1a:	f04f 0500 	mov.w	r5, #0
 8006e1e:	00dd      	lsls	r5, r3, #3
 8006e20:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006e24:	00d4      	lsls	r4, r2, #3
 8006e26:	4622      	mov	r2, r4
 8006e28:	462b      	mov	r3, r5
 8006e2a:	eb12 0a00 	adds.w	sl, r2, r0
 8006e2e:	eb43 0b01 	adc.w	fp, r3, r1
 8006e32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e34:	685b      	ldr	r3, [r3, #4]
 8006e36:	4618      	mov	r0, r3
 8006e38:	f04f 0100 	mov.w	r1, #0
 8006e3c:	f04f 0200 	mov.w	r2, #0
 8006e40:	f04f 0300 	mov.w	r3, #0
 8006e44:	008b      	lsls	r3, r1, #2
 8006e46:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006e4a:	0082      	lsls	r2, r0, #2
 8006e4c:	4650      	mov	r0, sl
 8006e4e:	4659      	mov	r1, fp
 8006e50:	f7f9 ff3a 	bl	8000cc8 <__aeabi_uldivmod>
 8006e54:	4602      	mov	r2, r0
 8006e56:	460b      	mov	r3, r1
 8006e58:	4b0e      	ldr	r3, [pc, #56]	; (8006e94 <UART_SetConfig+0x38c>)
 8006e5a:	fba3 1302 	umull	r1, r3, r3, r2
 8006e5e:	095b      	lsrs	r3, r3, #5
 8006e60:	2164      	movs	r1, #100	; 0x64
 8006e62:	fb01 f303 	mul.w	r3, r1, r3
 8006e66:	1ad3      	subs	r3, r2, r3
 8006e68:	011b      	lsls	r3, r3, #4
 8006e6a:	3332      	adds	r3, #50	; 0x32
 8006e6c:	4a09      	ldr	r2, [pc, #36]	; (8006e94 <UART_SetConfig+0x38c>)
 8006e6e:	fba2 2303 	umull	r2, r3, r2, r3
 8006e72:	095b      	lsrs	r3, r3, #5
 8006e74:	f003 020f 	and.w	r2, r3, #15
 8006e78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	4432      	add	r2, r6
 8006e7e:	609a      	str	r2, [r3, #8]
}
 8006e80:	bf00      	nop
 8006e82:	377c      	adds	r7, #124	; 0x7c
 8006e84:	46bd      	mov	sp, r7
 8006e86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e8a:	bf00      	nop
 8006e8c:	40011000 	.word	0x40011000
 8006e90:	40011400 	.word	0x40011400
 8006e94:	51eb851f 	.word	0x51eb851f

08006e98 <arm_pid_init_f32>:
 8006e98:	edd0 6a08 	vldr	s13, [r0, #32]
 8006e9c:	edd0 7a06 	vldr	s15, [r0, #24]
 8006ea0:	ed90 7a07 	vldr	s14, [r0, #28]
 8006ea4:	edc0 6a02 	vstr	s13, [r0, #8]
 8006ea8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006eac:	ee36 6aa6 	vadd.f32	s12, s13, s13
 8006eb0:	eef1 7a67 	vneg.f32	s15, s15
 8006eb4:	ee37 7a26 	vadd.f32	s14, s14, s13
 8006eb8:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8006ebc:	ed80 7a00 	vstr	s14, [r0]
 8006ec0:	edc0 7a01 	vstr	s15, [r0, #4]
 8006ec4:	b119      	cbz	r1, 8006ece <arm_pid_init_f32+0x36>
 8006ec6:	2300      	movs	r3, #0
 8006ec8:	60c3      	str	r3, [r0, #12]
 8006eca:	6103      	str	r3, [r0, #16]
 8006ecc:	6143      	str	r3, [r0, #20]
 8006ece:	4770      	bx	lr

08006ed0 <__errno>:
 8006ed0:	4b01      	ldr	r3, [pc, #4]	; (8006ed8 <__errno+0x8>)
 8006ed2:	6818      	ldr	r0, [r3, #0]
 8006ed4:	4770      	bx	lr
 8006ed6:	bf00      	nop
 8006ed8:	20000010 	.word	0x20000010

08006edc <__libc_init_array>:
 8006edc:	b570      	push	{r4, r5, r6, lr}
 8006ede:	4d0d      	ldr	r5, [pc, #52]	; (8006f14 <__libc_init_array+0x38>)
 8006ee0:	4c0d      	ldr	r4, [pc, #52]	; (8006f18 <__libc_init_array+0x3c>)
 8006ee2:	1b64      	subs	r4, r4, r5
 8006ee4:	10a4      	asrs	r4, r4, #2
 8006ee6:	2600      	movs	r6, #0
 8006ee8:	42a6      	cmp	r6, r4
 8006eea:	d109      	bne.n	8006f00 <__libc_init_array+0x24>
 8006eec:	4d0b      	ldr	r5, [pc, #44]	; (8006f1c <__libc_init_array+0x40>)
 8006eee:	4c0c      	ldr	r4, [pc, #48]	; (8006f20 <__libc_init_array+0x44>)
 8006ef0:	f004 ffa8 	bl	800be44 <_init>
 8006ef4:	1b64      	subs	r4, r4, r5
 8006ef6:	10a4      	asrs	r4, r4, #2
 8006ef8:	2600      	movs	r6, #0
 8006efa:	42a6      	cmp	r6, r4
 8006efc:	d105      	bne.n	8006f0a <__libc_init_array+0x2e>
 8006efe:	bd70      	pop	{r4, r5, r6, pc}
 8006f00:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f04:	4798      	blx	r3
 8006f06:	3601      	adds	r6, #1
 8006f08:	e7ee      	b.n	8006ee8 <__libc_init_array+0xc>
 8006f0a:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f0e:	4798      	blx	r3
 8006f10:	3601      	adds	r6, #1
 8006f12:	e7f2      	b.n	8006efa <__libc_init_array+0x1e>
 8006f14:	0800c3b8 	.word	0x0800c3b8
 8006f18:	0800c3b8 	.word	0x0800c3b8
 8006f1c:	0800c3b8 	.word	0x0800c3b8
 8006f20:	0800c3bc 	.word	0x0800c3bc

08006f24 <memset>:
 8006f24:	4402      	add	r2, r0
 8006f26:	4603      	mov	r3, r0
 8006f28:	4293      	cmp	r3, r2
 8006f2a:	d100      	bne.n	8006f2e <memset+0xa>
 8006f2c:	4770      	bx	lr
 8006f2e:	f803 1b01 	strb.w	r1, [r3], #1
 8006f32:	e7f9      	b.n	8006f28 <memset+0x4>

08006f34 <__cvt>:
 8006f34:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006f38:	ec55 4b10 	vmov	r4, r5, d0
 8006f3c:	2d00      	cmp	r5, #0
 8006f3e:	460e      	mov	r6, r1
 8006f40:	4619      	mov	r1, r3
 8006f42:	462b      	mov	r3, r5
 8006f44:	bfbb      	ittet	lt
 8006f46:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006f4a:	461d      	movlt	r5, r3
 8006f4c:	2300      	movge	r3, #0
 8006f4e:	232d      	movlt	r3, #45	; 0x2d
 8006f50:	700b      	strb	r3, [r1, #0]
 8006f52:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006f54:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006f58:	4691      	mov	r9, r2
 8006f5a:	f023 0820 	bic.w	r8, r3, #32
 8006f5e:	bfbc      	itt	lt
 8006f60:	4622      	movlt	r2, r4
 8006f62:	4614      	movlt	r4, r2
 8006f64:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006f68:	d005      	beq.n	8006f76 <__cvt+0x42>
 8006f6a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006f6e:	d100      	bne.n	8006f72 <__cvt+0x3e>
 8006f70:	3601      	adds	r6, #1
 8006f72:	2102      	movs	r1, #2
 8006f74:	e000      	b.n	8006f78 <__cvt+0x44>
 8006f76:	2103      	movs	r1, #3
 8006f78:	ab03      	add	r3, sp, #12
 8006f7a:	9301      	str	r3, [sp, #4]
 8006f7c:	ab02      	add	r3, sp, #8
 8006f7e:	9300      	str	r3, [sp, #0]
 8006f80:	ec45 4b10 	vmov	d0, r4, r5
 8006f84:	4653      	mov	r3, sl
 8006f86:	4632      	mov	r2, r6
 8006f88:	f001 fdb6 	bl	8008af8 <_dtoa_r>
 8006f8c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006f90:	4607      	mov	r7, r0
 8006f92:	d102      	bne.n	8006f9a <__cvt+0x66>
 8006f94:	f019 0f01 	tst.w	r9, #1
 8006f98:	d022      	beq.n	8006fe0 <__cvt+0xac>
 8006f9a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006f9e:	eb07 0906 	add.w	r9, r7, r6
 8006fa2:	d110      	bne.n	8006fc6 <__cvt+0x92>
 8006fa4:	783b      	ldrb	r3, [r7, #0]
 8006fa6:	2b30      	cmp	r3, #48	; 0x30
 8006fa8:	d10a      	bne.n	8006fc0 <__cvt+0x8c>
 8006faa:	2200      	movs	r2, #0
 8006fac:	2300      	movs	r3, #0
 8006fae:	4620      	mov	r0, r4
 8006fb0:	4629      	mov	r1, r5
 8006fb2:	f7f9 fda9 	bl	8000b08 <__aeabi_dcmpeq>
 8006fb6:	b918      	cbnz	r0, 8006fc0 <__cvt+0x8c>
 8006fb8:	f1c6 0601 	rsb	r6, r6, #1
 8006fbc:	f8ca 6000 	str.w	r6, [sl]
 8006fc0:	f8da 3000 	ldr.w	r3, [sl]
 8006fc4:	4499      	add	r9, r3
 8006fc6:	2200      	movs	r2, #0
 8006fc8:	2300      	movs	r3, #0
 8006fca:	4620      	mov	r0, r4
 8006fcc:	4629      	mov	r1, r5
 8006fce:	f7f9 fd9b 	bl	8000b08 <__aeabi_dcmpeq>
 8006fd2:	b108      	cbz	r0, 8006fd8 <__cvt+0xa4>
 8006fd4:	f8cd 900c 	str.w	r9, [sp, #12]
 8006fd8:	2230      	movs	r2, #48	; 0x30
 8006fda:	9b03      	ldr	r3, [sp, #12]
 8006fdc:	454b      	cmp	r3, r9
 8006fde:	d307      	bcc.n	8006ff0 <__cvt+0xbc>
 8006fe0:	9b03      	ldr	r3, [sp, #12]
 8006fe2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006fe4:	1bdb      	subs	r3, r3, r7
 8006fe6:	4638      	mov	r0, r7
 8006fe8:	6013      	str	r3, [r2, #0]
 8006fea:	b004      	add	sp, #16
 8006fec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ff0:	1c59      	adds	r1, r3, #1
 8006ff2:	9103      	str	r1, [sp, #12]
 8006ff4:	701a      	strb	r2, [r3, #0]
 8006ff6:	e7f0      	b.n	8006fda <__cvt+0xa6>

08006ff8 <__exponent>:
 8006ff8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006ffa:	4603      	mov	r3, r0
 8006ffc:	2900      	cmp	r1, #0
 8006ffe:	bfb8      	it	lt
 8007000:	4249      	neglt	r1, r1
 8007002:	f803 2b02 	strb.w	r2, [r3], #2
 8007006:	bfb4      	ite	lt
 8007008:	222d      	movlt	r2, #45	; 0x2d
 800700a:	222b      	movge	r2, #43	; 0x2b
 800700c:	2909      	cmp	r1, #9
 800700e:	7042      	strb	r2, [r0, #1]
 8007010:	dd2a      	ble.n	8007068 <__exponent+0x70>
 8007012:	f10d 0407 	add.w	r4, sp, #7
 8007016:	46a4      	mov	ip, r4
 8007018:	270a      	movs	r7, #10
 800701a:	46a6      	mov	lr, r4
 800701c:	460a      	mov	r2, r1
 800701e:	fb91 f6f7 	sdiv	r6, r1, r7
 8007022:	fb07 1516 	mls	r5, r7, r6, r1
 8007026:	3530      	adds	r5, #48	; 0x30
 8007028:	2a63      	cmp	r2, #99	; 0x63
 800702a:	f104 34ff 	add.w	r4, r4, #4294967295
 800702e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8007032:	4631      	mov	r1, r6
 8007034:	dcf1      	bgt.n	800701a <__exponent+0x22>
 8007036:	3130      	adds	r1, #48	; 0x30
 8007038:	f1ae 0502 	sub.w	r5, lr, #2
 800703c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8007040:	1c44      	adds	r4, r0, #1
 8007042:	4629      	mov	r1, r5
 8007044:	4561      	cmp	r1, ip
 8007046:	d30a      	bcc.n	800705e <__exponent+0x66>
 8007048:	f10d 0209 	add.w	r2, sp, #9
 800704c:	eba2 020e 	sub.w	r2, r2, lr
 8007050:	4565      	cmp	r5, ip
 8007052:	bf88      	it	hi
 8007054:	2200      	movhi	r2, #0
 8007056:	4413      	add	r3, r2
 8007058:	1a18      	subs	r0, r3, r0
 800705a:	b003      	add	sp, #12
 800705c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800705e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007062:	f804 2f01 	strb.w	r2, [r4, #1]!
 8007066:	e7ed      	b.n	8007044 <__exponent+0x4c>
 8007068:	2330      	movs	r3, #48	; 0x30
 800706a:	3130      	adds	r1, #48	; 0x30
 800706c:	7083      	strb	r3, [r0, #2]
 800706e:	70c1      	strb	r1, [r0, #3]
 8007070:	1d03      	adds	r3, r0, #4
 8007072:	e7f1      	b.n	8007058 <__exponent+0x60>

08007074 <_printf_float>:
 8007074:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007078:	ed2d 8b02 	vpush	{d8}
 800707c:	b08d      	sub	sp, #52	; 0x34
 800707e:	460c      	mov	r4, r1
 8007080:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007084:	4616      	mov	r6, r2
 8007086:	461f      	mov	r7, r3
 8007088:	4605      	mov	r5, r0
 800708a:	f002 fe91 	bl	8009db0 <_localeconv_r>
 800708e:	f8d0 a000 	ldr.w	sl, [r0]
 8007092:	4650      	mov	r0, sl
 8007094:	f7f9 f8bc 	bl	8000210 <strlen>
 8007098:	2300      	movs	r3, #0
 800709a:	930a      	str	r3, [sp, #40]	; 0x28
 800709c:	6823      	ldr	r3, [r4, #0]
 800709e:	9305      	str	r3, [sp, #20]
 80070a0:	f8d8 3000 	ldr.w	r3, [r8]
 80070a4:	f894 b018 	ldrb.w	fp, [r4, #24]
 80070a8:	3307      	adds	r3, #7
 80070aa:	f023 0307 	bic.w	r3, r3, #7
 80070ae:	f103 0208 	add.w	r2, r3, #8
 80070b2:	f8c8 2000 	str.w	r2, [r8]
 80070b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070ba:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80070be:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80070c2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80070c6:	9307      	str	r3, [sp, #28]
 80070c8:	f8cd 8018 	str.w	r8, [sp, #24]
 80070cc:	ee08 0a10 	vmov	s16, r0
 80070d0:	4b9f      	ldr	r3, [pc, #636]	; (8007350 <_printf_float+0x2dc>)
 80070d2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80070d6:	f04f 32ff 	mov.w	r2, #4294967295
 80070da:	f7f9 fd47 	bl	8000b6c <__aeabi_dcmpun>
 80070de:	bb88      	cbnz	r0, 8007144 <_printf_float+0xd0>
 80070e0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80070e4:	4b9a      	ldr	r3, [pc, #616]	; (8007350 <_printf_float+0x2dc>)
 80070e6:	f04f 32ff 	mov.w	r2, #4294967295
 80070ea:	f7f9 fd21 	bl	8000b30 <__aeabi_dcmple>
 80070ee:	bb48      	cbnz	r0, 8007144 <_printf_float+0xd0>
 80070f0:	2200      	movs	r2, #0
 80070f2:	2300      	movs	r3, #0
 80070f4:	4640      	mov	r0, r8
 80070f6:	4649      	mov	r1, r9
 80070f8:	f7f9 fd10 	bl	8000b1c <__aeabi_dcmplt>
 80070fc:	b110      	cbz	r0, 8007104 <_printf_float+0x90>
 80070fe:	232d      	movs	r3, #45	; 0x2d
 8007100:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007104:	4b93      	ldr	r3, [pc, #588]	; (8007354 <_printf_float+0x2e0>)
 8007106:	4894      	ldr	r0, [pc, #592]	; (8007358 <_printf_float+0x2e4>)
 8007108:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800710c:	bf94      	ite	ls
 800710e:	4698      	movls	r8, r3
 8007110:	4680      	movhi	r8, r0
 8007112:	2303      	movs	r3, #3
 8007114:	6123      	str	r3, [r4, #16]
 8007116:	9b05      	ldr	r3, [sp, #20]
 8007118:	f023 0204 	bic.w	r2, r3, #4
 800711c:	6022      	str	r2, [r4, #0]
 800711e:	f04f 0900 	mov.w	r9, #0
 8007122:	9700      	str	r7, [sp, #0]
 8007124:	4633      	mov	r3, r6
 8007126:	aa0b      	add	r2, sp, #44	; 0x2c
 8007128:	4621      	mov	r1, r4
 800712a:	4628      	mov	r0, r5
 800712c:	f000 f9d8 	bl	80074e0 <_printf_common>
 8007130:	3001      	adds	r0, #1
 8007132:	f040 8090 	bne.w	8007256 <_printf_float+0x1e2>
 8007136:	f04f 30ff 	mov.w	r0, #4294967295
 800713a:	b00d      	add	sp, #52	; 0x34
 800713c:	ecbd 8b02 	vpop	{d8}
 8007140:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007144:	4642      	mov	r2, r8
 8007146:	464b      	mov	r3, r9
 8007148:	4640      	mov	r0, r8
 800714a:	4649      	mov	r1, r9
 800714c:	f7f9 fd0e 	bl	8000b6c <__aeabi_dcmpun>
 8007150:	b140      	cbz	r0, 8007164 <_printf_float+0xf0>
 8007152:	464b      	mov	r3, r9
 8007154:	2b00      	cmp	r3, #0
 8007156:	bfbc      	itt	lt
 8007158:	232d      	movlt	r3, #45	; 0x2d
 800715a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800715e:	487f      	ldr	r0, [pc, #508]	; (800735c <_printf_float+0x2e8>)
 8007160:	4b7f      	ldr	r3, [pc, #508]	; (8007360 <_printf_float+0x2ec>)
 8007162:	e7d1      	b.n	8007108 <_printf_float+0x94>
 8007164:	6863      	ldr	r3, [r4, #4]
 8007166:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800716a:	9206      	str	r2, [sp, #24]
 800716c:	1c5a      	adds	r2, r3, #1
 800716e:	d13f      	bne.n	80071f0 <_printf_float+0x17c>
 8007170:	2306      	movs	r3, #6
 8007172:	6063      	str	r3, [r4, #4]
 8007174:	9b05      	ldr	r3, [sp, #20]
 8007176:	6861      	ldr	r1, [r4, #4]
 8007178:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800717c:	2300      	movs	r3, #0
 800717e:	9303      	str	r3, [sp, #12]
 8007180:	ab0a      	add	r3, sp, #40	; 0x28
 8007182:	e9cd b301 	strd	fp, r3, [sp, #4]
 8007186:	ab09      	add	r3, sp, #36	; 0x24
 8007188:	ec49 8b10 	vmov	d0, r8, r9
 800718c:	9300      	str	r3, [sp, #0]
 800718e:	6022      	str	r2, [r4, #0]
 8007190:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007194:	4628      	mov	r0, r5
 8007196:	f7ff fecd 	bl	8006f34 <__cvt>
 800719a:	9b06      	ldr	r3, [sp, #24]
 800719c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800719e:	2b47      	cmp	r3, #71	; 0x47
 80071a0:	4680      	mov	r8, r0
 80071a2:	d108      	bne.n	80071b6 <_printf_float+0x142>
 80071a4:	1cc8      	adds	r0, r1, #3
 80071a6:	db02      	blt.n	80071ae <_printf_float+0x13a>
 80071a8:	6863      	ldr	r3, [r4, #4]
 80071aa:	4299      	cmp	r1, r3
 80071ac:	dd41      	ble.n	8007232 <_printf_float+0x1be>
 80071ae:	f1ab 0b02 	sub.w	fp, fp, #2
 80071b2:	fa5f fb8b 	uxtb.w	fp, fp
 80071b6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80071ba:	d820      	bhi.n	80071fe <_printf_float+0x18a>
 80071bc:	3901      	subs	r1, #1
 80071be:	465a      	mov	r2, fp
 80071c0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80071c4:	9109      	str	r1, [sp, #36]	; 0x24
 80071c6:	f7ff ff17 	bl	8006ff8 <__exponent>
 80071ca:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80071cc:	1813      	adds	r3, r2, r0
 80071ce:	2a01      	cmp	r2, #1
 80071d0:	4681      	mov	r9, r0
 80071d2:	6123      	str	r3, [r4, #16]
 80071d4:	dc02      	bgt.n	80071dc <_printf_float+0x168>
 80071d6:	6822      	ldr	r2, [r4, #0]
 80071d8:	07d2      	lsls	r2, r2, #31
 80071da:	d501      	bpl.n	80071e0 <_printf_float+0x16c>
 80071dc:	3301      	adds	r3, #1
 80071de:	6123      	str	r3, [r4, #16]
 80071e0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d09c      	beq.n	8007122 <_printf_float+0xae>
 80071e8:	232d      	movs	r3, #45	; 0x2d
 80071ea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80071ee:	e798      	b.n	8007122 <_printf_float+0xae>
 80071f0:	9a06      	ldr	r2, [sp, #24]
 80071f2:	2a47      	cmp	r2, #71	; 0x47
 80071f4:	d1be      	bne.n	8007174 <_printf_float+0x100>
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d1bc      	bne.n	8007174 <_printf_float+0x100>
 80071fa:	2301      	movs	r3, #1
 80071fc:	e7b9      	b.n	8007172 <_printf_float+0xfe>
 80071fe:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8007202:	d118      	bne.n	8007236 <_printf_float+0x1c2>
 8007204:	2900      	cmp	r1, #0
 8007206:	6863      	ldr	r3, [r4, #4]
 8007208:	dd0b      	ble.n	8007222 <_printf_float+0x1ae>
 800720a:	6121      	str	r1, [r4, #16]
 800720c:	b913      	cbnz	r3, 8007214 <_printf_float+0x1a0>
 800720e:	6822      	ldr	r2, [r4, #0]
 8007210:	07d0      	lsls	r0, r2, #31
 8007212:	d502      	bpl.n	800721a <_printf_float+0x1a6>
 8007214:	3301      	adds	r3, #1
 8007216:	440b      	add	r3, r1
 8007218:	6123      	str	r3, [r4, #16]
 800721a:	65a1      	str	r1, [r4, #88]	; 0x58
 800721c:	f04f 0900 	mov.w	r9, #0
 8007220:	e7de      	b.n	80071e0 <_printf_float+0x16c>
 8007222:	b913      	cbnz	r3, 800722a <_printf_float+0x1b6>
 8007224:	6822      	ldr	r2, [r4, #0]
 8007226:	07d2      	lsls	r2, r2, #31
 8007228:	d501      	bpl.n	800722e <_printf_float+0x1ba>
 800722a:	3302      	adds	r3, #2
 800722c:	e7f4      	b.n	8007218 <_printf_float+0x1a4>
 800722e:	2301      	movs	r3, #1
 8007230:	e7f2      	b.n	8007218 <_printf_float+0x1a4>
 8007232:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8007236:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007238:	4299      	cmp	r1, r3
 800723a:	db05      	blt.n	8007248 <_printf_float+0x1d4>
 800723c:	6823      	ldr	r3, [r4, #0]
 800723e:	6121      	str	r1, [r4, #16]
 8007240:	07d8      	lsls	r0, r3, #31
 8007242:	d5ea      	bpl.n	800721a <_printf_float+0x1a6>
 8007244:	1c4b      	adds	r3, r1, #1
 8007246:	e7e7      	b.n	8007218 <_printf_float+0x1a4>
 8007248:	2900      	cmp	r1, #0
 800724a:	bfd4      	ite	le
 800724c:	f1c1 0202 	rsble	r2, r1, #2
 8007250:	2201      	movgt	r2, #1
 8007252:	4413      	add	r3, r2
 8007254:	e7e0      	b.n	8007218 <_printf_float+0x1a4>
 8007256:	6823      	ldr	r3, [r4, #0]
 8007258:	055a      	lsls	r2, r3, #21
 800725a:	d407      	bmi.n	800726c <_printf_float+0x1f8>
 800725c:	6923      	ldr	r3, [r4, #16]
 800725e:	4642      	mov	r2, r8
 8007260:	4631      	mov	r1, r6
 8007262:	4628      	mov	r0, r5
 8007264:	47b8      	blx	r7
 8007266:	3001      	adds	r0, #1
 8007268:	d12c      	bne.n	80072c4 <_printf_float+0x250>
 800726a:	e764      	b.n	8007136 <_printf_float+0xc2>
 800726c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007270:	f240 80e0 	bls.w	8007434 <_printf_float+0x3c0>
 8007274:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007278:	2200      	movs	r2, #0
 800727a:	2300      	movs	r3, #0
 800727c:	f7f9 fc44 	bl	8000b08 <__aeabi_dcmpeq>
 8007280:	2800      	cmp	r0, #0
 8007282:	d034      	beq.n	80072ee <_printf_float+0x27a>
 8007284:	4a37      	ldr	r2, [pc, #220]	; (8007364 <_printf_float+0x2f0>)
 8007286:	2301      	movs	r3, #1
 8007288:	4631      	mov	r1, r6
 800728a:	4628      	mov	r0, r5
 800728c:	47b8      	blx	r7
 800728e:	3001      	adds	r0, #1
 8007290:	f43f af51 	beq.w	8007136 <_printf_float+0xc2>
 8007294:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007298:	429a      	cmp	r2, r3
 800729a:	db02      	blt.n	80072a2 <_printf_float+0x22e>
 800729c:	6823      	ldr	r3, [r4, #0]
 800729e:	07d8      	lsls	r0, r3, #31
 80072a0:	d510      	bpl.n	80072c4 <_printf_float+0x250>
 80072a2:	ee18 3a10 	vmov	r3, s16
 80072a6:	4652      	mov	r2, sl
 80072a8:	4631      	mov	r1, r6
 80072aa:	4628      	mov	r0, r5
 80072ac:	47b8      	blx	r7
 80072ae:	3001      	adds	r0, #1
 80072b0:	f43f af41 	beq.w	8007136 <_printf_float+0xc2>
 80072b4:	f04f 0800 	mov.w	r8, #0
 80072b8:	f104 091a 	add.w	r9, r4, #26
 80072bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80072be:	3b01      	subs	r3, #1
 80072c0:	4543      	cmp	r3, r8
 80072c2:	dc09      	bgt.n	80072d8 <_printf_float+0x264>
 80072c4:	6823      	ldr	r3, [r4, #0]
 80072c6:	079b      	lsls	r3, r3, #30
 80072c8:	f100 8105 	bmi.w	80074d6 <_printf_float+0x462>
 80072cc:	68e0      	ldr	r0, [r4, #12]
 80072ce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80072d0:	4298      	cmp	r0, r3
 80072d2:	bfb8      	it	lt
 80072d4:	4618      	movlt	r0, r3
 80072d6:	e730      	b.n	800713a <_printf_float+0xc6>
 80072d8:	2301      	movs	r3, #1
 80072da:	464a      	mov	r2, r9
 80072dc:	4631      	mov	r1, r6
 80072de:	4628      	mov	r0, r5
 80072e0:	47b8      	blx	r7
 80072e2:	3001      	adds	r0, #1
 80072e4:	f43f af27 	beq.w	8007136 <_printf_float+0xc2>
 80072e8:	f108 0801 	add.w	r8, r8, #1
 80072ec:	e7e6      	b.n	80072bc <_printf_float+0x248>
 80072ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	dc39      	bgt.n	8007368 <_printf_float+0x2f4>
 80072f4:	4a1b      	ldr	r2, [pc, #108]	; (8007364 <_printf_float+0x2f0>)
 80072f6:	2301      	movs	r3, #1
 80072f8:	4631      	mov	r1, r6
 80072fa:	4628      	mov	r0, r5
 80072fc:	47b8      	blx	r7
 80072fe:	3001      	adds	r0, #1
 8007300:	f43f af19 	beq.w	8007136 <_printf_float+0xc2>
 8007304:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007308:	4313      	orrs	r3, r2
 800730a:	d102      	bne.n	8007312 <_printf_float+0x29e>
 800730c:	6823      	ldr	r3, [r4, #0]
 800730e:	07d9      	lsls	r1, r3, #31
 8007310:	d5d8      	bpl.n	80072c4 <_printf_float+0x250>
 8007312:	ee18 3a10 	vmov	r3, s16
 8007316:	4652      	mov	r2, sl
 8007318:	4631      	mov	r1, r6
 800731a:	4628      	mov	r0, r5
 800731c:	47b8      	blx	r7
 800731e:	3001      	adds	r0, #1
 8007320:	f43f af09 	beq.w	8007136 <_printf_float+0xc2>
 8007324:	f04f 0900 	mov.w	r9, #0
 8007328:	f104 0a1a 	add.w	sl, r4, #26
 800732c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800732e:	425b      	negs	r3, r3
 8007330:	454b      	cmp	r3, r9
 8007332:	dc01      	bgt.n	8007338 <_printf_float+0x2c4>
 8007334:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007336:	e792      	b.n	800725e <_printf_float+0x1ea>
 8007338:	2301      	movs	r3, #1
 800733a:	4652      	mov	r2, sl
 800733c:	4631      	mov	r1, r6
 800733e:	4628      	mov	r0, r5
 8007340:	47b8      	blx	r7
 8007342:	3001      	adds	r0, #1
 8007344:	f43f aef7 	beq.w	8007136 <_printf_float+0xc2>
 8007348:	f109 0901 	add.w	r9, r9, #1
 800734c:	e7ee      	b.n	800732c <_printf_float+0x2b8>
 800734e:	bf00      	nop
 8007350:	7fefffff 	.word	0x7fefffff
 8007354:	0800be88 	.word	0x0800be88
 8007358:	0800be8c 	.word	0x0800be8c
 800735c:	0800be94 	.word	0x0800be94
 8007360:	0800be90 	.word	0x0800be90
 8007364:	0800be98 	.word	0x0800be98
 8007368:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800736a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800736c:	429a      	cmp	r2, r3
 800736e:	bfa8      	it	ge
 8007370:	461a      	movge	r2, r3
 8007372:	2a00      	cmp	r2, #0
 8007374:	4691      	mov	r9, r2
 8007376:	dc37      	bgt.n	80073e8 <_printf_float+0x374>
 8007378:	f04f 0b00 	mov.w	fp, #0
 800737c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007380:	f104 021a 	add.w	r2, r4, #26
 8007384:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007386:	9305      	str	r3, [sp, #20]
 8007388:	eba3 0309 	sub.w	r3, r3, r9
 800738c:	455b      	cmp	r3, fp
 800738e:	dc33      	bgt.n	80073f8 <_printf_float+0x384>
 8007390:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007394:	429a      	cmp	r2, r3
 8007396:	db3b      	blt.n	8007410 <_printf_float+0x39c>
 8007398:	6823      	ldr	r3, [r4, #0]
 800739a:	07da      	lsls	r2, r3, #31
 800739c:	d438      	bmi.n	8007410 <_printf_float+0x39c>
 800739e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80073a0:	9b05      	ldr	r3, [sp, #20]
 80073a2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80073a4:	1ad3      	subs	r3, r2, r3
 80073a6:	eba2 0901 	sub.w	r9, r2, r1
 80073aa:	4599      	cmp	r9, r3
 80073ac:	bfa8      	it	ge
 80073ae:	4699      	movge	r9, r3
 80073b0:	f1b9 0f00 	cmp.w	r9, #0
 80073b4:	dc35      	bgt.n	8007422 <_printf_float+0x3ae>
 80073b6:	f04f 0800 	mov.w	r8, #0
 80073ba:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80073be:	f104 0a1a 	add.w	sl, r4, #26
 80073c2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80073c6:	1a9b      	subs	r3, r3, r2
 80073c8:	eba3 0309 	sub.w	r3, r3, r9
 80073cc:	4543      	cmp	r3, r8
 80073ce:	f77f af79 	ble.w	80072c4 <_printf_float+0x250>
 80073d2:	2301      	movs	r3, #1
 80073d4:	4652      	mov	r2, sl
 80073d6:	4631      	mov	r1, r6
 80073d8:	4628      	mov	r0, r5
 80073da:	47b8      	blx	r7
 80073dc:	3001      	adds	r0, #1
 80073de:	f43f aeaa 	beq.w	8007136 <_printf_float+0xc2>
 80073e2:	f108 0801 	add.w	r8, r8, #1
 80073e6:	e7ec      	b.n	80073c2 <_printf_float+0x34e>
 80073e8:	4613      	mov	r3, r2
 80073ea:	4631      	mov	r1, r6
 80073ec:	4642      	mov	r2, r8
 80073ee:	4628      	mov	r0, r5
 80073f0:	47b8      	blx	r7
 80073f2:	3001      	adds	r0, #1
 80073f4:	d1c0      	bne.n	8007378 <_printf_float+0x304>
 80073f6:	e69e      	b.n	8007136 <_printf_float+0xc2>
 80073f8:	2301      	movs	r3, #1
 80073fa:	4631      	mov	r1, r6
 80073fc:	4628      	mov	r0, r5
 80073fe:	9205      	str	r2, [sp, #20]
 8007400:	47b8      	blx	r7
 8007402:	3001      	adds	r0, #1
 8007404:	f43f ae97 	beq.w	8007136 <_printf_float+0xc2>
 8007408:	9a05      	ldr	r2, [sp, #20]
 800740a:	f10b 0b01 	add.w	fp, fp, #1
 800740e:	e7b9      	b.n	8007384 <_printf_float+0x310>
 8007410:	ee18 3a10 	vmov	r3, s16
 8007414:	4652      	mov	r2, sl
 8007416:	4631      	mov	r1, r6
 8007418:	4628      	mov	r0, r5
 800741a:	47b8      	blx	r7
 800741c:	3001      	adds	r0, #1
 800741e:	d1be      	bne.n	800739e <_printf_float+0x32a>
 8007420:	e689      	b.n	8007136 <_printf_float+0xc2>
 8007422:	9a05      	ldr	r2, [sp, #20]
 8007424:	464b      	mov	r3, r9
 8007426:	4442      	add	r2, r8
 8007428:	4631      	mov	r1, r6
 800742a:	4628      	mov	r0, r5
 800742c:	47b8      	blx	r7
 800742e:	3001      	adds	r0, #1
 8007430:	d1c1      	bne.n	80073b6 <_printf_float+0x342>
 8007432:	e680      	b.n	8007136 <_printf_float+0xc2>
 8007434:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007436:	2a01      	cmp	r2, #1
 8007438:	dc01      	bgt.n	800743e <_printf_float+0x3ca>
 800743a:	07db      	lsls	r3, r3, #31
 800743c:	d538      	bpl.n	80074b0 <_printf_float+0x43c>
 800743e:	2301      	movs	r3, #1
 8007440:	4642      	mov	r2, r8
 8007442:	4631      	mov	r1, r6
 8007444:	4628      	mov	r0, r5
 8007446:	47b8      	blx	r7
 8007448:	3001      	adds	r0, #1
 800744a:	f43f ae74 	beq.w	8007136 <_printf_float+0xc2>
 800744e:	ee18 3a10 	vmov	r3, s16
 8007452:	4652      	mov	r2, sl
 8007454:	4631      	mov	r1, r6
 8007456:	4628      	mov	r0, r5
 8007458:	47b8      	blx	r7
 800745a:	3001      	adds	r0, #1
 800745c:	f43f ae6b 	beq.w	8007136 <_printf_float+0xc2>
 8007460:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007464:	2200      	movs	r2, #0
 8007466:	2300      	movs	r3, #0
 8007468:	f7f9 fb4e 	bl	8000b08 <__aeabi_dcmpeq>
 800746c:	b9d8      	cbnz	r0, 80074a6 <_printf_float+0x432>
 800746e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007470:	f108 0201 	add.w	r2, r8, #1
 8007474:	3b01      	subs	r3, #1
 8007476:	4631      	mov	r1, r6
 8007478:	4628      	mov	r0, r5
 800747a:	47b8      	blx	r7
 800747c:	3001      	adds	r0, #1
 800747e:	d10e      	bne.n	800749e <_printf_float+0x42a>
 8007480:	e659      	b.n	8007136 <_printf_float+0xc2>
 8007482:	2301      	movs	r3, #1
 8007484:	4652      	mov	r2, sl
 8007486:	4631      	mov	r1, r6
 8007488:	4628      	mov	r0, r5
 800748a:	47b8      	blx	r7
 800748c:	3001      	adds	r0, #1
 800748e:	f43f ae52 	beq.w	8007136 <_printf_float+0xc2>
 8007492:	f108 0801 	add.w	r8, r8, #1
 8007496:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007498:	3b01      	subs	r3, #1
 800749a:	4543      	cmp	r3, r8
 800749c:	dcf1      	bgt.n	8007482 <_printf_float+0x40e>
 800749e:	464b      	mov	r3, r9
 80074a0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80074a4:	e6dc      	b.n	8007260 <_printf_float+0x1ec>
 80074a6:	f04f 0800 	mov.w	r8, #0
 80074aa:	f104 0a1a 	add.w	sl, r4, #26
 80074ae:	e7f2      	b.n	8007496 <_printf_float+0x422>
 80074b0:	2301      	movs	r3, #1
 80074b2:	4642      	mov	r2, r8
 80074b4:	e7df      	b.n	8007476 <_printf_float+0x402>
 80074b6:	2301      	movs	r3, #1
 80074b8:	464a      	mov	r2, r9
 80074ba:	4631      	mov	r1, r6
 80074bc:	4628      	mov	r0, r5
 80074be:	47b8      	blx	r7
 80074c0:	3001      	adds	r0, #1
 80074c2:	f43f ae38 	beq.w	8007136 <_printf_float+0xc2>
 80074c6:	f108 0801 	add.w	r8, r8, #1
 80074ca:	68e3      	ldr	r3, [r4, #12]
 80074cc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80074ce:	1a5b      	subs	r3, r3, r1
 80074d0:	4543      	cmp	r3, r8
 80074d2:	dcf0      	bgt.n	80074b6 <_printf_float+0x442>
 80074d4:	e6fa      	b.n	80072cc <_printf_float+0x258>
 80074d6:	f04f 0800 	mov.w	r8, #0
 80074da:	f104 0919 	add.w	r9, r4, #25
 80074de:	e7f4      	b.n	80074ca <_printf_float+0x456>

080074e0 <_printf_common>:
 80074e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80074e4:	4616      	mov	r6, r2
 80074e6:	4699      	mov	r9, r3
 80074e8:	688a      	ldr	r2, [r1, #8]
 80074ea:	690b      	ldr	r3, [r1, #16]
 80074ec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80074f0:	4293      	cmp	r3, r2
 80074f2:	bfb8      	it	lt
 80074f4:	4613      	movlt	r3, r2
 80074f6:	6033      	str	r3, [r6, #0]
 80074f8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80074fc:	4607      	mov	r7, r0
 80074fe:	460c      	mov	r4, r1
 8007500:	b10a      	cbz	r2, 8007506 <_printf_common+0x26>
 8007502:	3301      	adds	r3, #1
 8007504:	6033      	str	r3, [r6, #0]
 8007506:	6823      	ldr	r3, [r4, #0]
 8007508:	0699      	lsls	r1, r3, #26
 800750a:	bf42      	ittt	mi
 800750c:	6833      	ldrmi	r3, [r6, #0]
 800750e:	3302      	addmi	r3, #2
 8007510:	6033      	strmi	r3, [r6, #0]
 8007512:	6825      	ldr	r5, [r4, #0]
 8007514:	f015 0506 	ands.w	r5, r5, #6
 8007518:	d106      	bne.n	8007528 <_printf_common+0x48>
 800751a:	f104 0a19 	add.w	sl, r4, #25
 800751e:	68e3      	ldr	r3, [r4, #12]
 8007520:	6832      	ldr	r2, [r6, #0]
 8007522:	1a9b      	subs	r3, r3, r2
 8007524:	42ab      	cmp	r3, r5
 8007526:	dc26      	bgt.n	8007576 <_printf_common+0x96>
 8007528:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800752c:	1e13      	subs	r3, r2, #0
 800752e:	6822      	ldr	r2, [r4, #0]
 8007530:	bf18      	it	ne
 8007532:	2301      	movne	r3, #1
 8007534:	0692      	lsls	r2, r2, #26
 8007536:	d42b      	bmi.n	8007590 <_printf_common+0xb0>
 8007538:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800753c:	4649      	mov	r1, r9
 800753e:	4638      	mov	r0, r7
 8007540:	47c0      	blx	r8
 8007542:	3001      	adds	r0, #1
 8007544:	d01e      	beq.n	8007584 <_printf_common+0xa4>
 8007546:	6823      	ldr	r3, [r4, #0]
 8007548:	68e5      	ldr	r5, [r4, #12]
 800754a:	6832      	ldr	r2, [r6, #0]
 800754c:	f003 0306 	and.w	r3, r3, #6
 8007550:	2b04      	cmp	r3, #4
 8007552:	bf08      	it	eq
 8007554:	1aad      	subeq	r5, r5, r2
 8007556:	68a3      	ldr	r3, [r4, #8]
 8007558:	6922      	ldr	r2, [r4, #16]
 800755a:	bf0c      	ite	eq
 800755c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007560:	2500      	movne	r5, #0
 8007562:	4293      	cmp	r3, r2
 8007564:	bfc4      	itt	gt
 8007566:	1a9b      	subgt	r3, r3, r2
 8007568:	18ed      	addgt	r5, r5, r3
 800756a:	2600      	movs	r6, #0
 800756c:	341a      	adds	r4, #26
 800756e:	42b5      	cmp	r5, r6
 8007570:	d11a      	bne.n	80075a8 <_printf_common+0xc8>
 8007572:	2000      	movs	r0, #0
 8007574:	e008      	b.n	8007588 <_printf_common+0xa8>
 8007576:	2301      	movs	r3, #1
 8007578:	4652      	mov	r2, sl
 800757a:	4649      	mov	r1, r9
 800757c:	4638      	mov	r0, r7
 800757e:	47c0      	blx	r8
 8007580:	3001      	adds	r0, #1
 8007582:	d103      	bne.n	800758c <_printf_common+0xac>
 8007584:	f04f 30ff 	mov.w	r0, #4294967295
 8007588:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800758c:	3501      	adds	r5, #1
 800758e:	e7c6      	b.n	800751e <_printf_common+0x3e>
 8007590:	18e1      	adds	r1, r4, r3
 8007592:	1c5a      	adds	r2, r3, #1
 8007594:	2030      	movs	r0, #48	; 0x30
 8007596:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800759a:	4422      	add	r2, r4
 800759c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80075a0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80075a4:	3302      	adds	r3, #2
 80075a6:	e7c7      	b.n	8007538 <_printf_common+0x58>
 80075a8:	2301      	movs	r3, #1
 80075aa:	4622      	mov	r2, r4
 80075ac:	4649      	mov	r1, r9
 80075ae:	4638      	mov	r0, r7
 80075b0:	47c0      	blx	r8
 80075b2:	3001      	adds	r0, #1
 80075b4:	d0e6      	beq.n	8007584 <_printf_common+0xa4>
 80075b6:	3601      	adds	r6, #1
 80075b8:	e7d9      	b.n	800756e <_printf_common+0x8e>
	...

080075bc <_printf_i>:
 80075bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80075c0:	460c      	mov	r4, r1
 80075c2:	4691      	mov	r9, r2
 80075c4:	7e27      	ldrb	r7, [r4, #24]
 80075c6:	990c      	ldr	r1, [sp, #48]	; 0x30
 80075c8:	2f78      	cmp	r7, #120	; 0x78
 80075ca:	4680      	mov	r8, r0
 80075cc:	469a      	mov	sl, r3
 80075ce:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80075d2:	d807      	bhi.n	80075e4 <_printf_i+0x28>
 80075d4:	2f62      	cmp	r7, #98	; 0x62
 80075d6:	d80a      	bhi.n	80075ee <_printf_i+0x32>
 80075d8:	2f00      	cmp	r7, #0
 80075da:	f000 80d8 	beq.w	800778e <_printf_i+0x1d2>
 80075de:	2f58      	cmp	r7, #88	; 0x58
 80075e0:	f000 80a3 	beq.w	800772a <_printf_i+0x16e>
 80075e4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80075e8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80075ec:	e03a      	b.n	8007664 <_printf_i+0xa8>
 80075ee:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80075f2:	2b15      	cmp	r3, #21
 80075f4:	d8f6      	bhi.n	80075e4 <_printf_i+0x28>
 80075f6:	a001      	add	r0, pc, #4	; (adr r0, 80075fc <_printf_i+0x40>)
 80075f8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80075fc:	08007655 	.word	0x08007655
 8007600:	08007669 	.word	0x08007669
 8007604:	080075e5 	.word	0x080075e5
 8007608:	080075e5 	.word	0x080075e5
 800760c:	080075e5 	.word	0x080075e5
 8007610:	080075e5 	.word	0x080075e5
 8007614:	08007669 	.word	0x08007669
 8007618:	080075e5 	.word	0x080075e5
 800761c:	080075e5 	.word	0x080075e5
 8007620:	080075e5 	.word	0x080075e5
 8007624:	080075e5 	.word	0x080075e5
 8007628:	08007775 	.word	0x08007775
 800762c:	08007699 	.word	0x08007699
 8007630:	08007757 	.word	0x08007757
 8007634:	080075e5 	.word	0x080075e5
 8007638:	080075e5 	.word	0x080075e5
 800763c:	08007797 	.word	0x08007797
 8007640:	080075e5 	.word	0x080075e5
 8007644:	08007699 	.word	0x08007699
 8007648:	080075e5 	.word	0x080075e5
 800764c:	080075e5 	.word	0x080075e5
 8007650:	0800775f 	.word	0x0800775f
 8007654:	680b      	ldr	r3, [r1, #0]
 8007656:	1d1a      	adds	r2, r3, #4
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	600a      	str	r2, [r1, #0]
 800765c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007660:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007664:	2301      	movs	r3, #1
 8007666:	e0a3      	b.n	80077b0 <_printf_i+0x1f4>
 8007668:	6825      	ldr	r5, [r4, #0]
 800766a:	6808      	ldr	r0, [r1, #0]
 800766c:	062e      	lsls	r6, r5, #24
 800766e:	f100 0304 	add.w	r3, r0, #4
 8007672:	d50a      	bpl.n	800768a <_printf_i+0xce>
 8007674:	6805      	ldr	r5, [r0, #0]
 8007676:	600b      	str	r3, [r1, #0]
 8007678:	2d00      	cmp	r5, #0
 800767a:	da03      	bge.n	8007684 <_printf_i+0xc8>
 800767c:	232d      	movs	r3, #45	; 0x2d
 800767e:	426d      	negs	r5, r5
 8007680:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007684:	485e      	ldr	r0, [pc, #376]	; (8007800 <_printf_i+0x244>)
 8007686:	230a      	movs	r3, #10
 8007688:	e019      	b.n	80076be <_printf_i+0x102>
 800768a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800768e:	6805      	ldr	r5, [r0, #0]
 8007690:	600b      	str	r3, [r1, #0]
 8007692:	bf18      	it	ne
 8007694:	b22d      	sxthne	r5, r5
 8007696:	e7ef      	b.n	8007678 <_printf_i+0xbc>
 8007698:	680b      	ldr	r3, [r1, #0]
 800769a:	6825      	ldr	r5, [r4, #0]
 800769c:	1d18      	adds	r0, r3, #4
 800769e:	6008      	str	r0, [r1, #0]
 80076a0:	0628      	lsls	r0, r5, #24
 80076a2:	d501      	bpl.n	80076a8 <_printf_i+0xec>
 80076a4:	681d      	ldr	r5, [r3, #0]
 80076a6:	e002      	b.n	80076ae <_printf_i+0xf2>
 80076a8:	0669      	lsls	r1, r5, #25
 80076aa:	d5fb      	bpl.n	80076a4 <_printf_i+0xe8>
 80076ac:	881d      	ldrh	r5, [r3, #0]
 80076ae:	4854      	ldr	r0, [pc, #336]	; (8007800 <_printf_i+0x244>)
 80076b0:	2f6f      	cmp	r7, #111	; 0x6f
 80076b2:	bf0c      	ite	eq
 80076b4:	2308      	moveq	r3, #8
 80076b6:	230a      	movne	r3, #10
 80076b8:	2100      	movs	r1, #0
 80076ba:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80076be:	6866      	ldr	r6, [r4, #4]
 80076c0:	60a6      	str	r6, [r4, #8]
 80076c2:	2e00      	cmp	r6, #0
 80076c4:	bfa2      	ittt	ge
 80076c6:	6821      	ldrge	r1, [r4, #0]
 80076c8:	f021 0104 	bicge.w	r1, r1, #4
 80076cc:	6021      	strge	r1, [r4, #0]
 80076ce:	b90d      	cbnz	r5, 80076d4 <_printf_i+0x118>
 80076d0:	2e00      	cmp	r6, #0
 80076d2:	d04d      	beq.n	8007770 <_printf_i+0x1b4>
 80076d4:	4616      	mov	r6, r2
 80076d6:	fbb5 f1f3 	udiv	r1, r5, r3
 80076da:	fb03 5711 	mls	r7, r3, r1, r5
 80076de:	5dc7      	ldrb	r7, [r0, r7]
 80076e0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80076e4:	462f      	mov	r7, r5
 80076e6:	42bb      	cmp	r3, r7
 80076e8:	460d      	mov	r5, r1
 80076ea:	d9f4      	bls.n	80076d6 <_printf_i+0x11a>
 80076ec:	2b08      	cmp	r3, #8
 80076ee:	d10b      	bne.n	8007708 <_printf_i+0x14c>
 80076f0:	6823      	ldr	r3, [r4, #0]
 80076f2:	07df      	lsls	r7, r3, #31
 80076f4:	d508      	bpl.n	8007708 <_printf_i+0x14c>
 80076f6:	6923      	ldr	r3, [r4, #16]
 80076f8:	6861      	ldr	r1, [r4, #4]
 80076fa:	4299      	cmp	r1, r3
 80076fc:	bfde      	ittt	le
 80076fe:	2330      	movle	r3, #48	; 0x30
 8007700:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007704:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007708:	1b92      	subs	r2, r2, r6
 800770a:	6122      	str	r2, [r4, #16]
 800770c:	f8cd a000 	str.w	sl, [sp]
 8007710:	464b      	mov	r3, r9
 8007712:	aa03      	add	r2, sp, #12
 8007714:	4621      	mov	r1, r4
 8007716:	4640      	mov	r0, r8
 8007718:	f7ff fee2 	bl	80074e0 <_printf_common>
 800771c:	3001      	adds	r0, #1
 800771e:	d14c      	bne.n	80077ba <_printf_i+0x1fe>
 8007720:	f04f 30ff 	mov.w	r0, #4294967295
 8007724:	b004      	add	sp, #16
 8007726:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800772a:	4835      	ldr	r0, [pc, #212]	; (8007800 <_printf_i+0x244>)
 800772c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007730:	6823      	ldr	r3, [r4, #0]
 8007732:	680e      	ldr	r6, [r1, #0]
 8007734:	061f      	lsls	r7, r3, #24
 8007736:	f856 5b04 	ldr.w	r5, [r6], #4
 800773a:	600e      	str	r6, [r1, #0]
 800773c:	d514      	bpl.n	8007768 <_printf_i+0x1ac>
 800773e:	07d9      	lsls	r1, r3, #31
 8007740:	bf44      	itt	mi
 8007742:	f043 0320 	orrmi.w	r3, r3, #32
 8007746:	6023      	strmi	r3, [r4, #0]
 8007748:	b91d      	cbnz	r5, 8007752 <_printf_i+0x196>
 800774a:	6823      	ldr	r3, [r4, #0]
 800774c:	f023 0320 	bic.w	r3, r3, #32
 8007750:	6023      	str	r3, [r4, #0]
 8007752:	2310      	movs	r3, #16
 8007754:	e7b0      	b.n	80076b8 <_printf_i+0xfc>
 8007756:	6823      	ldr	r3, [r4, #0]
 8007758:	f043 0320 	orr.w	r3, r3, #32
 800775c:	6023      	str	r3, [r4, #0]
 800775e:	2378      	movs	r3, #120	; 0x78
 8007760:	4828      	ldr	r0, [pc, #160]	; (8007804 <_printf_i+0x248>)
 8007762:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007766:	e7e3      	b.n	8007730 <_printf_i+0x174>
 8007768:	065e      	lsls	r6, r3, #25
 800776a:	bf48      	it	mi
 800776c:	b2ad      	uxthmi	r5, r5
 800776e:	e7e6      	b.n	800773e <_printf_i+0x182>
 8007770:	4616      	mov	r6, r2
 8007772:	e7bb      	b.n	80076ec <_printf_i+0x130>
 8007774:	680b      	ldr	r3, [r1, #0]
 8007776:	6826      	ldr	r6, [r4, #0]
 8007778:	6960      	ldr	r0, [r4, #20]
 800777a:	1d1d      	adds	r5, r3, #4
 800777c:	600d      	str	r5, [r1, #0]
 800777e:	0635      	lsls	r5, r6, #24
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	d501      	bpl.n	8007788 <_printf_i+0x1cc>
 8007784:	6018      	str	r0, [r3, #0]
 8007786:	e002      	b.n	800778e <_printf_i+0x1d2>
 8007788:	0671      	lsls	r1, r6, #25
 800778a:	d5fb      	bpl.n	8007784 <_printf_i+0x1c8>
 800778c:	8018      	strh	r0, [r3, #0]
 800778e:	2300      	movs	r3, #0
 8007790:	6123      	str	r3, [r4, #16]
 8007792:	4616      	mov	r6, r2
 8007794:	e7ba      	b.n	800770c <_printf_i+0x150>
 8007796:	680b      	ldr	r3, [r1, #0]
 8007798:	1d1a      	adds	r2, r3, #4
 800779a:	600a      	str	r2, [r1, #0]
 800779c:	681e      	ldr	r6, [r3, #0]
 800779e:	6862      	ldr	r2, [r4, #4]
 80077a0:	2100      	movs	r1, #0
 80077a2:	4630      	mov	r0, r6
 80077a4:	f7f8 fd3c 	bl	8000220 <memchr>
 80077a8:	b108      	cbz	r0, 80077ae <_printf_i+0x1f2>
 80077aa:	1b80      	subs	r0, r0, r6
 80077ac:	6060      	str	r0, [r4, #4]
 80077ae:	6863      	ldr	r3, [r4, #4]
 80077b0:	6123      	str	r3, [r4, #16]
 80077b2:	2300      	movs	r3, #0
 80077b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80077b8:	e7a8      	b.n	800770c <_printf_i+0x150>
 80077ba:	6923      	ldr	r3, [r4, #16]
 80077bc:	4632      	mov	r2, r6
 80077be:	4649      	mov	r1, r9
 80077c0:	4640      	mov	r0, r8
 80077c2:	47d0      	blx	sl
 80077c4:	3001      	adds	r0, #1
 80077c6:	d0ab      	beq.n	8007720 <_printf_i+0x164>
 80077c8:	6823      	ldr	r3, [r4, #0]
 80077ca:	079b      	lsls	r3, r3, #30
 80077cc:	d413      	bmi.n	80077f6 <_printf_i+0x23a>
 80077ce:	68e0      	ldr	r0, [r4, #12]
 80077d0:	9b03      	ldr	r3, [sp, #12]
 80077d2:	4298      	cmp	r0, r3
 80077d4:	bfb8      	it	lt
 80077d6:	4618      	movlt	r0, r3
 80077d8:	e7a4      	b.n	8007724 <_printf_i+0x168>
 80077da:	2301      	movs	r3, #1
 80077dc:	4632      	mov	r2, r6
 80077de:	4649      	mov	r1, r9
 80077e0:	4640      	mov	r0, r8
 80077e2:	47d0      	blx	sl
 80077e4:	3001      	adds	r0, #1
 80077e6:	d09b      	beq.n	8007720 <_printf_i+0x164>
 80077e8:	3501      	adds	r5, #1
 80077ea:	68e3      	ldr	r3, [r4, #12]
 80077ec:	9903      	ldr	r1, [sp, #12]
 80077ee:	1a5b      	subs	r3, r3, r1
 80077f0:	42ab      	cmp	r3, r5
 80077f2:	dcf2      	bgt.n	80077da <_printf_i+0x21e>
 80077f4:	e7eb      	b.n	80077ce <_printf_i+0x212>
 80077f6:	2500      	movs	r5, #0
 80077f8:	f104 0619 	add.w	r6, r4, #25
 80077fc:	e7f5      	b.n	80077ea <_printf_i+0x22e>
 80077fe:	bf00      	nop
 8007800:	0800be9a 	.word	0x0800be9a
 8007804:	0800beab 	.word	0x0800beab

08007808 <_scanf_float>:
 8007808:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800780c:	b087      	sub	sp, #28
 800780e:	4617      	mov	r7, r2
 8007810:	9303      	str	r3, [sp, #12]
 8007812:	688b      	ldr	r3, [r1, #8]
 8007814:	1e5a      	subs	r2, r3, #1
 8007816:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800781a:	bf83      	ittte	hi
 800781c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8007820:	195b      	addhi	r3, r3, r5
 8007822:	9302      	strhi	r3, [sp, #8]
 8007824:	2300      	movls	r3, #0
 8007826:	bf86      	itte	hi
 8007828:	f240 135d 	movwhi	r3, #349	; 0x15d
 800782c:	608b      	strhi	r3, [r1, #8]
 800782e:	9302      	strls	r3, [sp, #8]
 8007830:	680b      	ldr	r3, [r1, #0]
 8007832:	468b      	mov	fp, r1
 8007834:	2500      	movs	r5, #0
 8007836:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800783a:	f84b 3b1c 	str.w	r3, [fp], #28
 800783e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8007842:	4680      	mov	r8, r0
 8007844:	460c      	mov	r4, r1
 8007846:	465e      	mov	r6, fp
 8007848:	46aa      	mov	sl, r5
 800784a:	46a9      	mov	r9, r5
 800784c:	9501      	str	r5, [sp, #4]
 800784e:	68a2      	ldr	r2, [r4, #8]
 8007850:	b152      	cbz	r2, 8007868 <_scanf_float+0x60>
 8007852:	683b      	ldr	r3, [r7, #0]
 8007854:	781b      	ldrb	r3, [r3, #0]
 8007856:	2b4e      	cmp	r3, #78	; 0x4e
 8007858:	d864      	bhi.n	8007924 <_scanf_float+0x11c>
 800785a:	2b40      	cmp	r3, #64	; 0x40
 800785c:	d83c      	bhi.n	80078d8 <_scanf_float+0xd0>
 800785e:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8007862:	b2c8      	uxtb	r0, r1
 8007864:	280e      	cmp	r0, #14
 8007866:	d93a      	bls.n	80078de <_scanf_float+0xd6>
 8007868:	f1b9 0f00 	cmp.w	r9, #0
 800786c:	d003      	beq.n	8007876 <_scanf_float+0x6e>
 800786e:	6823      	ldr	r3, [r4, #0]
 8007870:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007874:	6023      	str	r3, [r4, #0]
 8007876:	f10a 3aff 	add.w	sl, sl, #4294967295
 800787a:	f1ba 0f01 	cmp.w	sl, #1
 800787e:	f200 8113 	bhi.w	8007aa8 <_scanf_float+0x2a0>
 8007882:	455e      	cmp	r6, fp
 8007884:	f200 8105 	bhi.w	8007a92 <_scanf_float+0x28a>
 8007888:	2501      	movs	r5, #1
 800788a:	4628      	mov	r0, r5
 800788c:	b007      	add	sp, #28
 800788e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007892:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8007896:	2a0d      	cmp	r2, #13
 8007898:	d8e6      	bhi.n	8007868 <_scanf_float+0x60>
 800789a:	a101      	add	r1, pc, #4	; (adr r1, 80078a0 <_scanf_float+0x98>)
 800789c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80078a0:	080079df 	.word	0x080079df
 80078a4:	08007869 	.word	0x08007869
 80078a8:	08007869 	.word	0x08007869
 80078ac:	08007869 	.word	0x08007869
 80078b0:	08007a3f 	.word	0x08007a3f
 80078b4:	08007a17 	.word	0x08007a17
 80078b8:	08007869 	.word	0x08007869
 80078bc:	08007869 	.word	0x08007869
 80078c0:	080079ed 	.word	0x080079ed
 80078c4:	08007869 	.word	0x08007869
 80078c8:	08007869 	.word	0x08007869
 80078cc:	08007869 	.word	0x08007869
 80078d0:	08007869 	.word	0x08007869
 80078d4:	080079a5 	.word	0x080079a5
 80078d8:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80078dc:	e7db      	b.n	8007896 <_scanf_float+0x8e>
 80078de:	290e      	cmp	r1, #14
 80078e0:	d8c2      	bhi.n	8007868 <_scanf_float+0x60>
 80078e2:	a001      	add	r0, pc, #4	; (adr r0, 80078e8 <_scanf_float+0xe0>)
 80078e4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80078e8:	08007997 	.word	0x08007997
 80078ec:	08007869 	.word	0x08007869
 80078f0:	08007997 	.word	0x08007997
 80078f4:	08007a2b 	.word	0x08007a2b
 80078f8:	08007869 	.word	0x08007869
 80078fc:	08007945 	.word	0x08007945
 8007900:	08007981 	.word	0x08007981
 8007904:	08007981 	.word	0x08007981
 8007908:	08007981 	.word	0x08007981
 800790c:	08007981 	.word	0x08007981
 8007910:	08007981 	.word	0x08007981
 8007914:	08007981 	.word	0x08007981
 8007918:	08007981 	.word	0x08007981
 800791c:	08007981 	.word	0x08007981
 8007920:	08007981 	.word	0x08007981
 8007924:	2b6e      	cmp	r3, #110	; 0x6e
 8007926:	d809      	bhi.n	800793c <_scanf_float+0x134>
 8007928:	2b60      	cmp	r3, #96	; 0x60
 800792a:	d8b2      	bhi.n	8007892 <_scanf_float+0x8a>
 800792c:	2b54      	cmp	r3, #84	; 0x54
 800792e:	d077      	beq.n	8007a20 <_scanf_float+0x218>
 8007930:	2b59      	cmp	r3, #89	; 0x59
 8007932:	d199      	bne.n	8007868 <_scanf_float+0x60>
 8007934:	2d07      	cmp	r5, #7
 8007936:	d197      	bne.n	8007868 <_scanf_float+0x60>
 8007938:	2508      	movs	r5, #8
 800793a:	e029      	b.n	8007990 <_scanf_float+0x188>
 800793c:	2b74      	cmp	r3, #116	; 0x74
 800793e:	d06f      	beq.n	8007a20 <_scanf_float+0x218>
 8007940:	2b79      	cmp	r3, #121	; 0x79
 8007942:	e7f6      	b.n	8007932 <_scanf_float+0x12a>
 8007944:	6821      	ldr	r1, [r4, #0]
 8007946:	05c8      	lsls	r0, r1, #23
 8007948:	d51a      	bpl.n	8007980 <_scanf_float+0x178>
 800794a:	9b02      	ldr	r3, [sp, #8]
 800794c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8007950:	6021      	str	r1, [r4, #0]
 8007952:	f109 0901 	add.w	r9, r9, #1
 8007956:	b11b      	cbz	r3, 8007960 <_scanf_float+0x158>
 8007958:	3b01      	subs	r3, #1
 800795a:	3201      	adds	r2, #1
 800795c:	9302      	str	r3, [sp, #8]
 800795e:	60a2      	str	r2, [r4, #8]
 8007960:	68a3      	ldr	r3, [r4, #8]
 8007962:	3b01      	subs	r3, #1
 8007964:	60a3      	str	r3, [r4, #8]
 8007966:	6923      	ldr	r3, [r4, #16]
 8007968:	3301      	adds	r3, #1
 800796a:	6123      	str	r3, [r4, #16]
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	3b01      	subs	r3, #1
 8007970:	2b00      	cmp	r3, #0
 8007972:	607b      	str	r3, [r7, #4]
 8007974:	f340 8084 	ble.w	8007a80 <_scanf_float+0x278>
 8007978:	683b      	ldr	r3, [r7, #0]
 800797a:	3301      	adds	r3, #1
 800797c:	603b      	str	r3, [r7, #0]
 800797e:	e766      	b.n	800784e <_scanf_float+0x46>
 8007980:	eb1a 0f05 	cmn.w	sl, r5
 8007984:	f47f af70 	bne.w	8007868 <_scanf_float+0x60>
 8007988:	6822      	ldr	r2, [r4, #0]
 800798a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800798e:	6022      	str	r2, [r4, #0]
 8007990:	f806 3b01 	strb.w	r3, [r6], #1
 8007994:	e7e4      	b.n	8007960 <_scanf_float+0x158>
 8007996:	6822      	ldr	r2, [r4, #0]
 8007998:	0610      	lsls	r0, r2, #24
 800799a:	f57f af65 	bpl.w	8007868 <_scanf_float+0x60>
 800799e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80079a2:	e7f4      	b.n	800798e <_scanf_float+0x186>
 80079a4:	f1ba 0f00 	cmp.w	sl, #0
 80079a8:	d10e      	bne.n	80079c8 <_scanf_float+0x1c0>
 80079aa:	f1b9 0f00 	cmp.w	r9, #0
 80079ae:	d10e      	bne.n	80079ce <_scanf_float+0x1c6>
 80079b0:	6822      	ldr	r2, [r4, #0]
 80079b2:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80079b6:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80079ba:	d108      	bne.n	80079ce <_scanf_float+0x1c6>
 80079bc:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80079c0:	6022      	str	r2, [r4, #0]
 80079c2:	f04f 0a01 	mov.w	sl, #1
 80079c6:	e7e3      	b.n	8007990 <_scanf_float+0x188>
 80079c8:	f1ba 0f02 	cmp.w	sl, #2
 80079cc:	d055      	beq.n	8007a7a <_scanf_float+0x272>
 80079ce:	2d01      	cmp	r5, #1
 80079d0:	d002      	beq.n	80079d8 <_scanf_float+0x1d0>
 80079d2:	2d04      	cmp	r5, #4
 80079d4:	f47f af48 	bne.w	8007868 <_scanf_float+0x60>
 80079d8:	3501      	adds	r5, #1
 80079da:	b2ed      	uxtb	r5, r5
 80079dc:	e7d8      	b.n	8007990 <_scanf_float+0x188>
 80079de:	f1ba 0f01 	cmp.w	sl, #1
 80079e2:	f47f af41 	bne.w	8007868 <_scanf_float+0x60>
 80079e6:	f04f 0a02 	mov.w	sl, #2
 80079ea:	e7d1      	b.n	8007990 <_scanf_float+0x188>
 80079ec:	b97d      	cbnz	r5, 8007a0e <_scanf_float+0x206>
 80079ee:	f1b9 0f00 	cmp.w	r9, #0
 80079f2:	f47f af3c 	bne.w	800786e <_scanf_float+0x66>
 80079f6:	6822      	ldr	r2, [r4, #0]
 80079f8:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80079fc:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8007a00:	f47f af39 	bne.w	8007876 <_scanf_float+0x6e>
 8007a04:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007a08:	6022      	str	r2, [r4, #0]
 8007a0a:	2501      	movs	r5, #1
 8007a0c:	e7c0      	b.n	8007990 <_scanf_float+0x188>
 8007a0e:	2d03      	cmp	r5, #3
 8007a10:	d0e2      	beq.n	80079d8 <_scanf_float+0x1d0>
 8007a12:	2d05      	cmp	r5, #5
 8007a14:	e7de      	b.n	80079d4 <_scanf_float+0x1cc>
 8007a16:	2d02      	cmp	r5, #2
 8007a18:	f47f af26 	bne.w	8007868 <_scanf_float+0x60>
 8007a1c:	2503      	movs	r5, #3
 8007a1e:	e7b7      	b.n	8007990 <_scanf_float+0x188>
 8007a20:	2d06      	cmp	r5, #6
 8007a22:	f47f af21 	bne.w	8007868 <_scanf_float+0x60>
 8007a26:	2507      	movs	r5, #7
 8007a28:	e7b2      	b.n	8007990 <_scanf_float+0x188>
 8007a2a:	6822      	ldr	r2, [r4, #0]
 8007a2c:	0591      	lsls	r1, r2, #22
 8007a2e:	f57f af1b 	bpl.w	8007868 <_scanf_float+0x60>
 8007a32:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8007a36:	6022      	str	r2, [r4, #0]
 8007a38:	f8cd 9004 	str.w	r9, [sp, #4]
 8007a3c:	e7a8      	b.n	8007990 <_scanf_float+0x188>
 8007a3e:	6822      	ldr	r2, [r4, #0]
 8007a40:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8007a44:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8007a48:	d006      	beq.n	8007a58 <_scanf_float+0x250>
 8007a4a:	0550      	lsls	r0, r2, #21
 8007a4c:	f57f af0c 	bpl.w	8007868 <_scanf_float+0x60>
 8007a50:	f1b9 0f00 	cmp.w	r9, #0
 8007a54:	f43f af0f 	beq.w	8007876 <_scanf_float+0x6e>
 8007a58:	0591      	lsls	r1, r2, #22
 8007a5a:	bf58      	it	pl
 8007a5c:	9901      	ldrpl	r1, [sp, #4]
 8007a5e:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007a62:	bf58      	it	pl
 8007a64:	eba9 0101 	subpl.w	r1, r9, r1
 8007a68:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8007a6c:	bf58      	it	pl
 8007a6e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8007a72:	6022      	str	r2, [r4, #0]
 8007a74:	f04f 0900 	mov.w	r9, #0
 8007a78:	e78a      	b.n	8007990 <_scanf_float+0x188>
 8007a7a:	f04f 0a03 	mov.w	sl, #3
 8007a7e:	e787      	b.n	8007990 <_scanf_float+0x188>
 8007a80:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8007a84:	4639      	mov	r1, r7
 8007a86:	4640      	mov	r0, r8
 8007a88:	4798      	blx	r3
 8007a8a:	2800      	cmp	r0, #0
 8007a8c:	f43f aedf 	beq.w	800784e <_scanf_float+0x46>
 8007a90:	e6ea      	b.n	8007868 <_scanf_float+0x60>
 8007a92:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007a96:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007a9a:	463a      	mov	r2, r7
 8007a9c:	4640      	mov	r0, r8
 8007a9e:	4798      	blx	r3
 8007aa0:	6923      	ldr	r3, [r4, #16]
 8007aa2:	3b01      	subs	r3, #1
 8007aa4:	6123      	str	r3, [r4, #16]
 8007aa6:	e6ec      	b.n	8007882 <_scanf_float+0x7a>
 8007aa8:	1e6b      	subs	r3, r5, #1
 8007aaa:	2b06      	cmp	r3, #6
 8007aac:	d825      	bhi.n	8007afa <_scanf_float+0x2f2>
 8007aae:	2d02      	cmp	r5, #2
 8007ab0:	d836      	bhi.n	8007b20 <_scanf_float+0x318>
 8007ab2:	455e      	cmp	r6, fp
 8007ab4:	f67f aee8 	bls.w	8007888 <_scanf_float+0x80>
 8007ab8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007abc:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007ac0:	463a      	mov	r2, r7
 8007ac2:	4640      	mov	r0, r8
 8007ac4:	4798      	blx	r3
 8007ac6:	6923      	ldr	r3, [r4, #16]
 8007ac8:	3b01      	subs	r3, #1
 8007aca:	6123      	str	r3, [r4, #16]
 8007acc:	e7f1      	b.n	8007ab2 <_scanf_float+0x2aa>
 8007ace:	9802      	ldr	r0, [sp, #8]
 8007ad0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007ad4:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8007ad8:	9002      	str	r0, [sp, #8]
 8007ada:	463a      	mov	r2, r7
 8007adc:	4640      	mov	r0, r8
 8007ade:	4798      	blx	r3
 8007ae0:	6923      	ldr	r3, [r4, #16]
 8007ae2:	3b01      	subs	r3, #1
 8007ae4:	6123      	str	r3, [r4, #16]
 8007ae6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007aea:	fa5f fa8a 	uxtb.w	sl, sl
 8007aee:	f1ba 0f02 	cmp.w	sl, #2
 8007af2:	d1ec      	bne.n	8007ace <_scanf_float+0x2c6>
 8007af4:	3d03      	subs	r5, #3
 8007af6:	b2ed      	uxtb	r5, r5
 8007af8:	1b76      	subs	r6, r6, r5
 8007afa:	6823      	ldr	r3, [r4, #0]
 8007afc:	05da      	lsls	r2, r3, #23
 8007afe:	d52f      	bpl.n	8007b60 <_scanf_float+0x358>
 8007b00:	055b      	lsls	r3, r3, #21
 8007b02:	d510      	bpl.n	8007b26 <_scanf_float+0x31e>
 8007b04:	455e      	cmp	r6, fp
 8007b06:	f67f aebf 	bls.w	8007888 <_scanf_float+0x80>
 8007b0a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007b0e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007b12:	463a      	mov	r2, r7
 8007b14:	4640      	mov	r0, r8
 8007b16:	4798      	blx	r3
 8007b18:	6923      	ldr	r3, [r4, #16]
 8007b1a:	3b01      	subs	r3, #1
 8007b1c:	6123      	str	r3, [r4, #16]
 8007b1e:	e7f1      	b.n	8007b04 <_scanf_float+0x2fc>
 8007b20:	46aa      	mov	sl, r5
 8007b22:	9602      	str	r6, [sp, #8]
 8007b24:	e7df      	b.n	8007ae6 <_scanf_float+0x2de>
 8007b26:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8007b2a:	6923      	ldr	r3, [r4, #16]
 8007b2c:	2965      	cmp	r1, #101	; 0x65
 8007b2e:	f103 33ff 	add.w	r3, r3, #4294967295
 8007b32:	f106 35ff 	add.w	r5, r6, #4294967295
 8007b36:	6123      	str	r3, [r4, #16]
 8007b38:	d00c      	beq.n	8007b54 <_scanf_float+0x34c>
 8007b3a:	2945      	cmp	r1, #69	; 0x45
 8007b3c:	d00a      	beq.n	8007b54 <_scanf_float+0x34c>
 8007b3e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007b42:	463a      	mov	r2, r7
 8007b44:	4640      	mov	r0, r8
 8007b46:	4798      	blx	r3
 8007b48:	6923      	ldr	r3, [r4, #16]
 8007b4a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8007b4e:	3b01      	subs	r3, #1
 8007b50:	1eb5      	subs	r5, r6, #2
 8007b52:	6123      	str	r3, [r4, #16]
 8007b54:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007b58:	463a      	mov	r2, r7
 8007b5a:	4640      	mov	r0, r8
 8007b5c:	4798      	blx	r3
 8007b5e:	462e      	mov	r6, r5
 8007b60:	6825      	ldr	r5, [r4, #0]
 8007b62:	f015 0510 	ands.w	r5, r5, #16
 8007b66:	d158      	bne.n	8007c1a <_scanf_float+0x412>
 8007b68:	7035      	strb	r5, [r6, #0]
 8007b6a:	6823      	ldr	r3, [r4, #0]
 8007b6c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007b70:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007b74:	d11c      	bne.n	8007bb0 <_scanf_float+0x3a8>
 8007b76:	9b01      	ldr	r3, [sp, #4]
 8007b78:	454b      	cmp	r3, r9
 8007b7a:	eba3 0209 	sub.w	r2, r3, r9
 8007b7e:	d124      	bne.n	8007bca <_scanf_float+0x3c2>
 8007b80:	2200      	movs	r2, #0
 8007b82:	4659      	mov	r1, fp
 8007b84:	4640      	mov	r0, r8
 8007b86:	f000 fe9d 	bl	80088c4 <_strtod_r>
 8007b8a:	9b03      	ldr	r3, [sp, #12]
 8007b8c:	6821      	ldr	r1, [r4, #0]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	f011 0f02 	tst.w	r1, #2
 8007b94:	ec57 6b10 	vmov	r6, r7, d0
 8007b98:	f103 0204 	add.w	r2, r3, #4
 8007b9c:	d020      	beq.n	8007be0 <_scanf_float+0x3d8>
 8007b9e:	9903      	ldr	r1, [sp, #12]
 8007ba0:	600a      	str	r2, [r1, #0]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	e9c3 6700 	strd	r6, r7, [r3]
 8007ba8:	68e3      	ldr	r3, [r4, #12]
 8007baa:	3301      	adds	r3, #1
 8007bac:	60e3      	str	r3, [r4, #12]
 8007bae:	e66c      	b.n	800788a <_scanf_float+0x82>
 8007bb0:	9b04      	ldr	r3, [sp, #16]
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d0e4      	beq.n	8007b80 <_scanf_float+0x378>
 8007bb6:	9905      	ldr	r1, [sp, #20]
 8007bb8:	230a      	movs	r3, #10
 8007bba:	462a      	mov	r2, r5
 8007bbc:	3101      	adds	r1, #1
 8007bbe:	4640      	mov	r0, r8
 8007bc0:	f000 ff0a 	bl	80089d8 <_strtol_r>
 8007bc4:	9b04      	ldr	r3, [sp, #16]
 8007bc6:	9e05      	ldr	r6, [sp, #20]
 8007bc8:	1ac2      	subs	r2, r0, r3
 8007bca:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8007bce:	429e      	cmp	r6, r3
 8007bd0:	bf28      	it	cs
 8007bd2:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8007bd6:	4912      	ldr	r1, [pc, #72]	; (8007c20 <_scanf_float+0x418>)
 8007bd8:	4630      	mov	r0, r6
 8007bda:	f000 f82b 	bl	8007c34 <siprintf>
 8007bde:	e7cf      	b.n	8007b80 <_scanf_float+0x378>
 8007be0:	f011 0f04 	tst.w	r1, #4
 8007be4:	9903      	ldr	r1, [sp, #12]
 8007be6:	600a      	str	r2, [r1, #0]
 8007be8:	d1db      	bne.n	8007ba2 <_scanf_float+0x39a>
 8007bea:	f8d3 8000 	ldr.w	r8, [r3]
 8007bee:	ee10 2a10 	vmov	r2, s0
 8007bf2:	ee10 0a10 	vmov	r0, s0
 8007bf6:	463b      	mov	r3, r7
 8007bf8:	4639      	mov	r1, r7
 8007bfa:	f7f8 ffb7 	bl	8000b6c <__aeabi_dcmpun>
 8007bfe:	b128      	cbz	r0, 8007c0c <_scanf_float+0x404>
 8007c00:	4808      	ldr	r0, [pc, #32]	; (8007c24 <_scanf_float+0x41c>)
 8007c02:	f000 f811 	bl	8007c28 <nanf>
 8007c06:	ed88 0a00 	vstr	s0, [r8]
 8007c0a:	e7cd      	b.n	8007ba8 <_scanf_float+0x3a0>
 8007c0c:	4630      	mov	r0, r6
 8007c0e:	4639      	mov	r1, r7
 8007c10:	f7f9 f80a 	bl	8000c28 <__aeabi_d2f>
 8007c14:	f8c8 0000 	str.w	r0, [r8]
 8007c18:	e7c6      	b.n	8007ba8 <_scanf_float+0x3a0>
 8007c1a:	2500      	movs	r5, #0
 8007c1c:	e635      	b.n	800788a <_scanf_float+0x82>
 8007c1e:	bf00      	nop
 8007c20:	0800bebc 	.word	0x0800bebc
 8007c24:	0800c2d8 	.word	0x0800c2d8

08007c28 <nanf>:
 8007c28:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8007c30 <nanf+0x8>
 8007c2c:	4770      	bx	lr
 8007c2e:	bf00      	nop
 8007c30:	7fc00000 	.word	0x7fc00000

08007c34 <siprintf>:
 8007c34:	b40e      	push	{r1, r2, r3}
 8007c36:	b500      	push	{lr}
 8007c38:	b09c      	sub	sp, #112	; 0x70
 8007c3a:	ab1d      	add	r3, sp, #116	; 0x74
 8007c3c:	9002      	str	r0, [sp, #8]
 8007c3e:	9006      	str	r0, [sp, #24]
 8007c40:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007c44:	4809      	ldr	r0, [pc, #36]	; (8007c6c <siprintf+0x38>)
 8007c46:	9107      	str	r1, [sp, #28]
 8007c48:	9104      	str	r1, [sp, #16]
 8007c4a:	4909      	ldr	r1, [pc, #36]	; (8007c70 <siprintf+0x3c>)
 8007c4c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007c50:	9105      	str	r1, [sp, #20]
 8007c52:	6800      	ldr	r0, [r0, #0]
 8007c54:	9301      	str	r3, [sp, #4]
 8007c56:	a902      	add	r1, sp, #8
 8007c58:	f002 fea6 	bl	800a9a8 <_svfiprintf_r>
 8007c5c:	9b02      	ldr	r3, [sp, #8]
 8007c5e:	2200      	movs	r2, #0
 8007c60:	701a      	strb	r2, [r3, #0]
 8007c62:	b01c      	add	sp, #112	; 0x70
 8007c64:	f85d eb04 	ldr.w	lr, [sp], #4
 8007c68:	b003      	add	sp, #12
 8007c6a:	4770      	bx	lr
 8007c6c:	20000010 	.word	0x20000010
 8007c70:	ffff0208 	.word	0xffff0208

08007c74 <sulp>:
 8007c74:	b570      	push	{r4, r5, r6, lr}
 8007c76:	4604      	mov	r4, r0
 8007c78:	460d      	mov	r5, r1
 8007c7a:	ec45 4b10 	vmov	d0, r4, r5
 8007c7e:	4616      	mov	r6, r2
 8007c80:	f002 fc2e 	bl	800a4e0 <__ulp>
 8007c84:	ec51 0b10 	vmov	r0, r1, d0
 8007c88:	b17e      	cbz	r6, 8007caa <sulp+0x36>
 8007c8a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8007c8e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	dd09      	ble.n	8007caa <sulp+0x36>
 8007c96:	051b      	lsls	r3, r3, #20
 8007c98:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8007c9c:	2400      	movs	r4, #0
 8007c9e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8007ca2:	4622      	mov	r2, r4
 8007ca4:	462b      	mov	r3, r5
 8007ca6:	f7f8 fcc7 	bl	8000638 <__aeabi_dmul>
 8007caa:	bd70      	pop	{r4, r5, r6, pc}
 8007cac:	0000      	movs	r0, r0
	...

08007cb0 <_strtod_l>:
 8007cb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cb4:	b0a3      	sub	sp, #140	; 0x8c
 8007cb6:	461f      	mov	r7, r3
 8007cb8:	2300      	movs	r3, #0
 8007cba:	931e      	str	r3, [sp, #120]	; 0x78
 8007cbc:	4ba4      	ldr	r3, [pc, #656]	; (8007f50 <_strtod_l+0x2a0>)
 8007cbe:	9219      	str	r2, [sp, #100]	; 0x64
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	9307      	str	r3, [sp, #28]
 8007cc4:	4604      	mov	r4, r0
 8007cc6:	4618      	mov	r0, r3
 8007cc8:	4688      	mov	r8, r1
 8007cca:	f7f8 faa1 	bl	8000210 <strlen>
 8007cce:	f04f 0a00 	mov.w	sl, #0
 8007cd2:	4605      	mov	r5, r0
 8007cd4:	f04f 0b00 	mov.w	fp, #0
 8007cd8:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8007cdc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007cde:	781a      	ldrb	r2, [r3, #0]
 8007ce0:	2a2b      	cmp	r2, #43	; 0x2b
 8007ce2:	d04c      	beq.n	8007d7e <_strtod_l+0xce>
 8007ce4:	d839      	bhi.n	8007d5a <_strtod_l+0xaa>
 8007ce6:	2a0d      	cmp	r2, #13
 8007ce8:	d832      	bhi.n	8007d50 <_strtod_l+0xa0>
 8007cea:	2a08      	cmp	r2, #8
 8007cec:	d832      	bhi.n	8007d54 <_strtod_l+0xa4>
 8007cee:	2a00      	cmp	r2, #0
 8007cf0:	d03c      	beq.n	8007d6c <_strtod_l+0xbc>
 8007cf2:	2300      	movs	r3, #0
 8007cf4:	930e      	str	r3, [sp, #56]	; 0x38
 8007cf6:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8007cf8:	7833      	ldrb	r3, [r6, #0]
 8007cfa:	2b30      	cmp	r3, #48	; 0x30
 8007cfc:	f040 80b4 	bne.w	8007e68 <_strtod_l+0x1b8>
 8007d00:	7873      	ldrb	r3, [r6, #1]
 8007d02:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8007d06:	2b58      	cmp	r3, #88	; 0x58
 8007d08:	d16c      	bne.n	8007de4 <_strtod_l+0x134>
 8007d0a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007d0c:	9301      	str	r3, [sp, #4]
 8007d0e:	ab1e      	add	r3, sp, #120	; 0x78
 8007d10:	9702      	str	r7, [sp, #8]
 8007d12:	9300      	str	r3, [sp, #0]
 8007d14:	4a8f      	ldr	r2, [pc, #572]	; (8007f54 <_strtod_l+0x2a4>)
 8007d16:	ab1f      	add	r3, sp, #124	; 0x7c
 8007d18:	a91d      	add	r1, sp, #116	; 0x74
 8007d1a:	4620      	mov	r0, r4
 8007d1c:	f001 fd40 	bl	80097a0 <__gethex>
 8007d20:	f010 0707 	ands.w	r7, r0, #7
 8007d24:	4605      	mov	r5, r0
 8007d26:	d005      	beq.n	8007d34 <_strtod_l+0x84>
 8007d28:	2f06      	cmp	r7, #6
 8007d2a:	d12a      	bne.n	8007d82 <_strtod_l+0xd2>
 8007d2c:	3601      	adds	r6, #1
 8007d2e:	2300      	movs	r3, #0
 8007d30:	961d      	str	r6, [sp, #116]	; 0x74
 8007d32:	930e      	str	r3, [sp, #56]	; 0x38
 8007d34:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	f040 8596 	bne.w	8008868 <_strtod_l+0xbb8>
 8007d3c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007d3e:	b1db      	cbz	r3, 8007d78 <_strtod_l+0xc8>
 8007d40:	4652      	mov	r2, sl
 8007d42:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8007d46:	ec43 2b10 	vmov	d0, r2, r3
 8007d4a:	b023      	add	sp, #140	; 0x8c
 8007d4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d50:	2a20      	cmp	r2, #32
 8007d52:	d1ce      	bne.n	8007cf2 <_strtod_l+0x42>
 8007d54:	3301      	adds	r3, #1
 8007d56:	931d      	str	r3, [sp, #116]	; 0x74
 8007d58:	e7c0      	b.n	8007cdc <_strtod_l+0x2c>
 8007d5a:	2a2d      	cmp	r2, #45	; 0x2d
 8007d5c:	d1c9      	bne.n	8007cf2 <_strtod_l+0x42>
 8007d5e:	2201      	movs	r2, #1
 8007d60:	920e      	str	r2, [sp, #56]	; 0x38
 8007d62:	1c5a      	adds	r2, r3, #1
 8007d64:	921d      	str	r2, [sp, #116]	; 0x74
 8007d66:	785b      	ldrb	r3, [r3, #1]
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d1c4      	bne.n	8007cf6 <_strtod_l+0x46>
 8007d6c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007d6e:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	f040 8576 	bne.w	8008864 <_strtod_l+0xbb4>
 8007d78:	4652      	mov	r2, sl
 8007d7a:	465b      	mov	r3, fp
 8007d7c:	e7e3      	b.n	8007d46 <_strtod_l+0x96>
 8007d7e:	2200      	movs	r2, #0
 8007d80:	e7ee      	b.n	8007d60 <_strtod_l+0xb0>
 8007d82:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8007d84:	b13a      	cbz	r2, 8007d96 <_strtod_l+0xe6>
 8007d86:	2135      	movs	r1, #53	; 0x35
 8007d88:	a820      	add	r0, sp, #128	; 0x80
 8007d8a:	f002 fcb4 	bl	800a6f6 <__copybits>
 8007d8e:	991e      	ldr	r1, [sp, #120]	; 0x78
 8007d90:	4620      	mov	r0, r4
 8007d92:	f002 f879 	bl	8009e88 <_Bfree>
 8007d96:	3f01      	subs	r7, #1
 8007d98:	2f05      	cmp	r7, #5
 8007d9a:	d807      	bhi.n	8007dac <_strtod_l+0xfc>
 8007d9c:	e8df f007 	tbb	[pc, r7]
 8007da0:	1d180b0e 	.word	0x1d180b0e
 8007da4:	030e      	.short	0x030e
 8007da6:	f04f 0b00 	mov.w	fp, #0
 8007daa:	46da      	mov	sl, fp
 8007dac:	0728      	lsls	r0, r5, #28
 8007dae:	d5c1      	bpl.n	8007d34 <_strtod_l+0x84>
 8007db0:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8007db4:	e7be      	b.n	8007d34 <_strtod_l+0x84>
 8007db6:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 8007dba:	e7f7      	b.n	8007dac <_strtod_l+0xfc>
 8007dbc:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 8007dc0:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8007dc2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8007dc6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8007dca:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8007dce:	e7ed      	b.n	8007dac <_strtod_l+0xfc>
 8007dd0:	f8df b184 	ldr.w	fp, [pc, #388]	; 8007f58 <_strtod_l+0x2a8>
 8007dd4:	f04f 0a00 	mov.w	sl, #0
 8007dd8:	e7e8      	b.n	8007dac <_strtod_l+0xfc>
 8007dda:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8007dde:	f04f 3aff 	mov.w	sl, #4294967295
 8007de2:	e7e3      	b.n	8007dac <_strtod_l+0xfc>
 8007de4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007de6:	1c5a      	adds	r2, r3, #1
 8007de8:	921d      	str	r2, [sp, #116]	; 0x74
 8007dea:	785b      	ldrb	r3, [r3, #1]
 8007dec:	2b30      	cmp	r3, #48	; 0x30
 8007dee:	d0f9      	beq.n	8007de4 <_strtod_l+0x134>
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d09f      	beq.n	8007d34 <_strtod_l+0x84>
 8007df4:	2301      	movs	r3, #1
 8007df6:	f04f 0900 	mov.w	r9, #0
 8007dfa:	9304      	str	r3, [sp, #16]
 8007dfc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007dfe:	930a      	str	r3, [sp, #40]	; 0x28
 8007e00:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8007e04:	464f      	mov	r7, r9
 8007e06:	220a      	movs	r2, #10
 8007e08:	981d      	ldr	r0, [sp, #116]	; 0x74
 8007e0a:	7806      	ldrb	r6, [r0, #0]
 8007e0c:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8007e10:	b2d9      	uxtb	r1, r3
 8007e12:	2909      	cmp	r1, #9
 8007e14:	d92a      	bls.n	8007e6c <_strtod_l+0x1bc>
 8007e16:	9907      	ldr	r1, [sp, #28]
 8007e18:	462a      	mov	r2, r5
 8007e1a:	f002 fedd 	bl	800abd8 <strncmp>
 8007e1e:	b398      	cbz	r0, 8007e88 <_strtod_l+0x1d8>
 8007e20:	2000      	movs	r0, #0
 8007e22:	4633      	mov	r3, r6
 8007e24:	463d      	mov	r5, r7
 8007e26:	9007      	str	r0, [sp, #28]
 8007e28:	4602      	mov	r2, r0
 8007e2a:	2b65      	cmp	r3, #101	; 0x65
 8007e2c:	d001      	beq.n	8007e32 <_strtod_l+0x182>
 8007e2e:	2b45      	cmp	r3, #69	; 0x45
 8007e30:	d118      	bne.n	8007e64 <_strtod_l+0x1b4>
 8007e32:	b91d      	cbnz	r5, 8007e3c <_strtod_l+0x18c>
 8007e34:	9b04      	ldr	r3, [sp, #16]
 8007e36:	4303      	orrs	r3, r0
 8007e38:	d098      	beq.n	8007d6c <_strtod_l+0xbc>
 8007e3a:	2500      	movs	r5, #0
 8007e3c:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 8007e40:	f108 0301 	add.w	r3, r8, #1
 8007e44:	931d      	str	r3, [sp, #116]	; 0x74
 8007e46:	f898 3001 	ldrb.w	r3, [r8, #1]
 8007e4a:	2b2b      	cmp	r3, #43	; 0x2b
 8007e4c:	d075      	beq.n	8007f3a <_strtod_l+0x28a>
 8007e4e:	2b2d      	cmp	r3, #45	; 0x2d
 8007e50:	d07b      	beq.n	8007f4a <_strtod_l+0x29a>
 8007e52:	f04f 0c00 	mov.w	ip, #0
 8007e56:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8007e5a:	2909      	cmp	r1, #9
 8007e5c:	f240 8082 	bls.w	8007f64 <_strtod_l+0x2b4>
 8007e60:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8007e64:	2600      	movs	r6, #0
 8007e66:	e09d      	b.n	8007fa4 <_strtod_l+0x2f4>
 8007e68:	2300      	movs	r3, #0
 8007e6a:	e7c4      	b.n	8007df6 <_strtod_l+0x146>
 8007e6c:	2f08      	cmp	r7, #8
 8007e6e:	bfd8      	it	le
 8007e70:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8007e72:	f100 0001 	add.w	r0, r0, #1
 8007e76:	bfda      	itte	le
 8007e78:	fb02 3301 	mlale	r3, r2, r1, r3
 8007e7c:	9309      	strle	r3, [sp, #36]	; 0x24
 8007e7e:	fb02 3909 	mlagt	r9, r2, r9, r3
 8007e82:	3701      	adds	r7, #1
 8007e84:	901d      	str	r0, [sp, #116]	; 0x74
 8007e86:	e7bf      	b.n	8007e08 <_strtod_l+0x158>
 8007e88:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007e8a:	195a      	adds	r2, r3, r5
 8007e8c:	921d      	str	r2, [sp, #116]	; 0x74
 8007e8e:	5d5b      	ldrb	r3, [r3, r5]
 8007e90:	2f00      	cmp	r7, #0
 8007e92:	d037      	beq.n	8007f04 <_strtod_l+0x254>
 8007e94:	9007      	str	r0, [sp, #28]
 8007e96:	463d      	mov	r5, r7
 8007e98:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8007e9c:	2a09      	cmp	r2, #9
 8007e9e:	d912      	bls.n	8007ec6 <_strtod_l+0x216>
 8007ea0:	2201      	movs	r2, #1
 8007ea2:	e7c2      	b.n	8007e2a <_strtod_l+0x17a>
 8007ea4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007ea6:	1c5a      	adds	r2, r3, #1
 8007ea8:	921d      	str	r2, [sp, #116]	; 0x74
 8007eaa:	785b      	ldrb	r3, [r3, #1]
 8007eac:	3001      	adds	r0, #1
 8007eae:	2b30      	cmp	r3, #48	; 0x30
 8007eb0:	d0f8      	beq.n	8007ea4 <_strtod_l+0x1f4>
 8007eb2:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8007eb6:	2a08      	cmp	r2, #8
 8007eb8:	f200 84db 	bhi.w	8008872 <_strtod_l+0xbc2>
 8007ebc:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8007ebe:	9007      	str	r0, [sp, #28]
 8007ec0:	2000      	movs	r0, #0
 8007ec2:	920a      	str	r2, [sp, #40]	; 0x28
 8007ec4:	4605      	mov	r5, r0
 8007ec6:	3b30      	subs	r3, #48	; 0x30
 8007ec8:	f100 0201 	add.w	r2, r0, #1
 8007ecc:	d014      	beq.n	8007ef8 <_strtod_l+0x248>
 8007ece:	9907      	ldr	r1, [sp, #28]
 8007ed0:	4411      	add	r1, r2
 8007ed2:	9107      	str	r1, [sp, #28]
 8007ed4:	462a      	mov	r2, r5
 8007ed6:	eb00 0e05 	add.w	lr, r0, r5
 8007eda:	210a      	movs	r1, #10
 8007edc:	4572      	cmp	r2, lr
 8007ede:	d113      	bne.n	8007f08 <_strtod_l+0x258>
 8007ee0:	182a      	adds	r2, r5, r0
 8007ee2:	2a08      	cmp	r2, #8
 8007ee4:	f105 0501 	add.w	r5, r5, #1
 8007ee8:	4405      	add	r5, r0
 8007eea:	dc1c      	bgt.n	8007f26 <_strtod_l+0x276>
 8007eec:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007eee:	220a      	movs	r2, #10
 8007ef0:	fb02 3301 	mla	r3, r2, r1, r3
 8007ef4:	9309      	str	r3, [sp, #36]	; 0x24
 8007ef6:	2200      	movs	r2, #0
 8007ef8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007efa:	1c59      	adds	r1, r3, #1
 8007efc:	911d      	str	r1, [sp, #116]	; 0x74
 8007efe:	785b      	ldrb	r3, [r3, #1]
 8007f00:	4610      	mov	r0, r2
 8007f02:	e7c9      	b.n	8007e98 <_strtod_l+0x1e8>
 8007f04:	4638      	mov	r0, r7
 8007f06:	e7d2      	b.n	8007eae <_strtod_l+0x1fe>
 8007f08:	2a08      	cmp	r2, #8
 8007f0a:	dc04      	bgt.n	8007f16 <_strtod_l+0x266>
 8007f0c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8007f0e:	434e      	muls	r6, r1
 8007f10:	9609      	str	r6, [sp, #36]	; 0x24
 8007f12:	3201      	adds	r2, #1
 8007f14:	e7e2      	b.n	8007edc <_strtod_l+0x22c>
 8007f16:	f102 0c01 	add.w	ip, r2, #1
 8007f1a:	f1bc 0f10 	cmp.w	ip, #16
 8007f1e:	bfd8      	it	le
 8007f20:	fb01 f909 	mulle.w	r9, r1, r9
 8007f24:	e7f5      	b.n	8007f12 <_strtod_l+0x262>
 8007f26:	2d10      	cmp	r5, #16
 8007f28:	bfdc      	itt	le
 8007f2a:	220a      	movle	r2, #10
 8007f2c:	fb02 3909 	mlale	r9, r2, r9, r3
 8007f30:	e7e1      	b.n	8007ef6 <_strtod_l+0x246>
 8007f32:	2300      	movs	r3, #0
 8007f34:	9307      	str	r3, [sp, #28]
 8007f36:	2201      	movs	r2, #1
 8007f38:	e77c      	b.n	8007e34 <_strtod_l+0x184>
 8007f3a:	f04f 0c00 	mov.w	ip, #0
 8007f3e:	f108 0302 	add.w	r3, r8, #2
 8007f42:	931d      	str	r3, [sp, #116]	; 0x74
 8007f44:	f898 3002 	ldrb.w	r3, [r8, #2]
 8007f48:	e785      	b.n	8007e56 <_strtod_l+0x1a6>
 8007f4a:	f04f 0c01 	mov.w	ip, #1
 8007f4e:	e7f6      	b.n	8007f3e <_strtod_l+0x28e>
 8007f50:	0800c118 	.word	0x0800c118
 8007f54:	0800bec4 	.word	0x0800bec4
 8007f58:	7ff00000 	.word	0x7ff00000
 8007f5c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007f5e:	1c59      	adds	r1, r3, #1
 8007f60:	911d      	str	r1, [sp, #116]	; 0x74
 8007f62:	785b      	ldrb	r3, [r3, #1]
 8007f64:	2b30      	cmp	r3, #48	; 0x30
 8007f66:	d0f9      	beq.n	8007f5c <_strtod_l+0x2ac>
 8007f68:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 8007f6c:	2908      	cmp	r1, #8
 8007f6e:	f63f af79 	bhi.w	8007e64 <_strtod_l+0x1b4>
 8007f72:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8007f76:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007f78:	9308      	str	r3, [sp, #32]
 8007f7a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007f7c:	1c59      	adds	r1, r3, #1
 8007f7e:	911d      	str	r1, [sp, #116]	; 0x74
 8007f80:	785b      	ldrb	r3, [r3, #1]
 8007f82:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 8007f86:	2e09      	cmp	r6, #9
 8007f88:	d937      	bls.n	8007ffa <_strtod_l+0x34a>
 8007f8a:	9e08      	ldr	r6, [sp, #32]
 8007f8c:	1b89      	subs	r1, r1, r6
 8007f8e:	2908      	cmp	r1, #8
 8007f90:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8007f94:	dc02      	bgt.n	8007f9c <_strtod_l+0x2ec>
 8007f96:	4576      	cmp	r6, lr
 8007f98:	bfa8      	it	ge
 8007f9a:	4676      	movge	r6, lr
 8007f9c:	f1bc 0f00 	cmp.w	ip, #0
 8007fa0:	d000      	beq.n	8007fa4 <_strtod_l+0x2f4>
 8007fa2:	4276      	negs	r6, r6
 8007fa4:	2d00      	cmp	r5, #0
 8007fa6:	d14f      	bne.n	8008048 <_strtod_l+0x398>
 8007fa8:	9904      	ldr	r1, [sp, #16]
 8007faa:	4301      	orrs	r1, r0
 8007fac:	f47f aec2 	bne.w	8007d34 <_strtod_l+0x84>
 8007fb0:	2a00      	cmp	r2, #0
 8007fb2:	f47f aedb 	bne.w	8007d6c <_strtod_l+0xbc>
 8007fb6:	2b69      	cmp	r3, #105	; 0x69
 8007fb8:	d027      	beq.n	800800a <_strtod_l+0x35a>
 8007fba:	dc24      	bgt.n	8008006 <_strtod_l+0x356>
 8007fbc:	2b49      	cmp	r3, #73	; 0x49
 8007fbe:	d024      	beq.n	800800a <_strtod_l+0x35a>
 8007fc0:	2b4e      	cmp	r3, #78	; 0x4e
 8007fc2:	f47f aed3 	bne.w	8007d6c <_strtod_l+0xbc>
 8007fc6:	499e      	ldr	r1, [pc, #632]	; (8008240 <_strtod_l+0x590>)
 8007fc8:	a81d      	add	r0, sp, #116	; 0x74
 8007fca:	f001 fe41 	bl	8009c50 <__match>
 8007fce:	2800      	cmp	r0, #0
 8007fd0:	f43f aecc 	beq.w	8007d6c <_strtod_l+0xbc>
 8007fd4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007fd6:	781b      	ldrb	r3, [r3, #0]
 8007fd8:	2b28      	cmp	r3, #40	; 0x28
 8007fda:	d12d      	bne.n	8008038 <_strtod_l+0x388>
 8007fdc:	4999      	ldr	r1, [pc, #612]	; (8008244 <_strtod_l+0x594>)
 8007fde:	aa20      	add	r2, sp, #128	; 0x80
 8007fe0:	a81d      	add	r0, sp, #116	; 0x74
 8007fe2:	f001 fe49 	bl	8009c78 <__hexnan>
 8007fe6:	2805      	cmp	r0, #5
 8007fe8:	d126      	bne.n	8008038 <_strtod_l+0x388>
 8007fea:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007fec:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 8007ff0:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8007ff4:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8007ff8:	e69c      	b.n	8007d34 <_strtod_l+0x84>
 8007ffa:	210a      	movs	r1, #10
 8007ffc:	fb01 3e0e 	mla	lr, r1, lr, r3
 8008000:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8008004:	e7b9      	b.n	8007f7a <_strtod_l+0x2ca>
 8008006:	2b6e      	cmp	r3, #110	; 0x6e
 8008008:	e7db      	b.n	8007fc2 <_strtod_l+0x312>
 800800a:	498f      	ldr	r1, [pc, #572]	; (8008248 <_strtod_l+0x598>)
 800800c:	a81d      	add	r0, sp, #116	; 0x74
 800800e:	f001 fe1f 	bl	8009c50 <__match>
 8008012:	2800      	cmp	r0, #0
 8008014:	f43f aeaa 	beq.w	8007d6c <_strtod_l+0xbc>
 8008018:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800801a:	498c      	ldr	r1, [pc, #560]	; (800824c <_strtod_l+0x59c>)
 800801c:	3b01      	subs	r3, #1
 800801e:	a81d      	add	r0, sp, #116	; 0x74
 8008020:	931d      	str	r3, [sp, #116]	; 0x74
 8008022:	f001 fe15 	bl	8009c50 <__match>
 8008026:	b910      	cbnz	r0, 800802e <_strtod_l+0x37e>
 8008028:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800802a:	3301      	adds	r3, #1
 800802c:	931d      	str	r3, [sp, #116]	; 0x74
 800802e:	f8df b22c 	ldr.w	fp, [pc, #556]	; 800825c <_strtod_l+0x5ac>
 8008032:	f04f 0a00 	mov.w	sl, #0
 8008036:	e67d      	b.n	8007d34 <_strtod_l+0x84>
 8008038:	4885      	ldr	r0, [pc, #532]	; (8008250 <_strtod_l+0x5a0>)
 800803a:	f002 fdb5 	bl	800aba8 <nan>
 800803e:	ed8d 0b04 	vstr	d0, [sp, #16]
 8008042:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8008046:	e675      	b.n	8007d34 <_strtod_l+0x84>
 8008048:	9b07      	ldr	r3, [sp, #28]
 800804a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800804c:	1af3      	subs	r3, r6, r3
 800804e:	2f00      	cmp	r7, #0
 8008050:	bf08      	it	eq
 8008052:	462f      	moveq	r7, r5
 8008054:	2d10      	cmp	r5, #16
 8008056:	9308      	str	r3, [sp, #32]
 8008058:	46a8      	mov	r8, r5
 800805a:	bfa8      	it	ge
 800805c:	f04f 0810 	movge.w	r8, #16
 8008060:	f7f8 fa70 	bl	8000544 <__aeabi_ui2d>
 8008064:	2d09      	cmp	r5, #9
 8008066:	4682      	mov	sl, r0
 8008068:	468b      	mov	fp, r1
 800806a:	dd13      	ble.n	8008094 <_strtod_l+0x3e4>
 800806c:	4b79      	ldr	r3, [pc, #484]	; (8008254 <_strtod_l+0x5a4>)
 800806e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8008072:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8008076:	f7f8 fadf 	bl	8000638 <__aeabi_dmul>
 800807a:	4682      	mov	sl, r0
 800807c:	4648      	mov	r0, r9
 800807e:	468b      	mov	fp, r1
 8008080:	f7f8 fa60 	bl	8000544 <__aeabi_ui2d>
 8008084:	4602      	mov	r2, r0
 8008086:	460b      	mov	r3, r1
 8008088:	4650      	mov	r0, sl
 800808a:	4659      	mov	r1, fp
 800808c:	f7f8 f91e 	bl	80002cc <__adddf3>
 8008090:	4682      	mov	sl, r0
 8008092:	468b      	mov	fp, r1
 8008094:	2d0f      	cmp	r5, #15
 8008096:	dc38      	bgt.n	800810a <_strtod_l+0x45a>
 8008098:	9b08      	ldr	r3, [sp, #32]
 800809a:	2b00      	cmp	r3, #0
 800809c:	f43f ae4a 	beq.w	8007d34 <_strtod_l+0x84>
 80080a0:	dd24      	ble.n	80080ec <_strtod_l+0x43c>
 80080a2:	2b16      	cmp	r3, #22
 80080a4:	dc0b      	bgt.n	80080be <_strtod_l+0x40e>
 80080a6:	4d6b      	ldr	r5, [pc, #428]	; (8008254 <_strtod_l+0x5a4>)
 80080a8:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 80080ac:	e9d5 0100 	ldrd	r0, r1, [r5]
 80080b0:	4652      	mov	r2, sl
 80080b2:	465b      	mov	r3, fp
 80080b4:	f7f8 fac0 	bl	8000638 <__aeabi_dmul>
 80080b8:	4682      	mov	sl, r0
 80080ba:	468b      	mov	fp, r1
 80080bc:	e63a      	b.n	8007d34 <_strtod_l+0x84>
 80080be:	9a08      	ldr	r2, [sp, #32]
 80080c0:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 80080c4:	4293      	cmp	r3, r2
 80080c6:	db20      	blt.n	800810a <_strtod_l+0x45a>
 80080c8:	4c62      	ldr	r4, [pc, #392]	; (8008254 <_strtod_l+0x5a4>)
 80080ca:	f1c5 050f 	rsb	r5, r5, #15
 80080ce:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80080d2:	4652      	mov	r2, sl
 80080d4:	465b      	mov	r3, fp
 80080d6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80080da:	f7f8 faad 	bl	8000638 <__aeabi_dmul>
 80080de:	9b08      	ldr	r3, [sp, #32]
 80080e0:	1b5d      	subs	r5, r3, r5
 80080e2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80080e6:	e9d4 2300 	ldrd	r2, r3, [r4]
 80080ea:	e7e3      	b.n	80080b4 <_strtod_l+0x404>
 80080ec:	9b08      	ldr	r3, [sp, #32]
 80080ee:	3316      	adds	r3, #22
 80080f0:	db0b      	blt.n	800810a <_strtod_l+0x45a>
 80080f2:	9b07      	ldr	r3, [sp, #28]
 80080f4:	4a57      	ldr	r2, [pc, #348]	; (8008254 <_strtod_l+0x5a4>)
 80080f6:	1b9e      	subs	r6, r3, r6
 80080f8:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 80080fc:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008100:	4650      	mov	r0, sl
 8008102:	4659      	mov	r1, fp
 8008104:	f7f8 fbc2 	bl	800088c <__aeabi_ddiv>
 8008108:	e7d6      	b.n	80080b8 <_strtod_l+0x408>
 800810a:	9b08      	ldr	r3, [sp, #32]
 800810c:	eba5 0808 	sub.w	r8, r5, r8
 8008110:	4498      	add	r8, r3
 8008112:	f1b8 0f00 	cmp.w	r8, #0
 8008116:	dd71      	ble.n	80081fc <_strtod_l+0x54c>
 8008118:	f018 030f 	ands.w	r3, r8, #15
 800811c:	d00a      	beq.n	8008134 <_strtod_l+0x484>
 800811e:	494d      	ldr	r1, [pc, #308]	; (8008254 <_strtod_l+0x5a4>)
 8008120:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008124:	4652      	mov	r2, sl
 8008126:	465b      	mov	r3, fp
 8008128:	e9d1 0100 	ldrd	r0, r1, [r1]
 800812c:	f7f8 fa84 	bl	8000638 <__aeabi_dmul>
 8008130:	4682      	mov	sl, r0
 8008132:	468b      	mov	fp, r1
 8008134:	f038 080f 	bics.w	r8, r8, #15
 8008138:	d04d      	beq.n	80081d6 <_strtod_l+0x526>
 800813a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800813e:	dd22      	ble.n	8008186 <_strtod_l+0x4d6>
 8008140:	2500      	movs	r5, #0
 8008142:	462e      	mov	r6, r5
 8008144:	9509      	str	r5, [sp, #36]	; 0x24
 8008146:	9507      	str	r5, [sp, #28]
 8008148:	2322      	movs	r3, #34	; 0x22
 800814a:	f8df b110 	ldr.w	fp, [pc, #272]	; 800825c <_strtod_l+0x5ac>
 800814e:	6023      	str	r3, [r4, #0]
 8008150:	f04f 0a00 	mov.w	sl, #0
 8008154:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008156:	2b00      	cmp	r3, #0
 8008158:	f43f adec 	beq.w	8007d34 <_strtod_l+0x84>
 800815c:	991e      	ldr	r1, [sp, #120]	; 0x78
 800815e:	4620      	mov	r0, r4
 8008160:	f001 fe92 	bl	8009e88 <_Bfree>
 8008164:	9907      	ldr	r1, [sp, #28]
 8008166:	4620      	mov	r0, r4
 8008168:	f001 fe8e 	bl	8009e88 <_Bfree>
 800816c:	4631      	mov	r1, r6
 800816e:	4620      	mov	r0, r4
 8008170:	f001 fe8a 	bl	8009e88 <_Bfree>
 8008174:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008176:	4620      	mov	r0, r4
 8008178:	f001 fe86 	bl	8009e88 <_Bfree>
 800817c:	4629      	mov	r1, r5
 800817e:	4620      	mov	r0, r4
 8008180:	f001 fe82 	bl	8009e88 <_Bfree>
 8008184:	e5d6      	b.n	8007d34 <_strtod_l+0x84>
 8008186:	2300      	movs	r3, #0
 8008188:	ea4f 1828 	mov.w	r8, r8, asr #4
 800818c:	4650      	mov	r0, sl
 800818e:	4659      	mov	r1, fp
 8008190:	4699      	mov	r9, r3
 8008192:	f1b8 0f01 	cmp.w	r8, #1
 8008196:	dc21      	bgt.n	80081dc <_strtod_l+0x52c>
 8008198:	b10b      	cbz	r3, 800819e <_strtod_l+0x4ee>
 800819a:	4682      	mov	sl, r0
 800819c:	468b      	mov	fp, r1
 800819e:	4b2e      	ldr	r3, [pc, #184]	; (8008258 <_strtod_l+0x5a8>)
 80081a0:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 80081a4:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 80081a8:	4652      	mov	r2, sl
 80081aa:	465b      	mov	r3, fp
 80081ac:	e9d9 0100 	ldrd	r0, r1, [r9]
 80081b0:	f7f8 fa42 	bl	8000638 <__aeabi_dmul>
 80081b4:	4b29      	ldr	r3, [pc, #164]	; (800825c <_strtod_l+0x5ac>)
 80081b6:	460a      	mov	r2, r1
 80081b8:	400b      	ands	r3, r1
 80081ba:	4929      	ldr	r1, [pc, #164]	; (8008260 <_strtod_l+0x5b0>)
 80081bc:	428b      	cmp	r3, r1
 80081be:	4682      	mov	sl, r0
 80081c0:	d8be      	bhi.n	8008140 <_strtod_l+0x490>
 80081c2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80081c6:	428b      	cmp	r3, r1
 80081c8:	bf86      	itte	hi
 80081ca:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8008264 <_strtod_l+0x5b4>
 80081ce:	f04f 3aff 	movhi.w	sl, #4294967295
 80081d2:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 80081d6:	2300      	movs	r3, #0
 80081d8:	9304      	str	r3, [sp, #16]
 80081da:	e081      	b.n	80082e0 <_strtod_l+0x630>
 80081dc:	f018 0f01 	tst.w	r8, #1
 80081e0:	d007      	beq.n	80081f2 <_strtod_l+0x542>
 80081e2:	4b1d      	ldr	r3, [pc, #116]	; (8008258 <_strtod_l+0x5a8>)
 80081e4:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 80081e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081ec:	f7f8 fa24 	bl	8000638 <__aeabi_dmul>
 80081f0:	2301      	movs	r3, #1
 80081f2:	f109 0901 	add.w	r9, r9, #1
 80081f6:	ea4f 0868 	mov.w	r8, r8, asr #1
 80081fa:	e7ca      	b.n	8008192 <_strtod_l+0x4e2>
 80081fc:	d0eb      	beq.n	80081d6 <_strtod_l+0x526>
 80081fe:	f1c8 0800 	rsb	r8, r8, #0
 8008202:	f018 020f 	ands.w	r2, r8, #15
 8008206:	d00a      	beq.n	800821e <_strtod_l+0x56e>
 8008208:	4b12      	ldr	r3, [pc, #72]	; (8008254 <_strtod_l+0x5a4>)
 800820a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800820e:	4650      	mov	r0, sl
 8008210:	4659      	mov	r1, fp
 8008212:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008216:	f7f8 fb39 	bl	800088c <__aeabi_ddiv>
 800821a:	4682      	mov	sl, r0
 800821c:	468b      	mov	fp, r1
 800821e:	ea5f 1828 	movs.w	r8, r8, asr #4
 8008222:	d0d8      	beq.n	80081d6 <_strtod_l+0x526>
 8008224:	f1b8 0f1f 	cmp.w	r8, #31
 8008228:	dd1e      	ble.n	8008268 <_strtod_l+0x5b8>
 800822a:	2500      	movs	r5, #0
 800822c:	462e      	mov	r6, r5
 800822e:	9509      	str	r5, [sp, #36]	; 0x24
 8008230:	9507      	str	r5, [sp, #28]
 8008232:	2322      	movs	r3, #34	; 0x22
 8008234:	f04f 0a00 	mov.w	sl, #0
 8008238:	f04f 0b00 	mov.w	fp, #0
 800823c:	6023      	str	r3, [r4, #0]
 800823e:	e789      	b.n	8008154 <_strtod_l+0x4a4>
 8008240:	0800be95 	.word	0x0800be95
 8008244:	0800bed8 	.word	0x0800bed8
 8008248:	0800be8d 	.word	0x0800be8d
 800824c:	0800c01c 	.word	0x0800c01c
 8008250:	0800c2d8 	.word	0x0800c2d8
 8008254:	0800c1b8 	.word	0x0800c1b8
 8008258:	0800c190 	.word	0x0800c190
 800825c:	7ff00000 	.word	0x7ff00000
 8008260:	7ca00000 	.word	0x7ca00000
 8008264:	7fefffff 	.word	0x7fefffff
 8008268:	f018 0310 	ands.w	r3, r8, #16
 800826c:	bf18      	it	ne
 800826e:	236a      	movne	r3, #106	; 0x6a
 8008270:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 8008628 <_strtod_l+0x978>
 8008274:	9304      	str	r3, [sp, #16]
 8008276:	4650      	mov	r0, sl
 8008278:	4659      	mov	r1, fp
 800827a:	2300      	movs	r3, #0
 800827c:	f018 0f01 	tst.w	r8, #1
 8008280:	d004      	beq.n	800828c <_strtod_l+0x5dc>
 8008282:	e9d9 2300 	ldrd	r2, r3, [r9]
 8008286:	f7f8 f9d7 	bl	8000638 <__aeabi_dmul>
 800828a:	2301      	movs	r3, #1
 800828c:	ea5f 0868 	movs.w	r8, r8, asr #1
 8008290:	f109 0908 	add.w	r9, r9, #8
 8008294:	d1f2      	bne.n	800827c <_strtod_l+0x5cc>
 8008296:	b10b      	cbz	r3, 800829c <_strtod_l+0x5ec>
 8008298:	4682      	mov	sl, r0
 800829a:	468b      	mov	fp, r1
 800829c:	9b04      	ldr	r3, [sp, #16]
 800829e:	b1bb      	cbz	r3, 80082d0 <_strtod_l+0x620>
 80082a0:	f3cb 530a 	ubfx	r3, fp, #20, #11
 80082a4:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	4659      	mov	r1, fp
 80082ac:	dd10      	ble.n	80082d0 <_strtod_l+0x620>
 80082ae:	2b1f      	cmp	r3, #31
 80082b0:	f340 8128 	ble.w	8008504 <_strtod_l+0x854>
 80082b4:	2b34      	cmp	r3, #52	; 0x34
 80082b6:	bfde      	ittt	le
 80082b8:	3b20      	suble	r3, #32
 80082ba:	f04f 32ff 	movle.w	r2, #4294967295
 80082be:	fa02 f303 	lslle.w	r3, r2, r3
 80082c2:	f04f 0a00 	mov.w	sl, #0
 80082c6:	bfcc      	ite	gt
 80082c8:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 80082cc:	ea03 0b01 	andle.w	fp, r3, r1
 80082d0:	2200      	movs	r2, #0
 80082d2:	2300      	movs	r3, #0
 80082d4:	4650      	mov	r0, sl
 80082d6:	4659      	mov	r1, fp
 80082d8:	f7f8 fc16 	bl	8000b08 <__aeabi_dcmpeq>
 80082dc:	2800      	cmp	r0, #0
 80082de:	d1a4      	bne.n	800822a <_strtod_l+0x57a>
 80082e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80082e2:	9300      	str	r3, [sp, #0]
 80082e4:	990a      	ldr	r1, [sp, #40]	; 0x28
 80082e6:	462b      	mov	r3, r5
 80082e8:	463a      	mov	r2, r7
 80082ea:	4620      	mov	r0, r4
 80082ec:	f001 fe38 	bl	8009f60 <__s2b>
 80082f0:	9009      	str	r0, [sp, #36]	; 0x24
 80082f2:	2800      	cmp	r0, #0
 80082f4:	f43f af24 	beq.w	8008140 <_strtod_l+0x490>
 80082f8:	9b07      	ldr	r3, [sp, #28]
 80082fa:	1b9e      	subs	r6, r3, r6
 80082fc:	9b08      	ldr	r3, [sp, #32]
 80082fe:	2b00      	cmp	r3, #0
 8008300:	bfb4      	ite	lt
 8008302:	4633      	movlt	r3, r6
 8008304:	2300      	movge	r3, #0
 8008306:	9310      	str	r3, [sp, #64]	; 0x40
 8008308:	9b08      	ldr	r3, [sp, #32]
 800830a:	2500      	movs	r5, #0
 800830c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8008310:	9318      	str	r3, [sp, #96]	; 0x60
 8008312:	462e      	mov	r6, r5
 8008314:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008316:	4620      	mov	r0, r4
 8008318:	6859      	ldr	r1, [r3, #4]
 800831a:	f001 fd75 	bl	8009e08 <_Balloc>
 800831e:	9007      	str	r0, [sp, #28]
 8008320:	2800      	cmp	r0, #0
 8008322:	f43f af11 	beq.w	8008148 <_strtod_l+0x498>
 8008326:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008328:	691a      	ldr	r2, [r3, #16]
 800832a:	3202      	adds	r2, #2
 800832c:	f103 010c 	add.w	r1, r3, #12
 8008330:	0092      	lsls	r2, r2, #2
 8008332:	300c      	adds	r0, #12
 8008334:	f001 fd5a 	bl	8009dec <memcpy>
 8008338:	ec4b ab10 	vmov	d0, sl, fp
 800833c:	aa20      	add	r2, sp, #128	; 0x80
 800833e:	a91f      	add	r1, sp, #124	; 0x7c
 8008340:	4620      	mov	r0, r4
 8008342:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8008346:	f002 f947 	bl	800a5d8 <__d2b>
 800834a:	901e      	str	r0, [sp, #120]	; 0x78
 800834c:	2800      	cmp	r0, #0
 800834e:	f43f aefb 	beq.w	8008148 <_strtod_l+0x498>
 8008352:	2101      	movs	r1, #1
 8008354:	4620      	mov	r0, r4
 8008356:	f001 fe9d 	bl	800a094 <__i2b>
 800835a:	4606      	mov	r6, r0
 800835c:	2800      	cmp	r0, #0
 800835e:	f43f aef3 	beq.w	8008148 <_strtod_l+0x498>
 8008362:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8008364:	9904      	ldr	r1, [sp, #16]
 8008366:	2b00      	cmp	r3, #0
 8008368:	bfab      	itete	ge
 800836a:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 800836c:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 800836e:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 8008370:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 8008374:	bfac      	ite	ge
 8008376:	eb03 0902 	addge.w	r9, r3, r2
 800837a:	1ad7      	sublt	r7, r2, r3
 800837c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800837e:	eba3 0801 	sub.w	r8, r3, r1
 8008382:	4490      	add	r8, r2
 8008384:	4ba3      	ldr	r3, [pc, #652]	; (8008614 <_strtod_l+0x964>)
 8008386:	f108 38ff 	add.w	r8, r8, #4294967295
 800838a:	4598      	cmp	r8, r3
 800838c:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8008390:	f280 80cc 	bge.w	800852c <_strtod_l+0x87c>
 8008394:	eba3 0308 	sub.w	r3, r3, r8
 8008398:	2b1f      	cmp	r3, #31
 800839a:	eba2 0203 	sub.w	r2, r2, r3
 800839e:	f04f 0101 	mov.w	r1, #1
 80083a2:	f300 80b6 	bgt.w	8008512 <_strtod_l+0x862>
 80083a6:	fa01 f303 	lsl.w	r3, r1, r3
 80083aa:	9311      	str	r3, [sp, #68]	; 0x44
 80083ac:	2300      	movs	r3, #0
 80083ae:	930c      	str	r3, [sp, #48]	; 0x30
 80083b0:	eb09 0802 	add.w	r8, r9, r2
 80083b4:	9b04      	ldr	r3, [sp, #16]
 80083b6:	45c1      	cmp	r9, r8
 80083b8:	4417      	add	r7, r2
 80083ba:	441f      	add	r7, r3
 80083bc:	464b      	mov	r3, r9
 80083be:	bfa8      	it	ge
 80083c0:	4643      	movge	r3, r8
 80083c2:	42bb      	cmp	r3, r7
 80083c4:	bfa8      	it	ge
 80083c6:	463b      	movge	r3, r7
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	bfc2      	ittt	gt
 80083cc:	eba8 0803 	subgt.w	r8, r8, r3
 80083d0:	1aff      	subgt	r7, r7, r3
 80083d2:	eba9 0903 	subgt.w	r9, r9, r3
 80083d6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80083d8:	2b00      	cmp	r3, #0
 80083da:	dd17      	ble.n	800840c <_strtod_l+0x75c>
 80083dc:	4631      	mov	r1, r6
 80083de:	461a      	mov	r2, r3
 80083e0:	4620      	mov	r0, r4
 80083e2:	f001 ff13 	bl	800a20c <__pow5mult>
 80083e6:	4606      	mov	r6, r0
 80083e8:	2800      	cmp	r0, #0
 80083ea:	f43f aead 	beq.w	8008148 <_strtod_l+0x498>
 80083ee:	4601      	mov	r1, r0
 80083f0:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80083f2:	4620      	mov	r0, r4
 80083f4:	f001 fe64 	bl	800a0c0 <__multiply>
 80083f8:	900f      	str	r0, [sp, #60]	; 0x3c
 80083fa:	2800      	cmp	r0, #0
 80083fc:	f43f aea4 	beq.w	8008148 <_strtod_l+0x498>
 8008400:	991e      	ldr	r1, [sp, #120]	; 0x78
 8008402:	4620      	mov	r0, r4
 8008404:	f001 fd40 	bl	8009e88 <_Bfree>
 8008408:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800840a:	931e      	str	r3, [sp, #120]	; 0x78
 800840c:	f1b8 0f00 	cmp.w	r8, #0
 8008410:	f300 8091 	bgt.w	8008536 <_strtod_l+0x886>
 8008414:	9b08      	ldr	r3, [sp, #32]
 8008416:	2b00      	cmp	r3, #0
 8008418:	dd08      	ble.n	800842c <_strtod_l+0x77c>
 800841a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800841c:	9907      	ldr	r1, [sp, #28]
 800841e:	4620      	mov	r0, r4
 8008420:	f001 fef4 	bl	800a20c <__pow5mult>
 8008424:	9007      	str	r0, [sp, #28]
 8008426:	2800      	cmp	r0, #0
 8008428:	f43f ae8e 	beq.w	8008148 <_strtod_l+0x498>
 800842c:	2f00      	cmp	r7, #0
 800842e:	dd08      	ble.n	8008442 <_strtod_l+0x792>
 8008430:	9907      	ldr	r1, [sp, #28]
 8008432:	463a      	mov	r2, r7
 8008434:	4620      	mov	r0, r4
 8008436:	f001 ff43 	bl	800a2c0 <__lshift>
 800843a:	9007      	str	r0, [sp, #28]
 800843c:	2800      	cmp	r0, #0
 800843e:	f43f ae83 	beq.w	8008148 <_strtod_l+0x498>
 8008442:	f1b9 0f00 	cmp.w	r9, #0
 8008446:	dd08      	ble.n	800845a <_strtod_l+0x7aa>
 8008448:	4631      	mov	r1, r6
 800844a:	464a      	mov	r2, r9
 800844c:	4620      	mov	r0, r4
 800844e:	f001 ff37 	bl	800a2c0 <__lshift>
 8008452:	4606      	mov	r6, r0
 8008454:	2800      	cmp	r0, #0
 8008456:	f43f ae77 	beq.w	8008148 <_strtod_l+0x498>
 800845a:	9a07      	ldr	r2, [sp, #28]
 800845c:	991e      	ldr	r1, [sp, #120]	; 0x78
 800845e:	4620      	mov	r0, r4
 8008460:	f001 ffb6 	bl	800a3d0 <__mdiff>
 8008464:	4605      	mov	r5, r0
 8008466:	2800      	cmp	r0, #0
 8008468:	f43f ae6e 	beq.w	8008148 <_strtod_l+0x498>
 800846c:	68c3      	ldr	r3, [r0, #12]
 800846e:	930f      	str	r3, [sp, #60]	; 0x3c
 8008470:	2300      	movs	r3, #0
 8008472:	60c3      	str	r3, [r0, #12]
 8008474:	4631      	mov	r1, r6
 8008476:	f001 ff8f 	bl	800a398 <__mcmp>
 800847a:	2800      	cmp	r0, #0
 800847c:	da65      	bge.n	800854a <_strtod_l+0x89a>
 800847e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008480:	ea53 030a 	orrs.w	r3, r3, sl
 8008484:	f040 8087 	bne.w	8008596 <_strtod_l+0x8e6>
 8008488:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800848c:	2b00      	cmp	r3, #0
 800848e:	f040 8082 	bne.w	8008596 <_strtod_l+0x8e6>
 8008492:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008496:	0d1b      	lsrs	r3, r3, #20
 8008498:	051b      	lsls	r3, r3, #20
 800849a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800849e:	d97a      	bls.n	8008596 <_strtod_l+0x8e6>
 80084a0:	696b      	ldr	r3, [r5, #20]
 80084a2:	b913      	cbnz	r3, 80084aa <_strtod_l+0x7fa>
 80084a4:	692b      	ldr	r3, [r5, #16]
 80084a6:	2b01      	cmp	r3, #1
 80084a8:	dd75      	ble.n	8008596 <_strtod_l+0x8e6>
 80084aa:	4629      	mov	r1, r5
 80084ac:	2201      	movs	r2, #1
 80084ae:	4620      	mov	r0, r4
 80084b0:	f001 ff06 	bl	800a2c0 <__lshift>
 80084b4:	4631      	mov	r1, r6
 80084b6:	4605      	mov	r5, r0
 80084b8:	f001 ff6e 	bl	800a398 <__mcmp>
 80084bc:	2800      	cmp	r0, #0
 80084be:	dd6a      	ble.n	8008596 <_strtod_l+0x8e6>
 80084c0:	9904      	ldr	r1, [sp, #16]
 80084c2:	4a55      	ldr	r2, [pc, #340]	; (8008618 <_strtod_l+0x968>)
 80084c4:	465b      	mov	r3, fp
 80084c6:	2900      	cmp	r1, #0
 80084c8:	f000 8085 	beq.w	80085d6 <_strtod_l+0x926>
 80084cc:	ea02 010b 	and.w	r1, r2, fp
 80084d0:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80084d4:	dc7f      	bgt.n	80085d6 <_strtod_l+0x926>
 80084d6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80084da:	f77f aeaa 	ble.w	8008232 <_strtod_l+0x582>
 80084de:	4a4f      	ldr	r2, [pc, #316]	; (800861c <_strtod_l+0x96c>)
 80084e0:	2300      	movs	r3, #0
 80084e2:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 80084e6:	4650      	mov	r0, sl
 80084e8:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 80084ec:	4659      	mov	r1, fp
 80084ee:	f7f8 f8a3 	bl	8000638 <__aeabi_dmul>
 80084f2:	460b      	mov	r3, r1
 80084f4:	4303      	orrs	r3, r0
 80084f6:	bf08      	it	eq
 80084f8:	2322      	moveq	r3, #34	; 0x22
 80084fa:	4682      	mov	sl, r0
 80084fc:	468b      	mov	fp, r1
 80084fe:	bf08      	it	eq
 8008500:	6023      	streq	r3, [r4, #0]
 8008502:	e62b      	b.n	800815c <_strtod_l+0x4ac>
 8008504:	f04f 32ff 	mov.w	r2, #4294967295
 8008508:	fa02 f303 	lsl.w	r3, r2, r3
 800850c:	ea03 0a0a 	and.w	sl, r3, sl
 8008510:	e6de      	b.n	80082d0 <_strtod_l+0x620>
 8008512:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8008516:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800851a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800851e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8008522:	fa01 f308 	lsl.w	r3, r1, r8
 8008526:	930c      	str	r3, [sp, #48]	; 0x30
 8008528:	9111      	str	r1, [sp, #68]	; 0x44
 800852a:	e741      	b.n	80083b0 <_strtod_l+0x700>
 800852c:	2300      	movs	r3, #0
 800852e:	930c      	str	r3, [sp, #48]	; 0x30
 8008530:	2301      	movs	r3, #1
 8008532:	9311      	str	r3, [sp, #68]	; 0x44
 8008534:	e73c      	b.n	80083b0 <_strtod_l+0x700>
 8008536:	991e      	ldr	r1, [sp, #120]	; 0x78
 8008538:	4642      	mov	r2, r8
 800853a:	4620      	mov	r0, r4
 800853c:	f001 fec0 	bl	800a2c0 <__lshift>
 8008540:	901e      	str	r0, [sp, #120]	; 0x78
 8008542:	2800      	cmp	r0, #0
 8008544:	f47f af66 	bne.w	8008414 <_strtod_l+0x764>
 8008548:	e5fe      	b.n	8008148 <_strtod_l+0x498>
 800854a:	465f      	mov	r7, fp
 800854c:	d16e      	bne.n	800862c <_strtod_l+0x97c>
 800854e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008550:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008554:	b342      	cbz	r2, 80085a8 <_strtod_l+0x8f8>
 8008556:	4a32      	ldr	r2, [pc, #200]	; (8008620 <_strtod_l+0x970>)
 8008558:	4293      	cmp	r3, r2
 800855a:	d128      	bne.n	80085ae <_strtod_l+0x8fe>
 800855c:	9b04      	ldr	r3, [sp, #16]
 800855e:	4650      	mov	r0, sl
 8008560:	b1eb      	cbz	r3, 800859e <_strtod_l+0x8ee>
 8008562:	4a2d      	ldr	r2, [pc, #180]	; (8008618 <_strtod_l+0x968>)
 8008564:	403a      	ands	r2, r7
 8008566:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800856a:	f04f 31ff 	mov.w	r1, #4294967295
 800856e:	d819      	bhi.n	80085a4 <_strtod_l+0x8f4>
 8008570:	0d12      	lsrs	r2, r2, #20
 8008572:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8008576:	fa01 f303 	lsl.w	r3, r1, r3
 800857a:	4298      	cmp	r0, r3
 800857c:	d117      	bne.n	80085ae <_strtod_l+0x8fe>
 800857e:	4b29      	ldr	r3, [pc, #164]	; (8008624 <_strtod_l+0x974>)
 8008580:	429f      	cmp	r7, r3
 8008582:	d102      	bne.n	800858a <_strtod_l+0x8da>
 8008584:	3001      	adds	r0, #1
 8008586:	f43f addf 	beq.w	8008148 <_strtod_l+0x498>
 800858a:	4b23      	ldr	r3, [pc, #140]	; (8008618 <_strtod_l+0x968>)
 800858c:	403b      	ands	r3, r7
 800858e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8008592:	f04f 0a00 	mov.w	sl, #0
 8008596:	9b04      	ldr	r3, [sp, #16]
 8008598:	2b00      	cmp	r3, #0
 800859a:	d1a0      	bne.n	80084de <_strtod_l+0x82e>
 800859c:	e5de      	b.n	800815c <_strtod_l+0x4ac>
 800859e:	f04f 33ff 	mov.w	r3, #4294967295
 80085a2:	e7ea      	b.n	800857a <_strtod_l+0x8ca>
 80085a4:	460b      	mov	r3, r1
 80085a6:	e7e8      	b.n	800857a <_strtod_l+0x8ca>
 80085a8:	ea53 030a 	orrs.w	r3, r3, sl
 80085ac:	d088      	beq.n	80084c0 <_strtod_l+0x810>
 80085ae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80085b0:	b1db      	cbz	r3, 80085ea <_strtod_l+0x93a>
 80085b2:	423b      	tst	r3, r7
 80085b4:	d0ef      	beq.n	8008596 <_strtod_l+0x8e6>
 80085b6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80085b8:	9a04      	ldr	r2, [sp, #16]
 80085ba:	4650      	mov	r0, sl
 80085bc:	4659      	mov	r1, fp
 80085be:	b1c3      	cbz	r3, 80085f2 <_strtod_l+0x942>
 80085c0:	f7ff fb58 	bl	8007c74 <sulp>
 80085c4:	4602      	mov	r2, r0
 80085c6:	460b      	mov	r3, r1
 80085c8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80085cc:	f7f7 fe7e 	bl	80002cc <__adddf3>
 80085d0:	4682      	mov	sl, r0
 80085d2:	468b      	mov	fp, r1
 80085d4:	e7df      	b.n	8008596 <_strtod_l+0x8e6>
 80085d6:	4013      	ands	r3, r2
 80085d8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80085dc:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80085e0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80085e4:	f04f 3aff 	mov.w	sl, #4294967295
 80085e8:	e7d5      	b.n	8008596 <_strtod_l+0x8e6>
 80085ea:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80085ec:	ea13 0f0a 	tst.w	r3, sl
 80085f0:	e7e0      	b.n	80085b4 <_strtod_l+0x904>
 80085f2:	f7ff fb3f 	bl	8007c74 <sulp>
 80085f6:	4602      	mov	r2, r0
 80085f8:	460b      	mov	r3, r1
 80085fa:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80085fe:	f7f7 fe63 	bl	80002c8 <__aeabi_dsub>
 8008602:	2200      	movs	r2, #0
 8008604:	2300      	movs	r3, #0
 8008606:	4682      	mov	sl, r0
 8008608:	468b      	mov	fp, r1
 800860a:	f7f8 fa7d 	bl	8000b08 <__aeabi_dcmpeq>
 800860e:	2800      	cmp	r0, #0
 8008610:	d0c1      	beq.n	8008596 <_strtod_l+0x8e6>
 8008612:	e60e      	b.n	8008232 <_strtod_l+0x582>
 8008614:	fffffc02 	.word	0xfffffc02
 8008618:	7ff00000 	.word	0x7ff00000
 800861c:	39500000 	.word	0x39500000
 8008620:	000fffff 	.word	0x000fffff
 8008624:	7fefffff 	.word	0x7fefffff
 8008628:	0800bef0 	.word	0x0800bef0
 800862c:	4631      	mov	r1, r6
 800862e:	4628      	mov	r0, r5
 8008630:	f002 f82e 	bl	800a690 <__ratio>
 8008634:	ec59 8b10 	vmov	r8, r9, d0
 8008638:	ee10 0a10 	vmov	r0, s0
 800863c:	2200      	movs	r2, #0
 800863e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008642:	4649      	mov	r1, r9
 8008644:	f7f8 fa74 	bl	8000b30 <__aeabi_dcmple>
 8008648:	2800      	cmp	r0, #0
 800864a:	d07c      	beq.n	8008746 <_strtod_l+0xa96>
 800864c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800864e:	2b00      	cmp	r3, #0
 8008650:	d04c      	beq.n	80086ec <_strtod_l+0xa3c>
 8008652:	4b95      	ldr	r3, [pc, #596]	; (80088a8 <_strtod_l+0xbf8>)
 8008654:	2200      	movs	r2, #0
 8008656:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800865a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 80088a8 <_strtod_l+0xbf8>
 800865e:	f04f 0800 	mov.w	r8, #0
 8008662:	4b92      	ldr	r3, [pc, #584]	; (80088ac <_strtod_l+0xbfc>)
 8008664:	403b      	ands	r3, r7
 8008666:	9311      	str	r3, [sp, #68]	; 0x44
 8008668:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800866a:	4b91      	ldr	r3, [pc, #580]	; (80088b0 <_strtod_l+0xc00>)
 800866c:	429a      	cmp	r2, r3
 800866e:	f040 80b2 	bne.w	80087d6 <_strtod_l+0xb26>
 8008672:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008676:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800867a:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800867e:	ec4b ab10 	vmov	d0, sl, fp
 8008682:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 8008686:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800868a:	f001 ff29 	bl	800a4e0 <__ulp>
 800868e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008692:	ec53 2b10 	vmov	r2, r3, d0
 8008696:	f7f7 ffcf 	bl	8000638 <__aeabi_dmul>
 800869a:	4652      	mov	r2, sl
 800869c:	465b      	mov	r3, fp
 800869e:	f7f7 fe15 	bl	80002cc <__adddf3>
 80086a2:	460b      	mov	r3, r1
 80086a4:	4981      	ldr	r1, [pc, #516]	; (80088ac <_strtod_l+0xbfc>)
 80086a6:	4a83      	ldr	r2, [pc, #524]	; (80088b4 <_strtod_l+0xc04>)
 80086a8:	4019      	ands	r1, r3
 80086aa:	4291      	cmp	r1, r2
 80086ac:	4682      	mov	sl, r0
 80086ae:	d95e      	bls.n	800876e <_strtod_l+0xabe>
 80086b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80086b2:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80086b6:	4293      	cmp	r3, r2
 80086b8:	d103      	bne.n	80086c2 <_strtod_l+0xa12>
 80086ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80086bc:	3301      	adds	r3, #1
 80086be:	f43f ad43 	beq.w	8008148 <_strtod_l+0x498>
 80086c2:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 80088c0 <_strtod_l+0xc10>
 80086c6:	f04f 3aff 	mov.w	sl, #4294967295
 80086ca:	991e      	ldr	r1, [sp, #120]	; 0x78
 80086cc:	4620      	mov	r0, r4
 80086ce:	f001 fbdb 	bl	8009e88 <_Bfree>
 80086d2:	9907      	ldr	r1, [sp, #28]
 80086d4:	4620      	mov	r0, r4
 80086d6:	f001 fbd7 	bl	8009e88 <_Bfree>
 80086da:	4631      	mov	r1, r6
 80086dc:	4620      	mov	r0, r4
 80086de:	f001 fbd3 	bl	8009e88 <_Bfree>
 80086e2:	4629      	mov	r1, r5
 80086e4:	4620      	mov	r0, r4
 80086e6:	f001 fbcf 	bl	8009e88 <_Bfree>
 80086ea:	e613      	b.n	8008314 <_strtod_l+0x664>
 80086ec:	f1ba 0f00 	cmp.w	sl, #0
 80086f0:	d11b      	bne.n	800872a <_strtod_l+0xa7a>
 80086f2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80086f6:	b9f3      	cbnz	r3, 8008736 <_strtod_l+0xa86>
 80086f8:	4b6b      	ldr	r3, [pc, #428]	; (80088a8 <_strtod_l+0xbf8>)
 80086fa:	2200      	movs	r2, #0
 80086fc:	4640      	mov	r0, r8
 80086fe:	4649      	mov	r1, r9
 8008700:	f7f8 fa0c 	bl	8000b1c <__aeabi_dcmplt>
 8008704:	b9d0      	cbnz	r0, 800873c <_strtod_l+0xa8c>
 8008706:	4640      	mov	r0, r8
 8008708:	4649      	mov	r1, r9
 800870a:	4b6b      	ldr	r3, [pc, #428]	; (80088b8 <_strtod_l+0xc08>)
 800870c:	2200      	movs	r2, #0
 800870e:	f7f7 ff93 	bl	8000638 <__aeabi_dmul>
 8008712:	4680      	mov	r8, r0
 8008714:	4689      	mov	r9, r1
 8008716:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800871a:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 800871e:	931b      	str	r3, [sp, #108]	; 0x6c
 8008720:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 8008724:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8008728:	e79b      	b.n	8008662 <_strtod_l+0x9b2>
 800872a:	f1ba 0f01 	cmp.w	sl, #1
 800872e:	d102      	bne.n	8008736 <_strtod_l+0xa86>
 8008730:	2f00      	cmp	r7, #0
 8008732:	f43f ad7e 	beq.w	8008232 <_strtod_l+0x582>
 8008736:	4b61      	ldr	r3, [pc, #388]	; (80088bc <_strtod_l+0xc0c>)
 8008738:	2200      	movs	r2, #0
 800873a:	e78c      	b.n	8008656 <_strtod_l+0x9a6>
 800873c:	f8df 9178 	ldr.w	r9, [pc, #376]	; 80088b8 <_strtod_l+0xc08>
 8008740:	f04f 0800 	mov.w	r8, #0
 8008744:	e7e7      	b.n	8008716 <_strtod_l+0xa66>
 8008746:	4b5c      	ldr	r3, [pc, #368]	; (80088b8 <_strtod_l+0xc08>)
 8008748:	4640      	mov	r0, r8
 800874a:	4649      	mov	r1, r9
 800874c:	2200      	movs	r2, #0
 800874e:	f7f7 ff73 	bl	8000638 <__aeabi_dmul>
 8008752:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008754:	4680      	mov	r8, r0
 8008756:	4689      	mov	r9, r1
 8008758:	b933      	cbnz	r3, 8008768 <_strtod_l+0xab8>
 800875a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800875e:	9012      	str	r0, [sp, #72]	; 0x48
 8008760:	9313      	str	r3, [sp, #76]	; 0x4c
 8008762:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8008766:	e7dd      	b.n	8008724 <_strtod_l+0xa74>
 8008768:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 800876c:	e7f9      	b.n	8008762 <_strtod_l+0xab2>
 800876e:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8008772:	9b04      	ldr	r3, [sp, #16]
 8008774:	2b00      	cmp	r3, #0
 8008776:	d1a8      	bne.n	80086ca <_strtod_l+0xa1a>
 8008778:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800877c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800877e:	0d1b      	lsrs	r3, r3, #20
 8008780:	051b      	lsls	r3, r3, #20
 8008782:	429a      	cmp	r2, r3
 8008784:	d1a1      	bne.n	80086ca <_strtod_l+0xa1a>
 8008786:	4640      	mov	r0, r8
 8008788:	4649      	mov	r1, r9
 800878a:	f7f8 fab5 	bl	8000cf8 <__aeabi_d2lz>
 800878e:	f7f7 ff25 	bl	80005dc <__aeabi_l2d>
 8008792:	4602      	mov	r2, r0
 8008794:	460b      	mov	r3, r1
 8008796:	4640      	mov	r0, r8
 8008798:	4649      	mov	r1, r9
 800879a:	f7f7 fd95 	bl	80002c8 <__aeabi_dsub>
 800879e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80087a0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80087a4:	ea43 030a 	orr.w	r3, r3, sl
 80087a8:	4313      	orrs	r3, r2
 80087aa:	4680      	mov	r8, r0
 80087ac:	4689      	mov	r9, r1
 80087ae:	d053      	beq.n	8008858 <_strtod_l+0xba8>
 80087b0:	a335      	add	r3, pc, #212	; (adr r3, 8008888 <_strtod_l+0xbd8>)
 80087b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087b6:	f7f8 f9b1 	bl	8000b1c <__aeabi_dcmplt>
 80087ba:	2800      	cmp	r0, #0
 80087bc:	f47f acce 	bne.w	800815c <_strtod_l+0x4ac>
 80087c0:	a333      	add	r3, pc, #204	; (adr r3, 8008890 <_strtod_l+0xbe0>)
 80087c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087c6:	4640      	mov	r0, r8
 80087c8:	4649      	mov	r1, r9
 80087ca:	f7f8 f9c5 	bl	8000b58 <__aeabi_dcmpgt>
 80087ce:	2800      	cmp	r0, #0
 80087d0:	f43f af7b 	beq.w	80086ca <_strtod_l+0xa1a>
 80087d4:	e4c2      	b.n	800815c <_strtod_l+0x4ac>
 80087d6:	9b04      	ldr	r3, [sp, #16]
 80087d8:	b333      	cbz	r3, 8008828 <_strtod_l+0xb78>
 80087da:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80087dc:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80087e0:	d822      	bhi.n	8008828 <_strtod_l+0xb78>
 80087e2:	a32d      	add	r3, pc, #180	; (adr r3, 8008898 <_strtod_l+0xbe8>)
 80087e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087e8:	4640      	mov	r0, r8
 80087ea:	4649      	mov	r1, r9
 80087ec:	f7f8 f9a0 	bl	8000b30 <__aeabi_dcmple>
 80087f0:	b1a0      	cbz	r0, 800881c <_strtod_l+0xb6c>
 80087f2:	4649      	mov	r1, r9
 80087f4:	4640      	mov	r0, r8
 80087f6:	f7f8 f9f7 	bl	8000be8 <__aeabi_d2uiz>
 80087fa:	2801      	cmp	r0, #1
 80087fc:	bf38      	it	cc
 80087fe:	2001      	movcc	r0, #1
 8008800:	f7f7 fea0 	bl	8000544 <__aeabi_ui2d>
 8008804:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008806:	4680      	mov	r8, r0
 8008808:	4689      	mov	r9, r1
 800880a:	bb13      	cbnz	r3, 8008852 <_strtod_l+0xba2>
 800880c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008810:	9014      	str	r0, [sp, #80]	; 0x50
 8008812:	9315      	str	r3, [sp, #84]	; 0x54
 8008814:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8008818:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800881c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800881e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8008820:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8008824:	1a9b      	subs	r3, r3, r2
 8008826:	930d      	str	r3, [sp, #52]	; 0x34
 8008828:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800882c:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8008830:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8008834:	f001 fe54 	bl	800a4e0 <__ulp>
 8008838:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800883c:	ec53 2b10 	vmov	r2, r3, d0
 8008840:	f7f7 fefa 	bl	8000638 <__aeabi_dmul>
 8008844:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008848:	f7f7 fd40 	bl	80002cc <__adddf3>
 800884c:	4682      	mov	sl, r0
 800884e:	468b      	mov	fp, r1
 8008850:	e78f      	b.n	8008772 <_strtod_l+0xac2>
 8008852:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 8008856:	e7dd      	b.n	8008814 <_strtod_l+0xb64>
 8008858:	a311      	add	r3, pc, #68	; (adr r3, 80088a0 <_strtod_l+0xbf0>)
 800885a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800885e:	f7f8 f95d 	bl	8000b1c <__aeabi_dcmplt>
 8008862:	e7b4      	b.n	80087ce <_strtod_l+0xb1e>
 8008864:	2300      	movs	r3, #0
 8008866:	930e      	str	r3, [sp, #56]	; 0x38
 8008868:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800886a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800886c:	6013      	str	r3, [r2, #0]
 800886e:	f7ff ba65 	b.w	8007d3c <_strtod_l+0x8c>
 8008872:	2b65      	cmp	r3, #101	; 0x65
 8008874:	f43f ab5d 	beq.w	8007f32 <_strtod_l+0x282>
 8008878:	2b45      	cmp	r3, #69	; 0x45
 800887a:	f43f ab5a 	beq.w	8007f32 <_strtod_l+0x282>
 800887e:	2201      	movs	r2, #1
 8008880:	f7ff bb92 	b.w	8007fa8 <_strtod_l+0x2f8>
 8008884:	f3af 8000 	nop.w
 8008888:	94a03595 	.word	0x94a03595
 800888c:	3fdfffff 	.word	0x3fdfffff
 8008890:	35afe535 	.word	0x35afe535
 8008894:	3fe00000 	.word	0x3fe00000
 8008898:	ffc00000 	.word	0xffc00000
 800889c:	41dfffff 	.word	0x41dfffff
 80088a0:	94a03595 	.word	0x94a03595
 80088a4:	3fcfffff 	.word	0x3fcfffff
 80088a8:	3ff00000 	.word	0x3ff00000
 80088ac:	7ff00000 	.word	0x7ff00000
 80088b0:	7fe00000 	.word	0x7fe00000
 80088b4:	7c9fffff 	.word	0x7c9fffff
 80088b8:	3fe00000 	.word	0x3fe00000
 80088bc:	bff00000 	.word	0xbff00000
 80088c0:	7fefffff 	.word	0x7fefffff

080088c4 <_strtod_r>:
 80088c4:	4b01      	ldr	r3, [pc, #4]	; (80088cc <_strtod_r+0x8>)
 80088c6:	f7ff b9f3 	b.w	8007cb0 <_strtod_l>
 80088ca:	bf00      	nop
 80088cc:	20000078 	.word	0x20000078

080088d0 <_strtol_l.isra.0>:
 80088d0:	2b01      	cmp	r3, #1
 80088d2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80088d6:	d001      	beq.n	80088dc <_strtol_l.isra.0+0xc>
 80088d8:	2b24      	cmp	r3, #36	; 0x24
 80088da:	d906      	bls.n	80088ea <_strtol_l.isra.0+0x1a>
 80088dc:	f7fe faf8 	bl	8006ed0 <__errno>
 80088e0:	2316      	movs	r3, #22
 80088e2:	6003      	str	r3, [r0, #0]
 80088e4:	2000      	movs	r0, #0
 80088e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80088ea:	4f3a      	ldr	r7, [pc, #232]	; (80089d4 <_strtol_l.isra.0+0x104>)
 80088ec:	468e      	mov	lr, r1
 80088ee:	4676      	mov	r6, lr
 80088f0:	f81e 4b01 	ldrb.w	r4, [lr], #1
 80088f4:	5de5      	ldrb	r5, [r4, r7]
 80088f6:	f015 0508 	ands.w	r5, r5, #8
 80088fa:	d1f8      	bne.n	80088ee <_strtol_l.isra.0+0x1e>
 80088fc:	2c2d      	cmp	r4, #45	; 0x2d
 80088fe:	d134      	bne.n	800896a <_strtol_l.isra.0+0x9a>
 8008900:	f89e 4000 	ldrb.w	r4, [lr]
 8008904:	f04f 0801 	mov.w	r8, #1
 8008908:	f106 0e02 	add.w	lr, r6, #2
 800890c:	2b00      	cmp	r3, #0
 800890e:	d05c      	beq.n	80089ca <_strtol_l.isra.0+0xfa>
 8008910:	2b10      	cmp	r3, #16
 8008912:	d10c      	bne.n	800892e <_strtol_l.isra.0+0x5e>
 8008914:	2c30      	cmp	r4, #48	; 0x30
 8008916:	d10a      	bne.n	800892e <_strtol_l.isra.0+0x5e>
 8008918:	f89e 4000 	ldrb.w	r4, [lr]
 800891c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8008920:	2c58      	cmp	r4, #88	; 0x58
 8008922:	d14d      	bne.n	80089c0 <_strtol_l.isra.0+0xf0>
 8008924:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8008928:	2310      	movs	r3, #16
 800892a:	f10e 0e02 	add.w	lr, lr, #2
 800892e:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8008932:	f10c 3cff 	add.w	ip, ip, #4294967295
 8008936:	2600      	movs	r6, #0
 8008938:	fbbc f9f3 	udiv	r9, ip, r3
 800893c:	4635      	mov	r5, r6
 800893e:	fb03 ca19 	mls	sl, r3, r9, ip
 8008942:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8008946:	2f09      	cmp	r7, #9
 8008948:	d818      	bhi.n	800897c <_strtol_l.isra.0+0xac>
 800894a:	463c      	mov	r4, r7
 800894c:	42a3      	cmp	r3, r4
 800894e:	dd24      	ble.n	800899a <_strtol_l.isra.0+0xca>
 8008950:	2e00      	cmp	r6, #0
 8008952:	db1f      	blt.n	8008994 <_strtol_l.isra.0+0xc4>
 8008954:	45a9      	cmp	r9, r5
 8008956:	d31d      	bcc.n	8008994 <_strtol_l.isra.0+0xc4>
 8008958:	d101      	bne.n	800895e <_strtol_l.isra.0+0x8e>
 800895a:	45a2      	cmp	sl, r4
 800895c:	db1a      	blt.n	8008994 <_strtol_l.isra.0+0xc4>
 800895e:	fb05 4503 	mla	r5, r5, r3, r4
 8008962:	2601      	movs	r6, #1
 8008964:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8008968:	e7eb      	b.n	8008942 <_strtol_l.isra.0+0x72>
 800896a:	2c2b      	cmp	r4, #43	; 0x2b
 800896c:	bf08      	it	eq
 800896e:	f89e 4000 	ldrbeq.w	r4, [lr]
 8008972:	46a8      	mov	r8, r5
 8008974:	bf08      	it	eq
 8008976:	f106 0e02 	addeq.w	lr, r6, #2
 800897a:	e7c7      	b.n	800890c <_strtol_l.isra.0+0x3c>
 800897c:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8008980:	2f19      	cmp	r7, #25
 8008982:	d801      	bhi.n	8008988 <_strtol_l.isra.0+0xb8>
 8008984:	3c37      	subs	r4, #55	; 0x37
 8008986:	e7e1      	b.n	800894c <_strtol_l.isra.0+0x7c>
 8008988:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800898c:	2f19      	cmp	r7, #25
 800898e:	d804      	bhi.n	800899a <_strtol_l.isra.0+0xca>
 8008990:	3c57      	subs	r4, #87	; 0x57
 8008992:	e7db      	b.n	800894c <_strtol_l.isra.0+0x7c>
 8008994:	f04f 36ff 	mov.w	r6, #4294967295
 8008998:	e7e4      	b.n	8008964 <_strtol_l.isra.0+0x94>
 800899a:	2e00      	cmp	r6, #0
 800899c:	da05      	bge.n	80089aa <_strtol_l.isra.0+0xda>
 800899e:	2322      	movs	r3, #34	; 0x22
 80089a0:	6003      	str	r3, [r0, #0]
 80089a2:	4665      	mov	r5, ip
 80089a4:	b942      	cbnz	r2, 80089b8 <_strtol_l.isra.0+0xe8>
 80089a6:	4628      	mov	r0, r5
 80089a8:	e79d      	b.n	80088e6 <_strtol_l.isra.0+0x16>
 80089aa:	f1b8 0f00 	cmp.w	r8, #0
 80089ae:	d000      	beq.n	80089b2 <_strtol_l.isra.0+0xe2>
 80089b0:	426d      	negs	r5, r5
 80089b2:	2a00      	cmp	r2, #0
 80089b4:	d0f7      	beq.n	80089a6 <_strtol_l.isra.0+0xd6>
 80089b6:	b10e      	cbz	r6, 80089bc <_strtol_l.isra.0+0xec>
 80089b8:	f10e 31ff 	add.w	r1, lr, #4294967295
 80089bc:	6011      	str	r1, [r2, #0]
 80089be:	e7f2      	b.n	80089a6 <_strtol_l.isra.0+0xd6>
 80089c0:	2430      	movs	r4, #48	; 0x30
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d1b3      	bne.n	800892e <_strtol_l.isra.0+0x5e>
 80089c6:	2308      	movs	r3, #8
 80089c8:	e7b1      	b.n	800892e <_strtol_l.isra.0+0x5e>
 80089ca:	2c30      	cmp	r4, #48	; 0x30
 80089cc:	d0a4      	beq.n	8008918 <_strtol_l.isra.0+0x48>
 80089ce:	230a      	movs	r3, #10
 80089d0:	e7ad      	b.n	800892e <_strtol_l.isra.0+0x5e>
 80089d2:	bf00      	nop
 80089d4:	0800bf19 	.word	0x0800bf19

080089d8 <_strtol_r>:
 80089d8:	f7ff bf7a 	b.w	80088d0 <_strtol_l.isra.0>

080089dc <quorem>:
 80089dc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089e0:	6903      	ldr	r3, [r0, #16]
 80089e2:	690c      	ldr	r4, [r1, #16]
 80089e4:	42a3      	cmp	r3, r4
 80089e6:	4607      	mov	r7, r0
 80089e8:	f2c0 8081 	blt.w	8008aee <quorem+0x112>
 80089ec:	3c01      	subs	r4, #1
 80089ee:	f101 0814 	add.w	r8, r1, #20
 80089f2:	f100 0514 	add.w	r5, r0, #20
 80089f6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80089fa:	9301      	str	r3, [sp, #4]
 80089fc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008a00:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008a04:	3301      	adds	r3, #1
 8008a06:	429a      	cmp	r2, r3
 8008a08:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008a0c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008a10:	fbb2 f6f3 	udiv	r6, r2, r3
 8008a14:	d331      	bcc.n	8008a7a <quorem+0x9e>
 8008a16:	f04f 0e00 	mov.w	lr, #0
 8008a1a:	4640      	mov	r0, r8
 8008a1c:	46ac      	mov	ip, r5
 8008a1e:	46f2      	mov	sl, lr
 8008a20:	f850 2b04 	ldr.w	r2, [r0], #4
 8008a24:	b293      	uxth	r3, r2
 8008a26:	fb06 e303 	mla	r3, r6, r3, lr
 8008a2a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8008a2e:	b29b      	uxth	r3, r3
 8008a30:	ebaa 0303 	sub.w	r3, sl, r3
 8008a34:	0c12      	lsrs	r2, r2, #16
 8008a36:	f8dc a000 	ldr.w	sl, [ip]
 8008a3a:	fb06 e202 	mla	r2, r6, r2, lr
 8008a3e:	fa13 f38a 	uxtah	r3, r3, sl
 8008a42:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008a46:	fa1f fa82 	uxth.w	sl, r2
 8008a4a:	f8dc 2000 	ldr.w	r2, [ip]
 8008a4e:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8008a52:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008a56:	b29b      	uxth	r3, r3
 8008a58:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008a5c:	4581      	cmp	r9, r0
 8008a5e:	f84c 3b04 	str.w	r3, [ip], #4
 8008a62:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008a66:	d2db      	bcs.n	8008a20 <quorem+0x44>
 8008a68:	f855 300b 	ldr.w	r3, [r5, fp]
 8008a6c:	b92b      	cbnz	r3, 8008a7a <quorem+0x9e>
 8008a6e:	9b01      	ldr	r3, [sp, #4]
 8008a70:	3b04      	subs	r3, #4
 8008a72:	429d      	cmp	r5, r3
 8008a74:	461a      	mov	r2, r3
 8008a76:	d32e      	bcc.n	8008ad6 <quorem+0xfa>
 8008a78:	613c      	str	r4, [r7, #16]
 8008a7a:	4638      	mov	r0, r7
 8008a7c:	f001 fc8c 	bl	800a398 <__mcmp>
 8008a80:	2800      	cmp	r0, #0
 8008a82:	db24      	blt.n	8008ace <quorem+0xf2>
 8008a84:	3601      	adds	r6, #1
 8008a86:	4628      	mov	r0, r5
 8008a88:	f04f 0c00 	mov.w	ip, #0
 8008a8c:	f858 2b04 	ldr.w	r2, [r8], #4
 8008a90:	f8d0 e000 	ldr.w	lr, [r0]
 8008a94:	b293      	uxth	r3, r2
 8008a96:	ebac 0303 	sub.w	r3, ip, r3
 8008a9a:	0c12      	lsrs	r2, r2, #16
 8008a9c:	fa13 f38e 	uxtah	r3, r3, lr
 8008aa0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008aa4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008aa8:	b29b      	uxth	r3, r3
 8008aaa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008aae:	45c1      	cmp	r9, r8
 8008ab0:	f840 3b04 	str.w	r3, [r0], #4
 8008ab4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008ab8:	d2e8      	bcs.n	8008a8c <quorem+0xb0>
 8008aba:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008abe:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008ac2:	b922      	cbnz	r2, 8008ace <quorem+0xf2>
 8008ac4:	3b04      	subs	r3, #4
 8008ac6:	429d      	cmp	r5, r3
 8008ac8:	461a      	mov	r2, r3
 8008aca:	d30a      	bcc.n	8008ae2 <quorem+0x106>
 8008acc:	613c      	str	r4, [r7, #16]
 8008ace:	4630      	mov	r0, r6
 8008ad0:	b003      	add	sp, #12
 8008ad2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ad6:	6812      	ldr	r2, [r2, #0]
 8008ad8:	3b04      	subs	r3, #4
 8008ada:	2a00      	cmp	r2, #0
 8008adc:	d1cc      	bne.n	8008a78 <quorem+0x9c>
 8008ade:	3c01      	subs	r4, #1
 8008ae0:	e7c7      	b.n	8008a72 <quorem+0x96>
 8008ae2:	6812      	ldr	r2, [r2, #0]
 8008ae4:	3b04      	subs	r3, #4
 8008ae6:	2a00      	cmp	r2, #0
 8008ae8:	d1f0      	bne.n	8008acc <quorem+0xf0>
 8008aea:	3c01      	subs	r4, #1
 8008aec:	e7eb      	b.n	8008ac6 <quorem+0xea>
 8008aee:	2000      	movs	r0, #0
 8008af0:	e7ee      	b.n	8008ad0 <quorem+0xf4>
 8008af2:	0000      	movs	r0, r0
 8008af4:	0000      	movs	r0, r0
	...

08008af8 <_dtoa_r>:
 8008af8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008afc:	ed2d 8b02 	vpush	{d8}
 8008b00:	ec57 6b10 	vmov	r6, r7, d0
 8008b04:	b095      	sub	sp, #84	; 0x54
 8008b06:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008b08:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008b0c:	9105      	str	r1, [sp, #20]
 8008b0e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8008b12:	4604      	mov	r4, r0
 8008b14:	9209      	str	r2, [sp, #36]	; 0x24
 8008b16:	930f      	str	r3, [sp, #60]	; 0x3c
 8008b18:	b975      	cbnz	r5, 8008b38 <_dtoa_r+0x40>
 8008b1a:	2010      	movs	r0, #16
 8008b1c:	f001 f94c 	bl	8009db8 <malloc>
 8008b20:	4602      	mov	r2, r0
 8008b22:	6260      	str	r0, [r4, #36]	; 0x24
 8008b24:	b920      	cbnz	r0, 8008b30 <_dtoa_r+0x38>
 8008b26:	4bb2      	ldr	r3, [pc, #712]	; (8008df0 <_dtoa_r+0x2f8>)
 8008b28:	21ea      	movs	r1, #234	; 0xea
 8008b2a:	48b2      	ldr	r0, [pc, #712]	; (8008df4 <_dtoa_r+0x2fc>)
 8008b2c:	f002 f874 	bl	800ac18 <__assert_func>
 8008b30:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008b34:	6005      	str	r5, [r0, #0]
 8008b36:	60c5      	str	r5, [r0, #12]
 8008b38:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008b3a:	6819      	ldr	r1, [r3, #0]
 8008b3c:	b151      	cbz	r1, 8008b54 <_dtoa_r+0x5c>
 8008b3e:	685a      	ldr	r2, [r3, #4]
 8008b40:	604a      	str	r2, [r1, #4]
 8008b42:	2301      	movs	r3, #1
 8008b44:	4093      	lsls	r3, r2
 8008b46:	608b      	str	r3, [r1, #8]
 8008b48:	4620      	mov	r0, r4
 8008b4a:	f001 f99d 	bl	8009e88 <_Bfree>
 8008b4e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008b50:	2200      	movs	r2, #0
 8008b52:	601a      	str	r2, [r3, #0]
 8008b54:	1e3b      	subs	r3, r7, #0
 8008b56:	bfb9      	ittee	lt
 8008b58:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8008b5c:	9303      	strlt	r3, [sp, #12]
 8008b5e:	2300      	movge	r3, #0
 8008b60:	f8c8 3000 	strge.w	r3, [r8]
 8008b64:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8008b68:	4ba3      	ldr	r3, [pc, #652]	; (8008df8 <_dtoa_r+0x300>)
 8008b6a:	bfbc      	itt	lt
 8008b6c:	2201      	movlt	r2, #1
 8008b6e:	f8c8 2000 	strlt.w	r2, [r8]
 8008b72:	ea33 0309 	bics.w	r3, r3, r9
 8008b76:	d11b      	bne.n	8008bb0 <_dtoa_r+0xb8>
 8008b78:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008b7a:	f242 730f 	movw	r3, #9999	; 0x270f
 8008b7e:	6013      	str	r3, [r2, #0]
 8008b80:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008b84:	4333      	orrs	r3, r6
 8008b86:	f000 857a 	beq.w	800967e <_dtoa_r+0xb86>
 8008b8a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008b8c:	b963      	cbnz	r3, 8008ba8 <_dtoa_r+0xb0>
 8008b8e:	4b9b      	ldr	r3, [pc, #620]	; (8008dfc <_dtoa_r+0x304>)
 8008b90:	e024      	b.n	8008bdc <_dtoa_r+0xe4>
 8008b92:	4b9b      	ldr	r3, [pc, #620]	; (8008e00 <_dtoa_r+0x308>)
 8008b94:	9300      	str	r3, [sp, #0]
 8008b96:	3308      	adds	r3, #8
 8008b98:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008b9a:	6013      	str	r3, [r2, #0]
 8008b9c:	9800      	ldr	r0, [sp, #0]
 8008b9e:	b015      	add	sp, #84	; 0x54
 8008ba0:	ecbd 8b02 	vpop	{d8}
 8008ba4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ba8:	4b94      	ldr	r3, [pc, #592]	; (8008dfc <_dtoa_r+0x304>)
 8008baa:	9300      	str	r3, [sp, #0]
 8008bac:	3303      	adds	r3, #3
 8008bae:	e7f3      	b.n	8008b98 <_dtoa_r+0xa0>
 8008bb0:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008bb4:	2200      	movs	r2, #0
 8008bb6:	ec51 0b17 	vmov	r0, r1, d7
 8008bba:	2300      	movs	r3, #0
 8008bbc:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8008bc0:	f7f7 ffa2 	bl	8000b08 <__aeabi_dcmpeq>
 8008bc4:	4680      	mov	r8, r0
 8008bc6:	b158      	cbz	r0, 8008be0 <_dtoa_r+0xe8>
 8008bc8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008bca:	2301      	movs	r3, #1
 8008bcc:	6013      	str	r3, [r2, #0]
 8008bce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	f000 8551 	beq.w	8009678 <_dtoa_r+0xb80>
 8008bd6:	488b      	ldr	r0, [pc, #556]	; (8008e04 <_dtoa_r+0x30c>)
 8008bd8:	6018      	str	r0, [r3, #0]
 8008bda:	1e43      	subs	r3, r0, #1
 8008bdc:	9300      	str	r3, [sp, #0]
 8008bde:	e7dd      	b.n	8008b9c <_dtoa_r+0xa4>
 8008be0:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8008be4:	aa12      	add	r2, sp, #72	; 0x48
 8008be6:	a913      	add	r1, sp, #76	; 0x4c
 8008be8:	4620      	mov	r0, r4
 8008bea:	f001 fcf5 	bl	800a5d8 <__d2b>
 8008bee:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008bf2:	4683      	mov	fp, r0
 8008bf4:	2d00      	cmp	r5, #0
 8008bf6:	d07c      	beq.n	8008cf2 <_dtoa_r+0x1fa>
 8008bf8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008bfa:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8008bfe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008c02:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8008c06:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8008c0a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8008c0e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008c12:	4b7d      	ldr	r3, [pc, #500]	; (8008e08 <_dtoa_r+0x310>)
 8008c14:	2200      	movs	r2, #0
 8008c16:	4630      	mov	r0, r6
 8008c18:	4639      	mov	r1, r7
 8008c1a:	f7f7 fb55 	bl	80002c8 <__aeabi_dsub>
 8008c1e:	a36e      	add	r3, pc, #440	; (adr r3, 8008dd8 <_dtoa_r+0x2e0>)
 8008c20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c24:	f7f7 fd08 	bl	8000638 <__aeabi_dmul>
 8008c28:	a36d      	add	r3, pc, #436	; (adr r3, 8008de0 <_dtoa_r+0x2e8>)
 8008c2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c2e:	f7f7 fb4d 	bl	80002cc <__adddf3>
 8008c32:	4606      	mov	r6, r0
 8008c34:	4628      	mov	r0, r5
 8008c36:	460f      	mov	r7, r1
 8008c38:	f7f7 fc94 	bl	8000564 <__aeabi_i2d>
 8008c3c:	a36a      	add	r3, pc, #424	; (adr r3, 8008de8 <_dtoa_r+0x2f0>)
 8008c3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c42:	f7f7 fcf9 	bl	8000638 <__aeabi_dmul>
 8008c46:	4602      	mov	r2, r0
 8008c48:	460b      	mov	r3, r1
 8008c4a:	4630      	mov	r0, r6
 8008c4c:	4639      	mov	r1, r7
 8008c4e:	f7f7 fb3d 	bl	80002cc <__adddf3>
 8008c52:	4606      	mov	r6, r0
 8008c54:	460f      	mov	r7, r1
 8008c56:	f7f7 ff9f 	bl	8000b98 <__aeabi_d2iz>
 8008c5a:	2200      	movs	r2, #0
 8008c5c:	4682      	mov	sl, r0
 8008c5e:	2300      	movs	r3, #0
 8008c60:	4630      	mov	r0, r6
 8008c62:	4639      	mov	r1, r7
 8008c64:	f7f7 ff5a 	bl	8000b1c <__aeabi_dcmplt>
 8008c68:	b148      	cbz	r0, 8008c7e <_dtoa_r+0x186>
 8008c6a:	4650      	mov	r0, sl
 8008c6c:	f7f7 fc7a 	bl	8000564 <__aeabi_i2d>
 8008c70:	4632      	mov	r2, r6
 8008c72:	463b      	mov	r3, r7
 8008c74:	f7f7 ff48 	bl	8000b08 <__aeabi_dcmpeq>
 8008c78:	b908      	cbnz	r0, 8008c7e <_dtoa_r+0x186>
 8008c7a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008c7e:	f1ba 0f16 	cmp.w	sl, #22
 8008c82:	d854      	bhi.n	8008d2e <_dtoa_r+0x236>
 8008c84:	4b61      	ldr	r3, [pc, #388]	; (8008e0c <_dtoa_r+0x314>)
 8008c86:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008c8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c8e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008c92:	f7f7 ff43 	bl	8000b1c <__aeabi_dcmplt>
 8008c96:	2800      	cmp	r0, #0
 8008c98:	d04b      	beq.n	8008d32 <_dtoa_r+0x23a>
 8008c9a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008c9e:	2300      	movs	r3, #0
 8008ca0:	930e      	str	r3, [sp, #56]	; 0x38
 8008ca2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008ca4:	1b5d      	subs	r5, r3, r5
 8008ca6:	1e6b      	subs	r3, r5, #1
 8008ca8:	9304      	str	r3, [sp, #16]
 8008caa:	bf43      	ittte	mi
 8008cac:	2300      	movmi	r3, #0
 8008cae:	f1c5 0801 	rsbmi	r8, r5, #1
 8008cb2:	9304      	strmi	r3, [sp, #16]
 8008cb4:	f04f 0800 	movpl.w	r8, #0
 8008cb8:	f1ba 0f00 	cmp.w	sl, #0
 8008cbc:	db3b      	blt.n	8008d36 <_dtoa_r+0x23e>
 8008cbe:	9b04      	ldr	r3, [sp, #16]
 8008cc0:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8008cc4:	4453      	add	r3, sl
 8008cc6:	9304      	str	r3, [sp, #16]
 8008cc8:	2300      	movs	r3, #0
 8008cca:	9306      	str	r3, [sp, #24]
 8008ccc:	9b05      	ldr	r3, [sp, #20]
 8008cce:	2b09      	cmp	r3, #9
 8008cd0:	d869      	bhi.n	8008da6 <_dtoa_r+0x2ae>
 8008cd2:	2b05      	cmp	r3, #5
 8008cd4:	bfc4      	itt	gt
 8008cd6:	3b04      	subgt	r3, #4
 8008cd8:	9305      	strgt	r3, [sp, #20]
 8008cda:	9b05      	ldr	r3, [sp, #20]
 8008cdc:	f1a3 0302 	sub.w	r3, r3, #2
 8008ce0:	bfcc      	ite	gt
 8008ce2:	2500      	movgt	r5, #0
 8008ce4:	2501      	movle	r5, #1
 8008ce6:	2b03      	cmp	r3, #3
 8008ce8:	d869      	bhi.n	8008dbe <_dtoa_r+0x2c6>
 8008cea:	e8df f003 	tbb	[pc, r3]
 8008cee:	4e2c      	.short	0x4e2c
 8008cf0:	5a4c      	.short	0x5a4c
 8008cf2:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8008cf6:	441d      	add	r5, r3
 8008cf8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8008cfc:	2b20      	cmp	r3, #32
 8008cfe:	bfc1      	itttt	gt
 8008d00:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008d04:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8008d08:	fa09 f303 	lslgt.w	r3, r9, r3
 8008d0c:	fa26 f000 	lsrgt.w	r0, r6, r0
 8008d10:	bfda      	itte	le
 8008d12:	f1c3 0320 	rsble	r3, r3, #32
 8008d16:	fa06 f003 	lslle.w	r0, r6, r3
 8008d1a:	4318      	orrgt	r0, r3
 8008d1c:	f7f7 fc12 	bl	8000544 <__aeabi_ui2d>
 8008d20:	2301      	movs	r3, #1
 8008d22:	4606      	mov	r6, r0
 8008d24:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8008d28:	3d01      	subs	r5, #1
 8008d2a:	9310      	str	r3, [sp, #64]	; 0x40
 8008d2c:	e771      	b.n	8008c12 <_dtoa_r+0x11a>
 8008d2e:	2301      	movs	r3, #1
 8008d30:	e7b6      	b.n	8008ca0 <_dtoa_r+0x1a8>
 8008d32:	900e      	str	r0, [sp, #56]	; 0x38
 8008d34:	e7b5      	b.n	8008ca2 <_dtoa_r+0x1aa>
 8008d36:	f1ca 0300 	rsb	r3, sl, #0
 8008d3a:	9306      	str	r3, [sp, #24]
 8008d3c:	2300      	movs	r3, #0
 8008d3e:	eba8 080a 	sub.w	r8, r8, sl
 8008d42:	930d      	str	r3, [sp, #52]	; 0x34
 8008d44:	e7c2      	b.n	8008ccc <_dtoa_r+0x1d4>
 8008d46:	2300      	movs	r3, #0
 8008d48:	9308      	str	r3, [sp, #32]
 8008d4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	dc39      	bgt.n	8008dc4 <_dtoa_r+0x2cc>
 8008d50:	f04f 0901 	mov.w	r9, #1
 8008d54:	f8cd 9004 	str.w	r9, [sp, #4]
 8008d58:	464b      	mov	r3, r9
 8008d5a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8008d5e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008d60:	2200      	movs	r2, #0
 8008d62:	6042      	str	r2, [r0, #4]
 8008d64:	2204      	movs	r2, #4
 8008d66:	f102 0614 	add.w	r6, r2, #20
 8008d6a:	429e      	cmp	r6, r3
 8008d6c:	6841      	ldr	r1, [r0, #4]
 8008d6e:	d92f      	bls.n	8008dd0 <_dtoa_r+0x2d8>
 8008d70:	4620      	mov	r0, r4
 8008d72:	f001 f849 	bl	8009e08 <_Balloc>
 8008d76:	9000      	str	r0, [sp, #0]
 8008d78:	2800      	cmp	r0, #0
 8008d7a:	d14b      	bne.n	8008e14 <_dtoa_r+0x31c>
 8008d7c:	4b24      	ldr	r3, [pc, #144]	; (8008e10 <_dtoa_r+0x318>)
 8008d7e:	4602      	mov	r2, r0
 8008d80:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008d84:	e6d1      	b.n	8008b2a <_dtoa_r+0x32>
 8008d86:	2301      	movs	r3, #1
 8008d88:	e7de      	b.n	8008d48 <_dtoa_r+0x250>
 8008d8a:	2300      	movs	r3, #0
 8008d8c:	9308      	str	r3, [sp, #32]
 8008d8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d90:	eb0a 0903 	add.w	r9, sl, r3
 8008d94:	f109 0301 	add.w	r3, r9, #1
 8008d98:	2b01      	cmp	r3, #1
 8008d9a:	9301      	str	r3, [sp, #4]
 8008d9c:	bfb8      	it	lt
 8008d9e:	2301      	movlt	r3, #1
 8008da0:	e7dd      	b.n	8008d5e <_dtoa_r+0x266>
 8008da2:	2301      	movs	r3, #1
 8008da4:	e7f2      	b.n	8008d8c <_dtoa_r+0x294>
 8008da6:	2501      	movs	r5, #1
 8008da8:	2300      	movs	r3, #0
 8008daa:	9305      	str	r3, [sp, #20]
 8008dac:	9508      	str	r5, [sp, #32]
 8008dae:	f04f 39ff 	mov.w	r9, #4294967295
 8008db2:	2200      	movs	r2, #0
 8008db4:	f8cd 9004 	str.w	r9, [sp, #4]
 8008db8:	2312      	movs	r3, #18
 8008dba:	9209      	str	r2, [sp, #36]	; 0x24
 8008dbc:	e7cf      	b.n	8008d5e <_dtoa_r+0x266>
 8008dbe:	2301      	movs	r3, #1
 8008dc0:	9308      	str	r3, [sp, #32]
 8008dc2:	e7f4      	b.n	8008dae <_dtoa_r+0x2b6>
 8008dc4:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8008dc8:	f8cd 9004 	str.w	r9, [sp, #4]
 8008dcc:	464b      	mov	r3, r9
 8008dce:	e7c6      	b.n	8008d5e <_dtoa_r+0x266>
 8008dd0:	3101      	adds	r1, #1
 8008dd2:	6041      	str	r1, [r0, #4]
 8008dd4:	0052      	lsls	r2, r2, #1
 8008dd6:	e7c6      	b.n	8008d66 <_dtoa_r+0x26e>
 8008dd8:	636f4361 	.word	0x636f4361
 8008ddc:	3fd287a7 	.word	0x3fd287a7
 8008de0:	8b60c8b3 	.word	0x8b60c8b3
 8008de4:	3fc68a28 	.word	0x3fc68a28
 8008de8:	509f79fb 	.word	0x509f79fb
 8008dec:	3fd34413 	.word	0x3fd34413
 8008df0:	0800c026 	.word	0x0800c026
 8008df4:	0800c03d 	.word	0x0800c03d
 8008df8:	7ff00000 	.word	0x7ff00000
 8008dfc:	0800c022 	.word	0x0800c022
 8008e00:	0800c019 	.word	0x0800c019
 8008e04:	0800be99 	.word	0x0800be99
 8008e08:	3ff80000 	.word	0x3ff80000
 8008e0c:	0800c1b8 	.word	0x0800c1b8
 8008e10:	0800c09c 	.word	0x0800c09c
 8008e14:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008e16:	9a00      	ldr	r2, [sp, #0]
 8008e18:	601a      	str	r2, [r3, #0]
 8008e1a:	9b01      	ldr	r3, [sp, #4]
 8008e1c:	2b0e      	cmp	r3, #14
 8008e1e:	f200 80ad 	bhi.w	8008f7c <_dtoa_r+0x484>
 8008e22:	2d00      	cmp	r5, #0
 8008e24:	f000 80aa 	beq.w	8008f7c <_dtoa_r+0x484>
 8008e28:	f1ba 0f00 	cmp.w	sl, #0
 8008e2c:	dd36      	ble.n	8008e9c <_dtoa_r+0x3a4>
 8008e2e:	4ac3      	ldr	r2, [pc, #780]	; (800913c <_dtoa_r+0x644>)
 8008e30:	f00a 030f 	and.w	r3, sl, #15
 8008e34:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008e38:	ed93 7b00 	vldr	d7, [r3]
 8008e3c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8008e40:	ea4f 172a 	mov.w	r7, sl, asr #4
 8008e44:	eeb0 8a47 	vmov.f32	s16, s14
 8008e48:	eef0 8a67 	vmov.f32	s17, s15
 8008e4c:	d016      	beq.n	8008e7c <_dtoa_r+0x384>
 8008e4e:	4bbc      	ldr	r3, [pc, #752]	; (8009140 <_dtoa_r+0x648>)
 8008e50:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008e54:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008e58:	f7f7 fd18 	bl	800088c <__aeabi_ddiv>
 8008e5c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008e60:	f007 070f 	and.w	r7, r7, #15
 8008e64:	2503      	movs	r5, #3
 8008e66:	4eb6      	ldr	r6, [pc, #728]	; (8009140 <_dtoa_r+0x648>)
 8008e68:	b957      	cbnz	r7, 8008e80 <_dtoa_r+0x388>
 8008e6a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008e6e:	ec53 2b18 	vmov	r2, r3, d8
 8008e72:	f7f7 fd0b 	bl	800088c <__aeabi_ddiv>
 8008e76:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008e7a:	e029      	b.n	8008ed0 <_dtoa_r+0x3d8>
 8008e7c:	2502      	movs	r5, #2
 8008e7e:	e7f2      	b.n	8008e66 <_dtoa_r+0x36e>
 8008e80:	07f9      	lsls	r1, r7, #31
 8008e82:	d508      	bpl.n	8008e96 <_dtoa_r+0x39e>
 8008e84:	ec51 0b18 	vmov	r0, r1, d8
 8008e88:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008e8c:	f7f7 fbd4 	bl	8000638 <__aeabi_dmul>
 8008e90:	ec41 0b18 	vmov	d8, r0, r1
 8008e94:	3501      	adds	r5, #1
 8008e96:	107f      	asrs	r7, r7, #1
 8008e98:	3608      	adds	r6, #8
 8008e9a:	e7e5      	b.n	8008e68 <_dtoa_r+0x370>
 8008e9c:	f000 80a6 	beq.w	8008fec <_dtoa_r+0x4f4>
 8008ea0:	f1ca 0600 	rsb	r6, sl, #0
 8008ea4:	4ba5      	ldr	r3, [pc, #660]	; (800913c <_dtoa_r+0x644>)
 8008ea6:	4fa6      	ldr	r7, [pc, #664]	; (8009140 <_dtoa_r+0x648>)
 8008ea8:	f006 020f 	and.w	r2, r6, #15
 8008eac:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008eb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008eb4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008eb8:	f7f7 fbbe 	bl	8000638 <__aeabi_dmul>
 8008ebc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008ec0:	1136      	asrs	r6, r6, #4
 8008ec2:	2300      	movs	r3, #0
 8008ec4:	2502      	movs	r5, #2
 8008ec6:	2e00      	cmp	r6, #0
 8008ec8:	f040 8085 	bne.w	8008fd6 <_dtoa_r+0x4de>
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d1d2      	bne.n	8008e76 <_dtoa_r+0x37e>
 8008ed0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	f000 808c 	beq.w	8008ff0 <_dtoa_r+0x4f8>
 8008ed8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008edc:	4b99      	ldr	r3, [pc, #612]	; (8009144 <_dtoa_r+0x64c>)
 8008ede:	2200      	movs	r2, #0
 8008ee0:	4630      	mov	r0, r6
 8008ee2:	4639      	mov	r1, r7
 8008ee4:	f7f7 fe1a 	bl	8000b1c <__aeabi_dcmplt>
 8008ee8:	2800      	cmp	r0, #0
 8008eea:	f000 8081 	beq.w	8008ff0 <_dtoa_r+0x4f8>
 8008eee:	9b01      	ldr	r3, [sp, #4]
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d07d      	beq.n	8008ff0 <_dtoa_r+0x4f8>
 8008ef4:	f1b9 0f00 	cmp.w	r9, #0
 8008ef8:	dd3c      	ble.n	8008f74 <_dtoa_r+0x47c>
 8008efa:	f10a 33ff 	add.w	r3, sl, #4294967295
 8008efe:	9307      	str	r3, [sp, #28]
 8008f00:	2200      	movs	r2, #0
 8008f02:	4b91      	ldr	r3, [pc, #580]	; (8009148 <_dtoa_r+0x650>)
 8008f04:	4630      	mov	r0, r6
 8008f06:	4639      	mov	r1, r7
 8008f08:	f7f7 fb96 	bl	8000638 <__aeabi_dmul>
 8008f0c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008f10:	3501      	adds	r5, #1
 8008f12:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8008f16:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008f1a:	4628      	mov	r0, r5
 8008f1c:	f7f7 fb22 	bl	8000564 <__aeabi_i2d>
 8008f20:	4632      	mov	r2, r6
 8008f22:	463b      	mov	r3, r7
 8008f24:	f7f7 fb88 	bl	8000638 <__aeabi_dmul>
 8008f28:	4b88      	ldr	r3, [pc, #544]	; (800914c <_dtoa_r+0x654>)
 8008f2a:	2200      	movs	r2, #0
 8008f2c:	f7f7 f9ce 	bl	80002cc <__adddf3>
 8008f30:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8008f34:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008f38:	9303      	str	r3, [sp, #12]
 8008f3a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d15c      	bne.n	8008ffa <_dtoa_r+0x502>
 8008f40:	4b83      	ldr	r3, [pc, #524]	; (8009150 <_dtoa_r+0x658>)
 8008f42:	2200      	movs	r2, #0
 8008f44:	4630      	mov	r0, r6
 8008f46:	4639      	mov	r1, r7
 8008f48:	f7f7 f9be 	bl	80002c8 <__aeabi_dsub>
 8008f4c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008f50:	4606      	mov	r6, r0
 8008f52:	460f      	mov	r7, r1
 8008f54:	f7f7 fe00 	bl	8000b58 <__aeabi_dcmpgt>
 8008f58:	2800      	cmp	r0, #0
 8008f5a:	f040 8296 	bne.w	800948a <_dtoa_r+0x992>
 8008f5e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8008f62:	4630      	mov	r0, r6
 8008f64:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008f68:	4639      	mov	r1, r7
 8008f6a:	f7f7 fdd7 	bl	8000b1c <__aeabi_dcmplt>
 8008f6e:	2800      	cmp	r0, #0
 8008f70:	f040 8288 	bne.w	8009484 <_dtoa_r+0x98c>
 8008f74:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008f78:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008f7c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	f2c0 8158 	blt.w	8009234 <_dtoa_r+0x73c>
 8008f84:	f1ba 0f0e 	cmp.w	sl, #14
 8008f88:	f300 8154 	bgt.w	8009234 <_dtoa_r+0x73c>
 8008f8c:	4b6b      	ldr	r3, [pc, #428]	; (800913c <_dtoa_r+0x644>)
 8008f8e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008f92:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008f96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	f280 80e3 	bge.w	8009164 <_dtoa_r+0x66c>
 8008f9e:	9b01      	ldr	r3, [sp, #4]
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	f300 80df 	bgt.w	8009164 <_dtoa_r+0x66c>
 8008fa6:	f040 826d 	bne.w	8009484 <_dtoa_r+0x98c>
 8008faa:	4b69      	ldr	r3, [pc, #420]	; (8009150 <_dtoa_r+0x658>)
 8008fac:	2200      	movs	r2, #0
 8008fae:	4640      	mov	r0, r8
 8008fb0:	4649      	mov	r1, r9
 8008fb2:	f7f7 fb41 	bl	8000638 <__aeabi_dmul>
 8008fb6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008fba:	f7f7 fdc3 	bl	8000b44 <__aeabi_dcmpge>
 8008fbe:	9e01      	ldr	r6, [sp, #4]
 8008fc0:	4637      	mov	r7, r6
 8008fc2:	2800      	cmp	r0, #0
 8008fc4:	f040 8243 	bne.w	800944e <_dtoa_r+0x956>
 8008fc8:	9d00      	ldr	r5, [sp, #0]
 8008fca:	2331      	movs	r3, #49	; 0x31
 8008fcc:	f805 3b01 	strb.w	r3, [r5], #1
 8008fd0:	f10a 0a01 	add.w	sl, sl, #1
 8008fd4:	e23f      	b.n	8009456 <_dtoa_r+0x95e>
 8008fd6:	07f2      	lsls	r2, r6, #31
 8008fd8:	d505      	bpl.n	8008fe6 <_dtoa_r+0x4ee>
 8008fda:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008fde:	f7f7 fb2b 	bl	8000638 <__aeabi_dmul>
 8008fe2:	3501      	adds	r5, #1
 8008fe4:	2301      	movs	r3, #1
 8008fe6:	1076      	asrs	r6, r6, #1
 8008fe8:	3708      	adds	r7, #8
 8008fea:	e76c      	b.n	8008ec6 <_dtoa_r+0x3ce>
 8008fec:	2502      	movs	r5, #2
 8008fee:	e76f      	b.n	8008ed0 <_dtoa_r+0x3d8>
 8008ff0:	9b01      	ldr	r3, [sp, #4]
 8008ff2:	f8cd a01c 	str.w	sl, [sp, #28]
 8008ff6:	930c      	str	r3, [sp, #48]	; 0x30
 8008ff8:	e78d      	b.n	8008f16 <_dtoa_r+0x41e>
 8008ffa:	9900      	ldr	r1, [sp, #0]
 8008ffc:	980c      	ldr	r0, [sp, #48]	; 0x30
 8008ffe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009000:	4b4e      	ldr	r3, [pc, #312]	; (800913c <_dtoa_r+0x644>)
 8009002:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009006:	4401      	add	r1, r0
 8009008:	9102      	str	r1, [sp, #8]
 800900a:	9908      	ldr	r1, [sp, #32]
 800900c:	eeb0 8a47 	vmov.f32	s16, s14
 8009010:	eef0 8a67 	vmov.f32	s17, s15
 8009014:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009018:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800901c:	2900      	cmp	r1, #0
 800901e:	d045      	beq.n	80090ac <_dtoa_r+0x5b4>
 8009020:	494c      	ldr	r1, [pc, #304]	; (8009154 <_dtoa_r+0x65c>)
 8009022:	2000      	movs	r0, #0
 8009024:	f7f7 fc32 	bl	800088c <__aeabi_ddiv>
 8009028:	ec53 2b18 	vmov	r2, r3, d8
 800902c:	f7f7 f94c 	bl	80002c8 <__aeabi_dsub>
 8009030:	9d00      	ldr	r5, [sp, #0]
 8009032:	ec41 0b18 	vmov	d8, r0, r1
 8009036:	4639      	mov	r1, r7
 8009038:	4630      	mov	r0, r6
 800903a:	f7f7 fdad 	bl	8000b98 <__aeabi_d2iz>
 800903e:	900c      	str	r0, [sp, #48]	; 0x30
 8009040:	f7f7 fa90 	bl	8000564 <__aeabi_i2d>
 8009044:	4602      	mov	r2, r0
 8009046:	460b      	mov	r3, r1
 8009048:	4630      	mov	r0, r6
 800904a:	4639      	mov	r1, r7
 800904c:	f7f7 f93c 	bl	80002c8 <__aeabi_dsub>
 8009050:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009052:	3330      	adds	r3, #48	; 0x30
 8009054:	f805 3b01 	strb.w	r3, [r5], #1
 8009058:	ec53 2b18 	vmov	r2, r3, d8
 800905c:	4606      	mov	r6, r0
 800905e:	460f      	mov	r7, r1
 8009060:	f7f7 fd5c 	bl	8000b1c <__aeabi_dcmplt>
 8009064:	2800      	cmp	r0, #0
 8009066:	d165      	bne.n	8009134 <_dtoa_r+0x63c>
 8009068:	4632      	mov	r2, r6
 800906a:	463b      	mov	r3, r7
 800906c:	4935      	ldr	r1, [pc, #212]	; (8009144 <_dtoa_r+0x64c>)
 800906e:	2000      	movs	r0, #0
 8009070:	f7f7 f92a 	bl	80002c8 <__aeabi_dsub>
 8009074:	ec53 2b18 	vmov	r2, r3, d8
 8009078:	f7f7 fd50 	bl	8000b1c <__aeabi_dcmplt>
 800907c:	2800      	cmp	r0, #0
 800907e:	f040 80b9 	bne.w	80091f4 <_dtoa_r+0x6fc>
 8009082:	9b02      	ldr	r3, [sp, #8]
 8009084:	429d      	cmp	r5, r3
 8009086:	f43f af75 	beq.w	8008f74 <_dtoa_r+0x47c>
 800908a:	4b2f      	ldr	r3, [pc, #188]	; (8009148 <_dtoa_r+0x650>)
 800908c:	ec51 0b18 	vmov	r0, r1, d8
 8009090:	2200      	movs	r2, #0
 8009092:	f7f7 fad1 	bl	8000638 <__aeabi_dmul>
 8009096:	4b2c      	ldr	r3, [pc, #176]	; (8009148 <_dtoa_r+0x650>)
 8009098:	ec41 0b18 	vmov	d8, r0, r1
 800909c:	2200      	movs	r2, #0
 800909e:	4630      	mov	r0, r6
 80090a0:	4639      	mov	r1, r7
 80090a2:	f7f7 fac9 	bl	8000638 <__aeabi_dmul>
 80090a6:	4606      	mov	r6, r0
 80090a8:	460f      	mov	r7, r1
 80090aa:	e7c4      	b.n	8009036 <_dtoa_r+0x53e>
 80090ac:	ec51 0b17 	vmov	r0, r1, d7
 80090b0:	f7f7 fac2 	bl	8000638 <__aeabi_dmul>
 80090b4:	9b02      	ldr	r3, [sp, #8]
 80090b6:	9d00      	ldr	r5, [sp, #0]
 80090b8:	930c      	str	r3, [sp, #48]	; 0x30
 80090ba:	ec41 0b18 	vmov	d8, r0, r1
 80090be:	4639      	mov	r1, r7
 80090c0:	4630      	mov	r0, r6
 80090c2:	f7f7 fd69 	bl	8000b98 <__aeabi_d2iz>
 80090c6:	9011      	str	r0, [sp, #68]	; 0x44
 80090c8:	f7f7 fa4c 	bl	8000564 <__aeabi_i2d>
 80090cc:	4602      	mov	r2, r0
 80090ce:	460b      	mov	r3, r1
 80090d0:	4630      	mov	r0, r6
 80090d2:	4639      	mov	r1, r7
 80090d4:	f7f7 f8f8 	bl	80002c8 <__aeabi_dsub>
 80090d8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80090da:	3330      	adds	r3, #48	; 0x30
 80090dc:	f805 3b01 	strb.w	r3, [r5], #1
 80090e0:	9b02      	ldr	r3, [sp, #8]
 80090e2:	429d      	cmp	r5, r3
 80090e4:	4606      	mov	r6, r0
 80090e6:	460f      	mov	r7, r1
 80090e8:	f04f 0200 	mov.w	r2, #0
 80090ec:	d134      	bne.n	8009158 <_dtoa_r+0x660>
 80090ee:	4b19      	ldr	r3, [pc, #100]	; (8009154 <_dtoa_r+0x65c>)
 80090f0:	ec51 0b18 	vmov	r0, r1, d8
 80090f4:	f7f7 f8ea 	bl	80002cc <__adddf3>
 80090f8:	4602      	mov	r2, r0
 80090fa:	460b      	mov	r3, r1
 80090fc:	4630      	mov	r0, r6
 80090fe:	4639      	mov	r1, r7
 8009100:	f7f7 fd2a 	bl	8000b58 <__aeabi_dcmpgt>
 8009104:	2800      	cmp	r0, #0
 8009106:	d175      	bne.n	80091f4 <_dtoa_r+0x6fc>
 8009108:	ec53 2b18 	vmov	r2, r3, d8
 800910c:	4911      	ldr	r1, [pc, #68]	; (8009154 <_dtoa_r+0x65c>)
 800910e:	2000      	movs	r0, #0
 8009110:	f7f7 f8da 	bl	80002c8 <__aeabi_dsub>
 8009114:	4602      	mov	r2, r0
 8009116:	460b      	mov	r3, r1
 8009118:	4630      	mov	r0, r6
 800911a:	4639      	mov	r1, r7
 800911c:	f7f7 fcfe 	bl	8000b1c <__aeabi_dcmplt>
 8009120:	2800      	cmp	r0, #0
 8009122:	f43f af27 	beq.w	8008f74 <_dtoa_r+0x47c>
 8009126:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009128:	1e6b      	subs	r3, r5, #1
 800912a:	930c      	str	r3, [sp, #48]	; 0x30
 800912c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009130:	2b30      	cmp	r3, #48	; 0x30
 8009132:	d0f8      	beq.n	8009126 <_dtoa_r+0x62e>
 8009134:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8009138:	e04a      	b.n	80091d0 <_dtoa_r+0x6d8>
 800913a:	bf00      	nop
 800913c:	0800c1b8 	.word	0x0800c1b8
 8009140:	0800c190 	.word	0x0800c190
 8009144:	3ff00000 	.word	0x3ff00000
 8009148:	40240000 	.word	0x40240000
 800914c:	401c0000 	.word	0x401c0000
 8009150:	40140000 	.word	0x40140000
 8009154:	3fe00000 	.word	0x3fe00000
 8009158:	4baf      	ldr	r3, [pc, #700]	; (8009418 <_dtoa_r+0x920>)
 800915a:	f7f7 fa6d 	bl	8000638 <__aeabi_dmul>
 800915e:	4606      	mov	r6, r0
 8009160:	460f      	mov	r7, r1
 8009162:	e7ac      	b.n	80090be <_dtoa_r+0x5c6>
 8009164:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8009168:	9d00      	ldr	r5, [sp, #0]
 800916a:	4642      	mov	r2, r8
 800916c:	464b      	mov	r3, r9
 800916e:	4630      	mov	r0, r6
 8009170:	4639      	mov	r1, r7
 8009172:	f7f7 fb8b 	bl	800088c <__aeabi_ddiv>
 8009176:	f7f7 fd0f 	bl	8000b98 <__aeabi_d2iz>
 800917a:	9002      	str	r0, [sp, #8]
 800917c:	f7f7 f9f2 	bl	8000564 <__aeabi_i2d>
 8009180:	4642      	mov	r2, r8
 8009182:	464b      	mov	r3, r9
 8009184:	f7f7 fa58 	bl	8000638 <__aeabi_dmul>
 8009188:	4602      	mov	r2, r0
 800918a:	460b      	mov	r3, r1
 800918c:	4630      	mov	r0, r6
 800918e:	4639      	mov	r1, r7
 8009190:	f7f7 f89a 	bl	80002c8 <__aeabi_dsub>
 8009194:	9e02      	ldr	r6, [sp, #8]
 8009196:	9f01      	ldr	r7, [sp, #4]
 8009198:	3630      	adds	r6, #48	; 0x30
 800919a:	f805 6b01 	strb.w	r6, [r5], #1
 800919e:	9e00      	ldr	r6, [sp, #0]
 80091a0:	1bae      	subs	r6, r5, r6
 80091a2:	42b7      	cmp	r7, r6
 80091a4:	4602      	mov	r2, r0
 80091a6:	460b      	mov	r3, r1
 80091a8:	d137      	bne.n	800921a <_dtoa_r+0x722>
 80091aa:	f7f7 f88f 	bl	80002cc <__adddf3>
 80091ae:	4642      	mov	r2, r8
 80091b0:	464b      	mov	r3, r9
 80091b2:	4606      	mov	r6, r0
 80091b4:	460f      	mov	r7, r1
 80091b6:	f7f7 fccf 	bl	8000b58 <__aeabi_dcmpgt>
 80091ba:	b9c8      	cbnz	r0, 80091f0 <_dtoa_r+0x6f8>
 80091bc:	4642      	mov	r2, r8
 80091be:	464b      	mov	r3, r9
 80091c0:	4630      	mov	r0, r6
 80091c2:	4639      	mov	r1, r7
 80091c4:	f7f7 fca0 	bl	8000b08 <__aeabi_dcmpeq>
 80091c8:	b110      	cbz	r0, 80091d0 <_dtoa_r+0x6d8>
 80091ca:	9b02      	ldr	r3, [sp, #8]
 80091cc:	07d9      	lsls	r1, r3, #31
 80091ce:	d40f      	bmi.n	80091f0 <_dtoa_r+0x6f8>
 80091d0:	4620      	mov	r0, r4
 80091d2:	4659      	mov	r1, fp
 80091d4:	f000 fe58 	bl	8009e88 <_Bfree>
 80091d8:	2300      	movs	r3, #0
 80091da:	702b      	strb	r3, [r5, #0]
 80091dc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80091de:	f10a 0001 	add.w	r0, sl, #1
 80091e2:	6018      	str	r0, [r3, #0]
 80091e4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	f43f acd8 	beq.w	8008b9c <_dtoa_r+0xa4>
 80091ec:	601d      	str	r5, [r3, #0]
 80091ee:	e4d5      	b.n	8008b9c <_dtoa_r+0xa4>
 80091f0:	f8cd a01c 	str.w	sl, [sp, #28]
 80091f4:	462b      	mov	r3, r5
 80091f6:	461d      	mov	r5, r3
 80091f8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80091fc:	2a39      	cmp	r2, #57	; 0x39
 80091fe:	d108      	bne.n	8009212 <_dtoa_r+0x71a>
 8009200:	9a00      	ldr	r2, [sp, #0]
 8009202:	429a      	cmp	r2, r3
 8009204:	d1f7      	bne.n	80091f6 <_dtoa_r+0x6fe>
 8009206:	9a07      	ldr	r2, [sp, #28]
 8009208:	9900      	ldr	r1, [sp, #0]
 800920a:	3201      	adds	r2, #1
 800920c:	9207      	str	r2, [sp, #28]
 800920e:	2230      	movs	r2, #48	; 0x30
 8009210:	700a      	strb	r2, [r1, #0]
 8009212:	781a      	ldrb	r2, [r3, #0]
 8009214:	3201      	adds	r2, #1
 8009216:	701a      	strb	r2, [r3, #0]
 8009218:	e78c      	b.n	8009134 <_dtoa_r+0x63c>
 800921a:	4b7f      	ldr	r3, [pc, #508]	; (8009418 <_dtoa_r+0x920>)
 800921c:	2200      	movs	r2, #0
 800921e:	f7f7 fa0b 	bl	8000638 <__aeabi_dmul>
 8009222:	2200      	movs	r2, #0
 8009224:	2300      	movs	r3, #0
 8009226:	4606      	mov	r6, r0
 8009228:	460f      	mov	r7, r1
 800922a:	f7f7 fc6d 	bl	8000b08 <__aeabi_dcmpeq>
 800922e:	2800      	cmp	r0, #0
 8009230:	d09b      	beq.n	800916a <_dtoa_r+0x672>
 8009232:	e7cd      	b.n	80091d0 <_dtoa_r+0x6d8>
 8009234:	9a08      	ldr	r2, [sp, #32]
 8009236:	2a00      	cmp	r2, #0
 8009238:	f000 80c4 	beq.w	80093c4 <_dtoa_r+0x8cc>
 800923c:	9a05      	ldr	r2, [sp, #20]
 800923e:	2a01      	cmp	r2, #1
 8009240:	f300 80a8 	bgt.w	8009394 <_dtoa_r+0x89c>
 8009244:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009246:	2a00      	cmp	r2, #0
 8009248:	f000 80a0 	beq.w	800938c <_dtoa_r+0x894>
 800924c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009250:	9e06      	ldr	r6, [sp, #24]
 8009252:	4645      	mov	r5, r8
 8009254:	9a04      	ldr	r2, [sp, #16]
 8009256:	2101      	movs	r1, #1
 8009258:	441a      	add	r2, r3
 800925a:	4620      	mov	r0, r4
 800925c:	4498      	add	r8, r3
 800925e:	9204      	str	r2, [sp, #16]
 8009260:	f000 ff18 	bl	800a094 <__i2b>
 8009264:	4607      	mov	r7, r0
 8009266:	2d00      	cmp	r5, #0
 8009268:	dd0b      	ble.n	8009282 <_dtoa_r+0x78a>
 800926a:	9b04      	ldr	r3, [sp, #16]
 800926c:	2b00      	cmp	r3, #0
 800926e:	dd08      	ble.n	8009282 <_dtoa_r+0x78a>
 8009270:	42ab      	cmp	r3, r5
 8009272:	9a04      	ldr	r2, [sp, #16]
 8009274:	bfa8      	it	ge
 8009276:	462b      	movge	r3, r5
 8009278:	eba8 0803 	sub.w	r8, r8, r3
 800927c:	1aed      	subs	r5, r5, r3
 800927e:	1ad3      	subs	r3, r2, r3
 8009280:	9304      	str	r3, [sp, #16]
 8009282:	9b06      	ldr	r3, [sp, #24]
 8009284:	b1fb      	cbz	r3, 80092c6 <_dtoa_r+0x7ce>
 8009286:	9b08      	ldr	r3, [sp, #32]
 8009288:	2b00      	cmp	r3, #0
 800928a:	f000 809f 	beq.w	80093cc <_dtoa_r+0x8d4>
 800928e:	2e00      	cmp	r6, #0
 8009290:	dd11      	ble.n	80092b6 <_dtoa_r+0x7be>
 8009292:	4639      	mov	r1, r7
 8009294:	4632      	mov	r2, r6
 8009296:	4620      	mov	r0, r4
 8009298:	f000 ffb8 	bl	800a20c <__pow5mult>
 800929c:	465a      	mov	r2, fp
 800929e:	4601      	mov	r1, r0
 80092a0:	4607      	mov	r7, r0
 80092a2:	4620      	mov	r0, r4
 80092a4:	f000 ff0c 	bl	800a0c0 <__multiply>
 80092a8:	4659      	mov	r1, fp
 80092aa:	9007      	str	r0, [sp, #28]
 80092ac:	4620      	mov	r0, r4
 80092ae:	f000 fdeb 	bl	8009e88 <_Bfree>
 80092b2:	9b07      	ldr	r3, [sp, #28]
 80092b4:	469b      	mov	fp, r3
 80092b6:	9b06      	ldr	r3, [sp, #24]
 80092b8:	1b9a      	subs	r2, r3, r6
 80092ba:	d004      	beq.n	80092c6 <_dtoa_r+0x7ce>
 80092bc:	4659      	mov	r1, fp
 80092be:	4620      	mov	r0, r4
 80092c0:	f000 ffa4 	bl	800a20c <__pow5mult>
 80092c4:	4683      	mov	fp, r0
 80092c6:	2101      	movs	r1, #1
 80092c8:	4620      	mov	r0, r4
 80092ca:	f000 fee3 	bl	800a094 <__i2b>
 80092ce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	4606      	mov	r6, r0
 80092d4:	dd7c      	ble.n	80093d0 <_dtoa_r+0x8d8>
 80092d6:	461a      	mov	r2, r3
 80092d8:	4601      	mov	r1, r0
 80092da:	4620      	mov	r0, r4
 80092dc:	f000 ff96 	bl	800a20c <__pow5mult>
 80092e0:	9b05      	ldr	r3, [sp, #20]
 80092e2:	2b01      	cmp	r3, #1
 80092e4:	4606      	mov	r6, r0
 80092e6:	dd76      	ble.n	80093d6 <_dtoa_r+0x8de>
 80092e8:	2300      	movs	r3, #0
 80092ea:	9306      	str	r3, [sp, #24]
 80092ec:	6933      	ldr	r3, [r6, #16]
 80092ee:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80092f2:	6918      	ldr	r0, [r3, #16]
 80092f4:	f000 fe7e 	bl	8009ff4 <__hi0bits>
 80092f8:	f1c0 0020 	rsb	r0, r0, #32
 80092fc:	9b04      	ldr	r3, [sp, #16]
 80092fe:	4418      	add	r0, r3
 8009300:	f010 001f 	ands.w	r0, r0, #31
 8009304:	f000 8086 	beq.w	8009414 <_dtoa_r+0x91c>
 8009308:	f1c0 0320 	rsb	r3, r0, #32
 800930c:	2b04      	cmp	r3, #4
 800930e:	dd7f      	ble.n	8009410 <_dtoa_r+0x918>
 8009310:	f1c0 001c 	rsb	r0, r0, #28
 8009314:	9b04      	ldr	r3, [sp, #16]
 8009316:	4403      	add	r3, r0
 8009318:	4480      	add	r8, r0
 800931a:	4405      	add	r5, r0
 800931c:	9304      	str	r3, [sp, #16]
 800931e:	f1b8 0f00 	cmp.w	r8, #0
 8009322:	dd05      	ble.n	8009330 <_dtoa_r+0x838>
 8009324:	4659      	mov	r1, fp
 8009326:	4642      	mov	r2, r8
 8009328:	4620      	mov	r0, r4
 800932a:	f000 ffc9 	bl	800a2c0 <__lshift>
 800932e:	4683      	mov	fp, r0
 8009330:	9b04      	ldr	r3, [sp, #16]
 8009332:	2b00      	cmp	r3, #0
 8009334:	dd05      	ble.n	8009342 <_dtoa_r+0x84a>
 8009336:	4631      	mov	r1, r6
 8009338:	461a      	mov	r2, r3
 800933a:	4620      	mov	r0, r4
 800933c:	f000 ffc0 	bl	800a2c0 <__lshift>
 8009340:	4606      	mov	r6, r0
 8009342:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009344:	2b00      	cmp	r3, #0
 8009346:	d069      	beq.n	800941c <_dtoa_r+0x924>
 8009348:	4631      	mov	r1, r6
 800934a:	4658      	mov	r0, fp
 800934c:	f001 f824 	bl	800a398 <__mcmp>
 8009350:	2800      	cmp	r0, #0
 8009352:	da63      	bge.n	800941c <_dtoa_r+0x924>
 8009354:	2300      	movs	r3, #0
 8009356:	4659      	mov	r1, fp
 8009358:	220a      	movs	r2, #10
 800935a:	4620      	mov	r0, r4
 800935c:	f000 fdb6 	bl	8009ecc <__multadd>
 8009360:	9b08      	ldr	r3, [sp, #32]
 8009362:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009366:	4683      	mov	fp, r0
 8009368:	2b00      	cmp	r3, #0
 800936a:	f000 818f 	beq.w	800968c <_dtoa_r+0xb94>
 800936e:	4639      	mov	r1, r7
 8009370:	2300      	movs	r3, #0
 8009372:	220a      	movs	r2, #10
 8009374:	4620      	mov	r0, r4
 8009376:	f000 fda9 	bl	8009ecc <__multadd>
 800937a:	f1b9 0f00 	cmp.w	r9, #0
 800937e:	4607      	mov	r7, r0
 8009380:	f300 808e 	bgt.w	80094a0 <_dtoa_r+0x9a8>
 8009384:	9b05      	ldr	r3, [sp, #20]
 8009386:	2b02      	cmp	r3, #2
 8009388:	dc50      	bgt.n	800942c <_dtoa_r+0x934>
 800938a:	e089      	b.n	80094a0 <_dtoa_r+0x9a8>
 800938c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800938e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009392:	e75d      	b.n	8009250 <_dtoa_r+0x758>
 8009394:	9b01      	ldr	r3, [sp, #4]
 8009396:	1e5e      	subs	r6, r3, #1
 8009398:	9b06      	ldr	r3, [sp, #24]
 800939a:	42b3      	cmp	r3, r6
 800939c:	bfbf      	itttt	lt
 800939e:	9b06      	ldrlt	r3, [sp, #24]
 80093a0:	9606      	strlt	r6, [sp, #24]
 80093a2:	1af2      	sublt	r2, r6, r3
 80093a4:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 80093a6:	bfb6      	itet	lt
 80093a8:	189b      	addlt	r3, r3, r2
 80093aa:	1b9e      	subge	r6, r3, r6
 80093ac:	930d      	strlt	r3, [sp, #52]	; 0x34
 80093ae:	9b01      	ldr	r3, [sp, #4]
 80093b0:	bfb8      	it	lt
 80093b2:	2600      	movlt	r6, #0
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	bfb5      	itete	lt
 80093b8:	eba8 0503 	sublt.w	r5, r8, r3
 80093bc:	9b01      	ldrge	r3, [sp, #4]
 80093be:	2300      	movlt	r3, #0
 80093c0:	4645      	movge	r5, r8
 80093c2:	e747      	b.n	8009254 <_dtoa_r+0x75c>
 80093c4:	9e06      	ldr	r6, [sp, #24]
 80093c6:	9f08      	ldr	r7, [sp, #32]
 80093c8:	4645      	mov	r5, r8
 80093ca:	e74c      	b.n	8009266 <_dtoa_r+0x76e>
 80093cc:	9a06      	ldr	r2, [sp, #24]
 80093ce:	e775      	b.n	80092bc <_dtoa_r+0x7c4>
 80093d0:	9b05      	ldr	r3, [sp, #20]
 80093d2:	2b01      	cmp	r3, #1
 80093d4:	dc18      	bgt.n	8009408 <_dtoa_r+0x910>
 80093d6:	9b02      	ldr	r3, [sp, #8]
 80093d8:	b9b3      	cbnz	r3, 8009408 <_dtoa_r+0x910>
 80093da:	9b03      	ldr	r3, [sp, #12]
 80093dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80093e0:	b9a3      	cbnz	r3, 800940c <_dtoa_r+0x914>
 80093e2:	9b03      	ldr	r3, [sp, #12]
 80093e4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80093e8:	0d1b      	lsrs	r3, r3, #20
 80093ea:	051b      	lsls	r3, r3, #20
 80093ec:	b12b      	cbz	r3, 80093fa <_dtoa_r+0x902>
 80093ee:	9b04      	ldr	r3, [sp, #16]
 80093f0:	3301      	adds	r3, #1
 80093f2:	9304      	str	r3, [sp, #16]
 80093f4:	f108 0801 	add.w	r8, r8, #1
 80093f8:	2301      	movs	r3, #1
 80093fa:	9306      	str	r3, [sp, #24]
 80093fc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80093fe:	2b00      	cmp	r3, #0
 8009400:	f47f af74 	bne.w	80092ec <_dtoa_r+0x7f4>
 8009404:	2001      	movs	r0, #1
 8009406:	e779      	b.n	80092fc <_dtoa_r+0x804>
 8009408:	2300      	movs	r3, #0
 800940a:	e7f6      	b.n	80093fa <_dtoa_r+0x902>
 800940c:	9b02      	ldr	r3, [sp, #8]
 800940e:	e7f4      	b.n	80093fa <_dtoa_r+0x902>
 8009410:	d085      	beq.n	800931e <_dtoa_r+0x826>
 8009412:	4618      	mov	r0, r3
 8009414:	301c      	adds	r0, #28
 8009416:	e77d      	b.n	8009314 <_dtoa_r+0x81c>
 8009418:	40240000 	.word	0x40240000
 800941c:	9b01      	ldr	r3, [sp, #4]
 800941e:	2b00      	cmp	r3, #0
 8009420:	dc38      	bgt.n	8009494 <_dtoa_r+0x99c>
 8009422:	9b05      	ldr	r3, [sp, #20]
 8009424:	2b02      	cmp	r3, #2
 8009426:	dd35      	ble.n	8009494 <_dtoa_r+0x99c>
 8009428:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800942c:	f1b9 0f00 	cmp.w	r9, #0
 8009430:	d10d      	bne.n	800944e <_dtoa_r+0x956>
 8009432:	4631      	mov	r1, r6
 8009434:	464b      	mov	r3, r9
 8009436:	2205      	movs	r2, #5
 8009438:	4620      	mov	r0, r4
 800943a:	f000 fd47 	bl	8009ecc <__multadd>
 800943e:	4601      	mov	r1, r0
 8009440:	4606      	mov	r6, r0
 8009442:	4658      	mov	r0, fp
 8009444:	f000 ffa8 	bl	800a398 <__mcmp>
 8009448:	2800      	cmp	r0, #0
 800944a:	f73f adbd 	bgt.w	8008fc8 <_dtoa_r+0x4d0>
 800944e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009450:	9d00      	ldr	r5, [sp, #0]
 8009452:	ea6f 0a03 	mvn.w	sl, r3
 8009456:	f04f 0800 	mov.w	r8, #0
 800945a:	4631      	mov	r1, r6
 800945c:	4620      	mov	r0, r4
 800945e:	f000 fd13 	bl	8009e88 <_Bfree>
 8009462:	2f00      	cmp	r7, #0
 8009464:	f43f aeb4 	beq.w	80091d0 <_dtoa_r+0x6d8>
 8009468:	f1b8 0f00 	cmp.w	r8, #0
 800946c:	d005      	beq.n	800947a <_dtoa_r+0x982>
 800946e:	45b8      	cmp	r8, r7
 8009470:	d003      	beq.n	800947a <_dtoa_r+0x982>
 8009472:	4641      	mov	r1, r8
 8009474:	4620      	mov	r0, r4
 8009476:	f000 fd07 	bl	8009e88 <_Bfree>
 800947a:	4639      	mov	r1, r7
 800947c:	4620      	mov	r0, r4
 800947e:	f000 fd03 	bl	8009e88 <_Bfree>
 8009482:	e6a5      	b.n	80091d0 <_dtoa_r+0x6d8>
 8009484:	2600      	movs	r6, #0
 8009486:	4637      	mov	r7, r6
 8009488:	e7e1      	b.n	800944e <_dtoa_r+0x956>
 800948a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800948c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8009490:	4637      	mov	r7, r6
 8009492:	e599      	b.n	8008fc8 <_dtoa_r+0x4d0>
 8009494:	9b08      	ldr	r3, [sp, #32]
 8009496:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800949a:	2b00      	cmp	r3, #0
 800949c:	f000 80fd 	beq.w	800969a <_dtoa_r+0xba2>
 80094a0:	2d00      	cmp	r5, #0
 80094a2:	dd05      	ble.n	80094b0 <_dtoa_r+0x9b8>
 80094a4:	4639      	mov	r1, r7
 80094a6:	462a      	mov	r2, r5
 80094a8:	4620      	mov	r0, r4
 80094aa:	f000 ff09 	bl	800a2c0 <__lshift>
 80094ae:	4607      	mov	r7, r0
 80094b0:	9b06      	ldr	r3, [sp, #24]
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d05c      	beq.n	8009570 <_dtoa_r+0xa78>
 80094b6:	6879      	ldr	r1, [r7, #4]
 80094b8:	4620      	mov	r0, r4
 80094ba:	f000 fca5 	bl	8009e08 <_Balloc>
 80094be:	4605      	mov	r5, r0
 80094c0:	b928      	cbnz	r0, 80094ce <_dtoa_r+0x9d6>
 80094c2:	4b80      	ldr	r3, [pc, #512]	; (80096c4 <_dtoa_r+0xbcc>)
 80094c4:	4602      	mov	r2, r0
 80094c6:	f240 21ea 	movw	r1, #746	; 0x2ea
 80094ca:	f7ff bb2e 	b.w	8008b2a <_dtoa_r+0x32>
 80094ce:	693a      	ldr	r2, [r7, #16]
 80094d0:	3202      	adds	r2, #2
 80094d2:	0092      	lsls	r2, r2, #2
 80094d4:	f107 010c 	add.w	r1, r7, #12
 80094d8:	300c      	adds	r0, #12
 80094da:	f000 fc87 	bl	8009dec <memcpy>
 80094de:	2201      	movs	r2, #1
 80094e0:	4629      	mov	r1, r5
 80094e2:	4620      	mov	r0, r4
 80094e4:	f000 feec 	bl	800a2c0 <__lshift>
 80094e8:	9b00      	ldr	r3, [sp, #0]
 80094ea:	3301      	adds	r3, #1
 80094ec:	9301      	str	r3, [sp, #4]
 80094ee:	9b00      	ldr	r3, [sp, #0]
 80094f0:	444b      	add	r3, r9
 80094f2:	9307      	str	r3, [sp, #28]
 80094f4:	9b02      	ldr	r3, [sp, #8]
 80094f6:	f003 0301 	and.w	r3, r3, #1
 80094fa:	46b8      	mov	r8, r7
 80094fc:	9306      	str	r3, [sp, #24]
 80094fe:	4607      	mov	r7, r0
 8009500:	9b01      	ldr	r3, [sp, #4]
 8009502:	4631      	mov	r1, r6
 8009504:	3b01      	subs	r3, #1
 8009506:	4658      	mov	r0, fp
 8009508:	9302      	str	r3, [sp, #8]
 800950a:	f7ff fa67 	bl	80089dc <quorem>
 800950e:	4603      	mov	r3, r0
 8009510:	3330      	adds	r3, #48	; 0x30
 8009512:	9004      	str	r0, [sp, #16]
 8009514:	4641      	mov	r1, r8
 8009516:	4658      	mov	r0, fp
 8009518:	9308      	str	r3, [sp, #32]
 800951a:	f000 ff3d 	bl	800a398 <__mcmp>
 800951e:	463a      	mov	r2, r7
 8009520:	4681      	mov	r9, r0
 8009522:	4631      	mov	r1, r6
 8009524:	4620      	mov	r0, r4
 8009526:	f000 ff53 	bl	800a3d0 <__mdiff>
 800952a:	68c2      	ldr	r2, [r0, #12]
 800952c:	9b08      	ldr	r3, [sp, #32]
 800952e:	4605      	mov	r5, r0
 8009530:	bb02      	cbnz	r2, 8009574 <_dtoa_r+0xa7c>
 8009532:	4601      	mov	r1, r0
 8009534:	4658      	mov	r0, fp
 8009536:	f000 ff2f 	bl	800a398 <__mcmp>
 800953a:	9b08      	ldr	r3, [sp, #32]
 800953c:	4602      	mov	r2, r0
 800953e:	4629      	mov	r1, r5
 8009540:	4620      	mov	r0, r4
 8009542:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8009546:	f000 fc9f 	bl	8009e88 <_Bfree>
 800954a:	9b05      	ldr	r3, [sp, #20]
 800954c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800954e:	9d01      	ldr	r5, [sp, #4]
 8009550:	ea43 0102 	orr.w	r1, r3, r2
 8009554:	9b06      	ldr	r3, [sp, #24]
 8009556:	430b      	orrs	r3, r1
 8009558:	9b08      	ldr	r3, [sp, #32]
 800955a:	d10d      	bne.n	8009578 <_dtoa_r+0xa80>
 800955c:	2b39      	cmp	r3, #57	; 0x39
 800955e:	d029      	beq.n	80095b4 <_dtoa_r+0xabc>
 8009560:	f1b9 0f00 	cmp.w	r9, #0
 8009564:	dd01      	ble.n	800956a <_dtoa_r+0xa72>
 8009566:	9b04      	ldr	r3, [sp, #16]
 8009568:	3331      	adds	r3, #49	; 0x31
 800956a:	9a02      	ldr	r2, [sp, #8]
 800956c:	7013      	strb	r3, [r2, #0]
 800956e:	e774      	b.n	800945a <_dtoa_r+0x962>
 8009570:	4638      	mov	r0, r7
 8009572:	e7b9      	b.n	80094e8 <_dtoa_r+0x9f0>
 8009574:	2201      	movs	r2, #1
 8009576:	e7e2      	b.n	800953e <_dtoa_r+0xa46>
 8009578:	f1b9 0f00 	cmp.w	r9, #0
 800957c:	db06      	blt.n	800958c <_dtoa_r+0xa94>
 800957e:	9905      	ldr	r1, [sp, #20]
 8009580:	ea41 0909 	orr.w	r9, r1, r9
 8009584:	9906      	ldr	r1, [sp, #24]
 8009586:	ea59 0101 	orrs.w	r1, r9, r1
 800958a:	d120      	bne.n	80095ce <_dtoa_r+0xad6>
 800958c:	2a00      	cmp	r2, #0
 800958e:	ddec      	ble.n	800956a <_dtoa_r+0xa72>
 8009590:	4659      	mov	r1, fp
 8009592:	2201      	movs	r2, #1
 8009594:	4620      	mov	r0, r4
 8009596:	9301      	str	r3, [sp, #4]
 8009598:	f000 fe92 	bl	800a2c0 <__lshift>
 800959c:	4631      	mov	r1, r6
 800959e:	4683      	mov	fp, r0
 80095a0:	f000 fefa 	bl	800a398 <__mcmp>
 80095a4:	2800      	cmp	r0, #0
 80095a6:	9b01      	ldr	r3, [sp, #4]
 80095a8:	dc02      	bgt.n	80095b0 <_dtoa_r+0xab8>
 80095aa:	d1de      	bne.n	800956a <_dtoa_r+0xa72>
 80095ac:	07da      	lsls	r2, r3, #31
 80095ae:	d5dc      	bpl.n	800956a <_dtoa_r+0xa72>
 80095b0:	2b39      	cmp	r3, #57	; 0x39
 80095b2:	d1d8      	bne.n	8009566 <_dtoa_r+0xa6e>
 80095b4:	9a02      	ldr	r2, [sp, #8]
 80095b6:	2339      	movs	r3, #57	; 0x39
 80095b8:	7013      	strb	r3, [r2, #0]
 80095ba:	462b      	mov	r3, r5
 80095bc:	461d      	mov	r5, r3
 80095be:	3b01      	subs	r3, #1
 80095c0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80095c4:	2a39      	cmp	r2, #57	; 0x39
 80095c6:	d050      	beq.n	800966a <_dtoa_r+0xb72>
 80095c8:	3201      	adds	r2, #1
 80095ca:	701a      	strb	r2, [r3, #0]
 80095cc:	e745      	b.n	800945a <_dtoa_r+0x962>
 80095ce:	2a00      	cmp	r2, #0
 80095d0:	dd03      	ble.n	80095da <_dtoa_r+0xae2>
 80095d2:	2b39      	cmp	r3, #57	; 0x39
 80095d4:	d0ee      	beq.n	80095b4 <_dtoa_r+0xabc>
 80095d6:	3301      	adds	r3, #1
 80095d8:	e7c7      	b.n	800956a <_dtoa_r+0xa72>
 80095da:	9a01      	ldr	r2, [sp, #4]
 80095dc:	9907      	ldr	r1, [sp, #28]
 80095de:	f802 3c01 	strb.w	r3, [r2, #-1]
 80095e2:	428a      	cmp	r2, r1
 80095e4:	d02a      	beq.n	800963c <_dtoa_r+0xb44>
 80095e6:	4659      	mov	r1, fp
 80095e8:	2300      	movs	r3, #0
 80095ea:	220a      	movs	r2, #10
 80095ec:	4620      	mov	r0, r4
 80095ee:	f000 fc6d 	bl	8009ecc <__multadd>
 80095f2:	45b8      	cmp	r8, r7
 80095f4:	4683      	mov	fp, r0
 80095f6:	f04f 0300 	mov.w	r3, #0
 80095fa:	f04f 020a 	mov.w	r2, #10
 80095fe:	4641      	mov	r1, r8
 8009600:	4620      	mov	r0, r4
 8009602:	d107      	bne.n	8009614 <_dtoa_r+0xb1c>
 8009604:	f000 fc62 	bl	8009ecc <__multadd>
 8009608:	4680      	mov	r8, r0
 800960a:	4607      	mov	r7, r0
 800960c:	9b01      	ldr	r3, [sp, #4]
 800960e:	3301      	adds	r3, #1
 8009610:	9301      	str	r3, [sp, #4]
 8009612:	e775      	b.n	8009500 <_dtoa_r+0xa08>
 8009614:	f000 fc5a 	bl	8009ecc <__multadd>
 8009618:	4639      	mov	r1, r7
 800961a:	4680      	mov	r8, r0
 800961c:	2300      	movs	r3, #0
 800961e:	220a      	movs	r2, #10
 8009620:	4620      	mov	r0, r4
 8009622:	f000 fc53 	bl	8009ecc <__multadd>
 8009626:	4607      	mov	r7, r0
 8009628:	e7f0      	b.n	800960c <_dtoa_r+0xb14>
 800962a:	f1b9 0f00 	cmp.w	r9, #0
 800962e:	9a00      	ldr	r2, [sp, #0]
 8009630:	bfcc      	ite	gt
 8009632:	464d      	movgt	r5, r9
 8009634:	2501      	movle	r5, #1
 8009636:	4415      	add	r5, r2
 8009638:	f04f 0800 	mov.w	r8, #0
 800963c:	4659      	mov	r1, fp
 800963e:	2201      	movs	r2, #1
 8009640:	4620      	mov	r0, r4
 8009642:	9301      	str	r3, [sp, #4]
 8009644:	f000 fe3c 	bl	800a2c0 <__lshift>
 8009648:	4631      	mov	r1, r6
 800964a:	4683      	mov	fp, r0
 800964c:	f000 fea4 	bl	800a398 <__mcmp>
 8009650:	2800      	cmp	r0, #0
 8009652:	dcb2      	bgt.n	80095ba <_dtoa_r+0xac2>
 8009654:	d102      	bne.n	800965c <_dtoa_r+0xb64>
 8009656:	9b01      	ldr	r3, [sp, #4]
 8009658:	07db      	lsls	r3, r3, #31
 800965a:	d4ae      	bmi.n	80095ba <_dtoa_r+0xac2>
 800965c:	462b      	mov	r3, r5
 800965e:	461d      	mov	r5, r3
 8009660:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009664:	2a30      	cmp	r2, #48	; 0x30
 8009666:	d0fa      	beq.n	800965e <_dtoa_r+0xb66>
 8009668:	e6f7      	b.n	800945a <_dtoa_r+0x962>
 800966a:	9a00      	ldr	r2, [sp, #0]
 800966c:	429a      	cmp	r2, r3
 800966e:	d1a5      	bne.n	80095bc <_dtoa_r+0xac4>
 8009670:	f10a 0a01 	add.w	sl, sl, #1
 8009674:	2331      	movs	r3, #49	; 0x31
 8009676:	e779      	b.n	800956c <_dtoa_r+0xa74>
 8009678:	4b13      	ldr	r3, [pc, #76]	; (80096c8 <_dtoa_r+0xbd0>)
 800967a:	f7ff baaf 	b.w	8008bdc <_dtoa_r+0xe4>
 800967e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009680:	2b00      	cmp	r3, #0
 8009682:	f47f aa86 	bne.w	8008b92 <_dtoa_r+0x9a>
 8009686:	4b11      	ldr	r3, [pc, #68]	; (80096cc <_dtoa_r+0xbd4>)
 8009688:	f7ff baa8 	b.w	8008bdc <_dtoa_r+0xe4>
 800968c:	f1b9 0f00 	cmp.w	r9, #0
 8009690:	dc03      	bgt.n	800969a <_dtoa_r+0xba2>
 8009692:	9b05      	ldr	r3, [sp, #20]
 8009694:	2b02      	cmp	r3, #2
 8009696:	f73f aec9 	bgt.w	800942c <_dtoa_r+0x934>
 800969a:	9d00      	ldr	r5, [sp, #0]
 800969c:	4631      	mov	r1, r6
 800969e:	4658      	mov	r0, fp
 80096a0:	f7ff f99c 	bl	80089dc <quorem>
 80096a4:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80096a8:	f805 3b01 	strb.w	r3, [r5], #1
 80096ac:	9a00      	ldr	r2, [sp, #0]
 80096ae:	1aaa      	subs	r2, r5, r2
 80096b0:	4591      	cmp	r9, r2
 80096b2:	ddba      	ble.n	800962a <_dtoa_r+0xb32>
 80096b4:	4659      	mov	r1, fp
 80096b6:	2300      	movs	r3, #0
 80096b8:	220a      	movs	r2, #10
 80096ba:	4620      	mov	r0, r4
 80096bc:	f000 fc06 	bl	8009ecc <__multadd>
 80096c0:	4683      	mov	fp, r0
 80096c2:	e7eb      	b.n	800969c <_dtoa_r+0xba4>
 80096c4:	0800c09c 	.word	0x0800c09c
 80096c8:	0800be98 	.word	0x0800be98
 80096cc:	0800c019 	.word	0x0800c019

080096d0 <rshift>:
 80096d0:	6903      	ldr	r3, [r0, #16]
 80096d2:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80096d6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80096da:	ea4f 1261 	mov.w	r2, r1, asr #5
 80096de:	f100 0414 	add.w	r4, r0, #20
 80096e2:	dd45      	ble.n	8009770 <rshift+0xa0>
 80096e4:	f011 011f 	ands.w	r1, r1, #31
 80096e8:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80096ec:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80096f0:	d10c      	bne.n	800970c <rshift+0x3c>
 80096f2:	f100 0710 	add.w	r7, r0, #16
 80096f6:	4629      	mov	r1, r5
 80096f8:	42b1      	cmp	r1, r6
 80096fa:	d334      	bcc.n	8009766 <rshift+0x96>
 80096fc:	1a9b      	subs	r3, r3, r2
 80096fe:	009b      	lsls	r3, r3, #2
 8009700:	1eea      	subs	r2, r5, #3
 8009702:	4296      	cmp	r6, r2
 8009704:	bf38      	it	cc
 8009706:	2300      	movcc	r3, #0
 8009708:	4423      	add	r3, r4
 800970a:	e015      	b.n	8009738 <rshift+0x68>
 800970c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8009710:	f1c1 0820 	rsb	r8, r1, #32
 8009714:	40cf      	lsrs	r7, r1
 8009716:	f105 0e04 	add.w	lr, r5, #4
 800971a:	46a1      	mov	r9, r4
 800971c:	4576      	cmp	r6, lr
 800971e:	46f4      	mov	ip, lr
 8009720:	d815      	bhi.n	800974e <rshift+0x7e>
 8009722:	1a9b      	subs	r3, r3, r2
 8009724:	009a      	lsls	r2, r3, #2
 8009726:	3a04      	subs	r2, #4
 8009728:	3501      	adds	r5, #1
 800972a:	42ae      	cmp	r6, r5
 800972c:	bf38      	it	cc
 800972e:	2200      	movcc	r2, #0
 8009730:	18a3      	adds	r3, r4, r2
 8009732:	50a7      	str	r7, [r4, r2]
 8009734:	b107      	cbz	r7, 8009738 <rshift+0x68>
 8009736:	3304      	adds	r3, #4
 8009738:	1b1a      	subs	r2, r3, r4
 800973a:	42a3      	cmp	r3, r4
 800973c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8009740:	bf08      	it	eq
 8009742:	2300      	moveq	r3, #0
 8009744:	6102      	str	r2, [r0, #16]
 8009746:	bf08      	it	eq
 8009748:	6143      	streq	r3, [r0, #20]
 800974a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800974e:	f8dc c000 	ldr.w	ip, [ip]
 8009752:	fa0c fc08 	lsl.w	ip, ip, r8
 8009756:	ea4c 0707 	orr.w	r7, ip, r7
 800975a:	f849 7b04 	str.w	r7, [r9], #4
 800975e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009762:	40cf      	lsrs	r7, r1
 8009764:	e7da      	b.n	800971c <rshift+0x4c>
 8009766:	f851 cb04 	ldr.w	ip, [r1], #4
 800976a:	f847 cf04 	str.w	ip, [r7, #4]!
 800976e:	e7c3      	b.n	80096f8 <rshift+0x28>
 8009770:	4623      	mov	r3, r4
 8009772:	e7e1      	b.n	8009738 <rshift+0x68>

08009774 <__hexdig_fun>:
 8009774:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8009778:	2b09      	cmp	r3, #9
 800977a:	d802      	bhi.n	8009782 <__hexdig_fun+0xe>
 800977c:	3820      	subs	r0, #32
 800977e:	b2c0      	uxtb	r0, r0
 8009780:	4770      	bx	lr
 8009782:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8009786:	2b05      	cmp	r3, #5
 8009788:	d801      	bhi.n	800978e <__hexdig_fun+0x1a>
 800978a:	3847      	subs	r0, #71	; 0x47
 800978c:	e7f7      	b.n	800977e <__hexdig_fun+0xa>
 800978e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8009792:	2b05      	cmp	r3, #5
 8009794:	d801      	bhi.n	800979a <__hexdig_fun+0x26>
 8009796:	3827      	subs	r0, #39	; 0x27
 8009798:	e7f1      	b.n	800977e <__hexdig_fun+0xa>
 800979a:	2000      	movs	r0, #0
 800979c:	4770      	bx	lr
	...

080097a0 <__gethex>:
 80097a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097a4:	ed2d 8b02 	vpush	{d8}
 80097a8:	b089      	sub	sp, #36	; 0x24
 80097aa:	ee08 0a10 	vmov	s16, r0
 80097ae:	9304      	str	r3, [sp, #16]
 80097b0:	4bbc      	ldr	r3, [pc, #752]	; (8009aa4 <__gethex+0x304>)
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	9301      	str	r3, [sp, #4]
 80097b6:	4618      	mov	r0, r3
 80097b8:	468b      	mov	fp, r1
 80097ba:	4690      	mov	r8, r2
 80097bc:	f7f6 fd28 	bl	8000210 <strlen>
 80097c0:	9b01      	ldr	r3, [sp, #4]
 80097c2:	f8db 2000 	ldr.w	r2, [fp]
 80097c6:	4403      	add	r3, r0
 80097c8:	4682      	mov	sl, r0
 80097ca:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80097ce:	9305      	str	r3, [sp, #20]
 80097d0:	1c93      	adds	r3, r2, #2
 80097d2:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80097d6:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80097da:	32fe      	adds	r2, #254	; 0xfe
 80097dc:	18d1      	adds	r1, r2, r3
 80097de:	461f      	mov	r7, r3
 80097e0:	f813 0b01 	ldrb.w	r0, [r3], #1
 80097e4:	9100      	str	r1, [sp, #0]
 80097e6:	2830      	cmp	r0, #48	; 0x30
 80097e8:	d0f8      	beq.n	80097dc <__gethex+0x3c>
 80097ea:	f7ff ffc3 	bl	8009774 <__hexdig_fun>
 80097ee:	4604      	mov	r4, r0
 80097f0:	2800      	cmp	r0, #0
 80097f2:	d13a      	bne.n	800986a <__gethex+0xca>
 80097f4:	9901      	ldr	r1, [sp, #4]
 80097f6:	4652      	mov	r2, sl
 80097f8:	4638      	mov	r0, r7
 80097fa:	f001 f9ed 	bl	800abd8 <strncmp>
 80097fe:	4605      	mov	r5, r0
 8009800:	2800      	cmp	r0, #0
 8009802:	d168      	bne.n	80098d6 <__gethex+0x136>
 8009804:	f817 000a 	ldrb.w	r0, [r7, sl]
 8009808:	eb07 060a 	add.w	r6, r7, sl
 800980c:	f7ff ffb2 	bl	8009774 <__hexdig_fun>
 8009810:	2800      	cmp	r0, #0
 8009812:	d062      	beq.n	80098da <__gethex+0x13a>
 8009814:	4633      	mov	r3, r6
 8009816:	7818      	ldrb	r0, [r3, #0]
 8009818:	2830      	cmp	r0, #48	; 0x30
 800981a:	461f      	mov	r7, r3
 800981c:	f103 0301 	add.w	r3, r3, #1
 8009820:	d0f9      	beq.n	8009816 <__gethex+0x76>
 8009822:	f7ff ffa7 	bl	8009774 <__hexdig_fun>
 8009826:	2301      	movs	r3, #1
 8009828:	fab0 f480 	clz	r4, r0
 800982c:	0964      	lsrs	r4, r4, #5
 800982e:	4635      	mov	r5, r6
 8009830:	9300      	str	r3, [sp, #0]
 8009832:	463a      	mov	r2, r7
 8009834:	4616      	mov	r6, r2
 8009836:	3201      	adds	r2, #1
 8009838:	7830      	ldrb	r0, [r6, #0]
 800983a:	f7ff ff9b 	bl	8009774 <__hexdig_fun>
 800983e:	2800      	cmp	r0, #0
 8009840:	d1f8      	bne.n	8009834 <__gethex+0x94>
 8009842:	9901      	ldr	r1, [sp, #4]
 8009844:	4652      	mov	r2, sl
 8009846:	4630      	mov	r0, r6
 8009848:	f001 f9c6 	bl	800abd8 <strncmp>
 800984c:	b980      	cbnz	r0, 8009870 <__gethex+0xd0>
 800984e:	b94d      	cbnz	r5, 8009864 <__gethex+0xc4>
 8009850:	eb06 050a 	add.w	r5, r6, sl
 8009854:	462a      	mov	r2, r5
 8009856:	4616      	mov	r6, r2
 8009858:	3201      	adds	r2, #1
 800985a:	7830      	ldrb	r0, [r6, #0]
 800985c:	f7ff ff8a 	bl	8009774 <__hexdig_fun>
 8009860:	2800      	cmp	r0, #0
 8009862:	d1f8      	bne.n	8009856 <__gethex+0xb6>
 8009864:	1bad      	subs	r5, r5, r6
 8009866:	00ad      	lsls	r5, r5, #2
 8009868:	e004      	b.n	8009874 <__gethex+0xd4>
 800986a:	2400      	movs	r4, #0
 800986c:	4625      	mov	r5, r4
 800986e:	e7e0      	b.n	8009832 <__gethex+0x92>
 8009870:	2d00      	cmp	r5, #0
 8009872:	d1f7      	bne.n	8009864 <__gethex+0xc4>
 8009874:	7833      	ldrb	r3, [r6, #0]
 8009876:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800987a:	2b50      	cmp	r3, #80	; 0x50
 800987c:	d13b      	bne.n	80098f6 <__gethex+0x156>
 800987e:	7873      	ldrb	r3, [r6, #1]
 8009880:	2b2b      	cmp	r3, #43	; 0x2b
 8009882:	d02c      	beq.n	80098de <__gethex+0x13e>
 8009884:	2b2d      	cmp	r3, #45	; 0x2d
 8009886:	d02e      	beq.n	80098e6 <__gethex+0x146>
 8009888:	1c71      	adds	r1, r6, #1
 800988a:	f04f 0900 	mov.w	r9, #0
 800988e:	7808      	ldrb	r0, [r1, #0]
 8009890:	f7ff ff70 	bl	8009774 <__hexdig_fun>
 8009894:	1e43      	subs	r3, r0, #1
 8009896:	b2db      	uxtb	r3, r3
 8009898:	2b18      	cmp	r3, #24
 800989a:	d82c      	bhi.n	80098f6 <__gethex+0x156>
 800989c:	f1a0 0210 	sub.w	r2, r0, #16
 80098a0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80098a4:	f7ff ff66 	bl	8009774 <__hexdig_fun>
 80098a8:	1e43      	subs	r3, r0, #1
 80098aa:	b2db      	uxtb	r3, r3
 80098ac:	2b18      	cmp	r3, #24
 80098ae:	d91d      	bls.n	80098ec <__gethex+0x14c>
 80098b0:	f1b9 0f00 	cmp.w	r9, #0
 80098b4:	d000      	beq.n	80098b8 <__gethex+0x118>
 80098b6:	4252      	negs	r2, r2
 80098b8:	4415      	add	r5, r2
 80098ba:	f8cb 1000 	str.w	r1, [fp]
 80098be:	b1e4      	cbz	r4, 80098fa <__gethex+0x15a>
 80098c0:	9b00      	ldr	r3, [sp, #0]
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	bf14      	ite	ne
 80098c6:	2700      	movne	r7, #0
 80098c8:	2706      	moveq	r7, #6
 80098ca:	4638      	mov	r0, r7
 80098cc:	b009      	add	sp, #36	; 0x24
 80098ce:	ecbd 8b02 	vpop	{d8}
 80098d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098d6:	463e      	mov	r6, r7
 80098d8:	4625      	mov	r5, r4
 80098da:	2401      	movs	r4, #1
 80098dc:	e7ca      	b.n	8009874 <__gethex+0xd4>
 80098de:	f04f 0900 	mov.w	r9, #0
 80098e2:	1cb1      	adds	r1, r6, #2
 80098e4:	e7d3      	b.n	800988e <__gethex+0xee>
 80098e6:	f04f 0901 	mov.w	r9, #1
 80098ea:	e7fa      	b.n	80098e2 <__gethex+0x142>
 80098ec:	230a      	movs	r3, #10
 80098ee:	fb03 0202 	mla	r2, r3, r2, r0
 80098f2:	3a10      	subs	r2, #16
 80098f4:	e7d4      	b.n	80098a0 <__gethex+0x100>
 80098f6:	4631      	mov	r1, r6
 80098f8:	e7df      	b.n	80098ba <__gethex+0x11a>
 80098fa:	1bf3      	subs	r3, r6, r7
 80098fc:	3b01      	subs	r3, #1
 80098fe:	4621      	mov	r1, r4
 8009900:	2b07      	cmp	r3, #7
 8009902:	dc0b      	bgt.n	800991c <__gethex+0x17c>
 8009904:	ee18 0a10 	vmov	r0, s16
 8009908:	f000 fa7e 	bl	8009e08 <_Balloc>
 800990c:	4604      	mov	r4, r0
 800990e:	b940      	cbnz	r0, 8009922 <__gethex+0x182>
 8009910:	4b65      	ldr	r3, [pc, #404]	; (8009aa8 <__gethex+0x308>)
 8009912:	4602      	mov	r2, r0
 8009914:	21de      	movs	r1, #222	; 0xde
 8009916:	4865      	ldr	r0, [pc, #404]	; (8009aac <__gethex+0x30c>)
 8009918:	f001 f97e 	bl	800ac18 <__assert_func>
 800991c:	3101      	adds	r1, #1
 800991e:	105b      	asrs	r3, r3, #1
 8009920:	e7ee      	b.n	8009900 <__gethex+0x160>
 8009922:	f100 0914 	add.w	r9, r0, #20
 8009926:	f04f 0b00 	mov.w	fp, #0
 800992a:	f1ca 0301 	rsb	r3, sl, #1
 800992e:	f8cd 9008 	str.w	r9, [sp, #8]
 8009932:	f8cd b000 	str.w	fp, [sp]
 8009936:	9306      	str	r3, [sp, #24]
 8009938:	42b7      	cmp	r7, r6
 800993a:	d340      	bcc.n	80099be <__gethex+0x21e>
 800993c:	9802      	ldr	r0, [sp, #8]
 800993e:	9b00      	ldr	r3, [sp, #0]
 8009940:	f840 3b04 	str.w	r3, [r0], #4
 8009944:	eba0 0009 	sub.w	r0, r0, r9
 8009948:	1080      	asrs	r0, r0, #2
 800994a:	0146      	lsls	r6, r0, #5
 800994c:	6120      	str	r0, [r4, #16]
 800994e:	4618      	mov	r0, r3
 8009950:	f000 fb50 	bl	8009ff4 <__hi0bits>
 8009954:	1a30      	subs	r0, r6, r0
 8009956:	f8d8 6000 	ldr.w	r6, [r8]
 800995a:	42b0      	cmp	r0, r6
 800995c:	dd63      	ble.n	8009a26 <__gethex+0x286>
 800995e:	1b87      	subs	r7, r0, r6
 8009960:	4639      	mov	r1, r7
 8009962:	4620      	mov	r0, r4
 8009964:	f000 feea 	bl	800a73c <__any_on>
 8009968:	4682      	mov	sl, r0
 800996a:	b1a8      	cbz	r0, 8009998 <__gethex+0x1f8>
 800996c:	1e7b      	subs	r3, r7, #1
 800996e:	1159      	asrs	r1, r3, #5
 8009970:	f003 021f 	and.w	r2, r3, #31
 8009974:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8009978:	f04f 0a01 	mov.w	sl, #1
 800997c:	fa0a f202 	lsl.w	r2, sl, r2
 8009980:	420a      	tst	r2, r1
 8009982:	d009      	beq.n	8009998 <__gethex+0x1f8>
 8009984:	4553      	cmp	r3, sl
 8009986:	dd05      	ble.n	8009994 <__gethex+0x1f4>
 8009988:	1eb9      	subs	r1, r7, #2
 800998a:	4620      	mov	r0, r4
 800998c:	f000 fed6 	bl	800a73c <__any_on>
 8009990:	2800      	cmp	r0, #0
 8009992:	d145      	bne.n	8009a20 <__gethex+0x280>
 8009994:	f04f 0a02 	mov.w	sl, #2
 8009998:	4639      	mov	r1, r7
 800999a:	4620      	mov	r0, r4
 800999c:	f7ff fe98 	bl	80096d0 <rshift>
 80099a0:	443d      	add	r5, r7
 80099a2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80099a6:	42ab      	cmp	r3, r5
 80099a8:	da4c      	bge.n	8009a44 <__gethex+0x2a4>
 80099aa:	ee18 0a10 	vmov	r0, s16
 80099ae:	4621      	mov	r1, r4
 80099b0:	f000 fa6a 	bl	8009e88 <_Bfree>
 80099b4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80099b6:	2300      	movs	r3, #0
 80099b8:	6013      	str	r3, [r2, #0]
 80099ba:	27a3      	movs	r7, #163	; 0xa3
 80099bc:	e785      	b.n	80098ca <__gethex+0x12a>
 80099be:	1e73      	subs	r3, r6, #1
 80099c0:	9a05      	ldr	r2, [sp, #20]
 80099c2:	9303      	str	r3, [sp, #12]
 80099c4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80099c8:	4293      	cmp	r3, r2
 80099ca:	d019      	beq.n	8009a00 <__gethex+0x260>
 80099cc:	f1bb 0f20 	cmp.w	fp, #32
 80099d0:	d107      	bne.n	80099e2 <__gethex+0x242>
 80099d2:	9b02      	ldr	r3, [sp, #8]
 80099d4:	9a00      	ldr	r2, [sp, #0]
 80099d6:	f843 2b04 	str.w	r2, [r3], #4
 80099da:	9302      	str	r3, [sp, #8]
 80099dc:	2300      	movs	r3, #0
 80099de:	9300      	str	r3, [sp, #0]
 80099e0:	469b      	mov	fp, r3
 80099e2:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80099e6:	f7ff fec5 	bl	8009774 <__hexdig_fun>
 80099ea:	9b00      	ldr	r3, [sp, #0]
 80099ec:	f000 000f 	and.w	r0, r0, #15
 80099f0:	fa00 f00b 	lsl.w	r0, r0, fp
 80099f4:	4303      	orrs	r3, r0
 80099f6:	9300      	str	r3, [sp, #0]
 80099f8:	f10b 0b04 	add.w	fp, fp, #4
 80099fc:	9b03      	ldr	r3, [sp, #12]
 80099fe:	e00d      	b.n	8009a1c <__gethex+0x27c>
 8009a00:	9b03      	ldr	r3, [sp, #12]
 8009a02:	9a06      	ldr	r2, [sp, #24]
 8009a04:	4413      	add	r3, r2
 8009a06:	42bb      	cmp	r3, r7
 8009a08:	d3e0      	bcc.n	80099cc <__gethex+0x22c>
 8009a0a:	4618      	mov	r0, r3
 8009a0c:	9901      	ldr	r1, [sp, #4]
 8009a0e:	9307      	str	r3, [sp, #28]
 8009a10:	4652      	mov	r2, sl
 8009a12:	f001 f8e1 	bl	800abd8 <strncmp>
 8009a16:	9b07      	ldr	r3, [sp, #28]
 8009a18:	2800      	cmp	r0, #0
 8009a1a:	d1d7      	bne.n	80099cc <__gethex+0x22c>
 8009a1c:	461e      	mov	r6, r3
 8009a1e:	e78b      	b.n	8009938 <__gethex+0x198>
 8009a20:	f04f 0a03 	mov.w	sl, #3
 8009a24:	e7b8      	b.n	8009998 <__gethex+0x1f8>
 8009a26:	da0a      	bge.n	8009a3e <__gethex+0x29e>
 8009a28:	1a37      	subs	r7, r6, r0
 8009a2a:	4621      	mov	r1, r4
 8009a2c:	ee18 0a10 	vmov	r0, s16
 8009a30:	463a      	mov	r2, r7
 8009a32:	f000 fc45 	bl	800a2c0 <__lshift>
 8009a36:	1bed      	subs	r5, r5, r7
 8009a38:	4604      	mov	r4, r0
 8009a3a:	f100 0914 	add.w	r9, r0, #20
 8009a3e:	f04f 0a00 	mov.w	sl, #0
 8009a42:	e7ae      	b.n	80099a2 <__gethex+0x202>
 8009a44:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8009a48:	42a8      	cmp	r0, r5
 8009a4a:	dd72      	ble.n	8009b32 <__gethex+0x392>
 8009a4c:	1b45      	subs	r5, r0, r5
 8009a4e:	42ae      	cmp	r6, r5
 8009a50:	dc36      	bgt.n	8009ac0 <__gethex+0x320>
 8009a52:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009a56:	2b02      	cmp	r3, #2
 8009a58:	d02a      	beq.n	8009ab0 <__gethex+0x310>
 8009a5a:	2b03      	cmp	r3, #3
 8009a5c:	d02c      	beq.n	8009ab8 <__gethex+0x318>
 8009a5e:	2b01      	cmp	r3, #1
 8009a60:	d115      	bne.n	8009a8e <__gethex+0x2ee>
 8009a62:	42ae      	cmp	r6, r5
 8009a64:	d113      	bne.n	8009a8e <__gethex+0x2ee>
 8009a66:	2e01      	cmp	r6, #1
 8009a68:	d10b      	bne.n	8009a82 <__gethex+0x2e2>
 8009a6a:	9a04      	ldr	r2, [sp, #16]
 8009a6c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8009a70:	6013      	str	r3, [r2, #0]
 8009a72:	2301      	movs	r3, #1
 8009a74:	6123      	str	r3, [r4, #16]
 8009a76:	f8c9 3000 	str.w	r3, [r9]
 8009a7a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009a7c:	2762      	movs	r7, #98	; 0x62
 8009a7e:	601c      	str	r4, [r3, #0]
 8009a80:	e723      	b.n	80098ca <__gethex+0x12a>
 8009a82:	1e71      	subs	r1, r6, #1
 8009a84:	4620      	mov	r0, r4
 8009a86:	f000 fe59 	bl	800a73c <__any_on>
 8009a8a:	2800      	cmp	r0, #0
 8009a8c:	d1ed      	bne.n	8009a6a <__gethex+0x2ca>
 8009a8e:	ee18 0a10 	vmov	r0, s16
 8009a92:	4621      	mov	r1, r4
 8009a94:	f000 f9f8 	bl	8009e88 <_Bfree>
 8009a98:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009a9a:	2300      	movs	r3, #0
 8009a9c:	6013      	str	r3, [r2, #0]
 8009a9e:	2750      	movs	r7, #80	; 0x50
 8009aa0:	e713      	b.n	80098ca <__gethex+0x12a>
 8009aa2:	bf00      	nop
 8009aa4:	0800c118 	.word	0x0800c118
 8009aa8:	0800c09c 	.word	0x0800c09c
 8009aac:	0800c0ad 	.word	0x0800c0ad
 8009ab0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d1eb      	bne.n	8009a8e <__gethex+0x2ee>
 8009ab6:	e7d8      	b.n	8009a6a <__gethex+0x2ca>
 8009ab8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d1d5      	bne.n	8009a6a <__gethex+0x2ca>
 8009abe:	e7e6      	b.n	8009a8e <__gethex+0x2ee>
 8009ac0:	1e6f      	subs	r7, r5, #1
 8009ac2:	f1ba 0f00 	cmp.w	sl, #0
 8009ac6:	d131      	bne.n	8009b2c <__gethex+0x38c>
 8009ac8:	b127      	cbz	r7, 8009ad4 <__gethex+0x334>
 8009aca:	4639      	mov	r1, r7
 8009acc:	4620      	mov	r0, r4
 8009ace:	f000 fe35 	bl	800a73c <__any_on>
 8009ad2:	4682      	mov	sl, r0
 8009ad4:	117b      	asrs	r3, r7, #5
 8009ad6:	2101      	movs	r1, #1
 8009ad8:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8009adc:	f007 071f 	and.w	r7, r7, #31
 8009ae0:	fa01 f707 	lsl.w	r7, r1, r7
 8009ae4:	421f      	tst	r7, r3
 8009ae6:	4629      	mov	r1, r5
 8009ae8:	4620      	mov	r0, r4
 8009aea:	bf18      	it	ne
 8009aec:	f04a 0a02 	orrne.w	sl, sl, #2
 8009af0:	1b76      	subs	r6, r6, r5
 8009af2:	f7ff fded 	bl	80096d0 <rshift>
 8009af6:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8009afa:	2702      	movs	r7, #2
 8009afc:	f1ba 0f00 	cmp.w	sl, #0
 8009b00:	d048      	beq.n	8009b94 <__gethex+0x3f4>
 8009b02:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009b06:	2b02      	cmp	r3, #2
 8009b08:	d015      	beq.n	8009b36 <__gethex+0x396>
 8009b0a:	2b03      	cmp	r3, #3
 8009b0c:	d017      	beq.n	8009b3e <__gethex+0x39e>
 8009b0e:	2b01      	cmp	r3, #1
 8009b10:	d109      	bne.n	8009b26 <__gethex+0x386>
 8009b12:	f01a 0f02 	tst.w	sl, #2
 8009b16:	d006      	beq.n	8009b26 <__gethex+0x386>
 8009b18:	f8d9 0000 	ldr.w	r0, [r9]
 8009b1c:	ea4a 0a00 	orr.w	sl, sl, r0
 8009b20:	f01a 0f01 	tst.w	sl, #1
 8009b24:	d10e      	bne.n	8009b44 <__gethex+0x3a4>
 8009b26:	f047 0710 	orr.w	r7, r7, #16
 8009b2a:	e033      	b.n	8009b94 <__gethex+0x3f4>
 8009b2c:	f04f 0a01 	mov.w	sl, #1
 8009b30:	e7d0      	b.n	8009ad4 <__gethex+0x334>
 8009b32:	2701      	movs	r7, #1
 8009b34:	e7e2      	b.n	8009afc <__gethex+0x35c>
 8009b36:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009b38:	f1c3 0301 	rsb	r3, r3, #1
 8009b3c:	9315      	str	r3, [sp, #84]	; 0x54
 8009b3e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	d0f0      	beq.n	8009b26 <__gethex+0x386>
 8009b44:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8009b48:	f104 0314 	add.w	r3, r4, #20
 8009b4c:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8009b50:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8009b54:	f04f 0c00 	mov.w	ip, #0
 8009b58:	4618      	mov	r0, r3
 8009b5a:	f853 2b04 	ldr.w	r2, [r3], #4
 8009b5e:	f1b2 3fff 	cmp.w	r2, #4294967295
 8009b62:	d01c      	beq.n	8009b9e <__gethex+0x3fe>
 8009b64:	3201      	adds	r2, #1
 8009b66:	6002      	str	r2, [r0, #0]
 8009b68:	2f02      	cmp	r7, #2
 8009b6a:	f104 0314 	add.w	r3, r4, #20
 8009b6e:	d13f      	bne.n	8009bf0 <__gethex+0x450>
 8009b70:	f8d8 2000 	ldr.w	r2, [r8]
 8009b74:	3a01      	subs	r2, #1
 8009b76:	42b2      	cmp	r2, r6
 8009b78:	d10a      	bne.n	8009b90 <__gethex+0x3f0>
 8009b7a:	1171      	asrs	r1, r6, #5
 8009b7c:	2201      	movs	r2, #1
 8009b7e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009b82:	f006 061f 	and.w	r6, r6, #31
 8009b86:	fa02 f606 	lsl.w	r6, r2, r6
 8009b8a:	421e      	tst	r6, r3
 8009b8c:	bf18      	it	ne
 8009b8e:	4617      	movne	r7, r2
 8009b90:	f047 0720 	orr.w	r7, r7, #32
 8009b94:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009b96:	601c      	str	r4, [r3, #0]
 8009b98:	9b04      	ldr	r3, [sp, #16]
 8009b9a:	601d      	str	r5, [r3, #0]
 8009b9c:	e695      	b.n	80098ca <__gethex+0x12a>
 8009b9e:	4299      	cmp	r1, r3
 8009ba0:	f843 cc04 	str.w	ip, [r3, #-4]
 8009ba4:	d8d8      	bhi.n	8009b58 <__gethex+0x3b8>
 8009ba6:	68a3      	ldr	r3, [r4, #8]
 8009ba8:	459b      	cmp	fp, r3
 8009baa:	db19      	blt.n	8009be0 <__gethex+0x440>
 8009bac:	6861      	ldr	r1, [r4, #4]
 8009bae:	ee18 0a10 	vmov	r0, s16
 8009bb2:	3101      	adds	r1, #1
 8009bb4:	f000 f928 	bl	8009e08 <_Balloc>
 8009bb8:	4681      	mov	r9, r0
 8009bba:	b918      	cbnz	r0, 8009bc4 <__gethex+0x424>
 8009bbc:	4b1a      	ldr	r3, [pc, #104]	; (8009c28 <__gethex+0x488>)
 8009bbe:	4602      	mov	r2, r0
 8009bc0:	2184      	movs	r1, #132	; 0x84
 8009bc2:	e6a8      	b.n	8009916 <__gethex+0x176>
 8009bc4:	6922      	ldr	r2, [r4, #16]
 8009bc6:	3202      	adds	r2, #2
 8009bc8:	f104 010c 	add.w	r1, r4, #12
 8009bcc:	0092      	lsls	r2, r2, #2
 8009bce:	300c      	adds	r0, #12
 8009bd0:	f000 f90c 	bl	8009dec <memcpy>
 8009bd4:	4621      	mov	r1, r4
 8009bd6:	ee18 0a10 	vmov	r0, s16
 8009bda:	f000 f955 	bl	8009e88 <_Bfree>
 8009bde:	464c      	mov	r4, r9
 8009be0:	6923      	ldr	r3, [r4, #16]
 8009be2:	1c5a      	adds	r2, r3, #1
 8009be4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009be8:	6122      	str	r2, [r4, #16]
 8009bea:	2201      	movs	r2, #1
 8009bec:	615a      	str	r2, [r3, #20]
 8009bee:	e7bb      	b.n	8009b68 <__gethex+0x3c8>
 8009bf0:	6922      	ldr	r2, [r4, #16]
 8009bf2:	455a      	cmp	r2, fp
 8009bf4:	dd0b      	ble.n	8009c0e <__gethex+0x46e>
 8009bf6:	2101      	movs	r1, #1
 8009bf8:	4620      	mov	r0, r4
 8009bfa:	f7ff fd69 	bl	80096d0 <rshift>
 8009bfe:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009c02:	3501      	adds	r5, #1
 8009c04:	42ab      	cmp	r3, r5
 8009c06:	f6ff aed0 	blt.w	80099aa <__gethex+0x20a>
 8009c0a:	2701      	movs	r7, #1
 8009c0c:	e7c0      	b.n	8009b90 <__gethex+0x3f0>
 8009c0e:	f016 061f 	ands.w	r6, r6, #31
 8009c12:	d0fa      	beq.n	8009c0a <__gethex+0x46a>
 8009c14:	449a      	add	sl, r3
 8009c16:	f1c6 0620 	rsb	r6, r6, #32
 8009c1a:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8009c1e:	f000 f9e9 	bl	8009ff4 <__hi0bits>
 8009c22:	42b0      	cmp	r0, r6
 8009c24:	dbe7      	blt.n	8009bf6 <__gethex+0x456>
 8009c26:	e7f0      	b.n	8009c0a <__gethex+0x46a>
 8009c28:	0800c09c 	.word	0x0800c09c

08009c2c <L_shift>:
 8009c2c:	f1c2 0208 	rsb	r2, r2, #8
 8009c30:	0092      	lsls	r2, r2, #2
 8009c32:	b570      	push	{r4, r5, r6, lr}
 8009c34:	f1c2 0620 	rsb	r6, r2, #32
 8009c38:	6843      	ldr	r3, [r0, #4]
 8009c3a:	6804      	ldr	r4, [r0, #0]
 8009c3c:	fa03 f506 	lsl.w	r5, r3, r6
 8009c40:	432c      	orrs	r4, r5
 8009c42:	40d3      	lsrs	r3, r2
 8009c44:	6004      	str	r4, [r0, #0]
 8009c46:	f840 3f04 	str.w	r3, [r0, #4]!
 8009c4a:	4288      	cmp	r0, r1
 8009c4c:	d3f4      	bcc.n	8009c38 <L_shift+0xc>
 8009c4e:	bd70      	pop	{r4, r5, r6, pc}

08009c50 <__match>:
 8009c50:	b530      	push	{r4, r5, lr}
 8009c52:	6803      	ldr	r3, [r0, #0]
 8009c54:	3301      	adds	r3, #1
 8009c56:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009c5a:	b914      	cbnz	r4, 8009c62 <__match+0x12>
 8009c5c:	6003      	str	r3, [r0, #0]
 8009c5e:	2001      	movs	r0, #1
 8009c60:	bd30      	pop	{r4, r5, pc}
 8009c62:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009c66:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8009c6a:	2d19      	cmp	r5, #25
 8009c6c:	bf98      	it	ls
 8009c6e:	3220      	addls	r2, #32
 8009c70:	42a2      	cmp	r2, r4
 8009c72:	d0f0      	beq.n	8009c56 <__match+0x6>
 8009c74:	2000      	movs	r0, #0
 8009c76:	e7f3      	b.n	8009c60 <__match+0x10>

08009c78 <__hexnan>:
 8009c78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c7c:	680b      	ldr	r3, [r1, #0]
 8009c7e:	6801      	ldr	r1, [r0, #0]
 8009c80:	115e      	asrs	r6, r3, #5
 8009c82:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8009c86:	f013 031f 	ands.w	r3, r3, #31
 8009c8a:	b087      	sub	sp, #28
 8009c8c:	bf18      	it	ne
 8009c8e:	3604      	addne	r6, #4
 8009c90:	2500      	movs	r5, #0
 8009c92:	1f37      	subs	r7, r6, #4
 8009c94:	4682      	mov	sl, r0
 8009c96:	4690      	mov	r8, r2
 8009c98:	9301      	str	r3, [sp, #4]
 8009c9a:	f846 5c04 	str.w	r5, [r6, #-4]
 8009c9e:	46b9      	mov	r9, r7
 8009ca0:	463c      	mov	r4, r7
 8009ca2:	9502      	str	r5, [sp, #8]
 8009ca4:	46ab      	mov	fp, r5
 8009ca6:	784a      	ldrb	r2, [r1, #1]
 8009ca8:	1c4b      	adds	r3, r1, #1
 8009caa:	9303      	str	r3, [sp, #12]
 8009cac:	b342      	cbz	r2, 8009d00 <__hexnan+0x88>
 8009cae:	4610      	mov	r0, r2
 8009cb0:	9105      	str	r1, [sp, #20]
 8009cb2:	9204      	str	r2, [sp, #16]
 8009cb4:	f7ff fd5e 	bl	8009774 <__hexdig_fun>
 8009cb8:	2800      	cmp	r0, #0
 8009cba:	d14f      	bne.n	8009d5c <__hexnan+0xe4>
 8009cbc:	9a04      	ldr	r2, [sp, #16]
 8009cbe:	9905      	ldr	r1, [sp, #20]
 8009cc0:	2a20      	cmp	r2, #32
 8009cc2:	d818      	bhi.n	8009cf6 <__hexnan+0x7e>
 8009cc4:	9b02      	ldr	r3, [sp, #8]
 8009cc6:	459b      	cmp	fp, r3
 8009cc8:	dd13      	ble.n	8009cf2 <__hexnan+0x7a>
 8009cca:	454c      	cmp	r4, r9
 8009ccc:	d206      	bcs.n	8009cdc <__hexnan+0x64>
 8009cce:	2d07      	cmp	r5, #7
 8009cd0:	dc04      	bgt.n	8009cdc <__hexnan+0x64>
 8009cd2:	462a      	mov	r2, r5
 8009cd4:	4649      	mov	r1, r9
 8009cd6:	4620      	mov	r0, r4
 8009cd8:	f7ff ffa8 	bl	8009c2c <L_shift>
 8009cdc:	4544      	cmp	r4, r8
 8009cde:	d950      	bls.n	8009d82 <__hexnan+0x10a>
 8009ce0:	2300      	movs	r3, #0
 8009ce2:	f1a4 0904 	sub.w	r9, r4, #4
 8009ce6:	f844 3c04 	str.w	r3, [r4, #-4]
 8009cea:	f8cd b008 	str.w	fp, [sp, #8]
 8009cee:	464c      	mov	r4, r9
 8009cf0:	461d      	mov	r5, r3
 8009cf2:	9903      	ldr	r1, [sp, #12]
 8009cf4:	e7d7      	b.n	8009ca6 <__hexnan+0x2e>
 8009cf6:	2a29      	cmp	r2, #41	; 0x29
 8009cf8:	d156      	bne.n	8009da8 <__hexnan+0x130>
 8009cfa:	3102      	adds	r1, #2
 8009cfc:	f8ca 1000 	str.w	r1, [sl]
 8009d00:	f1bb 0f00 	cmp.w	fp, #0
 8009d04:	d050      	beq.n	8009da8 <__hexnan+0x130>
 8009d06:	454c      	cmp	r4, r9
 8009d08:	d206      	bcs.n	8009d18 <__hexnan+0xa0>
 8009d0a:	2d07      	cmp	r5, #7
 8009d0c:	dc04      	bgt.n	8009d18 <__hexnan+0xa0>
 8009d0e:	462a      	mov	r2, r5
 8009d10:	4649      	mov	r1, r9
 8009d12:	4620      	mov	r0, r4
 8009d14:	f7ff ff8a 	bl	8009c2c <L_shift>
 8009d18:	4544      	cmp	r4, r8
 8009d1a:	d934      	bls.n	8009d86 <__hexnan+0x10e>
 8009d1c:	f1a8 0204 	sub.w	r2, r8, #4
 8009d20:	4623      	mov	r3, r4
 8009d22:	f853 1b04 	ldr.w	r1, [r3], #4
 8009d26:	f842 1f04 	str.w	r1, [r2, #4]!
 8009d2a:	429f      	cmp	r7, r3
 8009d2c:	d2f9      	bcs.n	8009d22 <__hexnan+0xaa>
 8009d2e:	1b3b      	subs	r3, r7, r4
 8009d30:	f023 0303 	bic.w	r3, r3, #3
 8009d34:	3304      	adds	r3, #4
 8009d36:	3401      	adds	r4, #1
 8009d38:	3e03      	subs	r6, #3
 8009d3a:	42b4      	cmp	r4, r6
 8009d3c:	bf88      	it	hi
 8009d3e:	2304      	movhi	r3, #4
 8009d40:	4443      	add	r3, r8
 8009d42:	2200      	movs	r2, #0
 8009d44:	f843 2b04 	str.w	r2, [r3], #4
 8009d48:	429f      	cmp	r7, r3
 8009d4a:	d2fb      	bcs.n	8009d44 <__hexnan+0xcc>
 8009d4c:	683b      	ldr	r3, [r7, #0]
 8009d4e:	b91b      	cbnz	r3, 8009d58 <__hexnan+0xe0>
 8009d50:	4547      	cmp	r7, r8
 8009d52:	d127      	bne.n	8009da4 <__hexnan+0x12c>
 8009d54:	2301      	movs	r3, #1
 8009d56:	603b      	str	r3, [r7, #0]
 8009d58:	2005      	movs	r0, #5
 8009d5a:	e026      	b.n	8009daa <__hexnan+0x132>
 8009d5c:	3501      	adds	r5, #1
 8009d5e:	2d08      	cmp	r5, #8
 8009d60:	f10b 0b01 	add.w	fp, fp, #1
 8009d64:	dd06      	ble.n	8009d74 <__hexnan+0xfc>
 8009d66:	4544      	cmp	r4, r8
 8009d68:	d9c3      	bls.n	8009cf2 <__hexnan+0x7a>
 8009d6a:	2300      	movs	r3, #0
 8009d6c:	f844 3c04 	str.w	r3, [r4, #-4]
 8009d70:	2501      	movs	r5, #1
 8009d72:	3c04      	subs	r4, #4
 8009d74:	6822      	ldr	r2, [r4, #0]
 8009d76:	f000 000f 	and.w	r0, r0, #15
 8009d7a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8009d7e:	6022      	str	r2, [r4, #0]
 8009d80:	e7b7      	b.n	8009cf2 <__hexnan+0x7a>
 8009d82:	2508      	movs	r5, #8
 8009d84:	e7b5      	b.n	8009cf2 <__hexnan+0x7a>
 8009d86:	9b01      	ldr	r3, [sp, #4]
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d0df      	beq.n	8009d4c <__hexnan+0xd4>
 8009d8c:	f04f 32ff 	mov.w	r2, #4294967295
 8009d90:	f1c3 0320 	rsb	r3, r3, #32
 8009d94:	fa22 f303 	lsr.w	r3, r2, r3
 8009d98:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8009d9c:	401a      	ands	r2, r3
 8009d9e:	f846 2c04 	str.w	r2, [r6, #-4]
 8009da2:	e7d3      	b.n	8009d4c <__hexnan+0xd4>
 8009da4:	3f04      	subs	r7, #4
 8009da6:	e7d1      	b.n	8009d4c <__hexnan+0xd4>
 8009da8:	2004      	movs	r0, #4
 8009daa:	b007      	add	sp, #28
 8009dac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009db0 <_localeconv_r>:
 8009db0:	4800      	ldr	r0, [pc, #0]	; (8009db4 <_localeconv_r+0x4>)
 8009db2:	4770      	bx	lr
 8009db4:	20000168 	.word	0x20000168

08009db8 <malloc>:
 8009db8:	4b02      	ldr	r3, [pc, #8]	; (8009dc4 <malloc+0xc>)
 8009dba:	4601      	mov	r1, r0
 8009dbc:	6818      	ldr	r0, [r3, #0]
 8009dbe:	f000 bd3d 	b.w	800a83c <_malloc_r>
 8009dc2:	bf00      	nop
 8009dc4:	20000010 	.word	0x20000010

08009dc8 <__ascii_mbtowc>:
 8009dc8:	b082      	sub	sp, #8
 8009dca:	b901      	cbnz	r1, 8009dce <__ascii_mbtowc+0x6>
 8009dcc:	a901      	add	r1, sp, #4
 8009dce:	b142      	cbz	r2, 8009de2 <__ascii_mbtowc+0x1a>
 8009dd0:	b14b      	cbz	r3, 8009de6 <__ascii_mbtowc+0x1e>
 8009dd2:	7813      	ldrb	r3, [r2, #0]
 8009dd4:	600b      	str	r3, [r1, #0]
 8009dd6:	7812      	ldrb	r2, [r2, #0]
 8009dd8:	1e10      	subs	r0, r2, #0
 8009dda:	bf18      	it	ne
 8009ddc:	2001      	movne	r0, #1
 8009dde:	b002      	add	sp, #8
 8009de0:	4770      	bx	lr
 8009de2:	4610      	mov	r0, r2
 8009de4:	e7fb      	b.n	8009dde <__ascii_mbtowc+0x16>
 8009de6:	f06f 0001 	mvn.w	r0, #1
 8009dea:	e7f8      	b.n	8009dde <__ascii_mbtowc+0x16>

08009dec <memcpy>:
 8009dec:	440a      	add	r2, r1
 8009dee:	4291      	cmp	r1, r2
 8009df0:	f100 33ff 	add.w	r3, r0, #4294967295
 8009df4:	d100      	bne.n	8009df8 <memcpy+0xc>
 8009df6:	4770      	bx	lr
 8009df8:	b510      	push	{r4, lr}
 8009dfa:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009dfe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009e02:	4291      	cmp	r1, r2
 8009e04:	d1f9      	bne.n	8009dfa <memcpy+0xe>
 8009e06:	bd10      	pop	{r4, pc}

08009e08 <_Balloc>:
 8009e08:	b570      	push	{r4, r5, r6, lr}
 8009e0a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009e0c:	4604      	mov	r4, r0
 8009e0e:	460d      	mov	r5, r1
 8009e10:	b976      	cbnz	r6, 8009e30 <_Balloc+0x28>
 8009e12:	2010      	movs	r0, #16
 8009e14:	f7ff ffd0 	bl	8009db8 <malloc>
 8009e18:	4602      	mov	r2, r0
 8009e1a:	6260      	str	r0, [r4, #36]	; 0x24
 8009e1c:	b920      	cbnz	r0, 8009e28 <_Balloc+0x20>
 8009e1e:	4b18      	ldr	r3, [pc, #96]	; (8009e80 <_Balloc+0x78>)
 8009e20:	4818      	ldr	r0, [pc, #96]	; (8009e84 <_Balloc+0x7c>)
 8009e22:	2166      	movs	r1, #102	; 0x66
 8009e24:	f000 fef8 	bl	800ac18 <__assert_func>
 8009e28:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009e2c:	6006      	str	r6, [r0, #0]
 8009e2e:	60c6      	str	r6, [r0, #12]
 8009e30:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009e32:	68f3      	ldr	r3, [r6, #12]
 8009e34:	b183      	cbz	r3, 8009e58 <_Balloc+0x50>
 8009e36:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009e38:	68db      	ldr	r3, [r3, #12]
 8009e3a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009e3e:	b9b8      	cbnz	r0, 8009e70 <_Balloc+0x68>
 8009e40:	2101      	movs	r1, #1
 8009e42:	fa01 f605 	lsl.w	r6, r1, r5
 8009e46:	1d72      	adds	r2, r6, #5
 8009e48:	0092      	lsls	r2, r2, #2
 8009e4a:	4620      	mov	r0, r4
 8009e4c:	f000 fc97 	bl	800a77e <_calloc_r>
 8009e50:	b160      	cbz	r0, 8009e6c <_Balloc+0x64>
 8009e52:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009e56:	e00e      	b.n	8009e76 <_Balloc+0x6e>
 8009e58:	2221      	movs	r2, #33	; 0x21
 8009e5a:	2104      	movs	r1, #4
 8009e5c:	4620      	mov	r0, r4
 8009e5e:	f000 fc8e 	bl	800a77e <_calloc_r>
 8009e62:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009e64:	60f0      	str	r0, [r6, #12]
 8009e66:	68db      	ldr	r3, [r3, #12]
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	d1e4      	bne.n	8009e36 <_Balloc+0x2e>
 8009e6c:	2000      	movs	r0, #0
 8009e6e:	bd70      	pop	{r4, r5, r6, pc}
 8009e70:	6802      	ldr	r2, [r0, #0]
 8009e72:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009e76:	2300      	movs	r3, #0
 8009e78:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009e7c:	e7f7      	b.n	8009e6e <_Balloc+0x66>
 8009e7e:	bf00      	nop
 8009e80:	0800c026 	.word	0x0800c026
 8009e84:	0800c12c 	.word	0x0800c12c

08009e88 <_Bfree>:
 8009e88:	b570      	push	{r4, r5, r6, lr}
 8009e8a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009e8c:	4605      	mov	r5, r0
 8009e8e:	460c      	mov	r4, r1
 8009e90:	b976      	cbnz	r6, 8009eb0 <_Bfree+0x28>
 8009e92:	2010      	movs	r0, #16
 8009e94:	f7ff ff90 	bl	8009db8 <malloc>
 8009e98:	4602      	mov	r2, r0
 8009e9a:	6268      	str	r0, [r5, #36]	; 0x24
 8009e9c:	b920      	cbnz	r0, 8009ea8 <_Bfree+0x20>
 8009e9e:	4b09      	ldr	r3, [pc, #36]	; (8009ec4 <_Bfree+0x3c>)
 8009ea0:	4809      	ldr	r0, [pc, #36]	; (8009ec8 <_Bfree+0x40>)
 8009ea2:	218a      	movs	r1, #138	; 0x8a
 8009ea4:	f000 feb8 	bl	800ac18 <__assert_func>
 8009ea8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009eac:	6006      	str	r6, [r0, #0]
 8009eae:	60c6      	str	r6, [r0, #12]
 8009eb0:	b13c      	cbz	r4, 8009ec2 <_Bfree+0x3a>
 8009eb2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009eb4:	6862      	ldr	r2, [r4, #4]
 8009eb6:	68db      	ldr	r3, [r3, #12]
 8009eb8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009ebc:	6021      	str	r1, [r4, #0]
 8009ebe:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009ec2:	bd70      	pop	{r4, r5, r6, pc}
 8009ec4:	0800c026 	.word	0x0800c026
 8009ec8:	0800c12c 	.word	0x0800c12c

08009ecc <__multadd>:
 8009ecc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009ed0:	690e      	ldr	r6, [r1, #16]
 8009ed2:	4607      	mov	r7, r0
 8009ed4:	4698      	mov	r8, r3
 8009ed6:	460c      	mov	r4, r1
 8009ed8:	f101 0014 	add.w	r0, r1, #20
 8009edc:	2300      	movs	r3, #0
 8009ede:	6805      	ldr	r5, [r0, #0]
 8009ee0:	b2a9      	uxth	r1, r5
 8009ee2:	fb02 8101 	mla	r1, r2, r1, r8
 8009ee6:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8009eea:	0c2d      	lsrs	r5, r5, #16
 8009eec:	fb02 c505 	mla	r5, r2, r5, ip
 8009ef0:	b289      	uxth	r1, r1
 8009ef2:	3301      	adds	r3, #1
 8009ef4:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8009ef8:	429e      	cmp	r6, r3
 8009efa:	f840 1b04 	str.w	r1, [r0], #4
 8009efe:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8009f02:	dcec      	bgt.n	8009ede <__multadd+0x12>
 8009f04:	f1b8 0f00 	cmp.w	r8, #0
 8009f08:	d022      	beq.n	8009f50 <__multadd+0x84>
 8009f0a:	68a3      	ldr	r3, [r4, #8]
 8009f0c:	42b3      	cmp	r3, r6
 8009f0e:	dc19      	bgt.n	8009f44 <__multadd+0x78>
 8009f10:	6861      	ldr	r1, [r4, #4]
 8009f12:	4638      	mov	r0, r7
 8009f14:	3101      	adds	r1, #1
 8009f16:	f7ff ff77 	bl	8009e08 <_Balloc>
 8009f1a:	4605      	mov	r5, r0
 8009f1c:	b928      	cbnz	r0, 8009f2a <__multadd+0x5e>
 8009f1e:	4602      	mov	r2, r0
 8009f20:	4b0d      	ldr	r3, [pc, #52]	; (8009f58 <__multadd+0x8c>)
 8009f22:	480e      	ldr	r0, [pc, #56]	; (8009f5c <__multadd+0x90>)
 8009f24:	21b5      	movs	r1, #181	; 0xb5
 8009f26:	f000 fe77 	bl	800ac18 <__assert_func>
 8009f2a:	6922      	ldr	r2, [r4, #16]
 8009f2c:	3202      	adds	r2, #2
 8009f2e:	f104 010c 	add.w	r1, r4, #12
 8009f32:	0092      	lsls	r2, r2, #2
 8009f34:	300c      	adds	r0, #12
 8009f36:	f7ff ff59 	bl	8009dec <memcpy>
 8009f3a:	4621      	mov	r1, r4
 8009f3c:	4638      	mov	r0, r7
 8009f3e:	f7ff ffa3 	bl	8009e88 <_Bfree>
 8009f42:	462c      	mov	r4, r5
 8009f44:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8009f48:	3601      	adds	r6, #1
 8009f4a:	f8c3 8014 	str.w	r8, [r3, #20]
 8009f4e:	6126      	str	r6, [r4, #16]
 8009f50:	4620      	mov	r0, r4
 8009f52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009f56:	bf00      	nop
 8009f58:	0800c09c 	.word	0x0800c09c
 8009f5c:	0800c12c 	.word	0x0800c12c

08009f60 <__s2b>:
 8009f60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009f64:	460c      	mov	r4, r1
 8009f66:	4615      	mov	r5, r2
 8009f68:	461f      	mov	r7, r3
 8009f6a:	2209      	movs	r2, #9
 8009f6c:	3308      	adds	r3, #8
 8009f6e:	4606      	mov	r6, r0
 8009f70:	fb93 f3f2 	sdiv	r3, r3, r2
 8009f74:	2100      	movs	r1, #0
 8009f76:	2201      	movs	r2, #1
 8009f78:	429a      	cmp	r2, r3
 8009f7a:	db09      	blt.n	8009f90 <__s2b+0x30>
 8009f7c:	4630      	mov	r0, r6
 8009f7e:	f7ff ff43 	bl	8009e08 <_Balloc>
 8009f82:	b940      	cbnz	r0, 8009f96 <__s2b+0x36>
 8009f84:	4602      	mov	r2, r0
 8009f86:	4b19      	ldr	r3, [pc, #100]	; (8009fec <__s2b+0x8c>)
 8009f88:	4819      	ldr	r0, [pc, #100]	; (8009ff0 <__s2b+0x90>)
 8009f8a:	21ce      	movs	r1, #206	; 0xce
 8009f8c:	f000 fe44 	bl	800ac18 <__assert_func>
 8009f90:	0052      	lsls	r2, r2, #1
 8009f92:	3101      	adds	r1, #1
 8009f94:	e7f0      	b.n	8009f78 <__s2b+0x18>
 8009f96:	9b08      	ldr	r3, [sp, #32]
 8009f98:	6143      	str	r3, [r0, #20]
 8009f9a:	2d09      	cmp	r5, #9
 8009f9c:	f04f 0301 	mov.w	r3, #1
 8009fa0:	6103      	str	r3, [r0, #16]
 8009fa2:	dd16      	ble.n	8009fd2 <__s2b+0x72>
 8009fa4:	f104 0909 	add.w	r9, r4, #9
 8009fa8:	46c8      	mov	r8, r9
 8009faa:	442c      	add	r4, r5
 8009fac:	f818 3b01 	ldrb.w	r3, [r8], #1
 8009fb0:	4601      	mov	r1, r0
 8009fb2:	3b30      	subs	r3, #48	; 0x30
 8009fb4:	220a      	movs	r2, #10
 8009fb6:	4630      	mov	r0, r6
 8009fb8:	f7ff ff88 	bl	8009ecc <__multadd>
 8009fbc:	45a0      	cmp	r8, r4
 8009fbe:	d1f5      	bne.n	8009fac <__s2b+0x4c>
 8009fc0:	f1a5 0408 	sub.w	r4, r5, #8
 8009fc4:	444c      	add	r4, r9
 8009fc6:	1b2d      	subs	r5, r5, r4
 8009fc8:	1963      	adds	r3, r4, r5
 8009fca:	42bb      	cmp	r3, r7
 8009fcc:	db04      	blt.n	8009fd8 <__s2b+0x78>
 8009fce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009fd2:	340a      	adds	r4, #10
 8009fd4:	2509      	movs	r5, #9
 8009fd6:	e7f6      	b.n	8009fc6 <__s2b+0x66>
 8009fd8:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009fdc:	4601      	mov	r1, r0
 8009fde:	3b30      	subs	r3, #48	; 0x30
 8009fe0:	220a      	movs	r2, #10
 8009fe2:	4630      	mov	r0, r6
 8009fe4:	f7ff ff72 	bl	8009ecc <__multadd>
 8009fe8:	e7ee      	b.n	8009fc8 <__s2b+0x68>
 8009fea:	bf00      	nop
 8009fec:	0800c09c 	.word	0x0800c09c
 8009ff0:	0800c12c 	.word	0x0800c12c

08009ff4 <__hi0bits>:
 8009ff4:	0c03      	lsrs	r3, r0, #16
 8009ff6:	041b      	lsls	r3, r3, #16
 8009ff8:	b9d3      	cbnz	r3, 800a030 <__hi0bits+0x3c>
 8009ffa:	0400      	lsls	r0, r0, #16
 8009ffc:	2310      	movs	r3, #16
 8009ffe:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a002:	bf04      	itt	eq
 800a004:	0200      	lsleq	r0, r0, #8
 800a006:	3308      	addeq	r3, #8
 800a008:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a00c:	bf04      	itt	eq
 800a00e:	0100      	lsleq	r0, r0, #4
 800a010:	3304      	addeq	r3, #4
 800a012:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a016:	bf04      	itt	eq
 800a018:	0080      	lsleq	r0, r0, #2
 800a01a:	3302      	addeq	r3, #2
 800a01c:	2800      	cmp	r0, #0
 800a01e:	db05      	blt.n	800a02c <__hi0bits+0x38>
 800a020:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a024:	f103 0301 	add.w	r3, r3, #1
 800a028:	bf08      	it	eq
 800a02a:	2320      	moveq	r3, #32
 800a02c:	4618      	mov	r0, r3
 800a02e:	4770      	bx	lr
 800a030:	2300      	movs	r3, #0
 800a032:	e7e4      	b.n	8009ffe <__hi0bits+0xa>

0800a034 <__lo0bits>:
 800a034:	6803      	ldr	r3, [r0, #0]
 800a036:	f013 0207 	ands.w	r2, r3, #7
 800a03a:	4601      	mov	r1, r0
 800a03c:	d00b      	beq.n	800a056 <__lo0bits+0x22>
 800a03e:	07da      	lsls	r2, r3, #31
 800a040:	d424      	bmi.n	800a08c <__lo0bits+0x58>
 800a042:	0798      	lsls	r0, r3, #30
 800a044:	bf49      	itett	mi
 800a046:	085b      	lsrmi	r3, r3, #1
 800a048:	089b      	lsrpl	r3, r3, #2
 800a04a:	2001      	movmi	r0, #1
 800a04c:	600b      	strmi	r3, [r1, #0]
 800a04e:	bf5c      	itt	pl
 800a050:	600b      	strpl	r3, [r1, #0]
 800a052:	2002      	movpl	r0, #2
 800a054:	4770      	bx	lr
 800a056:	b298      	uxth	r0, r3
 800a058:	b9b0      	cbnz	r0, 800a088 <__lo0bits+0x54>
 800a05a:	0c1b      	lsrs	r3, r3, #16
 800a05c:	2010      	movs	r0, #16
 800a05e:	f013 0fff 	tst.w	r3, #255	; 0xff
 800a062:	bf04      	itt	eq
 800a064:	0a1b      	lsreq	r3, r3, #8
 800a066:	3008      	addeq	r0, #8
 800a068:	071a      	lsls	r2, r3, #28
 800a06a:	bf04      	itt	eq
 800a06c:	091b      	lsreq	r3, r3, #4
 800a06e:	3004      	addeq	r0, #4
 800a070:	079a      	lsls	r2, r3, #30
 800a072:	bf04      	itt	eq
 800a074:	089b      	lsreq	r3, r3, #2
 800a076:	3002      	addeq	r0, #2
 800a078:	07da      	lsls	r2, r3, #31
 800a07a:	d403      	bmi.n	800a084 <__lo0bits+0x50>
 800a07c:	085b      	lsrs	r3, r3, #1
 800a07e:	f100 0001 	add.w	r0, r0, #1
 800a082:	d005      	beq.n	800a090 <__lo0bits+0x5c>
 800a084:	600b      	str	r3, [r1, #0]
 800a086:	4770      	bx	lr
 800a088:	4610      	mov	r0, r2
 800a08a:	e7e8      	b.n	800a05e <__lo0bits+0x2a>
 800a08c:	2000      	movs	r0, #0
 800a08e:	4770      	bx	lr
 800a090:	2020      	movs	r0, #32
 800a092:	4770      	bx	lr

0800a094 <__i2b>:
 800a094:	b510      	push	{r4, lr}
 800a096:	460c      	mov	r4, r1
 800a098:	2101      	movs	r1, #1
 800a09a:	f7ff feb5 	bl	8009e08 <_Balloc>
 800a09e:	4602      	mov	r2, r0
 800a0a0:	b928      	cbnz	r0, 800a0ae <__i2b+0x1a>
 800a0a2:	4b05      	ldr	r3, [pc, #20]	; (800a0b8 <__i2b+0x24>)
 800a0a4:	4805      	ldr	r0, [pc, #20]	; (800a0bc <__i2b+0x28>)
 800a0a6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800a0aa:	f000 fdb5 	bl	800ac18 <__assert_func>
 800a0ae:	2301      	movs	r3, #1
 800a0b0:	6144      	str	r4, [r0, #20]
 800a0b2:	6103      	str	r3, [r0, #16]
 800a0b4:	bd10      	pop	{r4, pc}
 800a0b6:	bf00      	nop
 800a0b8:	0800c09c 	.word	0x0800c09c
 800a0bc:	0800c12c 	.word	0x0800c12c

0800a0c0 <__multiply>:
 800a0c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0c4:	4614      	mov	r4, r2
 800a0c6:	690a      	ldr	r2, [r1, #16]
 800a0c8:	6923      	ldr	r3, [r4, #16]
 800a0ca:	429a      	cmp	r2, r3
 800a0cc:	bfb8      	it	lt
 800a0ce:	460b      	movlt	r3, r1
 800a0d0:	460d      	mov	r5, r1
 800a0d2:	bfbc      	itt	lt
 800a0d4:	4625      	movlt	r5, r4
 800a0d6:	461c      	movlt	r4, r3
 800a0d8:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800a0dc:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800a0e0:	68ab      	ldr	r3, [r5, #8]
 800a0e2:	6869      	ldr	r1, [r5, #4]
 800a0e4:	eb0a 0709 	add.w	r7, sl, r9
 800a0e8:	42bb      	cmp	r3, r7
 800a0ea:	b085      	sub	sp, #20
 800a0ec:	bfb8      	it	lt
 800a0ee:	3101      	addlt	r1, #1
 800a0f0:	f7ff fe8a 	bl	8009e08 <_Balloc>
 800a0f4:	b930      	cbnz	r0, 800a104 <__multiply+0x44>
 800a0f6:	4602      	mov	r2, r0
 800a0f8:	4b42      	ldr	r3, [pc, #264]	; (800a204 <__multiply+0x144>)
 800a0fa:	4843      	ldr	r0, [pc, #268]	; (800a208 <__multiply+0x148>)
 800a0fc:	f240 115d 	movw	r1, #349	; 0x15d
 800a100:	f000 fd8a 	bl	800ac18 <__assert_func>
 800a104:	f100 0614 	add.w	r6, r0, #20
 800a108:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800a10c:	4633      	mov	r3, r6
 800a10e:	2200      	movs	r2, #0
 800a110:	4543      	cmp	r3, r8
 800a112:	d31e      	bcc.n	800a152 <__multiply+0x92>
 800a114:	f105 0c14 	add.w	ip, r5, #20
 800a118:	f104 0314 	add.w	r3, r4, #20
 800a11c:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800a120:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800a124:	9202      	str	r2, [sp, #8]
 800a126:	ebac 0205 	sub.w	r2, ip, r5
 800a12a:	3a15      	subs	r2, #21
 800a12c:	f022 0203 	bic.w	r2, r2, #3
 800a130:	3204      	adds	r2, #4
 800a132:	f105 0115 	add.w	r1, r5, #21
 800a136:	458c      	cmp	ip, r1
 800a138:	bf38      	it	cc
 800a13a:	2204      	movcc	r2, #4
 800a13c:	9201      	str	r2, [sp, #4]
 800a13e:	9a02      	ldr	r2, [sp, #8]
 800a140:	9303      	str	r3, [sp, #12]
 800a142:	429a      	cmp	r2, r3
 800a144:	d808      	bhi.n	800a158 <__multiply+0x98>
 800a146:	2f00      	cmp	r7, #0
 800a148:	dc55      	bgt.n	800a1f6 <__multiply+0x136>
 800a14a:	6107      	str	r7, [r0, #16]
 800a14c:	b005      	add	sp, #20
 800a14e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a152:	f843 2b04 	str.w	r2, [r3], #4
 800a156:	e7db      	b.n	800a110 <__multiply+0x50>
 800a158:	f8b3 a000 	ldrh.w	sl, [r3]
 800a15c:	f1ba 0f00 	cmp.w	sl, #0
 800a160:	d020      	beq.n	800a1a4 <__multiply+0xe4>
 800a162:	f105 0e14 	add.w	lr, r5, #20
 800a166:	46b1      	mov	r9, r6
 800a168:	2200      	movs	r2, #0
 800a16a:	f85e 4b04 	ldr.w	r4, [lr], #4
 800a16e:	f8d9 b000 	ldr.w	fp, [r9]
 800a172:	b2a1      	uxth	r1, r4
 800a174:	fa1f fb8b 	uxth.w	fp, fp
 800a178:	fb0a b101 	mla	r1, sl, r1, fp
 800a17c:	4411      	add	r1, r2
 800a17e:	f8d9 2000 	ldr.w	r2, [r9]
 800a182:	0c24      	lsrs	r4, r4, #16
 800a184:	0c12      	lsrs	r2, r2, #16
 800a186:	fb0a 2404 	mla	r4, sl, r4, r2
 800a18a:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800a18e:	b289      	uxth	r1, r1
 800a190:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800a194:	45f4      	cmp	ip, lr
 800a196:	f849 1b04 	str.w	r1, [r9], #4
 800a19a:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800a19e:	d8e4      	bhi.n	800a16a <__multiply+0xaa>
 800a1a0:	9901      	ldr	r1, [sp, #4]
 800a1a2:	5072      	str	r2, [r6, r1]
 800a1a4:	9a03      	ldr	r2, [sp, #12]
 800a1a6:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a1aa:	3304      	adds	r3, #4
 800a1ac:	f1b9 0f00 	cmp.w	r9, #0
 800a1b0:	d01f      	beq.n	800a1f2 <__multiply+0x132>
 800a1b2:	6834      	ldr	r4, [r6, #0]
 800a1b4:	f105 0114 	add.w	r1, r5, #20
 800a1b8:	46b6      	mov	lr, r6
 800a1ba:	f04f 0a00 	mov.w	sl, #0
 800a1be:	880a      	ldrh	r2, [r1, #0]
 800a1c0:	f8be b002 	ldrh.w	fp, [lr, #2]
 800a1c4:	fb09 b202 	mla	r2, r9, r2, fp
 800a1c8:	4492      	add	sl, r2
 800a1ca:	b2a4      	uxth	r4, r4
 800a1cc:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800a1d0:	f84e 4b04 	str.w	r4, [lr], #4
 800a1d4:	f851 4b04 	ldr.w	r4, [r1], #4
 800a1d8:	f8be 2000 	ldrh.w	r2, [lr]
 800a1dc:	0c24      	lsrs	r4, r4, #16
 800a1de:	fb09 2404 	mla	r4, r9, r4, r2
 800a1e2:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800a1e6:	458c      	cmp	ip, r1
 800a1e8:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800a1ec:	d8e7      	bhi.n	800a1be <__multiply+0xfe>
 800a1ee:	9a01      	ldr	r2, [sp, #4]
 800a1f0:	50b4      	str	r4, [r6, r2]
 800a1f2:	3604      	adds	r6, #4
 800a1f4:	e7a3      	b.n	800a13e <__multiply+0x7e>
 800a1f6:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	d1a5      	bne.n	800a14a <__multiply+0x8a>
 800a1fe:	3f01      	subs	r7, #1
 800a200:	e7a1      	b.n	800a146 <__multiply+0x86>
 800a202:	bf00      	nop
 800a204:	0800c09c 	.word	0x0800c09c
 800a208:	0800c12c 	.word	0x0800c12c

0800a20c <__pow5mult>:
 800a20c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a210:	4615      	mov	r5, r2
 800a212:	f012 0203 	ands.w	r2, r2, #3
 800a216:	4606      	mov	r6, r0
 800a218:	460f      	mov	r7, r1
 800a21a:	d007      	beq.n	800a22c <__pow5mult+0x20>
 800a21c:	4c25      	ldr	r4, [pc, #148]	; (800a2b4 <__pow5mult+0xa8>)
 800a21e:	3a01      	subs	r2, #1
 800a220:	2300      	movs	r3, #0
 800a222:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a226:	f7ff fe51 	bl	8009ecc <__multadd>
 800a22a:	4607      	mov	r7, r0
 800a22c:	10ad      	asrs	r5, r5, #2
 800a22e:	d03d      	beq.n	800a2ac <__pow5mult+0xa0>
 800a230:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a232:	b97c      	cbnz	r4, 800a254 <__pow5mult+0x48>
 800a234:	2010      	movs	r0, #16
 800a236:	f7ff fdbf 	bl	8009db8 <malloc>
 800a23a:	4602      	mov	r2, r0
 800a23c:	6270      	str	r0, [r6, #36]	; 0x24
 800a23e:	b928      	cbnz	r0, 800a24c <__pow5mult+0x40>
 800a240:	4b1d      	ldr	r3, [pc, #116]	; (800a2b8 <__pow5mult+0xac>)
 800a242:	481e      	ldr	r0, [pc, #120]	; (800a2bc <__pow5mult+0xb0>)
 800a244:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800a248:	f000 fce6 	bl	800ac18 <__assert_func>
 800a24c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a250:	6004      	str	r4, [r0, #0]
 800a252:	60c4      	str	r4, [r0, #12]
 800a254:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a258:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a25c:	b94c      	cbnz	r4, 800a272 <__pow5mult+0x66>
 800a25e:	f240 2171 	movw	r1, #625	; 0x271
 800a262:	4630      	mov	r0, r6
 800a264:	f7ff ff16 	bl	800a094 <__i2b>
 800a268:	2300      	movs	r3, #0
 800a26a:	f8c8 0008 	str.w	r0, [r8, #8]
 800a26e:	4604      	mov	r4, r0
 800a270:	6003      	str	r3, [r0, #0]
 800a272:	f04f 0900 	mov.w	r9, #0
 800a276:	07eb      	lsls	r3, r5, #31
 800a278:	d50a      	bpl.n	800a290 <__pow5mult+0x84>
 800a27a:	4639      	mov	r1, r7
 800a27c:	4622      	mov	r2, r4
 800a27e:	4630      	mov	r0, r6
 800a280:	f7ff ff1e 	bl	800a0c0 <__multiply>
 800a284:	4639      	mov	r1, r7
 800a286:	4680      	mov	r8, r0
 800a288:	4630      	mov	r0, r6
 800a28a:	f7ff fdfd 	bl	8009e88 <_Bfree>
 800a28e:	4647      	mov	r7, r8
 800a290:	106d      	asrs	r5, r5, #1
 800a292:	d00b      	beq.n	800a2ac <__pow5mult+0xa0>
 800a294:	6820      	ldr	r0, [r4, #0]
 800a296:	b938      	cbnz	r0, 800a2a8 <__pow5mult+0x9c>
 800a298:	4622      	mov	r2, r4
 800a29a:	4621      	mov	r1, r4
 800a29c:	4630      	mov	r0, r6
 800a29e:	f7ff ff0f 	bl	800a0c0 <__multiply>
 800a2a2:	6020      	str	r0, [r4, #0]
 800a2a4:	f8c0 9000 	str.w	r9, [r0]
 800a2a8:	4604      	mov	r4, r0
 800a2aa:	e7e4      	b.n	800a276 <__pow5mult+0x6a>
 800a2ac:	4638      	mov	r0, r7
 800a2ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a2b2:	bf00      	nop
 800a2b4:	0800c280 	.word	0x0800c280
 800a2b8:	0800c026 	.word	0x0800c026
 800a2bc:	0800c12c 	.word	0x0800c12c

0800a2c0 <__lshift>:
 800a2c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a2c4:	460c      	mov	r4, r1
 800a2c6:	6849      	ldr	r1, [r1, #4]
 800a2c8:	6923      	ldr	r3, [r4, #16]
 800a2ca:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a2ce:	68a3      	ldr	r3, [r4, #8]
 800a2d0:	4607      	mov	r7, r0
 800a2d2:	4691      	mov	r9, r2
 800a2d4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a2d8:	f108 0601 	add.w	r6, r8, #1
 800a2dc:	42b3      	cmp	r3, r6
 800a2de:	db0b      	blt.n	800a2f8 <__lshift+0x38>
 800a2e0:	4638      	mov	r0, r7
 800a2e2:	f7ff fd91 	bl	8009e08 <_Balloc>
 800a2e6:	4605      	mov	r5, r0
 800a2e8:	b948      	cbnz	r0, 800a2fe <__lshift+0x3e>
 800a2ea:	4602      	mov	r2, r0
 800a2ec:	4b28      	ldr	r3, [pc, #160]	; (800a390 <__lshift+0xd0>)
 800a2ee:	4829      	ldr	r0, [pc, #164]	; (800a394 <__lshift+0xd4>)
 800a2f0:	f240 11d9 	movw	r1, #473	; 0x1d9
 800a2f4:	f000 fc90 	bl	800ac18 <__assert_func>
 800a2f8:	3101      	adds	r1, #1
 800a2fa:	005b      	lsls	r3, r3, #1
 800a2fc:	e7ee      	b.n	800a2dc <__lshift+0x1c>
 800a2fe:	2300      	movs	r3, #0
 800a300:	f100 0114 	add.w	r1, r0, #20
 800a304:	f100 0210 	add.w	r2, r0, #16
 800a308:	4618      	mov	r0, r3
 800a30a:	4553      	cmp	r3, sl
 800a30c:	db33      	blt.n	800a376 <__lshift+0xb6>
 800a30e:	6920      	ldr	r0, [r4, #16]
 800a310:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a314:	f104 0314 	add.w	r3, r4, #20
 800a318:	f019 091f 	ands.w	r9, r9, #31
 800a31c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a320:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a324:	d02b      	beq.n	800a37e <__lshift+0xbe>
 800a326:	f1c9 0e20 	rsb	lr, r9, #32
 800a32a:	468a      	mov	sl, r1
 800a32c:	2200      	movs	r2, #0
 800a32e:	6818      	ldr	r0, [r3, #0]
 800a330:	fa00 f009 	lsl.w	r0, r0, r9
 800a334:	4302      	orrs	r2, r0
 800a336:	f84a 2b04 	str.w	r2, [sl], #4
 800a33a:	f853 2b04 	ldr.w	r2, [r3], #4
 800a33e:	459c      	cmp	ip, r3
 800a340:	fa22 f20e 	lsr.w	r2, r2, lr
 800a344:	d8f3      	bhi.n	800a32e <__lshift+0x6e>
 800a346:	ebac 0304 	sub.w	r3, ip, r4
 800a34a:	3b15      	subs	r3, #21
 800a34c:	f023 0303 	bic.w	r3, r3, #3
 800a350:	3304      	adds	r3, #4
 800a352:	f104 0015 	add.w	r0, r4, #21
 800a356:	4584      	cmp	ip, r0
 800a358:	bf38      	it	cc
 800a35a:	2304      	movcc	r3, #4
 800a35c:	50ca      	str	r2, [r1, r3]
 800a35e:	b10a      	cbz	r2, 800a364 <__lshift+0xa4>
 800a360:	f108 0602 	add.w	r6, r8, #2
 800a364:	3e01      	subs	r6, #1
 800a366:	4638      	mov	r0, r7
 800a368:	612e      	str	r6, [r5, #16]
 800a36a:	4621      	mov	r1, r4
 800a36c:	f7ff fd8c 	bl	8009e88 <_Bfree>
 800a370:	4628      	mov	r0, r5
 800a372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a376:	f842 0f04 	str.w	r0, [r2, #4]!
 800a37a:	3301      	adds	r3, #1
 800a37c:	e7c5      	b.n	800a30a <__lshift+0x4a>
 800a37e:	3904      	subs	r1, #4
 800a380:	f853 2b04 	ldr.w	r2, [r3], #4
 800a384:	f841 2f04 	str.w	r2, [r1, #4]!
 800a388:	459c      	cmp	ip, r3
 800a38a:	d8f9      	bhi.n	800a380 <__lshift+0xc0>
 800a38c:	e7ea      	b.n	800a364 <__lshift+0xa4>
 800a38e:	bf00      	nop
 800a390:	0800c09c 	.word	0x0800c09c
 800a394:	0800c12c 	.word	0x0800c12c

0800a398 <__mcmp>:
 800a398:	b530      	push	{r4, r5, lr}
 800a39a:	6902      	ldr	r2, [r0, #16]
 800a39c:	690c      	ldr	r4, [r1, #16]
 800a39e:	1b12      	subs	r2, r2, r4
 800a3a0:	d10e      	bne.n	800a3c0 <__mcmp+0x28>
 800a3a2:	f100 0314 	add.w	r3, r0, #20
 800a3a6:	3114      	adds	r1, #20
 800a3a8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a3ac:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a3b0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a3b4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a3b8:	42a5      	cmp	r5, r4
 800a3ba:	d003      	beq.n	800a3c4 <__mcmp+0x2c>
 800a3bc:	d305      	bcc.n	800a3ca <__mcmp+0x32>
 800a3be:	2201      	movs	r2, #1
 800a3c0:	4610      	mov	r0, r2
 800a3c2:	bd30      	pop	{r4, r5, pc}
 800a3c4:	4283      	cmp	r3, r0
 800a3c6:	d3f3      	bcc.n	800a3b0 <__mcmp+0x18>
 800a3c8:	e7fa      	b.n	800a3c0 <__mcmp+0x28>
 800a3ca:	f04f 32ff 	mov.w	r2, #4294967295
 800a3ce:	e7f7      	b.n	800a3c0 <__mcmp+0x28>

0800a3d0 <__mdiff>:
 800a3d0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3d4:	460c      	mov	r4, r1
 800a3d6:	4606      	mov	r6, r0
 800a3d8:	4611      	mov	r1, r2
 800a3da:	4620      	mov	r0, r4
 800a3dc:	4617      	mov	r7, r2
 800a3de:	f7ff ffdb 	bl	800a398 <__mcmp>
 800a3e2:	1e05      	subs	r5, r0, #0
 800a3e4:	d110      	bne.n	800a408 <__mdiff+0x38>
 800a3e6:	4629      	mov	r1, r5
 800a3e8:	4630      	mov	r0, r6
 800a3ea:	f7ff fd0d 	bl	8009e08 <_Balloc>
 800a3ee:	b930      	cbnz	r0, 800a3fe <__mdiff+0x2e>
 800a3f0:	4b39      	ldr	r3, [pc, #228]	; (800a4d8 <__mdiff+0x108>)
 800a3f2:	4602      	mov	r2, r0
 800a3f4:	f240 2132 	movw	r1, #562	; 0x232
 800a3f8:	4838      	ldr	r0, [pc, #224]	; (800a4dc <__mdiff+0x10c>)
 800a3fa:	f000 fc0d 	bl	800ac18 <__assert_func>
 800a3fe:	2301      	movs	r3, #1
 800a400:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a404:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a408:	bfa4      	itt	ge
 800a40a:	463b      	movge	r3, r7
 800a40c:	4627      	movge	r7, r4
 800a40e:	4630      	mov	r0, r6
 800a410:	6879      	ldr	r1, [r7, #4]
 800a412:	bfa6      	itte	ge
 800a414:	461c      	movge	r4, r3
 800a416:	2500      	movge	r5, #0
 800a418:	2501      	movlt	r5, #1
 800a41a:	f7ff fcf5 	bl	8009e08 <_Balloc>
 800a41e:	b920      	cbnz	r0, 800a42a <__mdiff+0x5a>
 800a420:	4b2d      	ldr	r3, [pc, #180]	; (800a4d8 <__mdiff+0x108>)
 800a422:	4602      	mov	r2, r0
 800a424:	f44f 7110 	mov.w	r1, #576	; 0x240
 800a428:	e7e6      	b.n	800a3f8 <__mdiff+0x28>
 800a42a:	693e      	ldr	r6, [r7, #16]
 800a42c:	60c5      	str	r5, [r0, #12]
 800a42e:	6925      	ldr	r5, [r4, #16]
 800a430:	f107 0114 	add.w	r1, r7, #20
 800a434:	f104 0914 	add.w	r9, r4, #20
 800a438:	f100 0e14 	add.w	lr, r0, #20
 800a43c:	f107 0210 	add.w	r2, r7, #16
 800a440:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800a444:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800a448:	46f2      	mov	sl, lr
 800a44a:	2700      	movs	r7, #0
 800a44c:	f859 3b04 	ldr.w	r3, [r9], #4
 800a450:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a454:	fa1f f883 	uxth.w	r8, r3
 800a458:	fa17 f78b 	uxtah	r7, r7, fp
 800a45c:	0c1b      	lsrs	r3, r3, #16
 800a45e:	eba7 0808 	sub.w	r8, r7, r8
 800a462:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a466:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a46a:	fa1f f888 	uxth.w	r8, r8
 800a46e:	141f      	asrs	r7, r3, #16
 800a470:	454d      	cmp	r5, r9
 800a472:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a476:	f84a 3b04 	str.w	r3, [sl], #4
 800a47a:	d8e7      	bhi.n	800a44c <__mdiff+0x7c>
 800a47c:	1b2b      	subs	r3, r5, r4
 800a47e:	3b15      	subs	r3, #21
 800a480:	f023 0303 	bic.w	r3, r3, #3
 800a484:	3304      	adds	r3, #4
 800a486:	3415      	adds	r4, #21
 800a488:	42a5      	cmp	r5, r4
 800a48a:	bf38      	it	cc
 800a48c:	2304      	movcc	r3, #4
 800a48e:	4419      	add	r1, r3
 800a490:	4473      	add	r3, lr
 800a492:	469e      	mov	lr, r3
 800a494:	460d      	mov	r5, r1
 800a496:	4565      	cmp	r5, ip
 800a498:	d30e      	bcc.n	800a4b8 <__mdiff+0xe8>
 800a49a:	f10c 0203 	add.w	r2, ip, #3
 800a49e:	1a52      	subs	r2, r2, r1
 800a4a0:	f022 0203 	bic.w	r2, r2, #3
 800a4a4:	3903      	subs	r1, #3
 800a4a6:	458c      	cmp	ip, r1
 800a4a8:	bf38      	it	cc
 800a4aa:	2200      	movcc	r2, #0
 800a4ac:	441a      	add	r2, r3
 800a4ae:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800a4b2:	b17b      	cbz	r3, 800a4d4 <__mdiff+0x104>
 800a4b4:	6106      	str	r6, [r0, #16]
 800a4b6:	e7a5      	b.n	800a404 <__mdiff+0x34>
 800a4b8:	f855 8b04 	ldr.w	r8, [r5], #4
 800a4bc:	fa17 f488 	uxtah	r4, r7, r8
 800a4c0:	1422      	asrs	r2, r4, #16
 800a4c2:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800a4c6:	b2a4      	uxth	r4, r4
 800a4c8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800a4cc:	f84e 4b04 	str.w	r4, [lr], #4
 800a4d0:	1417      	asrs	r7, r2, #16
 800a4d2:	e7e0      	b.n	800a496 <__mdiff+0xc6>
 800a4d4:	3e01      	subs	r6, #1
 800a4d6:	e7ea      	b.n	800a4ae <__mdiff+0xde>
 800a4d8:	0800c09c 	.word	0x0800c09c
 800a4dc:	0800c12c 	.word	0x0800c12c

0800a4e0 <__ulp>:
 800a4e0:	b082      	sub	sp, #8
 800a4e2:	ed8d 0b00 	vstr	d0, [sp]
 800a4e6:	9b01      	ldr	r3, [sp, #4]
 800a4e8:	4912      	ldr	r1, [pc, #72]	; (800a534 <__ulp+0x54>)
 800a4ea:	4019      	ands	r1, r3
 800a4ec:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800a4f0:	2900      	cmp	r1, #0
 800a4f2:	dd05      	ble.n	800a500 <__ulp+0x20>
 800a4f4:	2200      	movs	r2, #0
 800a4f6:	460b      	mov	r3, r1
 800a4f8:	ec43 2b10 	vmov	d0, r2, r3
 800a4fc:	b002      	add	sp, #8
 800a4fe:	4770      	bx	lr
 800a500:	4249      	negs	r1, r1
 800a502:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800a506:	ea4f 5021 	mov.w	r0, r1, asr #20
 800a50a:	f04f 0200 	mov.w	r2, #0
 800a50e:	f04f 0300 	mov.w	r3, #0
 800a512:	da04      	bge.n	800a51e <__ulp+0x3e>
 800a514:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800a518:	fa41 f300 	asr.w	r3, r1, r0
 800a51c:	e7ec      	b.n	800a4f8 <__ulp+0x18>
 800a51e:	f1a0 0114 	sub.w	r1, r0, #20
 800a522:	291e      	cmp	r1, #30
 800a524:	bfda      	itte	le
 800a526:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800a52a:	fa20 f101 	lsrle.w	r1, r0, r1
 800a52e:	2101      	movgt	r1, #1
 800a530:	460a      	mov	r2, r1
 800a532:	e7e1      	b.n	800a4f8 <__ulp+0x18>
 800a534:	7ff00000 	.word	0x7ff00000

0800a538 <__b2d>:
 800a538:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a53a:	6905      	ldr	r5, [r0, #16]
 800a53c:	f100 0714 	add.w	r7, r0, #20
 800a540:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800a544:	1f2e      	subs	r6, r5, #4
 800a546:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800a54a:	4620      	mov	r0, r4
 800a54c:	f7ff fd52 	bl	8009ff4 <__hi0bits>
 800a550:	f1c0 0320 	rsb	r3, r0, #32
 800a554:	280a      	cmp	r0, #10
 800a556:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800a5d4 <__b2d+0x9c>
 800a55a:	600b      	str	r3, [r1, #0]
 800a55c:	dc14      	bgt.n	800a588 <__b2d+0x50>
 800a55e:	f1c0 0e0b 	rsb	lr, r0, #11
 800a562:	fa24 f10e 	lsr.w	r1, r4, lr
 800a566:	42b7      	cmp	r7, r6
 800a568:	ea41 030c 	orr.w	r3, r1, ip
 800a56c:	bf34      	ite	cc
 800a56e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800a572:	2100      	movcs	r1, #0
 800a574:	3015      	adds	r0, #21
 800a576:	fa04 f000 	lsl.w	r0, r4, r0
 800a57a:	fa21 f10e 	lsr.w	r1, r1, lr
 800a57e:	ea40 0201 	orr.w	r2, r0, r1
 800a582:	ec43 2b10 	vmov	d0, r2, r3
 800a586:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a588:	42b7      	cmp	r7, r6
 800a58a:	bf3a      	itte	cc
 800a58c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800a590:	f1a5 0608 	subcc.w	r6, r5, #8
 800a594:	2100      	movcs	r1, #0
 800a596:	380b      	subs	r0, #11
 800a598:	d017      	beq.n	800a5ca <__b2d+0x92>
 800a59a:	f1c0 0c20 	rsb	ip, r0, #32
 800a59e:	fa04 f500 	lsl.w	r5, r4, r0
 800a5a2:	42be      	cmp	r6, r7
 800a5a4:	fa21 f40c 	lsr.w	r4, r1, ip
 800a5a8:	ea45 0504 	orr.w	r5, r5, r4
 800a5ac:	bf8c      	ite	hi
 800a5ae:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800a5b2:	2400      	movls	r4, #0
 800a5b4:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800a5b8:	fa01 f000 	lsl.w	r0, r1, r0
 800a5bc:	fa24 f40c 	lsr.w	r4, r4, ip
 800a5c0:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800a5c4:	ea40 0204 	orr.w	r2, r0, r4
 800a5c8:	e7db      	b.n	800a582 <__b2d+0x4a>
 800a5ca:	ea44 030c 	orr.w	r3, r4, ip
 800a5ce:	460a      	mov	r2, r1
 800a5d0:	e7d7      	b.n	800a582 <__b2d+0x4a>
 800a5d2:	bf00      	nop
 800a5d4:	3ff00000 	.word	0x3ff00000

0800a5d8 <__d2b>:
 800a5d8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a5dc:	4689      	mov	r9, r1
 800a5de:	2101      	movs	r1, #1
 800a5e0:	ec57 6b10 	vmov	r6, r7, d0
 800a5e4:	4690      	mov	r8, r2
 800a5e6:	f7ff fc0f 	bl	8009e08 <_Balloc>
 800a5ea:	4604      	mov	r4, r0
 800a5ec:	b930      	cbnz	r0, 800a5fc <__d2b+0x24>
 800a5ee:	4602      	mov	r2, r0
 800a5f0:	4b25      	ldr	r3, [pc, #148]	; (800a688 <__d2b+0xb0>)
 800a5f2:	4826      	ldr	r0, [pc, #152]	; (800a68c <__d2b+0xb4>)
 800a5f4:	f240 310a 	movw	r1, #778	; 0x30a
 800a5f8:	f000 fb0e 	bl	800ac18 <__assert_func>
 800a5fc:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800a600:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a604:	bb35      	cbnz	r5, 800a654 <__d2b+0x7c>
 800a606:	2e00      	cmp	r6, #0
 800a608:	9301      	str	r3, [sp, #4]
 800a60a:	d028      	beq.n	800a65e <__d2b+0x86>
 800a60c:	4668      	mov	r0, sp
 800a60e:	9600      	str	r6, [sp, #0]
 800a610:	f7ff fd10 	bl	800a034 <__lo0bits>
 800a614:	9900      	ldr	r1, [sp, #0]
 800a616:	b300      	cbz	r0, 800a65a <__d2b+0x82>
 800a618:	9a01      	ldr	r2, [sp, #4]
 800a61a:	f1c0 0320 	rsb	r3, r0, #32
 800a61e:	fa02 f303 	lsl.w	r3, r2, r3
 800a622:	430b      	orrs	r3, r1
 800a624:	40c2      	lsrs	r2, r0
 800a626:	6163      	str	r3, [r4, #20]
 800a628:	9201      	str	r2, [sp, #4]
 800a62a:	9b01      	ldr	r3, [sp, #4]
 800a62c:	61a3      	str	r3, [r4, #24]
 800a62e:	2b00      	cmp	r3, #0
 800a630:	bf14      	ite	ne
 800a632:	2202      	movne	r2, #2
 800a634:	2201      	moveq	r2, #1
 800a636:	6122      	str	r2, [r4, #16]
 800a638:	b1d5      	cbz	r5, 800a670 <__d2b+0x98>
 800a63a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a63e:	4405      	add	r5, r0
 800a640:	f8c9 5000 	str.w	r5, [r9]
 800a644:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a648:	f8c8 0000 	str.w	r0, [r8]
 800a64c:	4620      	mov	r0, r4
 800a64e:	b003      	add	sp, #12
 800a650:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a658:	e7d5      	b.n	800a606 <__d2b+0x2e>
 800a65a:	6161      	str	r1, [r4, #20]
 800a65c:	e7e5      	b.n	800a62a <__d2b+0x52>
 800a65e:	a801      	add	r0, sp, #4
 800a660:	f7ff fce8 	bl	800a034 <__lo0bits>
 800a664:	9b01      	ldr	r3, [sp, #4]
 800a666:	6163      	str	r3, [r4, #20]
 800a668:	2201      	movs	r2, #1
 800a66a:	6122      	str	r2, [r4, #16]
 800a66c:	3020      	adds	r0, #32
 800a66e:	e7e3      	b.n	800a638 <__d2b+0x60>
 800a670:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a674:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a678:	f8c9 0000 	str.w	r0, [r9]
 800a67c:	6918      	ldr	r0, [r3, #16]
 800a67e:	f7ff fcb9 	bl	8009ff4 <__hi0bits>
 800a682:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a686:	e7df      	b.n	800a648 <__d2b+0x70>
 800a688:	0800c09c 	.word	0x0800c09c
 800a68c:	0800c12c 	.word	0x0800c12c

0800a690 <__ratio>:
 800a690:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a694:	4688      	mov	r8, r1
 800a696:	4669      	mov	r1, sp
 800a698:	4681      	mov	r9, r0
 800a69a:	f7ff ff4d 	bl	800a538 <__b2d>
 800a69e:	a901      	add	r1, sp, #4
 800a6a0:	4640      	mov	r0, r8
 800a6a2:	ec55 4b10 	vmov	r4, r5, d0
 800a6a6:	f7ff ff47 	bl	800a538 <__b2d>
 800a6aa:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a6ae:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800a6b2:	eba3 0c02 	sub.w	ip, r3, r2
 800a6b6:	e9dd 3200 	ldrd	r3, r2, [sp]
 800a6ba:	1a9b      	subs	r3, r3, r2
 800a6bc:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800a6c0:	ec51 0b10 	vmov	r0, r1, d0
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	bfd6      	itet	le
 800a6c8:	460a      	movle	r2, r1
 800a6ca:	462a      	movgt	r2, r5
 800a6cc:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800a6d0:	468b      	mov	fp, r1
 800a6d2:	462f      	mov	r7, r5
 800a6d4:	bfd4      	ite	le
 800a6d6:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800a6da:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800a6de:	4620      	mov	r0, r4
 800a6e0:	ee10 2a10 	vmov	r2, s0
 800a6e4:	465b      	mov	r3, fp
 800a6e6:	4639      	mov	r1, r7
 800a6e8:	f7f6 f8d0 	bl	800088c <__aeabi_ddiv>
 800a6ec:	ec41 0b10 	vmov	d0, r0, r1
 800a6f0:	b003      	add	sp, #12
 800a6f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a6f6 <__copybits>:
 800a6f6:	3901      	subs	r1, #1
 800a6f8:	b570      	push	{r4, r5, r6, lr}
 800a6fa:	1149      	asrs	r1, r1, #5
 800a6fc:	6914      	ldr	r4, [r2, #16]
 800a6fe:	3101      	adds	r1, #1
 800a700:	f102 0314 	add.w	r3, r2, #20
 800a704:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800a708:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a70c:	1f05      	subs	r5, r0, #4
 800a70e:	42a3      	cmp	r3, r4
 800a710:	d30c      	bcc.n	800a72c <__copybits+0x36>
 800a712:	1aa3      	subs	r3, r4, r2
 800a714:	3b11      	subs	r3, #17
 800a716:	f023 0303 	bic.w	r3, r3, #3
 800a71a:	3211      	adds	r2, #17
 800a71c:	42a2      	cmp	r2, r4
 800a71e:	bf88      	it	hi
 800a720:	2300      	movhi	r3, #0
 800a722:	4418      	add	r0, r3
 800a724:	2300      	movs	r3, #0
 800a726:	4288      	cmp	r0, r1
 800a728:	d305      	bcc.n	800a736 <__copybits+0x40>
 800a72a:	bd70      	pop	{r4, r5, r6, pc}
 800a72c:	f853 6b04 	ldr.w	r6, [r3], #4
 800a730:	f845 6f04 	str.w	r6, [r5, #4]!
 800a734:	e7eb      	b.n	800a70e <__copybits+0x18>
 800a736:	f840 3b04 	str.w	r3, [r0], #4
 800a73a:	e7f4      	b.n	800a726 <__copybits+0x30>

0800a73c <__any_on>:
 800a73c:	f100 0214 	add.w	r2, r0, #20
 800a740:	6900      	ldr	r0, [r0, #16]
 800a742:	114b      	asrs	r3, r1, #5
 800a744:	4298      	cmp	r0, r3
 800a746:	b510      	push	{r4, lr}
 800a748:	db11      	blt.n	800a76e <__any_on+0x32>
 800a74a:	dd0a      	ble.n	800a762 <__any_on+0x26>
 800a74c:	f011 011f 	ands.w	r1, r1, #31
 800a750:	d007      	beq.n	800a762 <__any_on+0x26>
 800a752:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800a756:	fa24 f001 	lsr.w	r0, r4, r1
 800a75a:	fa00 f101 	lsl.w	r1, r0, r1
 800a75e:	428c      	cmp	r4, r1
 800a760:	d10b      	bne.n	800a77a <__any_on+0x3e>
 800a762:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a766:	4293      	cmp	r3, r2
 800a768:	d803      	bhi.n	800a772 <__any_on+0x36>
 800a76a:	2000      	movs	r0, #0
 800a76c:	bd10      	pop	{r4, pc}
 800a76e:	4603      	mov	r3, r0
 800a770:	e7f7      	b.n	800a762 <__any_on+0x26>
 800a772:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a776:	2900      	cmp	r1, #0
 800a778:	d0f5      	beq.n	800a766 <__any_on+0x2a>
 800a77a:	2001      	movs	r0, #1
 800a77c:	e7f6      	b.n	800a76c <__any_on+0x30>

0800a77e <_calloc_r>:
 800a77e:	b513      	push	{r0, r1, r4, lr}
 800a780:	434a      	muls	r2, r1
 800a782:	4611      	mov	r1, r2
 800a784:	9201      	str	r2, [sp, #4]
 800a786:	f000 f859 	bl	800a83c <_malloc_r>
 800a78a:	4604      	mov	r4, r0
 800a78c:	b118      	cbz	r0, 800a796 <_calloc_r+0x18>
 800a78e:	9a01      	ldr	r2, [sp, #4]
 800a790:	2100      	movs	r1, #0
 800a792:	f7fc fbc7 	bl	8006f24 <memset>
 800a796:	4620      	mov	r0, r4
 800a798:	b002      	add	sp, #8
 800a79a:	bd10      	pop	{r4, pc}

0800a79c <_free_r>:
 800a79c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a79e:	2900      	cmp	r1, #0
 800a7a0:	d048      	beq.n	800a834 <_free_r+0x98>
 800a7a2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a7a6:	9001      	str	r0, [sp, #4]
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	f1a1 0404 	sub.w	r4, r1, #4
 800a7ae:	bfb8      	it	lt
 800a7b0:	18e4      	addlt	r4, r4, r3
 800a7b2:	f000 fa7b 	bl	800acac <__malloc_lock>
 800a7b6:	4a20      	ldr	r2, [pc, #128]	; (800a838 <_free_r+0x9c>)
 800a7b8:	9801      	ldr	r0, [sp, #4]
 800a7ba:	6813      	ldr	r3, [r2, #0]
 800a7bc:	4615      	mov	r5, r2
 800a7be:	b933      	cbnz	r3, 800a7ce <_free_r+0x32>
 800a7c0:	6063      	str	r3, [r4, #4]
 800a7c2:	6014      	str	r4, [r2, #0]
 800a7c4:	b003      	add	sp, #12
 800a7c6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a7ca:	f000 ba75 	b.w	800acb8 <__malloc_unlock>
 800a7ce:	42a3      	cmp	r3, r4
 800a7d0:	d90b      	bls.n	800a7ea <_free_r+0x4e>
 800a7d2:	6821      	ldr	r1, [r4, #0]
 800a7d4:	1862      	adds	r2, r4, r1
 800a7d6:	4293      	cmp	r3, r2
 800a7d8:	bf04      	itt	eq
 800a7da:	681a      	ldreq	r2, [r3, #0]
 800a7dc:	685b      	ldreq	r3, [r3, #4]
 800a7de:	6063      	str	r3, [r4, #4]
 800a7e0:	bf04      	itt	eq
 800a7e2:	1852      	addeq	r2, r2, r1
 800a7e4:	6022      	streq	r2, [r4, #0]
 800a7e6:	602c      	str	r4, [r5, #0]
 800a7e8:	e7ec      	b.n	800a7c4 <_free_r+0x28>
 800a7ea:	461a      	mov	r2, r3
 800a7ec:	685b      	ldr	r3, [r3, #4]
 800a7ee:	b10b      	cbz	r3, 800a7f4 <_free_r+0x58>
 800a7f0:	42a3      	cmp	r3, r4
 800a7f2:	d9fa      	bls.n	800a7ea <_free_r+0x4e>
 800a7f4:	6811      	ldr	r1, [r2, #0]
 800a7f6:	1855      	adds	r5, r2, r1
 800a7f8:	42a5      	cmp	r5, r4
 800a7fa:	d10b      	bne.n	800a814 <_free_r+0x78>
 800a7fc:	6824      	ldr	r4, [r4, #0]
 800a7fe:	4421      	add	r1, r4
 800a800:	1854      	adds	r4, r2, r1
 800a802:	42a3      	cmp	r3, r4
 800a804:	6011      	str	r1, [r2, #0]
 800a806:	d1dd      	bne.n	800a7c4 <_free_r+0x28>
 800a808:	681c      	ldr	r4, [r3, #0]
 800a80a:	685b      	ldr	r3, [r3, #4]
 800a80c:	6053      	str	r3, [r2, #4]
 800a80e:	4421      	add	r1, r4
 800a810:	6011      	str	r1, [r2, #0]
 800a812:	e7d7      	b.n	800a7c4 <_free_r+0x28>
 800a814:	d902      	bls.n	800a81c <_free_r+0x80>
 800a816:	230c      	movs	r3, #12
 800a818:	6003      	str	r3, [r0, #0]
 800a81a:	e7d3      	b.n	800a7c4 <_free_r+0x28>
 800a81c:	6825      	ldr	r5, [r4, #0]
 800a81e:	1961      	adds	r1, r4, r5
 800a820:	428b      	cmp	r3, r1
 800a822:	bf04      	itt	eq
 800a824:	6819      	ldreq	r1, [r3, #0]
 800a826:	685b      	ldreq	r3, [r3, #4]
 800a828:	6063      	str	r3, [r4, #4]
 800a82a:	bf04      	itt	eq
 800a82c:	1949      	addeq	r1, r1, r5
 800a82e:	6021      	streq	r1, [r4, #0]
 800a830:	6054      	str	r4, [r2, #4]
 800a832:	e7c7      	b.n	800a7c4 <_free_r+0x28>
 800a834:	b003      	add	sp, #12
 800a836:	bd30      	pop	{r4, r5, pc}
 800a838:	20000214 	.word	0x20000214

0800a83c <_malloc_r>:
 800a83c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a83e:	1ccd      	adds	r5, r1, #3
 800a840:	f025 0503 	bic.w	r5, r5, #3
 800a844:	3508      	adds	r5, #8
 800a846:	2d0c      	cmp	r5, #12
 800a848:	bf38      	it	cc
 800a84a:	250c      	movcc	r5, #12
 800a84c:	2d00      	cmp	r5, #0
 800a84e:	4606      	mov	r6, r0
 800a850:	db01      	blt.n	800a856 <_malloc_r+0x1a>
 800a852:	42a9      	cmp	r1, r5
 800a854:	d903      	bls.n	800a85e <_malloc_r+0x22>
 800a856:	230c      	movs	r3, #12
 800a858:	6033      	str	r3, [r6, #0]
 800a85a:	2000      	movs	r0, #0
 800a85c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a85e:	f000 fa25 	bl	800acac <__malloc_lock>
 800a862:	4921      	ldr	r1, [pc, #132]	; (800a8e8 <_malloc_r+0xac>)
 800a864:	680a      	ldr	r2, [r1, #0]
 800a866:	4614      	mov	r4, r2
 800a868:	b99c      	cbnz	r4, 800a892 <_malloc_r+0x56>
 800a86a:	4f20      	ldr	r7, [pc, #128]	; (800a8ec <_malloc_r+0xb0>)
 800a86c:	683b      	ldr	r3, [r7, #0]
 800a86e:	b923      	cbnz	r3, 800a87a <_malloc_r+0x3e>
 800a870:	4621      	mov	r1, r4
 800a872:	4630      	mov	r0, r6
 800a874:	f000 f9a0 	bl	800abb8 <_sbrk_r>
 800a878:	6038      	str	r0, [r7, #0]
 800a87a:	4629      	mov	r1, r5
 800a87c:	4630      	mov	r0, r6
 800a87e:	f000 f99b 	bl	800abb8 <_sbrk_r>
 800a882:	1c43      	adds	r3, r0, #1
 800a884:	d123      	bne.n	800a8ce <_malloc_r+0x92>
 800a886:	230c      	movs	r3, #12
 800a888:	6033      	str	r3, [r6, #0]
 800a88a:	4630      	mov	r0, r6
 800a88c:	f000 fa14 	bl	800acb8 <__malloc_unlock>
 800a890:	e7e3      	b.n	800a85a <_malloc_r+0x1e>
 800a892:	6823      	ldr	r3, [r4, #0]
 800a894:	1b5b      	subs	r3, r3, r5
 800a896:	d417      	bmi.n	800a8c8 <_malloc_r+0x8c>
 800a898:	2b0b      	cmp	r3, #11
 800a89a:	d903      	bls.n	800a8a4 <_malloc_r+0x68>
 800a89c:	6023      	str	r3, [r4, #0]
 800a89e:	441c      	add	r4, r3
 800a8a0:	6025      	str	r5, [r4, #0]
 800a8a2:	e004      	b.n	800a8ae <_malloc_r+0x72>
 800a8a4:	6863      	ldr	r3, [r4, #4]
 800a8a6:	42a2      	cmp	r2, r4
 800a8a8:	bf0c      	ite	eq
 800a8aa:	600b      	streq	r3, [r1, #0]
 800a8ac:	6053      	strne	r3, [r2, #4]
 800a8ae:	4630      	mov	r0, r6
 800a8b0:	f000 fa02 	bl	800acb8 <__malloc_unlock>
 800a8b4:	f104 000b 	add.w	r0, r4, #11
 800a8b8:	1d23      	adds	r3, r4, #4
 800a8ba:	f020 0007 	bic.w	r0, r0, #7
 800a8be:	1ac2      	subs	r2, r0, r3
 800a8c0:	d0cc      	beq.n	800a85c <_malloc_r+0x20>
 800a8c2:	1a1b      	subs	r3, r3, r0
 800a8c4:	50a3      	str	r3, [r4, r2]
 800a8c6:	e7c9      	b.n	800a85c <_malloc_r+0x20>
 800a8c8:	4622      	mov	r2, r4
 800a8ca:	6864      	ldr	r4, [r4, #4]
 800a8cc:	e7cc      	b.n	800a868 <_malloc_r+0x2c>
 800a8ce:	1cc4      	adds	r4, r0, #3
 800a8d0:	f024 0403 	bic.w	r4, r4, #3
 800a8d4:	42a0      	cmp	r0, r4
 800a8d6:	d0e3      	beq.n	800a8a0 <_malloc_r+0x64>
 800a8d8:	1a21      	subs	r1, r4, r0
 800a8da:	4630      	mov	r0, r6
 800a8dc:	f000 f96c 	bl	800abb8 <_sbrk_r>
 800a8e0:	3001      	adds	r0, #1
 800a8e2:	d1dd      	bne.n	800a8a0 <_malloc_r+0x64>
 800a8e4:	e7cf      	b.n	800a886 <_malloc_r+0x4a>
 800a8e6:	bf00      	nop
 800a8e8:	20000214 	.word	0x20000214
 800a8ec:	20000218 	.word	0x20000218

0800a8f0 <__ssputs_r>:
 800a8f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a8f4:	688e      	ldr	r6, [r1, #8]
 800a8f6:	429e      	cmp	r6, r3
 800a8f8:	4682      	mov	sl, r0
 800a8fa:	460c      	mov	r4, r1
 800a8fc:	4690      	mov	r8, r2
 800a8fe:	461f      	mov	r7, r3
 800a900:	d838      	bhi.n	800a974 <__ssputs_r+0x84>
 800a902:	898a      	ldrh	r2, [r1, #12]
 800a904:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a908:	d032      	beq.n	800a970 <__ssputs_r+0x80>
 800a90a:	6825      	ldr	r5, [r4, #0]
 800a90c:	6909      	ldr	r1, [r1, #16]
 800a90e:	eba5 0901 	sub.w	r9, r5, r1
 800a912:	6965      	ldr	r5, [r4, #20]
 800a914:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a918:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a91c:	3301      	adds	r3, #1
 800a91e:	444b      	add	r3, r9
 800a920:	106d      	asrs	r5, r5, #1
 800a922:	429d      	cmp	r5, r3
 800a924:	bf38      	it	cc
 800a926:	461d      	movcc	r5, r3
 800a928:	0553      	lsls	r3, r2, #21
 800a92a:	d531      	bpl.n	800a990 <__ssputs_r+0xa0>
 800a92c:	4629      	mov	r1, r5
 800a92e:	f7ff ff85 	bl	800a83c <_malloc_r>
 800a932:	4606      	mov	r6, r0
 800a934:	b950      	cbnz	r0, 800a94c <__ssputs_r+0x5c>
 800a936:	230c      	movs	r3, #12
 800a938:	f8ca 3000 	str.w	r3, [sl]
 800a93c:	89a3      	ldrh	r3, [r4, #12]
 800a93e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a942:	81a3      	strh	r3, [r4, #12]
 800a944:	f04f 30ff 	mov.w	r0, #4294967295
 800a948:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a94c:	6921      	ldr	r1, [r4, #16]
 800a94e:	464a      	mov	r2, r9
 800a950:	f7ff fa4c 	bl	8009dec <memcpy>
 800a954:	89a3      	ldrh	r3, [r4, #12]
 800a956:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a95a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a95e:	81a3      	strh	r3, [r4, #12]
 800a960:	6126      	str	r6, [r4, #16]
 800a962:	6165      	str	r5, [r4, #20]
 800a964:	444e      	add	r6, r9
 800a966:	eba5 0509 	sub.w	r5, r5, r9
 800a96a:	6026      	str	r6, [r4, #0]
 800a96c:	60a5      	str	r5, [r4, #8]
 800a96e:	463e      	mov	r6, r7
 800a970:	42be      	cmp	r6, r7
 800a972:	d900      	bls.n	800a976 <__ssputs_r+0x86>
 800a974:	463e      	mov	r6, r7
 800a976:	4632      	mov	r2, r6
 800a978:	6820      	ldr	r0, [r4, #0]
 800a97a:	4641      	mov	r1, r8
 800a97c:	f000 f97c 	bl	800ac78 <memmove>
 800a980:	68a3      	ldr	r3, [r4, #8]
 800a982:	6822      	ldr	r2, [r4, #0]
 800a984:	1b9b      	subs	r3, r3, r6
 800a986:	4432      	add	r2, r6
 800a988:	60a3      	str	r3, [r4, #8]
 800a98a:	6022      	str	r2, [r4, #0]
 800a98c:	2000      	movs	r0, #0
 800a98e:	e7db      	b.n	800a948 <__ssputs_r+0x58>
 800a990:	462a      	mov	r2, r5
 800a992:	f000 f997 	bl	800acc4 <_realloc_r>
 800a996:	4606      	mov	r6, r0
 800a998:	2800      	cmp	r0, #0
 800a99a:	d1e1      	bne.n	800a960 <__ssputs_r+0x70>
 800a99c:	6921      	ldr	r1, [r4, #16]
 800a99e:	4650      	mov	r0, sl
 800a9a0:	f7ff fefc 	bl	800a79c <_free_r>
 800a9a4:	e7c7      	b.n	800a936 <__ssputs_r+0x46>
	...

0800a9a8 <_svfiprintf_r>:
 800a9a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9ac:	4698      	mov	r8, r3
 800a9ae:	898b      	ldrh	r3, [r1, #12]
 800a9b0:	061b      	lsls	r3, r3, #24
 800a9b2:	b09d      	sub	sp, #116	; 0x74
 800a9b4:	4607      	mov	r7, r0
 800a9b6:	460d      	mov	r5, r1
 800a9b8:	4614      	mov	r4, r2
 800a9ba:	d50e      	bpl.n	800a9da <_svfiprintf_r+0x32>
 800a9bc:	690b      	ldr	r3, [r1, #16]
 800a9be:	b963      	cbnz	r3, 800a9da <_svfiprintf_r+0x32>
 800a9c0:	2140      	movs	r1, #64	; 0x40
 800a9c2:	f7ff ff3b 	bl	800a83c <_malloc_r>
 800a9c6:	6028      	str	r0, [r5, #0]
 800a9c8:	6128      	str	r0, [r5, #16]
 800a9ca:	b920      	cbnz	r0, 800a9d6 <_svfiprintf_r+0x2e>
 800a9cc:	230c      	movs	r3, #12
 800a9ce:	603b      	str	r3, [r7, #0]
 800a9d0:	f04f 30ff 	mov.w	r0, #4294967295
 800a9d4:	e0d1      	b.n	800ab7a <_svfiprintf_r+0x1d2>
 800a9d6:	2340      	movs	r3, #64	; 0x40
 800a9d8:	616b      	str	r3, [r5, #20]
 800a9da:	2300      	movs	r3, #0
 800a9dc:	9309      	str	r3, [sp, #36]	; 0x24
 800a9de:	2320      	movs	r3, #32
 800a9e0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a9e4:	f8cd 800c 	str.w	r8, [sp, #12]
 800a9e8:	2330      	movs	r3, #48	; 0x30
 800a9ea:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800ab94 <_svfiprintf_r+0x1ec>
 800a9ee:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a9f2:	f04f 0901 	mov.w	r9, #1
 800a9f6:	4623      	mov	r3, r4
 800a9f8:	469a      	mov	sl, r3
 800a9fa:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a9fe:	b10a      	cbz	r2, 800aa04 <_svfiprintf_r+0x5c>
 800aa00:	2a25      	cmp	r2, #37	; 0x25
 800aa02:	d1f9      	bne.n	800a9f8 <_svfiprintf_r+0x50>
 800aa04:	ebba 0b04 	subs.w	fp, sl, r4
 800aa08:	d00b      	beq.n	800aa22 <_svfiprintf_r+0x7a>
 800aa0a:	465b      	mov	r3, fp
 800aa0c:	4622      	mov	r2, r4
 800aa0e:	4629      	mov	r1, r5
 800aa10:	4638      	mov	r0, r7
 800aa12:	f7ff ff6d 	bl	800a8f0 <__ssputs_r>
 800aa16:	3001      	adds	r0, #1
 800aa18:	f000 80aa 	beq.w	800ab70 <_svfiprintf_r+0x1c8>
 800aa1c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800aa1e:	445a      	add	r2, fp
 800aa20:	9209      	str	r2, [sp, #36]	; 0x24
 800aa22:	f89a 3000 	ldrb.w	r3, [sl]
 800aa26:	2b00      	cmp	r3, #0
 800aa28:	f000 80a2 	beq.w	800ab70 <_svfiprintf_r+0x1c8>
 800aa2c:	2300      	movs	r3, #0
 800aa2e:	f04f 32ff 	mov.w	r2, #4294967295
 800aa32:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800aa36:	f10a 0a01 	add.w	sl, sl, #1
 800aa3a:	9304      	str	r3, [sp, #16]
 800aa3c:	9307      	str	r3, [sp, #28]
 800aa3e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800aa42:	931a      	str	r3, [sp, #104]	; 0x68
 800aa44:	4654      	mov	r4, sl
 800aa46:	2205      	movs	r2, #5
 800aa48:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aa4c:	4851      	ldr	r0, [pc, #324]	; (800ab94 <_svfiprintf_r+0x1ec>)
 800aa4e:	f7f5 fbe7 	bl	8000220 <memchr>
 800aa52:	9a04      	ldr	r2, [sp, #16]
 800aa54:	b9d8      	cbnz	r0, 800aa8e <_svfiprintf_r+0xe6>
 800aa56:	06d0      	lsls	r0, r2, #27
 800aa58:	bf44      	itt	mi
 800aa5a:	2320      	movmi	r3, #32
 800aa5c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aa60:	0711      	lsls	r1, r2, #28
 800aa62:	bf44      	itt	mi
 800aa64:	232b      	movmi	r3, #43	; 0x2b
 800aa66:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aa6a:	f89a 3000 	ldrb.w	r3, [sl]
 800aa6e:	2b2a      	cmp	r3, #42	; 0x2a
 800aa70:	d015      	beq.n	800aa9e <_svfiprintf_r+0xf6>
 800aa72:	9a07      	ldr	r2, [sp, #28]
 800aa74:	4654      	mov	r4, sl
 800aa76:	2000      	movs	r0, #0
 800aa78:	f04f 0c0a 	mov.w	ip, #10
 800aa7c:	4621      	mov	r1, r4
 800aa7e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800aa82:	3b30      	subs	r3, #48	; 0x30
 800aa84:	2b09      	cmp	r3, #9
 800aa86:	d94e      	bls.n	800ab26 <_svfiprintf_r+0x17e>
 800aa88:	b1b0      	cbz	r0, 800aab8 <_svfiprintf_r+0x110>
 800aa8a:	9207      	str	r2, [sp, #28]
 800aa8c:	e014      	b.n	800aab8 <_svfiprintf_r+0x110>
 800aa8e:	eba0 0308 	sub.w	r3, r0, r8
 800aa92:	fa09 f303 	lsl.w	r3, r9, r3
 800aa96:	4313      	orrs	r3, r2
 800aa98:	9304      	str	r3, [sp, #16]
 800aa9a:	46a2      	mov	sl, r4
 800aa9c:	e7d2      	b.n	800aa44 <_svfiprintf_r+0x9c>
 800aa9e:	9b03      	ldr	r3, [sp, #12]
 800aaa0:	1d19      	adds	r1, r3, #4
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	9103      	str	r1, [sp, #12]
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	bfbb      	ittet	lt
 800aaaa:	425b      	neglt	r3, r3
 800aaac:	f042 0202 	orrlt.w	r2, r2, #2
 800aab0:	9307      	strge	r3, [sp, #28]
 800aab2:	9307      	strlt	r3, [sp, #28]
 800aab4:	bfb8      	it	lt
 800aab6:	9204      	strlt	r2, [sp, #16]
 800aab8:	7823      	ldrb	r3, [r4, #0]
 800aaba:	2b2e      	cmp	r3, #46	; 0x2e
 800aabc:	d10c      	bne.n	800aad8 <_svfiprintf_r+0x130>
 800aabe:	7863      	ldrb	r3, [r4, #1]
 800aac0:	2b2a      	cmp	r3, #42	; 0x2a
 800aac2:	d135      	bne.n	800ab30 <_svfiprintf_r+0x188>
 800aac4:	9b03      	ldr	r3, [sp, #12]
 800aac6:	1d1a      	adds	r2, r3, #4
 800aac8:	681b      	ldr	r3, [r3, #0]
 800aaca:	9203      	str	r2, [sp, #12]
 800aacc:	2b00      	cmp	r3, #0
 800aace:	bfb8      	it	lt
 800aad0:	f04f 33ff 	movlt.w	r3, #4294967295
 800aad4:	3402      	adds	r4, #2
 800aad6:	9305      	str	r3, [sp, #20]
 800aad8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800aba4 <_svfiprintf_r+0x1fc>
 800aadc:	7821      	ldrb	r1, [r4, #0]
 800aade:	2203      	movs	r2, #3
 800aae0:	4650      	mov	r0, sl
 800aae2:	f7f5 fb9d 	bl	8000220 <memchr>
 800aae6:	b140      	cbz	r0, 800aafa <_svfiprintf_r+0x152>
 800aae8:	2340      	movs	r3, #64	; 0x40
 800aaea:	eba0 000a 	sub.w	r0, r0, sl
 800aaee:	fa03 f000 	lsl.w	r0, r3, r0
 800aaf2:	9b04      	ldr	r3, [sp, #16]
 800aaf4:	4303      	orrs	r3, r0
 800aaf6:	3401      	adds	r4, #1
 800aaf8:	9304      	str	r3, [sp, #16]
 800aafa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aafe:	4826      	ldr	r0, [pc, #152]	; (800ab98 <_svfiprintf_r+0x1f0>)
 800ab00:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ab04:	2206      	movs	r2, #6
 800ab06:	f7f5 fb8b 	bl	8000220 <memchr>
 800ab0a:	2800      	cmp	r0, #0
 800ab0c:	d038      	beq.n	800ab80 <_svfiprintf_r+0x1d8>
 800ab0e:	4b23      	ldr	r3, [pc, #140]	; (800ab9c <_svfiprintf_r+0x1f4>)
 800ab10:	bb1b      	cbnz	r3, 800ab5a <_svfiprintf_r+0x1b2>
 800ab12:	9b03      	ldr	r3, [sp, #12]
 800ab14:	3307      	adds	r3, #7
 800ab16:	f023 0307 	bic.w	r3, r3, #7
 800ab1a:	3308      	adds	r3, #8
 800ab1c:	9303      	str	r3, [sp, #12]
 800ab1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ab20:	4433      	add	r3, r6
 800ab22:	9309      	str	r3, [sp, #36]	; 0x24
 800ab24:	e767      	b.n	800a9f6 <_svfiprintf_r+0x4e>
 800ab26:	fb0c 3202 	mla	r2, ip, r2, r3
 800ab2a:	460c      	mov	r4, r1
 800ab2c:	2001      	movs	r0, #1
 800ab2e:	e7a5      	b.n	800aa7c <_svfiprintf_r+0xd4>
 800ab30:	2300      	movs	r3, #0
 800ab32:	3401      	adds	r4, #1
 800ab34:	9305      	str	r3, [sp, #20]
 800ab36:	4619      	mov	r1, r3
 800ab38:	f04f 0c0a 	mov.w	ip, #10
 800ab3c:	4620      	mov	r0, r4
 800ab3e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ab42:	3a30      	subs	r2, #48	; 0x30
 800ab44:	2a09      	cmp	r2, #9
 800ab46:	d903      	bls.n	800ab50 <_svfiprintf_r+0x1a8>
 800ab48:	2b00      	cmp	r3, #0
 800ab4a:	d0c5      	beq.n	800aad8 <_svfiprintf_r+0x130>
 800ab4c:	9105      	str	r1, [sp, #20]
 800ab4e:	e7c3      	b.n	800aad8 <_svfiprintf_r+0x130>
 800ab50:	fb0c 2101 	mla	r1, ip, r1, r2
 800ab54:	4604      	mov	r4, r0
 800ab56:	2301      	movs	r3, #1
 800ab58:	e7f0      	b.n	800ab3c <_svfiprintf_r+0x194>
 800ab5a:	ab03      	add	r3, sp, #12
 800ab5c:	9300      	str	r3, [sp, #0]
 800ab5e:	462a      	mov	r2, r5
 800ab60:	4b0f      	ldr	r3, [pc, #60]	; (800aba0 <_svfiprintf_r+0x1f8>)
 800ab62:	a904      	add	r1, sp, #16
 800ab64:	4638      	mov	r0, r7
 800ab66:	f7fc fa85 	bl	8007074 <_printf_float>
 800ab6a:	1c42      	adds	r2, r0, #1
 800ab6c:	4606      	mov	r6, r0
 800ab6e:	d1d6      	bne.n	800ab1e <_svfiprintf_r+0x176>
 800ab70:	89ab      	ldrh	r3, [r5, #12]
 800ab72:	065b      	lsls	r3, r3, #25
 800ab74:	f53f af2c 	bmi.w	800a9d0 <_svfiprintf_r+0x28>
 800ab78:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ab7a:	b01d      	add	sp, #116	; 0x74
 800ab7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab80:	ab03      	add	r3, sp, #12
 800ab82:	9300      	str	r3, [sp, #0]
 800ab84:	462a      	mov	r2, r5
 800ab86:	4b06      	ldr	r3, [pc, #24]	; (800aba0 <_svfiprintf_r+0x1f8>)
 800ab88:	a904      	add	r1, sp, #16
 800ab8a:	4638      	mov	r0, r7
 800ab8c:	f7fc fd16 	bl	80075bc <_printf_i>
 800ab90:	e7eb      	b.n	800ab6a <_svfiprintf_r+0x1c2>
 800ab92:	bf00      	nop
 800ab94:	0800c28c 	.word	0x0800c28c
 800ab98:	0800c296 	.word	0x0800c296
 800ab9c:	08007075 	.word	0x08007075
 800aba0:	0800a8f1 	.word	0x0800a8f1
 800aba4:	0800c292 	.word	0x0800c292

0800aba8 <nan>:
 800aba8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800abb0 <nan+0x8>
 800abac:	4770      	bx	lr
 800abae:	bf00      	nop
 800abb0:	00000000 	.word	0x00000000
 800abb4:	7ff80000 	.word	0x7ff80000

0800abb8 <_sbrk_r>:
 800abb8:	b538      	push	{r3, r4, r5, lr}
 800abba:	4d06      	ldr	r5, [pc, #24]	; (800abd4 <_sbrk_r+0x1c>)
 800abbc:	2300      	movs	r3, #0
 800abbe:	4604      	mov	r4, r0
 800abc0:	4608      	mov	r0, r1
 800abc2:	602b      	str	r3, [r5, #0]
 800abc4:	f7f7 fa3c 	bl	8002040 <_sbrk>
 800abc8:	1c43      	adds	r3, r0, #1
 800abca:	d102      	bne.n	800abd2 <_sbrk_r+0x1a>
 800abcc:	682b      	ldr	r3, [r5, #0]
 800abce:	b103      	cbz	r3, 800abd2 <_sbrk_r+0x1a>
 800abd0:	6023      	str	r3, [r4, #0]
 800abd2:	bd38      	pop	{r3, r4, r5, pc}
 800abd4:	20000538 	.word	0x20000538

0800abd8 <strncmp>:
 800abd8:	b510      	push	{r4, lr}
 800abda:	b16a      	cbz	r2, 800abf8 <strncmp+0x20>
 800abdc:	3901      	subs	r1, #1
 800abde:	1884      	adds	r4, r0, r2
 800abe0:	f810 3b01 	ldrb.w	r3, [r0], #1
 800abe4:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800abe8:	4293      	cmp	r3, r2
 800abea:	d103      	bne.n	800abf4 <strncmp+0x1c>
 800abec:	42a0      	cmp	r0, r4
 800abee:	d001      	beq.n	800abf4 <strncmp+0x1c>
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	d1f5      	bne.n	800abe0 <strncmp+0x8>
 800abf4:	1a98      	subs	r0, r3, r2
 800abf6:	bd10      	pop	{r4, pc}
 800abf8:	4610      	mov	r0, r2
 800abfa:	e7fc      	b.n	800abf6 <strncmp+0x1e>

0800abfc <__ascii_wctomb>:
 800abfc:	b149      	cbz	r1, 800ac12 <__ascii_wctomb+0x16>
 800abfe:	2aff      	cmp	r2, #255	; 0xff
 800ac00:	bf85      	ittet	hi
 800ac02:	238a      	movhi	r3, #138	; 0x8a
 800ac04:	6003      	strhi	r3, [r0, #0]
 800ac06:	700a      	strbls	r2, [r1, #0]
 800ac08:	f04f 30ff 	movhi.w	r0, #4294967295
 800ac0c:	bf98      	it	ls
 800ac0e:	2001      	movls	r0, #1
 800ac10:	4770      	bx	lr
 800ac12:	4608      	mov	r0, r1
 800ac14:	4770      	bx	lr
	...

0800ac18 <__assert_func>:
 800ac18:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ac1a:	4614      	mov	r4, r2
 800ac1c:	461a      	mov	r2, r3
 800ac1e:	4b09      	ldr	r3, [pc, #36]	; (800ac44 <__assert_func+0x2c>)
 800ac20:	681b      	ldr	r3, [r3, #0]
 800ac22:	4605      	mov	r5, r0
 800ac24:	68d8      	ldr	r0, [r3, #12]
 800ac26:	b14c      	cbz	r4, 800ac3c <__assert_func+0x24>
 800ac28:	4b07      	ldr	r3, [pc, #28]	; (800ac48 <__assert_func+0x30>)
 800ac2a:	9100      	str	r1, [sp, #0]
 800ac2c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ac30:	4906      	ldr	r1, [pc, #24]	; (800ac4c <__assert_func+0x34>)
 800ac32:	462b      	mov	r3, r5
 800ac34:	f000 f80e 	bl	800ac54 <fiprintf>
 800ac38:	f000 fa84 	bl	800b144 <abort>
 800ac3c:	4b04      	ldr	r3, [pc, #16]	; (800ac50 <__assert_func+0x38>)
 800ac3e:	461c      	mov	r4, r3
 800ac40:	e7f3      	b.n	800ac2a <__assert_func+0x12>
 800ac42:	bf00      	nop
 800ac44:	20000010 	.word	0x20000010
 800ac48:	0800c29d 	.word	0x0800c29d
 800ac4c:	0800c2aa 	.word	0x0800c2aa
 800ac50:	0800c2d8 	.word	0x0800c2d8

0800ac54 <fiprintf>:
 800ac54:	b40e      	push	{r1, r2, r3}
 800ac56:	b503      	push	{r0, r1, lr}
 800ac58:	4601      	mov	r1, r0
 800ac5a:	ab03      	add	r3, sp, #12
 800ac5c:	4805      	ldr	r0, [pc, #20]	; (800ac74 <fiprintf+0x20>)
 800ac5e:	f853 2b04 	ldr.w	r2, [r3], #4
 800ac62:	6800      	ldr	r0, [r0, #0]
 800ac64:	9301      	str	r3, [sp, #4]
 800ac66:	f000 f87d 	bl	800ad64 <_vfiprintf_r>
 800ac6a:	b002      	add	sp, #8
 800ac6c:	f85d eb04 	ldr.w	lr, [sp], #4
 800ac70:	b003      	add	sp, #12
 800ac72:	4770      	bx	lr
 800ac74:	20000010 	.word	0x20000010

0800ac78 <memmove>:
 800ac78:	4288      	cmp	r0, r1
 800ac7a:	b510      	push	{r4, lr}
 800ac7c:	eb01 0402 	add.w	r4, r1, r2
 800ac80:	d902      	bls.n	800ac88 <memmove+0x10>
 800ac82:	4284      	cmp	r4, r0
 800ac84:	4623      	mov	r3, r4
 800ac86:	d807      	bhi.n	800ac98 <memmove+0x20>
 800ac88:	1e43      	subs	r3, r0, #1
 800ac8a:	42a1      	cmp	r1, r4
 800ac8c:	d008      	beq.n	800aca0 <memmove+0x28>
 800ac8e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ac92:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ac96:	e7f8      	b.n	800ac8a <memmove+0x12>
 800ac98:	4402      	add	r2, r0
 800ac9a:	4601      	mov	r1, r0
 800ac9c:	428a      	cmp	r2, r1
 800ac9e:	d100      	bne.n	800aca2 <memmove+0x2a>
 800aca0:	bd10      	pop	{r4, pc}
 800aca2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800aca6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800acaa:	e7f7      	b.n	800ac9c <memmove+0x24>

0800acac <__malloc_lock>:
 800acac:	4801      	ldr	r0, [pc, #4]	; (800acb4 <__malloc_lock+0x8>)
 800acae:	f000 bc09 	b.w	800b4c4 <__retarget_lock_acquire_recursive>
 800acb2:	bf00      	nop
 800acb4:	20000540 	.word	0x20000540

0800acb8 <__malloc_unlock>:
 800acb8:	4801      	ldr	r0, [pc, #4]	; (800acc0 <__malloc_unlock+0x8>)
 800acba:	f000 bc04 	b.w	800b4c6 <__retarget_lock_release_recursive>
 800acbe:	bf00      	nop
 800acc0:	20000540 	.word	0x20000540

0800acc4 <_realloc_r>:
 800acc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800acc6:	4607      	mov	r7, r0
 800acc8:	4614      	mov	r4, r2
 800acca:	460e      	mov	r6, r1
 800accc:	b921      	cbnz	r1, 800acd8 <_realloc_r+0x14>
 800acce:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800acd2:	4611      	mov	r1, r2
 800acd4:	f7ff bdb2 	b.w	800a83c <_malloc_r>
 800acd8:	b922      	cbnz	r2, 800ace4 <_realloc_r+0x20>
 800acda:	f7ff fd5f 	bl	800a79c <_free_r>
 800acde:	4625      	mov	r5, r4
 800ace0:	4628      	mov	r0, r5
 800ace2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ace4:	f000 fc54 	bl	800b590 <_malloc_usable_size_r>
 800ace8:	42a0      	cmp	r0, r4
 800acea:	d20f      	bcs.n	800ad0c <_realloc_r+0x48>
 800acec:	4621      	mov	r1, r4
 800acee:	4638      	mov	r0, r7
 800acf0:	f7ff fda4 	bl	800a83c <_malloc_r>
 800acf4:	4605      	mov	r5, r0
 800acf6:	2800      	cmp	r0, #0
 800acf8:	d0f2      	beq.n	800ace0 <_realloc_r+0x1c>
 800acfa:	4631      	mov	r1, r6
 800acfc:	4622      	mov	r2, r4
 800acfe:	f7ff f875 	bl	8009dec <memcpy>
 800ad02:	4631      	mov	r1, r6
 800ad04:	4638      	mov	r0, r7
 800ad06:	f7ff fd49 	bl	800a79c <_free_r>
 800ad0a:	e7e9      	b.n	800ace0 <_realloc_r+0x1c>
 800ad0c:	4635      	mov	r5, r6
 800ad0e:	e7e7      	b.n	800ace0 <_realloc_r+0x1c>

0800ad10 <__sfputc_r>:
 800ad10:	6893      	ldr	r3, [r2, #8]
 800ad12:	3b01      	subs	r3, #1
 800ad14:	2b00      	cmp	r3, #0
 800ad16:	b410      	push	{r4}
 800ad18:	6093      	str	r3, [r2, #8]
 800ad1a:	da08      	bge.n	800ad2e <__sfputc_r+0x1e>
 800ad1c:	6994      	ldr	r4, [r2, #24]
 800ad1e:	42a3      	cmp	r3, r4
 800ad20:	db01      	blt.n	800ad26 <__sfputc_r+0x16>
 800ad22:	290a      	cmp	r1, #10
 800ad24:	d103      	bne.n	800ad2e <__sfputc_r+0x1e>
 800ad26:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ad2a:	f000 b94b 	b.w	800afc4 <__swbuf_r>
 800ad2e:	6813      	ldr	r3, [r2, #0]
 800ad30:	1c58      	adds	r0, r3, #1
 800ad32:	6010      	str	r0, [r2, #0]
 800ad34:	7019      	strb	r1, [r3, #0]
 800ad36:	4608      	mov	r0, r1
 800ad38:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ad3c:	4770      	bx	lr

0800ad3e <__sfputs_r>:
 800ad3e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad40:	4606      	mov	r6, r0
 800ad42:	460f      	mov	r7, r1
 800ad44:	4614      	mov	r4, r2
 800ad46:	18d5      	adds	r5, r2, r3
 800ad48:	42ac      	cmp	r4, r5
 800ad4a:	d101      	bne.n	800ad50 <__sfputs_r+0x12>
 800ad4c:	2000      	movs	r0, #0
 800ad4e:	e007      	b.n	800ad60 <__sfputs_r+0x22>
 800ad50:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ad54:	463a      	mov	r2, r7
 800ad56:	4630      	mov	r0, r6
 800ad58:	f7ff ffda 	bl	800ad10 <__sfputc_r>
 800ad5c:	1c43      	adds	r3, r0, #1
 800ad5e:	d1f3      	bne.n	800ad48 <__sfputs_r+0xa>
 800ad60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ad64 <_vfiprintf_r>:
 800ad64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad68:	460d      	mov	r5, r1
 800ad6a:	b09d      	sub	sp, #116	; 0x74
 800ad6c:	4614      	mov	r4, r2
 800ad6e:	4698      	mov	r8, r3
 800ad70:	4606      	mov	r6, r0
 800ad72:	b118      	cbz	r0, 800ad7c <_vfiprintf_r+0x18>
 800ad74:	6983      	ldr	r3, [r0, #24]
 800ad76:	b90b      	cbnz	r3, 800ad7c <_vfiprintf_r+0x18>
 800ad78:	f000 fb06 	bl	800b388 <__sinit>
 800ad7c:	4b89      	ldr	r3, [pc, #548]	; (800afa4 <_vfiprintf_r+0x240>)
 800ad7e:	429d      	cmp	r5, r3
 800ad80:	d11b      	bne.n	800adba <_vfiprintf_r+0x56>
 800ad82:	6875      	ldr	r5, [r6, #4]
 800ad84:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ad86:	07d9      	lsls	r1, r3, #31
 800ad88:	d405      	bmi.n	800ad96 <_vfiprintf_r+0x32>
 800ad8a:	89ab      	ldrh	r3, [r5, #12]
 800ad8c:	059a      	lsls	r2, r3, #22
 800ad8e:	d402      	bmi.n	800ad96 <_vfiprintf_r+0x32>
 800ad90:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ad92:	f000 fb97 	bl	800b4c4 <__retarget_lock_acquire_recursive>
 800ad96:	89ab      	ldrh	r3, [r5, #12]
 800ad98:	071b      	lsls	r3, r3, #28
 800ad9a:	d501      	bpl.n	800ada0 <_vfiprintf_r+0x3c>
 800ad9c:	692b      	ldr	r3, [r5, #16]
 800ad9e:	b9eb      	cbnz	r3, 800addc <_vfiprintf_r+0x78>
 800ada0:	4629      	mov	r1, r5
 800ada2:	4630      	mov	r0, r6
 800ada4:	f000 f960 	bl	800b068 <__swsetup_r>
 800ada8:	b1c0      	cbz	r0, 800addc <_vfiprintf_r+0x78>
 800adaa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800adac:	07dc      	lsls	r4, r3, #31
 800adae:	d50e      	bpl.n	800adce <_vfiprintf_r+0x6a>
 800adb0:	f04f 30ff 	mov.w	r0, #4294967295
 800adb4:	b01d      	add	sp, #116	; 0x74
 800adb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800adba:	4b7b      	ldr	r3, [pc, #492]	; (800afa8 <_vfiprintf_r+0x244>)
 800adbc:	429d      	cmp	r5, r3
 800adbe:	d101      	bne.n	800adc4 <_vfiprintf_r+0x60>
 800adc0:	68b5      	ldr	r5, [r6, #8]
 800adc2:	e7df      	b.n	800ad84 <_vfiprintf_r+0x20>
 800adc4:	4b79      	ldr	r3, [pc, #484]	; (800afac <_vfiprintf_r+0x248>)
 800adc6:	429d      	cmp	r5, r3
 800adc8:	bf08      	it	eq
 800adca:	68f5      	ldreq	r5, [r6, #12]
 800adcc:	e7da      	b.n	800ad84 <_vfiprintf_r+0x20>
 800adce:	89ab      	ldrh	r3, [r5, #12]
 800add0:	0598      	lsls	r0, r3, #22
 800add2:	d4ed      	bmi.n	800adb0 <_vfiprintf_r+0x4c>
 800add4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800add6:	f000 fb76 	bl	800b4c6 <__retarget_lock_release_recursive>
 800adda:	e7e9      	b.n	800adb0 <_vfiprintf_r+0x4c>
 800addc:	2300      	movs	r3, #0
 800adde:	9309      	str	r3, [sp, #36]	; 0x24
 800ade0:	2320      	movs	r3, #32
 800ade2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ade6:	f8cd 800c 	str.w	r8, [sp, #12]
 800adea:	2330      	movs	r3, #48	; 0x30
 800adec:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800afb0 <_vfiprintf_r+0x24c>
 800adf0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800adf4:	f04f 0901 	mov.w	r9, #1
 800adf8:	4623      	mov	r3, r4
 800adfa:	469a      	mov	sl, r3
 800adfc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ae00:	b10a      	cbz	r2, 800ae06 <_vfiprintf_r+0xa2>
 800ae02:	2a25      	cmp	r2, #37	; 0x25
 800ae04:	d1f9      	bne.n	800adfa <_vfiprintf_r+0x96>
 800ae06:	ebba 0b04 	subs.w	fp, sl, r4
 800ae0a:	d00b      	beq.n	800ae24 <_vfiprintf_r+0xc0>
 800ae0c:	465b      	mov	r3, fp
 800ae0e:	4622      	mov	r2, r4
 800ae10:	4629      	mov	r1, r5
 800ae12:	4630      	mov	r0, r6
 800ae14:	f7ff ff93 	bl	800ad3e <__sfputs_r>
 800ae18:	3001      	adds	r0, #1
 800ae1a:	f000 80aa 	beq.w	800af72 <_vfiprintf_r+0x20e>
 800ae1e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ae20:	445a      	add	r2, fp
 800ae22:	9209      	str	r2, [sp, #36]	; 0x24
 800ae24:	f89a 3000 	ldrb.w	r3, [sl]
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	f000 80a2 	beq.w	800af72 <_vfiprintf_r+0x20e>
 800ae2e:	2300      	movs	r3, #0
 800ae30:	f04f 32ff 	mov.w	r2, #4294967295
 800ae34:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ae38:	f10a 0a01 	add.w	sl, sl, #1
 800ae3c:	9304      	str	r3, [sp, #16]
 800ae3e:	9307      	str	r3, [sp, #28]
 800ae40:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ae44:	931a      	str	r3, [sp, #104]	; 0x68
 800ae46:	4654      	mov	r4, sl
 800ae48:	2205      	movs	r2, #5
 800ae4a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ae4e:	4858      	ldr	r0, [pc, #352]	; (800afb0 <_vfiprintf_r+0x24c>)
 800ae50:	f7f5 f9e6 	bl	8000220 <memchr>
 800ae54:	9a04      	ldr	r2, [sp, #16]
 800ae56:	b9d8      	cbnz	r0, 800ae90 <_vfiprintf_r+0x12c>
 800ae58:	06d1      	lsls	r1, r2, #27
 800ae5a:	bf44      	itt	mi
 800ae5c:	2320      	movmi	r3, #32
 800ae5e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ae62:	0713      	lsls	r3, r2, #28
 800ae64:	bf44      	itt	mi
 800ae66:	232b      	movmi	r3, #43	; 0x2b
 800ae68:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ae6c:	f89a 3000 	ldrb.w	r3, [sl]
 800ae70:	2b2a      	cmp	r3, #42	; 0x2a
 800ae72:	d015      	beq.n	800aea0 <_vfiprintf_r+0x13c>
 800ae74:	9a07      	ldr	r2, [sp, #28]
 800ae76:	4654      	mov	r4, sl
 800ae78:	2000      	movs	r0, #0
 800ae7a:	f04f 0c0a 	mov.w	ip, #10
 800ae7e:	4621      	mov	r1, r4
 800ae80:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ae84:	3b30      	subs	r3, #48	; 0x30
 800ae86:	2b09      	cmp	r3, #9
 800ae88:	d94e      	bls.n	800af28 <_vfiprintf_r+0x1c4>
 800ae8a:	b1b0      	cbz	r0, 800aeba <_vfiprintf_r+0x156>
 800ae8c:	9207      	str	r2, [sp, #28]
 800ae8e:	e014      	b.n	800aeba <_vfiprintf_r+0x156>
 800ae90:	eba0 0308 	sub.w	r3, r0, r8
 800ae94:	fa09 f303 	lsl.w	r3, r9, r3
 800ae98:	4313      	orrs	r3, r2
 800ae9a:	9304      	str	r3, [sp, #16]
 800ae9c:	46a2      	mov	sl, r4
 800ae9e:	e7d2      	b.n	800ae46 <_vfiprintf_r+0xe2>
 800aea0:	9b03      	ldr	r3, [sp, #12]
 800aea2:	1d19      	adds	r1, r3, #4
 800aea4:	681b      	ldr	r3, [r3, #0]
 800aea6:	9103      	str	r1, [sp, #12]
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	bfbb      	ittet	lt
 800aeac:	425b      	neglt	r3, r3
 800aeae:	f042 0202 	orrlt.w	r2, r2, #2
 800aeb2:	9307      	strge	r3, [sp, #28]
 800aeb4:	9307      	strlt	r3, [sp, #28]
 800aeb6:	bfb8      	it	lt
 800aeb8:	9204      	strlt	r2, [sp, #16]
 800aeba:	7823      	ldrb	r3, [r4, #0]
 800aebc:	2b2e      	cmp	r3, #46	; 0x2e
 800aebe:	d10c      	bne.n	800aeda <_vfiprintf_r+0x176>
 800aec0:	7863      	ldrb	r3, [r4, #1]
 800aec2:	2b2a      	cmp	r3, #42	; 0x2a
 800aec4:	d135      	bne.n	800af32 <_vfiprintf_r+0x1ce>
 800aec6:	9b03      	ldr	r3, [sp, #12]
 800aec8:	1d1a      	adds	r2, r3, #4
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	9203      	str	r2, [sp, #12]
 800aece:	2b00      	cmp	r3, #0
 800aed0:	bfb8      	it	lt
 800aed2:	f04f 33ff 	movlt.w	r3, #4294967295
 800aed6:	3402      	adds	r4, #2
 800aed8:	9305      	str	r3, [sp, #20]
 800aeda:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800afc0 <_vfiprintf_r+0x25c>
 800aede:	7821      	ldrb	r1, [r4, #0]
 800aee0:	2203      	movs	r2, #3
 800aee2:	4650      	mov	r0, sl
 800aee4:	f7f5 f99c 	bl	8000220 <memchr>
 800aee8:	b140      	cbz	r0, 800aefc <_vfiprintf_r+0x198>
 800aeea:	2340      	movs	r3, #64	; 0x40
 800aeec:	eba0 000a 	sub.w	r0, r0, sl
 800aef0:	fa03 f000 	lsl.w	r0, r3, r0
 800aef4:	9b04      	ldr	r3, [sp, #16]
 800aef6:	4303      	orrs	r3, r0
 800aef8:	3401      	adds	r4, #1
 800aefa:	9304      	str	r3, [sp, #16]
 800aefc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800af00:	482c      	ldr	r0, [pc, #176]	; (800afb4 <_vfiprintf_r+0x250>)
 800af02:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800af06:	2206      	movs	r2, #6
 800af08:	f7f5 f98a 	bl	8000220 <memchr>
 800af0c:	2800      	cmp	r0, #0
 800af0e:	d03f      	beq.n	800af90 <_vfiprintf_r+0x22c>
 800af10:	4b29      	ldr	r3, [pc, #164]	; (800afb8 <_vfiprintf_r+0x254>)
 800af12:	bb1b      	cbnz	r3, 800af5c <_vfiprintf_r+0x1f8>
 800af14:	9b03      	ldr	r3, [sp, #12]
 800af16:	3307      	adds	r3, #7
 800af18:	f023 0307 	bic.w	r3, r3, #7
 800af1c:	3308      	adds	r3, #8
 800af1e:	9303      	str	r3, [sp, #12]
 800af20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800af22:	443b      	add	r3, r7
 800af24:	9309      	str	r3, [sp, #36]	; 0x24
 800af26:	e767      	b.n	800adf8 <_vfiprintf_r+0x94>
 800af28:	fb0c 3202 	mla	r2, ip, r2, r3
 800af2c:	460c      	mov	r4, r1
 800af2e:	2001      	movs	r0, #1
 800af30:	e7a5      	b.n	800ae7e <_vfiprintf_r+0x11a>
 800af32:	2300      	movs	r3, #0
 800af34:	3401      	adds	r4, #1
 800af36:	9305      	str	r3, [sp, #20]
 800af38:	4619      	mov	r1, r3
 800af3a:	f04f 0c0a 	mov.w	ip, #10
 800af3e:	4620      	mov	r0, r4
 800af40:	f810 2b01 	ldrb.w	r2, [r0], #1
 800af44:	3a30      	subs	r2, #48	; 0x30
 800af46:	2a09      	cmp	r2, #9
 800af48:	d903      	bls.n	800af52 <_vfiprintf_r+0x1ee>
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	d0c5      	beq.n	800aeda <_vfiprintf_r+0x176>
 800af4e:	9105      	str	r1, [sp, #20]
 800af50:	e7c3      	b.n	800aeda <_vfiprintf_r+0x176>
 800af52:	fb0c 2101 	mla	r1, ip, r1, r2
 800af56:	4604      	mov	r4, r0
 800af58:	2301      	movs	r3, #1
 800af5a:	e7f0      	b.n	800af3e <_vfiprintf_r+0x1da>
 800af5c:	ab03      	add	r3, sp, #12
 800af5e:	9300      	str	r3, [sp, #0]
 800af60:	462a      	mov	r2, r5
 800af62:	4b16      	ldr	r3, [pc, #88]	; (800afbc <_vfiprintf_r+0x258>)
 800af64:	a904      	add	r1, sp, #16
 800af66:	4630      	mov	r0, r6
 800af68:	f7fc f884 	bl	8007074 <_printf_float>
 800af6c:	4607      	mov	r7, r0
 800af6e:	1c78      	adds	r0, r7, #1
 800af70:	d1d6      	bne.n	800af20 <_vfiprintf_r+0x1bc>
 800af72:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800af74:	07d9      	lsls	r1, r3, #31
 800af76:	d405      	bmi.n	800af84 <_vfiprintf_r+0x220>
 800af78:	89ab      	ldrh	r3, [r5, #12]
 800af7a:	059a      	lsls	r2, r3, #22
 800af7c:	d402      	bmi.n	800af84 <_vfiprintf_r+0x220>
 800af7e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800af80:	f000 faa1 	bl	800b4c6 <__retarget_lock_release_recursive>
 800af84:	89ab      	ldrh	r3, [r5, #12]
 800af86:	065b      	lsls	r3, r3, #25
 800af88:	f53f af12 	bmi.w	800adb0 <_vfiprintf_r+0x4c>
 800af8c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800af8e:	e711      	b.n	800adb4 <_vfiprintf_r+0x50>
 800af90:	ab03      	add	r3, sp, #12
 800af92:	9300      	str	r3, [sp, #0]
 800af94:	462a      	mov	r2, r5
 800af96:	4b09      	ldr	r3, [pc, #36]	; (800afbc <_vfiprintf_r+0x258>)
 800af98:	a904      	add	r1, sp, #16
 800af9a:	4630      	mov	r0, r6
 800af9c:	f7fc fb0e 	bl	80075bc <_printf_i>
 800afa0:	e7e4      	b.n	800af6c <_vfiprintf_r+0x208>
 800afa2:	bf00      	nop
 800afa4:	0800c2fc 	.word	0x0800c2fc
 800afa8:	0800c31c 	.word	0x0800c31c
 800afac:	0800c2dc 	.word	0x0800c2dc
 800afb0:	0800c28c 	.word	0x0800c28c
 800afb4:	0800c296 	.word	0x0800c296
 800afb8:	08007075 	.word	0x08007075
 800afbc:	0800ad3f 	.word	0x0800ad3f
 800afc0:	0800c292 	.word	0x0800c292

0800afc4 <__swbuf_r>:
 800afc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800afc6:	460e      	mov	r6, r1
 800afc8:	4614      	mov	r4, r2
 800afca:	4605      	mov	r5, r0
 800afcc:	b118      	cbz	r0, 800afd6 <__swbuf_r+0x12>
 800afce:	6983      	ldr	r3, [r0, #24]
 800afd0:	b90b      	cbnz	r3, 800afd6 <__swbuf_r+0x12>
 800afd2:	f000 f9d9 	bl	800b388 <__sinit>
 800afd6:	4b21      	ldr	r3, [pc, #132]	; (800b05c <__swbuf_r+0x98>)
 800afd8:	429c      	cmp	r4, r3
 800afda:	d12b      	bne.n	800b034 <__swbuf_r+0x70>
 800afdc:	686c      	ldr	r4, [r5, #4]
 800afde:	69a3      	ldr	r3, [r4, #24]
 800afe0:	60a3      	str	r3, [r4, #8]
 800afe2:	89a3      	ldrh	r3, [r4, #12]
 800afe4:	071a      	lsls	r2, r3, #28
 800afe6:	d52f      	bpl.n	800b048 <__swbuf_r+0x84>
 800afe8:	6923      	ldr	r3, [r4, #16]
 800afea:	b36b      	cbz	r3, 800b048 <__swbuf_r+0x84>
 800afec:	6923      	ldr	r3, [r4, #16]
 800afee:	6820      	ldr	r0, [r4, #0]
 800aff0:	1ac0      	subs	r0, r0, r3
 800aff2:	6963      	ldr	r3, [r4, #20]
 800aff4:	b2f6      	uxtb	r6, r6
 800aff6:	4283      	cmp	r3, r0
 800aff8:	4637      	mov	r7, r6
 800affa:	dc04      	bgt.n	800b006 <__swbuf_r+0x42>
 800affc:	4621      	mov	r1, r4
 800affe:	4628      	mov	r0, r5
 800b000:	f000 f92e 	bl	800b260 <_fflush_r>
 800b004:	bb30      	cbnz	r0, 800b054 <__swbuf_r+0x90>
 800b006:	68a3      	ldr	r3, [r4, #8]
 800b008:	3b01      	subs	r3, #1
 800b00a:	60a3      	str	r3, [r4, #8]
 800b00c:	6823      	ldr	r3, [r4, #0]
 800b00e:	1c5a      	adds	r2, r3, #1
 800b010:	6022      	str	r2, [r4, #0]
 800b012:	701e      	strb	r6, [r3, #0]
 800b014:	6963      	ldr	r3, [r4, #20]
 800b016:	3001      	adds	r0, #1
 800b018:	4283      	cmp	r3, r0
 800b01a:	d004      	beq.n	800b026 <__swbuf_r+0x62>
 800b01c:	89a3      	ldrh	r3, [r4, #12]
 800b01e:	07db      	lsls	r3, r3, #31
 800b020:	d506      	bpl.n	800b030 <__swbuf_r+0x6c>
 800b022:	2e0a      	cmp	r6, #10
 800b024:	d104      	bne.n	800b030 <__swbuf_r+0x6c>
 800b026:	4621      	mov	r1, r4
 800b028:	4628      	mov	r0, r5
 800b02a:	f000 f919 	bl	800b260 <_fflush_r>
 800b02e:	b988      	cbnz	r0, 800b054 <__swbuf_r+0x90>
 800b030:	4638      	mov	r0, r7
 800b032:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b034:	4b0a      	ldr	r3, [pc, #40]	; (800b060 <__swbuf_r+0x9c>)
 800b036:	429c      	cmp	r4, r3
 800b038:	d101      	bne.n	800b03e <__swbuf_r+0x7a>
 800b03a:	68ac      	ldr	r4, [r5, #8]
 800b03c:	e7cf      	b.n	800afde <__swbuf_r+0x1a>
 800b03e:	4b09      	ldr	r3, [pc, #36]	; (800b064 <__swbuf_r+0xa0>)
 800b040:	429c      	cmp	r4, r3
 800b042:	bf08      	it	eq
 800b044:	68ec      	ldreq	r4, [r5, #12]
 800b046:	e7ca      	b.n	800afde <__swbuf_r+0x1a>
 800b048:	4621      	mov	r1, r4
 800b04a:	4628      	mov	r0, r5
 800b04c:	f000 f80c 	bl	800b068 <__swsetup_r>
 800b050:	2800      	cmp	r0, #0
 800b052:	d0cb      	beq.n	800afec <__swbuf_r+0x28>
 800b054:	f04f 37ff 	mov.w	r7, #4294967295
 800b058:	e7ea      	b.n	800b030 <__swbuf_r+0x6c>
 800b05a:	bf00      	nop
 800b05c:	0800c2fc 	.word	0x0800c2fc
 800b060:	0800c31c 	.word	0x0800c31c
 800b064:	0800c2dc 	.word	0x0800c2dc

0800b068 <__swsetup_r>:
 800b068:	4b32      	ldr	r3, [pc, #200]	; (800b134 <__swsetup_r+0xcc>)
 800b06a:	b570      	push	{r4, r5, r6, lr}
 800b06c:	681d      	ldr	r5, [r3, #0]
 800b06e:	4606      	mov	r6, r0
 800b070:	460c      	mov	r4, r1
 800b072:	b125      	cbz	r5, 800b07e <__swsetup_r+0x16>
 800b074:	69ab      	ldr	r3, [r5, #24]
 800b076:	b913      	cbnz	r3, 800b07e <__swsetup_r+0x16>
 800b078:	4628      	mov	r0, r5
 800b07a:	f000 f985 	bl	800b388 <__sinit>
 800b07e:	4b2e      	ldr	r3, [pc, #184]	; (800b138 <__swsetup_r+0xd0>)
 800b080:	429c      	cmp	r4, r3
 800b082:	d10f      	bne.n	800b0a4 <__swsetup_r+0x3c>
 800b084:	686c      	ldr	r4, [r5, #4]
 800b086:	89a3      	ldrh	r3, [r4, #12]
 800b088:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b08c:	0719      	lsls	r1, r3, #28
 800b08e:	d42c      	bmi.n	800b0ea <__swsetup_r+0x82>
 800b090:	06dd      	lsls	r5, r3, #27
 800b092:	d411      	bmi.n	800b0b8 <__swsetup_r+0x50>
 800b094:	2309      	movs	r3, #9
 800b096:	6033      	str	r3, [r6, #0]
 800b098:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b09c:	81a3      	strh	r3, [r4, #12]
 800b09e:	f04f 30ff 	mov.w	r0, #4294967295
 800b0a2:	e03e      	b.n	800b122 <__swsetup_r+0xba>
 800b0a4:	4b25      	ldr	r3, [pc, #148]	; (800b13c <__swsetup_r+0xd4>)
 800b0a6:	429c      	cmp	r4, r3
 800b0a8:	d101      	bne.n	800b0ae <__swsetup_r+0x46>
 800b0aa:	68ac      	ldr	r4, [r5, #8]
 800b0ac:	e7eb      	b.n	800b086 <__swsetup_r+0x1e>
 800b0ae:	4b24      	ldr	r3, [pc, #144]	; (800b140 <__swsetup_r+0xd8>)
 800b0b0:	429c      	cmp	r4, r3
 800b0b2:	bf08      	it	eq
 800b0b4:	68ec      	ldreq	r4, [r5, #12]
 800b0b6:	e7e6      	b.n	800b086 <__swsetup_r+0x1e>
 800b0b8:	0758      	lsls	r0, r3, #29
 800b0ba:	d512      	bpl.n	800b0e2 <__swsetup_r+0x7a>
 800b0bc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b0be:	b141      	cbz	r1, 800b0d2 <__swsetup_r+0x6a>
 800b0c0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b0c4:	4299      	cmp	r1, r3
 800b0c6:	d002      	beq.n	800b0ce <__swsetup_r+0x66>
 800b0c8:	4630      	mov	r0, r6
 800b0ca:	f7ff fb67 	bl	800a79c <_free_r>
 800b0ce:	2300      	movs	r3, #0
 800b0d0:	6363      	str	r3, [r4, #52]	; 0x34
 800b0d2:	89a3      	ldrh	r3, [r4, #12]
 800b0d4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b0d8:	81a3      	strh	r3, [r4, #12]
 800b0da:	2300      	movs	r3, #0
 800b0dc:	6063      	str	r3, [r4, #4]
 800b0de:	6923      	ldr	r3, [r4, #16]
 800b0e0:	6023      	str	r3, [r4, #0]
 800b0e2:	89a3      	ldrh	r3, [r4, #12]
 800b0e4:	f043 0308 	orr.w	r3, r3, #8
 800b0e8:	81a3      	strh	r3, [r4, #12]
 800b0ea:	6923      	ldr	r3, [r4, #16]
 800b0ec:	b94b      	cbnz	r3, 800b102 <__swsetup_r+0x9a>
 800b0ee:	89a3      	ldrh	r3, [r4, #12]
 800b0f0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b0f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b0f8:	d003      	beq.n	800b102 <__swsetup_r+0x9a>
 800b0fa:	4621      	mov	r1, r4
 800b0fc:	4630      	mov	r0, r6
 800b0fe:	f000 fa07 	bl	800b510 <__smakebuf_r>
 800b102:	89a0      	ldrh	r0, [r4, #12]
 800b104:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b108:	f010 0301 	ands.w	r3, r0, #1
 800b10c:	d00a      	beq.n	800b124 <__swsetup_r+0xbc>
 800b10e:	2300      	movs	r3, #0
 800b110:	60a3      	str	r3, [r4, #8]
 800b112:	6963      	ldr	r3, [r4, #20]
 800b114:	425b      	negs	r3, r3
 800b116:	61a3      	str	r3, [r4, #24]
 800b118:	6923      	ldr	r3, [r4, #16]
 800b11a:	b943      	cbnz	r3, 800b12e <__swsetup_r+0xc6>
 800b11c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b120:	d1ba      	bne.n	800b098 <__swsetup_r+0x30>
 800b122:	bd70      	pop	{r4, r5, r6, pc}
 800b124:	0781      	lsls	r1, r0, #30
 800b126:	bf58      	it	pl
 800b128:	6963      	ldrpl	r3, [r4, #20]
 800b12a:	60a3      	str	r3, [r4, #8]
 800b12c:	e7f4      	b.n	800b118 <__swsetup_r+0xb0>
 800b12e:	2000      	movs	r0, #0
 800b130:	e7f7      	b.n	800b122 <__swsetup_r+0xba>
 800b132:	bf00      	nop
 800b134:	20000010 	.word	0x20000010
 800b138:	0800c2fc 	.word	0x0800c2fc
 800b13c:	0800c31c 	.word	0x0800c31c
 800b140:	0800c2dc 	.word	0x0800c2dc

0800b144 <abort>:
 800b144:	b508      	push	{r3, lr}
 800b146:	2006      	movs	r0, #6
 800b148:	f000 fa52 	bl	800b5f0 <raise>
 800b14c:	2001      	movs	r0, #1
 800b14e:	f7f6 feff 	bl	8001f50 <_exit>
	...

0800b154 <__sflush_r>:
 800b154:	898a      	ldrh	r2, [r1, #12]
 800b156:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b15a:	4605      	mov	r5, r0
 800b15c:	0710      	lsls	r0, r2, #28
 800b15e:	460c      	mov	r4, r1
 800b160:	d458      	bmi.n	800b214 <__sflush_r+0xc0>
 800b162:	684b      	ldr	r3, [r1, #4]
 800b164:	2b00      	cmp	r3, #0
 800b166:	dc05      	bgt.n	800b174 <__sflush_r+0x20>
 800b168:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b16a:	2b00      	cmp	r3, #0
 800b16c:	dc02      	bgt.n	800b174 <__sflush_r+0x20>
 800b16e:	2000      	movs	r0, #0
 800b170:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b174:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b176:	2e00      	cmp	r6, #0
 800b178:	d0f9      	beq.n	800b16e <__sflush_r+0x1a>
 800b17a:	2300      	movs	r3, #0
 800b17c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b180:	682f      	ldr	r7, [r5, #0]
 800b182:	602b      	str	r3, [r5, #0]
 800b184:	d032      	beq.n	800b1ec <__sflush_r+0x98>
 800b186:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b188:	89a3      	ldrh	r3, [r4, #12]
 800b18a:	075a      	lsls	r2, r3, #29
 800b18c:	d505      	bpl.n	800b19a <__sflush_r+0x46>
 800b18e:	6863      	ldr	r3, [r4, #4]
 800b190:	1ac0      	subs	r0, r0, r3
 800b192:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b194:	b10b      	cbz	r3, 800b19a <__sflush_r+0x46>
 800b196:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b198:	1ac0      	subs	r0, r0, r3
 800b19a:	2300      	movs	r3, #0
 800b19c:	4602      	mov	r2, r0
 800b19e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b1a0:	6a21      	ldr	r1, [r4, #32]
 800b1a2:	4628      	mov	r0, r5
 800b1a4:	47b0      	blx	r6
 800b1a6:	1c43      	adds	r3, r0, #1
 800b1a8:	89a3      	ldrh	r3, [r4, #12]
 800b1aa:	d106      	bne.n	800b1ba <__sflush_r+0x66>
 800b1ac:	6829      	ldr	r1, [r5, #0]
 800b1ae:	291d      	cmp	r1, #29
 800b1b0:	d82c      	bhi.n	800b20c <__sflush_r+0xb8>
 800b1b2:	4a2a      	ldr	r2, [pc, #168]	; (800b25c <__sflush_r+0x108>)
 800b1b4:	40ca      	lsrs	r2, r1
 800b1b6:	07d6      	lsls	r6, r2, #31
 800b1b8:	d528      	bpl.n	800b20c <__sflush_r+0xb8>
 800b1ba:	2200      	movs	r2, #0
 800b1bc:	6062      	str	r2, [r4, #4]
 800b1be:	04d9      	lsls	r1, r3, #19
 800b1c0:	6922      	ldr	r2, [r4, #16]
 800b1c2:	6022      	str	r2, [r4, #0]
 800b1c4:	d504      	bpl.n	800b1d0 <__sflush_r+0x7c>
 800b1c6:	1c42      	adds	r2, r0, #1
 800b1c8:	d101      	bne.n	800b1ce <__sflush_r+0x7a>
 800b1ca:	682b      	ldr	r3, [r5, #0]
 800b1cc:	b903      	cbnz	r3, 800b1d0 <__sflush_r+0x7c>
 800b1ce:	6560      	str	r0, [r4, #84]	; 0x54
 800b1d0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b1d2:	602f      	str	r7, [r5, #0]
 800b1d4:	2900      	cmp	r1, #0
 800b1d6:	d0ca      	beq.n	800b16e <__sflush_r+0x1a>
 800b1d8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b1dc:	4299      	cmp	r1, r3
 800b1de:	d002      	beq.n	800b1e6 <__sflush_r+0x92>
 800b1e0:	4628      	mov	r0, r5
 800b1e2:	f7ff fadb 	bl	800a79c <_free_r>
 800b1e6:	2000      	movs	r0, #0
 800b1e8:	6360      	str	r0, [r4, #52]	; 0x34
 800b1ea:	e7c1      	b.n	800b170 <__sflush_r+0x1c>
 800b1ec:	6a21      	ldr	r1, [r4, #32]
 800b1ee:	2301      	movs	r3, #1
 800b1f0:	4628      	mov	r0, r5
 800b1f2:	47b0      	blx	r6
 800b1f4:	1c41      	adds	r1, r0, #1
 800b1f6:	d1c7      	bne.n	800b188 <__sflush_r+0x34>
 800b1f8:	682b      	ldr	r3, [r5, #0]
 800b1fa:	2b00      	cmp	r3, #0
 800b1fc:	d0c4      	beq.n	800b188 <__sflush_r+0x34>
 800b1fe:	2b1d      	cmp	r3, #29
 800b200:	d001      	beq.n	800b206 <__sflush_r+0xb2>
 800b202:	2b16      	cmp	r3, #22
 800b204:	d101      	bne.n	800b20a <__sflush_r+0xb6>
 800b206:	602f      	str	r7, [r5, #0]
 800b208:	e7b1      	b.n	800b16e <__sflush_r+0x1a>
 800b20a:	89a3      	ldrh	r3, [r4, #12]
 800b20c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b210:	81a3      	strh	r3, [r4, #12]
 800b212:	e7ad      	b.n	800b170 <__sflush_r+0x1c>
 800b214:	690f      	ldr	r7, [r1, #16]
 800b216:	2f00      	cmp	r7, #0
 800b218:	d0a9      	beq.n	800b16e <__sflush_r+0x1a>
 800b21a:	0793      	lsls	r3, r2, #30
 800b21c:	680e      	ldr	r6, [r1, #0]
 800b21e:	bf08      	it	eq
 800b220:	694b      	ldreq	r3, [r1, #20]
 800b222:	600f      	str	r7, [r1, #0]
 800b224:	bf18      	it	ne
 800b226:	2300      	movne	r3, #0
 800b228:	eba6 0807 	sub.w	r8, r6, r7
 800b22c:	608b      	str	r3, [r1, #8]
 800b22e:	f1b8 0f00 	cmp.w	r8, #0
 800b232:	dd9c      	ble.n	800b16e <__sflush_r+0x1a>
 800b234:	6a21      	ldr	r1, [r4, #32]
 800b236:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b238:	4643      	mov	r3, r8
 800b23a:	463a      	mov	r2, r7
 800b23c:	4628      	mov	r0, r5
 800b23e:	47b0      	blx	r6
 800b240:	2800      	cmp	r0, #0
 800b242:	dc06      	bgt.n	800b252 <__sflush_r+0xfe>
 800b244:	89a3      	ldrh	r3, [r4, #12]
 800b246:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b24a:	81a3      	strh	r3, [r4, #12]
 800b24c:	f04f 30ff 	mov.w	r0, #4294967295
 800b250:	e78e      	b.n	800b170 <__sflush_r+0x1c>
 800b252:	4407      	add	r7, r0
 800b254:	eba8 0800 	sub.w	r8, r8, r0
 800b258:	e7e9      	b.n	800b22e <__sflush_r+0xda>
 800b25a:	bf00      	nop
 800b25c:	20400001 	.word	0x20400001

0800b260 <_fflush_r>:
 800b260:	b538      	push	{r3, r4, r5, lr}
 800b262:	690b      	ldr	r3, [r1, #16]
 800b264:	4605      	mov	r5, r0
 800b266:	460c      	mov	r4, r1
 800b268:	b913      	cbnz	r3, 800b270 <_fflush_r+0x10>
 800b26a:	2500      	movs	r5, #0
 800b26c:	4628      	mov	r0, r5
 800b26e:	bd38      	pop	{r3, r4, r5, pc}
 800b270:	b118      	cbz	r0, 800b27a <_fflush_r+0x1a>
 800b272:	6983      	ldr	r3, [r0, #24]
 800b274:	b90b      	cbnz	r3, 800b27a <_fflush_r+0x1a>
 800b276:	f000 f887 	bl	800b388 <__sinit>
 800b27a:	4b14      	ldr	r3, [pc, #80]	; (800b2cc <_fflush_r+0x6c>)
 800b27c:	429c      	cmp	r4, r3
 800b27e:	d11b      	bne.n	800b2b8 <_fflush_r+0x58>
 800b280:	686c      	ldr	r4, [r5, #4]
 800b282:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b286:	2b00      	cmp	r3, #0
 800b288:	d0ef      	beq.n	800b26a <_fflush_r+0xa>
 800b28a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b28c:	07d0      	lsls	r0, r2, #31
 800b28e:	d404      	bmi.n	800b29a <_fflush_r+0x3a>
 800b290:	0599      	lsls	r1, r3, #22
 800b292:	d402      	bmi.n	800b29a <_fflush_r+0x3a>
 800b294:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b296:	f000 f915 	bl	800b4c4 <__retarget_lock_acquire_recursive>
 800b29a:	4628      	mov	r0, r5
 800b29c:	4621      	mov	r1, r4
 800b29e:	f7ff ff59 	bl	800b154 <__sflush_r>
 800b2a2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b2a4:	07da      	lsls	r2, r3, #31
 800b2a6:	4605      	mov	r5, r0
 800b2a8:	d4e0      	bmi.n	800b26c <_fflush_r+0xc>
 800b2aa:	89a3      	ldrh	r3, [r4, #12]
 800b2ac:	059b      	lsls	r3, r3, #22
 800b2ae:	d4dd      	bmi.n	800b26c <_fflush_r+0xc>
 800b2b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b2b2:	f000 f908 	bl	800b4c6 <__retarget_lock_release_recursive>
 800b2b6:	e7d9      	b.n	800b26c <_fflush_r+0xc>
 800b2b8:	4b05      	ldr	r3, [pc, #20]	; (800b2d0 <_fflush_r+0x70>)
 800b2ba:	429c      	cmp	r4, r3
 800b2bc:	d101      	bne.n	800b2c2 <_fflush_r+0x62>
 800b2be:	68ac      	ldr	r4, [r5, #8]
 800b2c0:	e7df      	b.n	800b282 <_fflush_r+0x22>
 800b2c2:	4b04      	ldr	r3, [pc, #16]	; (800b2d4 <_fflush_r+0x74>)
 800b2c4:	429c      	cmp	r4, r3
 800b2c6:	bf08      	it	eq
 800b2c8:	68ec      	ldreq	r4, [r5, #12]
 800b2ca:	e7da      	b.n	800b282 <_fflush_r+0x22>
 800b2cc:	0800c2fc 	.word	0x0800c2fc
 800b2d0:	0800c31c 	.word	0x0800c31c
 800b2d4:	0800c2dc 	.word	0x0800c2dc

0800b2d8 <std>:
 800b2d8:	2300      	movs	r3, #0
 800b2da:	b510      	push	{r4, lr}
 800b2dc:	4604      	mov	r4, r0
 800b2de:	e9c0 3300 	strd	r3, r3, [r0]
 800b2e2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b2e6:	6083      	str	r3, [r0, #8]
 800b2e8:	8181      	strh	r1, [r0, #12]
 800b2ea:	6643      	str	r3, [r0, #100]	; 0x64
 800b2ec:	81c2      	strh	r2, [r0, #14]
 800b2ee:	6183      	str	r3, [r0, #24]
 800b2f0:	4619      	mov	r1, r3
 800b2f2:	2208      	movs	r2, #8
 800b2f4:	305c      	adds	r0, #92	; 0x5c
 800b2f6:	f7fb fe15 	bl	8006f24 <memset>
 800b2fa:	4b05      	ldr	r3, [pc, #20]	; (800b310 <std+0x38>)
 800b2fc:	6263      	str	r3, [r4, #36]	; 0x24
 800b2fe:	4b05      	ldr	r3, [pc, #20]	; (800b314 <std+0x3c>)
 800b300:	62a3      	str	r3, [r4, #40]	; 0x28
 800b302:	4b05      	ldr	r3, [pc, #20]	; (800b318 <std+0x40>)
 800b304:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b306:	4b05      	ldr	r3, [pc, #20]	; (800b31c <std+0x44>)
 800b308:	6224      	str	r4, [r4, #32]
 800b30a:	6323      	str	r3, [r4, #48]	; 0x30
 800b30c:	bd10      	pop	{r4, pc}
 800b30e:	bf00      	nop
 800b310:	0800b629 	.word	0x0800b629
 800b314:	0800b64b 	.word	0x0800b64b
 800b318:	0800b683 	.word	0x0800b683
 800b31c:	0800b6a7 	.word	0x0800b6a7

0800b320 <_cleanup_r>:
 800b320:	4901      	ldr	r1, [pc, #4]	; (800b328 <_cleanup_r+0x8>)
 800b322:	f000 b8af 	b.w	800b484 <_fwalk_reent>
 800b326:	bf00      	nop
 800b328:	0800b261 	.word	0x0800b261

0800b32c <__sfmoreglue>:
 800b32c:	b570      	push	{r4, r5, r6, lr}
 800b32e:	1e4a      	subs	r2, r1, #1
 800b330:	2568      	movs	r5, #104	; 0x68
 800b332:	4355      	muls	r5, r2
 800b334:	460e      	mov	r6, r1
 800b336:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b33a:	f7ff fa7f 	bl	800a83c <_malloc_r>
 800b33e:	4604      	mov	r4, r0
 800b340:	b140      	cbz	r0, 800b354 <__sfmoreglue+0x28>
 800b342:	2100      	movs	r1, #0
 800b344:	e9c0 1600 	strd	r1, r6, [r0]
 800b348:	300c      	adds	r0, #12
 800b34a:	60a0      	str	r0, [r4, #8]
 800b34c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b350:	f7fb fde8 	bl	8006f24 <memset>
 800b354:	4620      	mov	r0, r4
 800b356:	bd70      	pop	{r4, r5, r6, pc}

0800b358 <__sfp_lock_acquire>:
 800b358:	4801      	ldr	r0, [pc, #4]	; (800b360 <__sfp_lock_acquire+0x8>)
 800b35a:	f000 b8b3 	b.w	800b4c4 <__retarget_lock_acquire_recursive>
 800b35e:	bf00      	nop
 800b360:	20000544 	.word	0x20000544

0800b364 <__sfp_lock_release>:
 800b364:	4801      	ldr	r0, [pc, #4]	; (800b36c <__sfp_lock_release+0x8>)
 800b366:	f000 b8ae 	b.w	800b4c6 <__retarget_lock_release_recursive>
 800b36a:	bf00      	nop
 800b36c:	20000544 	.word	0x20000544

0800b370 <__sinit_lock_acquire>:
 800b370:	4801      	ldr	r0, [pc, #4]	; (800b378 <__sinit_lock_acquire+0x8>)
 800b372:	f000 b8a7 	b.w	800b4c4 <__retarget_lock_acquire_recursive>
 800b376:	bf00      	nop
 800b378:	2000053f 	.word	0x2000053f

0800b37c <__sinit_lock_release>:
 800b37c:	4801      	ldr	r0, [pc, #4]	; (800b384 <__sinit_lock_release+0x8>)
 800b37e:	f000 b8a2 	b.w	800b4c6 <__retarget_lock_release_recursive>
 800b382:	bf00      	nop
 800b384:	2000053f 	.word	0x2000053f

0800b388 <__sinit>:
 800b388:	b510      	push	{r4, lr}
 800b38a:	4604      	mov	r4, r0
 800b38c:	f7ff fff0 	bl	800b370 <__sinit_lock_acquire>
 800b390:	69a3      	ldr	r3, [r4, #24]
 800b392:	b11b      	cbz	r3, 800b39c <__sinit+0x14>
 800b394:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b398:	f7ff bff0 	b.w	800b37c <__sinit_lock_release>
 800b39c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b3a0:	6523      	str	r3, [r4, #80]	; 0x50
 800b3a2:	4b13      	ldr	r3, [pc, #76]	; (800b3f0 <__sinit+0x68>)
 800b3a4:	4a13      	ldr	r2, [pc, #76]	; (800b3f4 <__sinit+0x6c>)
 800b3a6:	681b      	ldr	r3, [r3, #0]
 800b3a8:	62a2      	str	r2, [r4, #40]	; 0x28
 800b3aa:	42a3      	cmp	r3, r4
 800b3ac:	bf04      	itt	eq
 800b3ae:	2301      	moveq	r3, #1
 800b3b0:	61a3      	streq	r3, [r4, #24]
 800b3b2:	4620      	mov	r0, r4
 800b3b4:	f000 f820 	bl	800b3f8 <__sfp>
 800b3b8:	6060      	str	r0, [r4, #4]
 800b3ba:	4620      	mov	r0, r4
 800b3bc:	f000 f81c 	bl	800b3f8 <__sfp>
 800b3c0:	60a0      	str	r0, [r4, #8]
 800b3c2:	4620      	mov	r0, r4
 800b3c4:	f000 f818 	bl	800b3f8 <__sfp>
 800b3c8:	2200      	movs	r2, #0
 800b3ca:	60e0      	str	r0, [r4, #12]
 800b3cc:	2104      	movs	r1, #4
 800b3ce:	6860      	ldr	r0, [r4, #4]
 800b3d0:	f7ff ff82 	bl	800b2d8 <std>
 800b3d4:	68a0      	ldr	r0, [r4, #8]
 800b3d6:	2201      	movs	r2, #1
 800b3d8:	2109      	movs	r1, #9
 800b3da:	f7ff ff7d 	bl	800b2d8 <std>
 800b3de:	68e0      	ldr	r0, [r4, #12]
 800b3e0:	2202      	movs	r2, #2
 800b3e2:	2112      	movs	r1, #18
 800b3e4:	f7ff ff78 	bl	800b2d8 <std>
 800b3e8:	2301      	movs	r3, #1
 800b3ea:	61a3      	str	r3, [r4, #24]
 800b3ec:	e7d2      	b.n	800b394 <__sinit+0xc>
 800b3ee:	bf00      	nop
 800b3f0:	0800be84 	.word	0x0800be84
 800b3f4:	0800b321 	.word	0x0800b321

0800b3f8 <__sfp>:
 800b3f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b3fa:	4607      	mov	r7, r0
 800b3fc:	f7ff ffac 	bl	800b358 <__sfp_lock_acquire>
 800b400:	4b1e      	ldr	r3, [pc, #120]	; (800b47c <__sfp+0x84>)
 800b402:	681e      	ldr	r6, [r3, #0]
 800b404:	69b3      	ldr	r3, [r6, #24]
 800b406:	b913      	cbnz	r3, 800b40e <__sfp+0x16>
 800b408:	4630      	mov	r0, r6
 800b40a:	f7ff ffbd 	bl	800b388 <__sinit>
 800b40e:	3648      	adds	r6, #72	; 0x48
 800b410:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b414:	3b01      	subs	r3, #1
 800b416:	d503      	bpl.n	800b420 <__sfp+0x28>
 800b418:	6833      	ldr	r3, [r6, #0]
 800b41a:	b30b      	cbz	r3, 800b460 <__sfp+0x68>
 800b41c:	6836      	ldr	r6, [r6, #0]
 800b41e:	e7f7      	b.n	800b410 <__sfp+0x18>
 800b420:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b424:	b9d5      	cbnz	r5, 800b45c <__sfp+0x64>
 800b426:	4b16      	ldr	r3, [pc, #88]	; (800b480 <__sfp+0x88>)
 800b428:	60e3      	str	r3, [r4, #12]
 800b42a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b42e:	6665      	str	r5, [r4, #100]	; 0x64
 800b430:	f000 f847 	bl	800b4c2 <__retarget_lock_init_recursive>
 800b434:	f7ff ff96 	bl	800b364 <__sfp_lock_release>
 800b438:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b43c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b440:	6025      	str	r5, [r4, #0]
 800b442:	61a5      	str	r5, [r4, #24]
 800b444:	2208      	movs	r2, #8
 800b446:	4629      	mov	r1, r5
 800b448:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b44c:	f7fb fd6a 	bl	8006f24 <memset>
 800b450:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b454:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b458:	4620      	mov	r0, r4
 800b45a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b45c:	3468      	adds	r4, #104	; 0x68
 800b45e:	e7d9      	b.n	800b414 <__sfp+0x1c>
 800b460:	2104      	movs	r1, #4
 800b462:	4638      	mov	r0, r7
 800b464:	f7ff ff62 	bl	800b32c <__sfmoreglue>
 800b468:	4604      	mov	r4, r0
 800b46a:	6030      	str	r0, [r6, #0]
 800b46c:	2800      	cmp	r0, #0
 800b46e:	d1d5      	bne.n	800b41c <__sfp+0x24>
 800b470:	f7ff ff78 	bl	800b364 <__sfp_lock_release>
 800b474:	230c      	movs	r3, #12
 800b476:	603b      	str	r3, [r7, #0]
 800b478:	e7ee      	b.n	800b458 <__sfp+0x60>
 800b47a:	bf00      	nop
 800b47c:	0800be84 	.word	0x0800be84
 800b480:	ffff0001 	.word	0xffff0001

0800b484 <_fwalk_reent>:
 800b484:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b488:	4606      	mov	r6, r0
 800b48a:	4688      	mov	r8, r1
 800b48c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b490:	2700      	movs	r7, #0
 800b492:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b496:	f1b9 0901 	subs.w	r9, r9, #1
 800b49a:	d505      	bpl.n	800b4a8 <_fwalk_reent+0x24>
 800b49c:	6824      	ldr	r4, [r4, #0]
 800b49e:	2c00      	cmp	r4, #0
 800b4a0:	d1f7      	bne.n	800b492 <_fwalk_reent+0xe>
 800b4a2:	4638      	mov	r0, r7
 800b4a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b4a8:	89ab      	ldrh	r3, [r5, #12]
 800b4aa:	2b01      	cmp	r3, #1
 800b4ac:	d907      	bls.n	800b4be <_fwalk_reent+0x3a>
 800b4ae:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b4b2:	3301      	adds	r3, #1
 800b4b4:	d003      	beq.n	800b4be <_fwalk_reent+0x3a>
 800b4b6:	4629      	mov	r1, r5
 800b4b8:	4630      	mov	r0, r6
 800b4ba:	47c0      	blx	r8
 800b4bc:	4307      	orrs	r7, r0
 800b4be:	3568      	adds	r5, #104	; 0x68
 800b4c0:	e7e9      	b.n	800b496 <_fwalk_reent+0x12>

0800b4c2 <__retarget_lock_init_recursive>:
 800b4c2:	4770      	bx	lr

0800b4c4 <__retarget_lock_acquire_recursive>:
 800b4c4:	4770      	bx	lr

0800b4c6 <__retarget_lock_release_recursive>:
 800b4c6:	4770      	bx	lr

0800b4c8 <__swhatbuf_r>:
 800b4c8:	b570      	push	{r4, r5, r6, lr}
 800b4ca:	460e      	mov	r6, r1
 800b4cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b4d0:	2900      	cmp	r1, #0
 800b4d2:	b096      	sub	sp, #88	; 0x58
 800b4d4:	4614      	mov	r4, r2
 800b4d6:	461d      	mov	r5, r3
 800b4d8:	da07      	bge.n	800b4ea <__swhatbuf_r+0x22>
 800b4da:	2300      	movs	r3, #0
 800b4dc:	602b      	str	r3, [r5, #0]
 800b4de:	89b3      	ldrh	r3, [r6, #12]
 800b4e0:	061a      	lsls	r2, r3, #24
 800b4e2:	d410      	bmi.n	800b506 <__swhatbuf_r+0x3e>
 800b4e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b4e8:	e00e      	b.n	800b508 <__swhatbuf_r+0x40>
 800b4ea:	466a      	mov	r2, sp
 800b4ec:	f000 f902 	bl	800b6f4 <_fstat_r>
 800b4f0:	2800      	cmp	r0, #0
 800b4f2:	dbf2      	blt.n	800b4da <__swhatbuf_r+0x12>
 800b4f4:	9a01      	ldr	r2, [sp, #4]
 800b4f6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b4fa:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b4fe:	425a      	negs	r2, r3
 800b500:	415a      	adcs	r2, r3
 800b502:	602a      	str	r2, [r5, #0]
 800b504:	e7ee      	b.n	800b4e4 <__swhatbuf_r+0x1c>
 800b506:	2340      	movs	r3, #64	; 0x40
 800b508:	2000      	movs	r0, #0
 800b50a:	6023      	str	r3, [r4, #0]
 800b50c:	b016      	add	sp, #88	; 0x58
 800b50e:	bd70      	pop	{r4, r5, r6, pc}

0800b510 <__smakebuf_r>:
 800b510:	898b      	ldrh	r3, [r1, #12]
 800b512:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b514:	079d      	lsls	r5, r3, #30
 800b516:	4606      	mov	r6, r0
 800b518:	460c      	mov	r4, r1
 800b51a:	d507      	bpl.n	800b52c <__smakebuf_r+0x1c>
 800b51c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b520:	6023      	str	r3, [r4, #0]
 800b522:	6123      	str	r3, [r4, #16]
 800b524:	2301      	movs	r3, #1
 800b526:	6163      	str	r3, [r4, #20]
 800b528:	b002      	add	sp, #8
 800b52a:	bd70      	pop	{r4, r5, r6, pc}
 800b52c:	ab01      	add	r3, sp, #4
 800b52e:	466a      	mov	r2, sp
 800b530:	f7ff ffca 	bl	800b4c8 <__swhatbuf_r>
 800b534:	9900      	ldr	r1, [sp, #0]
 800b536:	4605      	mov	r5, r0
 800b538:	4630      	mov	r0, r6
 800b53a:	f7ff f97f 	bl	800a83c <_malloc_r>
 800b53e:	b948      	cbnz	r0, 800b554 <__smakebuf_r+0x44>
 800b540:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b544:	059a      	lsls	r2, r3, #22
 800b546:	d4ef      	bmi.n	800b528 <__smakebuf_r+0x18>
 800b548:	f023 0303 	bic.w	r3, r3, #3
 800b54c:	f043 0302 	orr.w	r3, r3, #2
 800b550:	81a3      	strh	r3, [r4, #12]
 800b552:	e7e3      	b.n	800b51c <__smakebuf_r+0xc>
 800b554:	4b0d      	ldr	r3, [pc, #52]	; (800b58c <__smakebuf_r+0x7c>)
 800b556:	62b3      	str	r3, [r6, #40]	; 0x28
 800b558:	89a3      	ldrh	r3, [r4, #12]
 800b55a:	6020      	str	r0, [r4, #0]
 800b55c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b560:	81a3      	strh	r3, [r4, #12]
 800b562:	9b00      	ldr	r3, [sp, #0]
 800b564:	6163      	str	r3, [r4, #20]
 800b566:	9b01      	ldr	r3, [sp, #4]
 800b568:	6120      	str	r0, [r4, #16]
 800b56a:	b15b      	cbz	r3, 800b584 <__smakebuf_r+0x74>
 800b56c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b570:	4630      	mov	r0, r6
 800b572:	f000 f8d1 	bl	800b718 <_isatty_r>
 800b576:	b128      	cbz	r0, 800b584 <__smakebuf_r+0x74>
 800b578:	89a3      	ldrh	r3, [r4, #12]
 800b57a:	f023 0303 	bic.w	r3, r3, #3
 800b57e:	f043 0301 	orr.w	r3, r3, #1
 800b582:	81a3      	strh	r3, [r4, #12]
 800b584:	89a0      	ldrh	r0, [r4, #12]
 800b586:	4305      	orrs	r5, r0
 800b588:	81a5      	strh	r5, [r4, #12]
 800b58a:	e7cd      	b.n	800b528 <__smakebuf_r+0x18>
 800b58c:	0800b321 	.word	0x0800b321

0800b590 <_malloc_usable_size_r>:
 800b590:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b594:	1f18      	subs	r0, r3, #4
 800b596:	2b00      	cmp	r3, #0
 800b598:	bfbc      	itt	lt
 800b59a:	580b      	ldrlt	r3, [r1, r0]
 800b59c:	18c0      	addlt	r0, r0, r3
 800b59e:	4770      	bx	lr

0800b5a0 <_raise_r>:
 800b5a0:	291f      	cmp	r1, #31
 800b5a2:	b538      	push	{r3, r4, r5, lr}
 800b5a4:	4604      	mov	r4, r0
 800b5a6:	460d      	mov	r5, r1
 800b5a8:	d904      	bls.n	800b5b4 <_raise_r+0x14>
 800b5aa:	2316      	movs	r3, #22
 800b5ac:	6003      	str	r3, [r0, #0]
 800b5ae:	f04f 30ff 	mov.w	r0, #4294967295
 800b5b2:	bd38      	pop	{r3, r4, r5, pc}
 800b5b4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b5b6:	b112      	cbz	r2, 800b5be <_raise_r+0x1e>
 800b5b8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b5bc:	b94b      	cbnz	r3, 800b5d2 <_raise_r+0x32>
 800b5be:	4620      	mov	r0, r4
 800b5c0:	f000 f830 	bl	800b624 <_getpid_r>
 800b5c4:	462a      	mov	r2, r5
 800b5c6:	4601      	mov	r1, r0
 800b5c8:	4620      	mov	r0, r4
 800b5ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b5ce:	f000 b817 	b.w	800b600 <_kill_r>
 800b5d2:	2b01      	cmp	r3, #1
 800b5d4:	d00a      	beq.n	800b5ec <_raise_r+0x4c>
 800b5d6:	1c59      	adds	r1, r3, #1
 800b5d8:	d103      	bne.n	800b5e2 <_raise_r+0x42>
 800b5da:	2316      	movs	r3, #22
 800b5dc:	6003      	str	r3, [r0, #0]
 800b5de:	2001      	movs	r0, #1
 800b5e0:	e7e7      	b.n	800b5b2 <_raise_r+0x12>
 800b5e2:	2400      	movs	r4, #0
 800b5e4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b5e8:	4628      	mov	r0, r5
 800b5ea:	4798      	blx	r3
 800b5ec:	2000      	movs	r0, #0
 800b5ee:	e7e0      	b.n	800b5b2 <_raise_r+0x12>

0800b5f0 <raise>:
 800b5f0:	4b02      	ldr	r3, [pc, #8]	; (800b5fc <raise+0xc>)
 800b5f2:	4601      	mov	r1, r0
 800b5f4:	6818      	ldr	r0, [r3, #0]
 800b5f6:	f7ff bfd3 	b.w	800b5a0 <_raise_r>
 800b5fa:	bf00      	nop
 800b5fc:	20000010 	.word	0x20000010

0800b600 <_kill_r>:
 800b600:	b538      	push	{r3, r4, r5, lr}
 800b602:	4d07      	ldr	r5, [pc, #28]	; (800b620 <_kill_r+0x20>)
 800b604:	2300      	movs	r3, #0
 800b606:	4604      	mov	r4, r0
 800b608:	4608      	mov	r0, r1
 800b60a:	4611      	mov	r1, r2
 800b60c:	602b      	str	r3, [r5, #0]
 800b60e:	f7f6 fc8f 	bl	8001f30 <_kill>
 800b612:	1c43      	adds	r3, r0, #1
 800b614:	d102      	bne.n	800b61c <_kill_r+0x1c>
 800b616:	682b      	ldr	r3, [r5, #0]
 800b618:	b103      	cbz	r3, 800b61c <_kill_r+0x1c>
 800b61a:	6023      	str	r3, [r4, #0]
 800b61c:	bd38      	pop	{r3, r4, r5, pc}
 800b61e:	bf00      	nop
 800b620:	20000538 	.word	0x20000538

0800b624 <_getpid_r>:
 800b624:	f7f6 bc7c 	b.w	8001f20 <_getpid>

0800b628 <__sread>:
 800b628:	b510      	push	{r4, lr}
 800b62a:	460c      	mov	r4, r1
 800b62c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b630:	f000 f894 	bl	800b75c <_read_r>
 800b634:	2800      	cmp	r0, #0
 800b636:	bfab      	itete	ge
 800b638:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b63a:	89a3      	ldrhlt	r3, [r4, #12]
 800b63c:	181b      	addge	r3, r3, r0
 800b63e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b642:	bfac      	ite	ge
 800b644:	6563      	strge	r3, [r4, #84]	; 0x54
 800b646:	81a3      	strhlt	r3, [r4, #12]
 800b648:	bd10      	pop	{r4, pc}

0800b64a <__swrite>:
 800b64a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b64e:	461f      	mov	r7, r3
 800b650:	898b      	ldrh	r3, [r1, #12]
 800b652:	05db      	lsls	r3, r3, #23
 800b654:	4605      	mov	r5, r0
 800b656:	460c      	mov	r4, r1
 800b658:	4616      	mov	r6, r2
 800b65a:	d505      	bpl.n	800b668 <__swrite+0x1e>
 800b65c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b660:	2302      	movs	r3, #2
 800b662:	2200      	movs	r2, #0
 800b664:	f000 f868 	bl	800b738 <_lseek_r>
 800b668:	89a3      	ldrh	r3, [r4, #12]
 800b66a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b66e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b672:	81a3      	strh	r3, [r4, #12]
 800b674:	4632      	mov	r2, r6
 800b676:	463b      	mov	r3, r7
 800b678:	4628      	mov	r0, r5
 800b67a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b67e:	f000 b817 	b.w	800b6b0 <_write_r>

0800b682 <__sseek>:
 800b682:	b510      	push	{r4, lr}
 800b684:	460c      	mov	r4, r1
 800b686:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b68a:	f000 f855 	bl	800b738 <_lseek_r>
 800b68e:	1c43      	adds	r3, r0, #1
 800b690:	89a3      	ldrh	r3, [r4, #12]
 800b692:	bf15      	itete	ne
 800b694:	6560      	strne	r0, [r4, #84]	; 0x54
 800b696:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b69a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b69e:	81a3      	strheq	r3, [r4, #12]
 800b6a0:	bf18      	it	ne
 800b6a2:	81a3      	strhne	r3, [r4, #12]
 800b6a4:	bd10      	pop	{r4, pc}

0800b6a6 <__sclose>:
 800b6a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b6aa:	f000 b813 	b.w	800b6d4 <_close_r>
	...

0800b6b0 <_write_r>:
 800b6b0:	b538      	push	{r3, r4, r5, lr}
 800b6b2:	4d07      	ldr	r5, [pc, #28]	; (800b6d0 <_write_r+0x20>)
 800b6b4:	4604      	mov	r4, r0
 800b6b6:	4608      	mov	r0, r1
 800b6b8:	4611      	mov	r1, r2
 800b6ba:	2200      	movs	r2, #0
 800b6bc:	602a      	str	r2, [r5, #0]
 800b6be:	461a      	mov	r2, r3
 800b6c0:	f7f6 fc6d 	bl	8001f9e <_write>
 800b6c4:	1c43      	adds	r3, r0, #1
 800b6c6:	d102      	bne.n	800b6ce <_write_r+0x1e>
 800b6c8:	682b      	ldr	r3, [r5, #0]
 800b6ca:	b103      	cbz	r3, 800b6ce <_write_r+0x1e>
 800b6cc:	6023      	str	r3, [r4, #0]
 800b6ce:	bd38      	pop	{r3, r4, r5, pc}
 800b6d0:	20000538 	.word	0x20000538

0800b6d4 <_close_r>:
 800b6d4:	b538      	push	{r3, r4, r5, lr}
 800b6d6:	4d06      	ldr	r5, [pc, #24]	; (800b6f0 <_close_r+0x1c>)
 800b6d8:	2300      	movs	r3, #0
 800b6da:	4604      	mov	r4, r0
 800b6dc:	4608      	mov	r0, r1
 800b6de:	602b      	str	r3, [r5, #0]
 800b6e0:	f7f6 fc79 	bl	8001fd6 <_close>
 800b6e4:	1c43      	adds	r3, r0, #1
 800b6e6:	d102      	bne.n	800b6ee <_close_r+0x1a>
 800b6e8:	682b      	ldr	r3, [r5, #0]
 800b6ea:	b103      	cbz	r3, 800b6ee <_close_r+0x1a>
 800b6ec:	6023      	str	r3, [r4, #0]
 800b6ee:	bd38      	pop	{r3, r4, r5, pc}
 800b6f0:	20000538 	.word	0x20000538

0800b6f4 <_fstat_r>:
 800b6f4:	b538      	push	{r3, r4, r5, lr}
 800b6f6:	4d07      	ldr	r5, [pc, #28]	; (800b714 <_fstat_r+0x20>)
 800b6f8:	2300      	movs	r3, #0
 800b6fa:	4604      	mov	r4, r0
 800b6fc:	4608      	mov	r0, r1
 800b6fe:	4611      	mov	r1, r2
 800b700:	602b      	str	r3, [r5, #0]
 800b702:	f7f6 fc74 	bl	8001fee <_fstat>
 800b706:	1c43      	adds	r3, r0, #1
 800b708:	d102      	bne.n	800b710 <_fstat_r+0x1c>
 800b70a:	682b      	ldr	r3, [r5, #0]
 800b70c:	b103      	cbz	r3, 800b710 <_fstat_r+0x1c>
 800b70e:	6023      	str	r3, [r4, #0]
 800b710:	bd38      	pop	{r3, r4, r5, pc}
 800b712:	bf00      	nop
 800b714:	20000538 	.word	0x20000538

0800b718 <_isatty_r>:
 800b718:	b538      	push	{r3, r4, r5, lr}
 800b71a:	4d06      	ldr	r5, [pc, #24]	; (800b734 <_isatty_r+0x1c>)
 800b71c:	2300      	movs	r3, #0
 800b71e:	4604      	mov	r4, r0
 800b720:	4608      	mov	r0, r1
 800b722:	602b      	str	r3, [r5, #0]
 800b724:	f7f6 fc73 	bl	800200e <_isatty>
 800b728:	1c43      	adds	r3, r0, #1
 800b72a:	d102      	bne.n	800b732 <_isatty_r+0x1a>
 800b72c:	682b      	ldr	r3, [r5, #0]
 800b72e:	b103      	cbz	r3, 800b732 <_isatty_r+0x1a>
 800b730:	6023      	str	r3, [r4, #0]
 800b732:	bd38      	pop	{r3, r4, r5, pc}
 800b734:	20000538 	.word	0x20000538

0800b738 <_lseek_r>:
 800b738:	b538      	push	{r3, r4, r5, lr}
 800b73a:	4d07      	ldr	r5, [pc, #28]	; (800b758 <_lseek_r+0x20>)
 800b73c:	4604      	mov	r4, r0
 800b73e:	4608      	mov	r0, r1
 800b740:	4611      	mov	r1, r2
 800b742:	2200      	movs	r2, #0
 800b744:	602a      	str	r2, [r5, #0]
 800b746:	461a      	mov	r2, r3
 800b748:	f7f6 fc6c 	bl	8002024 <_lseek>
 800b74c:	1c43      	adds	r3, r0, #1
 800b74e:	d102      	bne.n	800b756 <_lseek_r+0x1e>
 800b750:	682b      	ldr	r3, [r5, #0]
 800b752:	b103      	cbz	r3, 800b756 <_lseek_r+0x1e>
 800b754:	6023      	str	r3, [r4, #0]
 800b756:	bd38      	pop	{r3, r4, r5, pc}
 800b758:	20000538 	.word	0x20000538

0800b75c <_read_r>:
 800b75c:	b538      	push	{r3, r4, r5, lr}
 800b75e:	4d07      	ldr	r5, [pc, #28]	; (800b77c <_read_r+0x20>)
 800b760:	4604      	mov	r4, r0
 800b762:	4608      	mov	r0, r1
 800b764:	4611      	mov	r1, r2
 800b766:	2200      	movs	r2, #0
 800b768:	602a      	str	r2, [r5, #0]
 800b76a:	461a      	mov	r2, r3
 800b76c:	f7f6 fbfa 	bl	8001f64 <_read>
 800b770:	1c43      	adds	r3, r0, #1
 800b772:	d102      	bne.n	800b77a <_read_r+0x1e>
 800b774:	682b      	ldr	r3, [r5, #0]
 800b776:	b103      	cbz	r3, 800b77a <_read_r+0x1e>
 800b778:	6023      	str	r3, [r4, #0]
 800b77a:	bd38      	pop	{r3, r4, r5, pc}
 800b77c:	20000538 	.word	0x20000538

0800b780 <atan2>:
 800b780:	f000 b836 	b.w	800b7f0 <__ieee754_atan2>

0800b784 <sqrt>:
 800b784:	b538      	push	{r3, r4, r5, lr}
 800b786:	ed2d 8b02 	vpush	{d8}
 800b78a:	ec55 4b10 	vmov	r4, r5, d0
 800b78e:	f000 f8f9 	bl	800b984 <__ieee754_sqrt>
 800b792:	4b15      	ldr	r3, [pc, #84]	; (800b7e8 <sqrt+0x64>)
 800b794:	eeb0 8a40 	vmov.f32	s16, s0
 800b798:	eef0 8a60 	vmov.f32	s17, s1
 800b79c:	f993 3000 	ldrsb.w	r3, [r3]
 800b7a0:	3301      	adds	r3, #1
 800b7a2:	d019      	beq.n	800b7d8 <sqrt+0x54>
 800b7a4:	4622      	mov	r2, r4
 800b7a6:	462b      	mov	r3, r5
 800b7a8:	4620      	mov	r0, r4
 800b7aa:	4629      	mov	r1, r5
 800b7ac:	f7f5 f9de 	bl	8000b6c <__aeabi_dcmpun>
 800b7b0:	b990      	cbnz	r0, 800b7d8 <sqrt+0x54>
 800b7b2:	2200      	movs	r2, #0
 800b7b4:	2300      	movs	r3, #0
 800b7b6:	4620      	mov	r0, r4
 800b7b8:	4629      	mov	r1, r5
 800b7ba:	f7f5 f9af 	bl	8000b1c <__aeabi_dcmplt>
 800b7be:	b158      	cbz	r0, 800b7d8 <sqrt+0x54>
 800b7c0:	f7fb fb86 	bl	8006ed0 <__errno>
 800b7c4:	2321      	movs	r3, #33	; 0x21
 800b7c6:	6003      	str	r3, [r0, #0]
 800b7c8:	2200      	movs	r2, #0
 800b7ca:	2300      	movs	r3, #0
 800b7cc:	4610      	mov	r0, r2
 800b7ce:	4619      	mov	r1, r3
 800b7d0:	f7f5 f85c 	bl	800088c <__aeabi_ddiv>
 800b7d4:	ec41 0b18 	vmov	d8, r0, r1
 800b7d8:	eeb0 0a48 	vmov.f32	s0, s16
 800b7dc:	eef0 0a68 	vmov.f32	s1, s17
 800b7e0:	ecbd 8b02 	vpop	{d8}
 800b7e4:	bd38      	pop	{r3, r4, r5, pc}
 800b7e6:	bf00      	nop
 800b7e8:	200001e4 	.word	0x200001e4
 800b7ec:	00000000 	.word	0x00000000

0800b7f0 <__ieee754_atan2>:
 800b7f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b7f4:	ec57 6b11 	vmov	r6, r7, d1
 800b7f8:	4273      	negs	r3, r6
 800b7fa:	f8df e184 	ldr.w	lr, [pc, #388]	; 800b980 <__ieee754_atan2+0x190>
 800b7fe:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800b802:	4333      	orrs	r3, r6
 800b804:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800b808:	4573      	cmp	r3, lr
 800b80a:	ec51 0b10 	vmov	r0, r1, d0
 800b80e:	ee11 8a10 	vmov	r8, s2
 800b812:	d80a      	bhi.n	800b82a <__ieee754_atan2+0x3a>
 800b814:	4244      	negs	r4, r0
 800b816:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b81a:	4304      	orrs	r4, r0
 800b81c:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800b820:	4574      	cmp	r4, lr
 800b822:	ee10 9a10 	vmov	r9, s0
 800b826:	468c      	mov	ip, r1
 800b828:	d907      	bls.n	800b83a <__ieee754_atan2+0x4a>
 800b82a:	4632      	mov	r2, r6
 800b82c:	463b      	mov	r3, r7
 800b82e:	f7f4 fd4d 	bl	80002cc <__adddf3>
 800b832:	ec41 0b10 	vmov	d0, r0, r1
 800b836:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b83a:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 800b83e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800b842:	4334      	orrs	r4, r6
 800b844:	d103      	bne.n	800b84e <__ieee754_atan2+0x5e>
 800b846:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b84a:	f000 b951 	b.w	800baf0 <atan>
 800b84e:	17bc      	asrs	r4, r7, #30
 800b850:	f004 0402 	and.w	r4, r4, #2
 800b854:	ea53 0909 	orrs.w	r9, r3, r9
 800b858:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800b85c:	d107      	bne.n	800b86e <__ieee754_atan2+0x7e>
 800b85e:	2c02      	cmp	r4, #2
 800b860:	d060      	beq.n	800b924 <__ieee754_atan2+0x134>
 800b862:	2c03      	cmp	r4, #3
 800b864:	d1e5      	bne.n	800b832 <__ieee754_atan2+0x42>
 800b866:	a142      	add	r1, pc, #264	; (adr r1, 800b970 <__ieee754_atan2+0x180>)
 800b868:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b86c:	e7e1      	b.n	800b832 <__ieee754_atan2+0x42>
 800b86e:	ea52 0808 	orrs.w	r8, r2, r8
 800b872:	d106      	bne.n	800b882 <__ieee754_atan2+0x92>
 800b874:	f1bc 0f00 	cmp.w	ip, #0
 800b878:	da5f      	bge.n	800b93a <__ieee754_atan2+0x14a>
 800b87a:	a13f      	add	r1, pc, #252	; (adr r1, 800b978 <__ieee754_atan2+0x188>)
 800b87c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b880:	e7d7      	b.n	800b832 <__ieee754_atan2+0x42>
 800b882:	4572      	cmp	r2, lr
 800b884:	d10f      	bne.n	800b8a6 <__ieee754_atan2+0xb6>
 800b886:	4293      	cmp	r3, r2
 800b888:	f104 34ff 	add.w	r4, r4, #4294967295
 800b88c:	d107      	bne.n	800b89e <__ieee754_atan2+0xae>
 800b88e:	2c02      	cmp	r4, #2
 800b890:	d84c      	bhi.n	800b92c <__ieee754_atan2+0x13c>
 800b892:	4b35      	ldr	r3, [pc, #212]	; (800b968 <__ieee754_atan2+0x178>)
 800b894:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800b898:	e9d4 0100 	ldrd	r0, r1, [r4]
 800b89c:	e7c9      	b.n	800b832 <__ieee754_atan2+0x42>
 800b89e:	2c02      	cmp	r4, #2
 800b8a0:	d848      	bhi.n	800b934 <__ieee754_atan2+0x144>
 800b8a2:	4b32      	ldr	r3, [pc, #200]	; (800b96c <__ieee754_atan2+0x17c>)
 800b8a4:	e7f6      	b.n	800b894 <__ieee754_atan2+0xa4>
 800b8a6:	4573      	cmp	r3, lr
 800b8a8:	d0e4      	beq.n	800b874 <__ieee754_atan2+0x84>
 800b8aa:	1a9b      	subs	r3, r3, r2
 800b8ac:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 800b8b0:	ea4f 5223 	mov.w	r2, r3, asr #20
 800b8b4:	da1e      	bge.n	800b8f4 <__ieee754_atan2+0x104>
 800b8b6:	2f00      	cmp	r7, #0
 800b8b8:	da01      	bge.n	800b8be <__ieee754_atan2+0xce>
 800b8ba:	323c      	adds	r2, #60	; 0x3c
 800b8bc:	db1e      	blt.n	800b8fc <__ieee754_atan2+0x10c>
 800b8be:	4632      	mov	r2, r6
 800b8c0:	463b      	mov	r3, r7
 800b8c2:	f7f4 ffe3 	bl	800088c <__aeabi_ddiv>
 800b8c6:	ec41 0b10 	vmov	d0, r0, r1
 800b8ca:	f000 fab1 	bl	800be30 <fabs>
 800b8ce:	f000 f90f 	bl	800baf0 <atan>
 800b8d2:	ec51 0b10 	vmov	r0, r1, d0
 800b8d6:	2c01      	cmp	r4, #1
 800b8d8:	d013      	beq.n	800b902 <__ieee754_atan2+0x112>
 800b8da:	2c02      	cmp	r4, #2
 800b8dc:	d015      	beq.n	800b90a <__ieee754_atan2+0x11a>
 800b8de:	2c00      	cmp	r4, #0
 800b8e0:	d0a7      	beq.n	800b832 <__ieee754_atan2+0x42>
 800b8e2:	a319      	add	r3, pc, #100	; (adr r3, 800b948 <__ieee754_atan2+0x158>)
 800b8e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8e8:	f7f4 fcee 	bl	80002c8 <__aeabi_dsub>
 800b8ec:	a318      	add	r3, pc, #96	; (adr r3, 800b950 <__ieee754_atan2+0x160>)
 800b8ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8f2:	e014      	b.n	800b91e <__ieee754_atan2+0x12e>
 800b8f4:	a118      	add	r1, pc, #96	; (adr r1, 800b958 <__ieee754_atan2+0x168>)
 800b8f6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b8fa:	e7ec      	b.n	800b8d6 <__ieee754_atan2+0xe6>
 800b8fc:	2000      	movs	r0, #0
 800b8fe:	2100      	movs	r1, #0
 800b900:	e7e9      	b.n	800b8d6 <__ieee754_atan2+0xe6>
 800b902:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b906:	4619      	mov	r1, r3
 800b908:	e793      	b.n	800b832 <__ieee754_atan2+0x42>
 800b90a:	a30f      	add	r3, pc, #60	; (adr r3, 800b948 <__ieee754_atan2+0x158>)
 800b90c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b910:	f7f4 fcda 	bl	80002c8 <__aeabi_dsub>
 800b914:	4602      	mov	r2, r0
 800b916:	460b      	mov	r3, r1
 800b918:	a10d      	add	r1, pc, #52	; (adr r1, 800b950 <__ieee754_atan2+0x160>)
 800b91a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b91e:	f7f4 fcd3 	bl	80002c8 <__aeabi_dsub>
 800b922:	e786      	b.n	800b832 <__ieee754_atan2+0x42>
 800b924:	a10a      	add	r1, pc, #40	; (adr r1, 800b950 <__ieee754_atan2+0x160>)
 800b926:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b92a:	e782      	b.n	800b832 <__ieee754_atan2+0x42>
 800b92c:	a10c      	add	r1, pc, #48	; (adr r1, 800b960 <__ieee754_atan2+0x170>)
 800b92e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b932:	e77e      	b.n	800b832 <__ieee754_atan2+0x42>
 800b934:	2000      	movs	r0, #0
 800b936:	2100      	movs	r1, #0
 800b938:	e77b      	b.n	800b832 <__ieee754_atan2+0x42>
 800b93a:	a107      	add	r1, pc, #28	; (adr r1, 800b958 <__ieee754_atan2+0x168>)
 800b93c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b940:	e777      	b.n	800b832 <__ieee754_atan2+0x42>
 800b942:	bf00      	nop
 800b944:	f3af 8000 	nop.w
 800b948:	33145c07 	.word	0x33145c07
 800b94c:	3ca1a626 	.word	0x3ca1a626
 800b950:	54442d18 	.word	0x54442d18
 800b954:	400921fb 	.word	0x400921fb
 800b958:	54442d18 	.word	0x54442d18
 800b95c:	3ff921fb 	.word	0x3ff921fb
 800b960:	54442d18 	.word	0x54442d18
 800b964:	3fe921fb 	.word	0x3fe921fb
 800b968:	0800c340 	.word	0x0800c340
 800b96c:	0800c358 	.word	0x0800c358
 800b970:	54442d18 	.word	0x54442d18
 800b974:	c00921fb 	.word	0xc00921fb
 800b978:	54442d18 	.word	0x54442d18
 800b97c:	bff921fb 	.word	0xbff921fb
 800b980:	7ff00000 	.word	0x7ff00000

0800b984 <__ieee754_sqrt>:
 800b984:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b988:	ec55 4b10 	vmov	r4, r5, d0
 800b98c:	4e56      	ldr	r6, [pc, #344]	; (800bae8 <__ieee754_sqrt+0x164>)
 800b98e:	43ae      	bics	r6, r5
 800b990:	ee10 0a10 	vmov	r0, s0
 800b994:	ee10 3a10 	vmov	r3, s0
 800b998:	4629      	mov	r1, r5
 800b99a:	462a      	mov	r2, r5
 800b99c:	d110      	bne.n	800b9c0 <__ieee754_sqrt+0x3c>
 800b99e:	ee10 2a10 	vmov	r2, s0
 800b9a2:	462b      	mov	r3, r5
 800b9a4:	f7f4 fe48 	bl	8000638 <__aeabi_dmul>
 800b9a8:	4602      	mov	r2, r0
 800b9aa:	460b      	mov	r3, r1
 800b9ac:	4620      	mov	r0, r4
 800b9ae:	4629      	mov	r1, r5
 800b9b0:	f7f4 fc8c 	bl	80002cc <__adddf3>
 800b9b4:	4604      	mov	r4, r0
 800b9b6:	460d      	mov	r5, r1
 800b9b8:	ec45 4b10 	vmov	d0, r4, r5
 800b9bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b9c0:	2d00      	cmp	r5, #0
 800b9c2:	dc10      	bgt.n	800b9e6 <__ieee754_sqrt+0x62>
 800b9c4:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800b9c8:	4330      	orrs	r0, r6
 800b9ca:	d0f5      	beq.n	800b9b8 <__ieee754_sqrt+0x34>
 800b9cc:	b15d      	cbz	r5, 800b9e6 <__ieee754_sqrt+0x62>
 800b9ce:	ee10 2a10 	vmov	r2, s0
 800b9d2:	462b      	mov	r3, r5
 800b9d4:	ee10 0a10 	vmov	r0, s0
 800b9d8:	f7f4 fc76 	bl	80002c8 <__aeabi_dsub>
 800b9dc:	4602      	mov	r2, r0
 800b9de:	460b      	mov	r3, r1
 800b9e0:	f7f4 ff54 	bl	800088c <__aeabi_ddiv>
 800b9e4:	e7e6      	b.n	800b9b4 <__ieee754_sqrt+0x30>
 800b9e6:	1509      	asrs	r1, r1, #20
 800b9e8:	d076      	beq.n	800bad8 <__ieee754_sqrt+0x154>
 800b9ea:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800b9ee:	07ce      	lsls	r6, r1, #31
 800b9f0:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 800b9f4:	bf5e      	ittt	pl
 800b9f6:	0fda      	lsrpl	r2, r3, #31
 800b9f8:	005b      	lslpl	r3, r3, #1
 800b9fa:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 800b9fe:	0fda      	lsrs	r2, r3, #31
 800ba00:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 800ba04:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 800ba08:	2000      	movs	r0, #0
 800ba0a:	106d      	asrs	r5, r5, #1
 800ba0c:	005b      	lsls	r3, r3, #1
 800ba0e:	f04f 0e16 	mov.w	lr, #22
 800ba12:	4684      	mov	ip, r0
 800ba14:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800ba18:	eb0c 0401 	add.w	r4, ip, r1
 800ba1c:	4294      	cmp	r4, r2
 800ba1e:	bfde      	ittt	le
 800ba20:	1b12      	suble	r2, r2, r4
 800ba22:	eb04 0c01 	addle.w	ip, r4, r1
 800ba26:	1840      	addle	r0, r0, r1
 800ba28:	0052      	lsls	r2, r2, #1
 800ba2a:	f1be 0e01 	subs.w	lr, lr, #1
 800ba2e:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800ba32:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800ba36:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800ba3a:	d1ed      	bne.n	800ba18 <__ieee754_sqrt+0x94>
 800ba3c:	4671      	mov	r1, lr
 800ba3e:	2720      	movs	r7, #32
 800ba40:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800ba44:	4562      	cmp	r2, ip
 800ba46:	eb04 060e 	add.w	r6, r4, lr
 800ba4a:	dc02      	bgt.n	800ba52 <__ieee754_sqrt+0xce>
 800ba4c:	d113      	bne.n	800ba76 <__ieee754_sqrt+0xf2>
 800ba4e:	429e      	cmp	r6, r3
 800ba50:	d811      	bhi.n	800ba76 <__ieee754_sqrt+0xf2>
 800ba52:	2e00      	cmp	r6, #0
 800ba54:	eb06 0e04 	add.w	lr, r6, r4
 800ba58:	da43      	bge.n	800bae2 <__ieee754_sqrt+0x15e>
 800ba5a:	f1be 0f00 	cmp.w	lr, #0
 800ba5e:	db40      	blt.n	800bae2 <__ieee754_sqrt+0x15e>
 800ba60:	f10c 0801 	add.w	r8, ip, #1
 800ba64:	eba2 020c 	sub.w	r2, r2, ip
 800ba68:	429e      	cmp	r6, r3
 800ba6a:	bf88      	it	hi
 800ba6c:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800ba70:	1b9b      	subs	r3, r3, r6
 800ba72:	4421      	add	r1, r4
 800ba74:	46c4      	mov	ip, r8
 800ba76:	0052      	lsls	r2, r2, #1
 800ba78:	3f01      	subs	r7, #1
 800ba7a:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800ba7e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800ba82:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800ba86:	d1dd      	bne.n	800ba44 <__ieee754_sqrt+0xc0>
 800ba88:	4313      	orrs	r3, r2
 800ba8a:	d006      	beq.n	800ba9a <__ieee754_sqrt+0x116>
 800ba8c:	1c4c      	adds	r4, r1, #1
 800ba8e:	bf13      	iteet	ne
 800ba90:	3101      	addne	r1, #1
 800ba92:	3001      	addeq	r0, #1
 800ba94:	4639      	moveq	r1, r7
 800ba96:	f021 0101 	bicne.w	r1, r1, #1
 800ba9a:	1043      	asrs	r3, r0, #1
 800ba9c:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800baa0:	0849      	lsrs	r1, r1, #1
 800baa2:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800baa6:	07c2      	lsls	r2, r0, #31
 800baa8:	bf48      	it	mi
 800baaa:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 800baae:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 800bab2:	460c      	mov	r4, r1
 800bab4:	463d      	mov	r5, r7
 800bab6:	e77f      	b.n	800b9b8 <__ieee754_sqrt+0x34>
 800bab8:	0ada      	lsrs	r2, r3, #11
 800baba:	3815      	subs	r0, #21
 800babc:	055b      	lsls	r3, r3, #21
 800babe:	2a00      	cmp	r2, #0
 800bac0:	d0fa      	beq.n	800bab8 <__ieee754_sqrt+0x134>
 800bac2:	02d7      	lsls	r7, r2, #11
 800bac4:	d50a      	bpl.n	800badc <__ieee754_sqrt+0x158>
 800bac6:	f1c1 0420 	rsb	r4, r1, #32
 800baca:	fa23 f404 	lsr.w	r4, r3, r4
 800bace:	1e4d      	subs	r5, r1, #1
 800bad0:	408b      	lsls	r3, r1
 800bad2:	4322      	orrs	r2, r4
 800bad4:	1b41      	subs	r1, r0, r5
 800bad6:	e788      	b.n	800b9ea <__ieee754_sqrt+0x66>
 800bad8:	4608      	mov	r0, r1
 800bada:	e7f0      	b.n	800babe <__ieee754_sqrt+0x13a>
 800badc:	0052      	lsls	r2, r2, #1
 800bade:	3101      	adds	r1, #1
 800bae0:	e7ef      	b.n	800bac2 <__ieee754_sqrt+0x13e>
 800bae2:	46e0      	mov	r8, ip
 800bae4:	e7be      	b.n	800ba64 <__ieee754_sqrt+0xe0>
 800bae6:	bf00      	nop
 800bae8:	7ff00000 	.word	0x7ff00000
 800baec:	00000000 	.word	0x00000000

0800baf0 <atan>:
 800baf0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800baf4:	ec55 4b10 	vmov	r4, r5, d0
 800baf8:	4bc3      	ldr	r3, [pc, #780]	; (800be08 <atan+0x318>)
 800bafa:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800bafe:	429e      	cmp	r6, r3
 800bb00:	46ab      	mov	fp, r5
 800bb02:	dd18      	ble.n	800bb36 <atan+0x46>
 800bb04:	4bc1      	ldr	r3, [pc, #772]	; (800be0c <atan+0x31c>)
 800bb06:	429e      	cmp	r6, r3
 800bb08:	dc01      	bgt.n	800bb0e <atan+0x1e>
 800bb0a:	d109      	bne.n	800bb20 <atan+0x30>
 800bb0c:	b144      	cbz	r4, 800bb20 <atan+0x30>
 800bb0e:	4622      	mov	r2, r4
 800bb10:	462b      	mov	r3, r5
 800bb12:	4620      	mov	r0, r4
 800bb14:	4629      	mov	r1, r5
 800bb16:	f7f4 fbd9 	bl	80002cc <__adddf3>
 800bb1a:	4604      	mov	r4, r0
 800bb1c:	460d      	mov	r5, r1
 800bb1e:	e006      	b.n	800bb2e <atan+0x3e>
 800bb20:	f1bb 0f00 	cmp.w	fp, #0
 800bb24:	f300 8131 	bgt.w	800bd8a <atan+0x29a>
 800bb28:	a59b      	add	r5, pc, #620	; (adr r5, 800bd98 <atan+0x2a8>)
 800bb2a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800bb2e:	ec45 4b10 	vmov	d0, r4, r5
 800bb32:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb36:	4bb6      	ldr	r3, [pc, #728]	; (800be10 <atan+0x320>)
 800bb38:	429e      	cmp	r6, r3
 800bb3a:	dc14      	bgt.n	800bb66 <atan+0x76>
 800bb3c:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800bb40:	429e      	cmp	r6, r3
 800bb42:	dc0d      	bgt.n	800bb60 <atan+0x70>
 800bb44:	a396      	add	r3, pc, #600	; (adr r3, 800bda0 <atan+0x2b0>)
 800bb46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb4a:	ee10 0a10 	vmov	r0, s0
 800bb4e:	4629      	mov	r1, r5
 800bb50:	f7f4 fbbc 	bl	80002cc <__adddf3>
 800bb54:	4baf      	ldr	r3, [pc, #700]	; (800be14 <atan+0x324>)
 800bb56:	2200      	movs	r2, #0
 800bb58:	f7f4 fffe 	bl	8000b58 <__aeabi_dcmpgt>
 800bb5c:	2800      	cmp	r0, #0
 800bb5e:	d1e6      	bne.n	800bb2e <atan+0x3e>
 800bb60:	f04f 3aff 	mov.w	sl, #4294967295
 800bb64:	e02b      	b.n	800bbbe <atan+0xce>
 800bb66:	f000 f963 	bl	800be30 <fabs>
 800bb6a:	4bab      	ldr	r3, [pc, #684]	; (800be18 <atan+0x328>)
 800bb6c:	429e      	cmp	r6, r3
 800bb6e:	ec55 4b10 	vmov	r4, r5, d0
 800bb72:	f300 80bf 	bgt.w	800bcf4 <atan+0x204>
 800bb76:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800bb7a:	429e      	cmp	r6, r3
 800bb7c:	f300 80a0 	bgt.w	800bcc0 <atan+0x1d0>
 800bb80:	ee10 2a10 	vmov	r2, s0
 800bb84:	ee10 0a10 	vmov	r0, s0
 800bb88:	462b      	mov	r3, r5
 800bb8a:	4629      	mov	r1, r5
 800bb8c:	f7f4 fb9e 	bl	80002cc <__adddf3>
 800bb90:	4ba0      	ldr	r3, [pc, #640]	; (800be14 <atan+0x324>)
 800bb92:	2200      	movs	r2, #0
 800bb94:	f7f4 fb98 	bl	80002c8 <__aeabi_dsub>
 800bb98:	2200      	movs	r2, #0
 800bb9a:	4606      	mov	r6, r0
 800bb9c:	460f      	mov	r7, r1
 800bb9e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800bba2:	4620      	mov	r0, r4
 800bba4:	4629      	mov	r1, r5
 800bba6:	f7f4 fb91 	bl	80002cc <__adddf3>
 800bbaa:	4602      	mov	r2, r0
 800bbac:	460b      	mov	r3, r1
 800bbae:	4630      	mov	r0, r6
 800bbb0:	4639      	mov	r1, r7
 800bbb2:	f7f4 fe6b 	bl	800088c <__aeabi_ddiv>
 800bbb6:	f04f 0a00 	mov.w	sl, #0
 800bbba:	4604      	mov	r4, r0
 800bbbc:	460d      	mov	r5, r1
 800bbbe:	4622      	mov	r2, r4
 800bbc0:	462b      	mov	r3, r5
 800bbc2:	4620      	mov	r0, r4
 800bbc4:	4629      	mov	r1, r5
 800bbc6:	f7f4 fd37 	bl	8000638 <__aeabi_dmul>
 800bbca:	4602      	mov	r2, r0
 800bbcc:	460b      	mov	r3, r1
 800bbce:	4680      	mov	r8, r0
 800bbd0:	4689      	mov	r9, r1
 800bbd2:	f7f4 fd31 	bl	8000638 <__aeabi_dmul>
 800bbd6:	a374      	add	r3, pc, #464	; (adr r3, 800bda8 <atan+0x2b8>)
 800bbd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbdc:	4606      	mov	r6, r0
 800bbde:	460f      	mov	r7, r1
 800bbe0:	f7f4 fd2a 	bl	8000638 <__aeabi_dmul>
 800bbe4:	a372      	add	r3, pc, #456	; (adr r3, 800bdb0 <atan+0x2c0>)
 800bbe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbea:	f7f4 fb6f 	bl	80002cc <__adddf3>
 800bbee:	4632      	mov	r2, r6
 800bbf0:	463b      	mov	r3, r7
 800bbf2:	f7f4 fd21 	bl	8000638 <__aeabi_dmul>
 800bbf6:	a370      	add	r3, pc, #448	; (adr r3, 800bdb8 <atan+0x2c8>)
 800bbf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbfc:	f7f4 fb66 	bl	80002cc <__adddf3>
 800bc00:	4632      	mov	r2, r6
 800bc02:	463b      	mov	r3, r7
 800bc04:	f7f4 fd18 	bl	8000638 <__aeabi_dmul>
 800bc08:	a36d      	add	r3, pc, #436	; (adr r3, 800bdc0 <atan+0x2d0>)
 800bc0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc0e:	f7f4 fb5d 	bl	80002cc <__adddf3>
 800bc12:	4632      	mov	r2, r6
 800bc14:	463b      	mov	r3, r7
 800bc16:	f7f4 fd0f 	bl	8000638 <__aeabi_dmul>
 800bc1a:	a36b      	add	r3, pc, #428	; (adr r3, 800bdc8 <atan+0x2d8>)
 800bc1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc20:	f7f4 fb54 	bl	80002cc <__adddf3>
 800bc24:	4632      	mov	r2, r6
 800bc26:	463b      	mov	r3, r7
 800bc28:	f7f4 fd06 	bl	8000638 <__aeabi_dmul>
 800bc2c:	a368      	add	r3, pc, #416	; (adr r3, 800bdd0 <atan+0x2e0>)
 800bc2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc32:	f7f4 fb4b 	bl	80002cc <__adddf3>
 800bc36:	4642      	mov	r2, r8
 800bc38:	464b      	mov	r3, r9
 800bc3a:	f7f4 fcfd 	bl	8000638 <__aeabi_dmul>
 800bc3e:	a366      	add	r3, pc, #408	; (adr r3, 800bdd8 <atan+0x2e8>)
 800bc40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc44:	4680      	mov	r8, r0
 800bc46:	4689      	mov	r9, r1
 800bc48:	4630      	mov	r0, r6
 800bc4a:	4639      	mov	r1, r7
 800bc4c:	f7f4 fcf4 	bl	8000638 <__aeabi_dmul>
 800bc50:	a363      	add	r3, pc, #396	; (adr r3, 800bde0 <atan+0x2f0>)
 800bc52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc56:	f7f4 fb37 	bl	80002c8 <__aeabi_dsub>
 800bc5a:	4632      	mov	r2, r6
 800bc5c:	463b      	mov	r3, r7
 800bc5e:	f7f4 fceb 	bl	8000638 <__aeabi_dmul>
 800bc62:	a361      	add	r3, pc, #388	; (adr r3, 800bde8 <atan+0x2f8>)
 800bc64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc68:	f7f4 fb2e 	bl	80002c8 <__aeabi_dsub>
 800bc6c:	4632      	mov	r2, r6
 800bc6e:	463b      	mov	r3, r7
 800bc70:	f7f4 fce2 	bl	8000638 <__aeabi_dmul>
 800bc74:	a35e      	add	r3, pc, #376	; (adr r3, 800bdf0 <atan+0x300>)
 800bc76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc7a:	f7f4 fb25 	bl	80002c8 <__aeabi_dsub>
 800bc7e:	4632      	mov	r2, r6
 800bc80:	463b      	mov	r3, r7
 800bc82:	f7f4 fcd9 	bl	8000638 <__aeabi_dmul>
 800bc86:	a35c      	add	r3, pc, #368	; (adr r3, 800bdf8 <atan+0x308>)
 800bc88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc8c:	f7f4 fb1c 	bl	80002c8 <__aeabi_dsub>
 800bc90:	4632      	mov	r2, r6
 800bc92:	463b      	mov	r3, r7
 800bc94:	f7f4 fcd0 	bl	8000638 <__aeabi_dmul>
 800bc98:	4602      	mov	r2, r0
 800bc9a:	460b      	mov	r3, r1
 800bc9c:	4640      	mov	r0, r8
 800bc9e:	4649      	mov	r1, r9
 800bca0:	f7f4 fb14 	bl	80002cc <__adddf3>
 800bca4:	4622      	mov	r2, r4
 800bca6:	462b      	mov	r3, r5
 800bca8:	f7f4 fcc6 	bl	8000638 <__aeabi_dmul>
 800bcac:	f1ba 3fff 	cmp.w	sl, #4294967295
 800bcb0:	4602      	mov	r2, r0
 800bcb2:	460b      	mov	r3, r1
 800bcb4:	d14b      	bne.n	800bd4e <atan+0x25e>
 800bcb6:	4620      	mov	r0, r4
 800bcb8:	4629      	mov	r1, r5
 800bcba:	f7f4 fb05 	bl	80002c8 <__aeabi_dsub>
 800bcbe:	e72c      	b.n	800bb1a <atan+0x2a>
 800bcc0:	ee10 0a10 	vmov	r0, s0
 800bcc4:	4b53      	ldr	r3, [pc, #332]	; (800be14 <atan+0x324>)
 800bcc6:	2200      	movs	r2, #0
 800bcc8:	4629      	mov	r1, r5
 800bcca:	f7f4 fafd 	bl	80002c8 <__aeabi_dsub>
 800bcce:	4b51      	ldr	r3, [pc, #324]	; (800be14 <atan+0x324>)
 800bcd0:	4606      	mov	r6, r0
 800bcd2:	460f      	mov	r7, r1
 800bcd4:	2200      	movs	r2, #0
 800bcd6:	4620      	mov	r0, r4
 800bcd8:	4629      	mov	r1, r5
 800bcda:	f7f4 faf7 	bl	80002cc <__adddf3>
 800bcde:	4602      	mov	r2, r0
 800bce0:	460b      	mov	r3, r1
 800bce2:	4630      	mov	r0, r6
 800bce4:	4639      	mov	r1, r7
 800bce6:	f7f4 fdd1 	bl	800088c <__aeabi_ddiv>
 800bcea:	f04f 0a01 	mov.w	sl, #1
 800bcee:	4604      	mov	r4, r0
 800bcf0:	460d      	mov	r5, r1
 800bcf2:	e764      	b.n	800bbbe <atan+0xce>
 800bcf4:	4b49      	ldr	r3, [pc, #292]	; (800be1c <atan+0x32c>)
 800bcf6:	429e      	cmp	r6, r3
 800bcf8:	da1d      	bge.n	800bd36 <atan+0x246>
 800bcfa:	ee10 0a10 	vmov	r0, s0
 800bcfe:	4b48      	ldr	r3, [pc, #288]	; (800be20 <atan+0x330>)
 800bd00:	2200      	movs	r2, #0
 800bd02:	4629      	mov	r1, r5
 800bd04:	f7f4 fae0 	bl	80002c8 <__aeabi_dsub>
 800bd08:	4b45      	ldr	r3, [pc, #276]	; (800be20 <atan+0x330>)
 800bd0a:	4606      	mov	r6, r0
 800bd0c:	460f      	mov	r7, r1
 800bd0e:	2200      	movs	r2, #0
 800bd10:	4620      	mov	r0, r4
 800bd12:	4629      	mov	r1, r5
 800bd14:	f7f4 fc90 	bl	8000638 <__aeabi_dmul>
 800bd18:	4b3e      	ldr	r3, [pc, #248]	; (800be14 <atan+0x324>)
 800bd1a:	2200      	movs	r2, #0
 800bd1c:	f7f4 fad6 	bl	80002cc <__adddf3>
 800bd20:	4602      	mov	r2, r0
 800bd22:	460b      	mov	r3, r1
 800bd24:	4630      	mov	r0, r6
 800bd26:	4639      	mov	r1, r7
 800bd28:	f7f4 fdb0 	bl	800088c <__aeabi_ddiv>
 800bd2c:	f04f 0a02 	mov.w	sl, #2
 800bd30:	4604      	mov	r4, r0
 800bd32:	460d      	mov	r5, r1
 800bd34:	e743      	b.n	800bbbe <atan+0xce>
 800bd36:	462b      	mov	r3, r5
 800bd38:	ee10 2a10 	vmov	r2, s0
 800bd3c:	4939      	ldr	r1, [pc, #228]	; (800be24 <atan+0x334>)
 800bd3e:	2000      	movs	r0, #0
 800bd40:	f7f4 fda4 	bl	800088c <__aeabi_ddiv>
 800bd44:	f04f 0a03 	mov.w	sl, #3
 800bd48:	4604      	mov	r4, r0
 800bd4a:	460d      	mov	r5, r1
 800bd4c:	e737      	b.n	800bbbe <atan+0xce>
 800bd4e:	4b36      	ldr	r3, [pc, #216]	; (800be28 <atan+0x338>)
 800bd50:	4e36      	ldr	r6, [pc, #216]	; (800be2c <atan+0x33c>)
 800bd52:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800bd56:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 800bd5a:	e9da 2300 	ldrd	r2, r3, [sl]
 800bd5e:	f7f4 fab3 	bl	80002c8 <__aeabi_dsub>
 800bd62:	4622      	mov	r2, r4
 800bd64:	462b      	mov	r3, r5
 800bd66:	f7f4 faaf 	bl	80002c8 <__aeabi_dsub>
 800bd6a:	4602      	mov	r2, r0
 800bd6c:	460b      	mov	r3, r1
 800bd6e:	e9d6 0100 	ldrd	r0, r1, [r6]
 800bd72:	f7f4 faa9 	bl	80002c8 <__aeabi_dsub>
 800bd76:	f1bb 0f00 	cmp.w	fp, #0
 800bd7a:	4604      	mov	r4, r0
 800bd7c:	460d      	mov	r5, r1
 800bd7e:	f6bf aed6 	bge.w	800bb2e <atan+0x3e>
 800bd82:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bd86:	461d      	mov	r5, r3
 800bd88:	e6d1      	b.n	800bb2e <atan+0x3e>
 800bd8a:	a51d      	add	r5, pc, #116	; (adr r5, 800be00 <atan+0x310>)
 800bd8c:	e9d5 4500 	ldrd	r4, r5, [r5]
 800bd90:	e6cd      	b.n	800bb2e <atan+0x3e>
 800bd92:	bf00      	nop
 800bd94:	f3af 8000 	nop.w
 800bd98:	54442d18 	.word	0x54442d18
 800bd9c:	bff921fb 	.word	0xbff921fb
 800bda0:	8800759c 	.word	0x8800759c
 800bda4:	7e37e43c 	.word	0x7e37e43c
 800bda8:	e322da11 	.word	0xe322da11
 800bdac:	3f90ad3a 	.word	0x3f90ad3a
 800bdb0:	24760deb 	.word	0x24760deb
 800bdb4:	3fa97b4b 	.word	0x3fa97b4b
 800bdb8:	a0d03d51 	.word	0xa0d03d51
 800bdbc:	3fb10d66 	.word	0x3fb10d66
 800bdc0:	c54c206e 	.word	0xc54c206e
 800bdc4:	3fb745cd 	.word	0x3fb745cd
 800bdc8:	920083ff 	.word	0x920083ff
 800bdcc:	3fc24924 	.word	0x3fc24924
 800bdd0:	5555550d 	.word	0x5555550d
 800bdd4:	3fd55555 	.word	0x3fd55555
 800bdd8:	2c6a6c2f 	.word	0x2c6a6c2f
 800bddc:	bfa2b444 	.word	0xbfa2b444
 800bde0:	52defd9a 	.word	0x52defd9a
 800bde4:	3fadde2d 	.word	0x3fadde2d
 800bde8:	af749a6d 	.word	0xaf749a6d
 800bdec:	3fb3b0f2 	.word	0x3fb3b0f2
 800bdf0:	fe231671 	.word	0xfe231671
 800bdf4:	3fbc71c6 	.word	0x3fbc71c6
 800bdf8:	9998ebc4 	.word	0x9998ebc4
 800bdfc:	3fc99999 	.word	0x3fc99999
 800be00:	54442d18 	.word	0x54442d18
 800be04:	3ff921fb 	.word	0x3ff921fb
 800be08:	440fffff 	.word	0x440fffff
 800be0c:	7ff00000 	.word	0x7ff00000
 800be10:	3fdbffff 	.word	0x3fdbffff
 800be14:	3ff00000 	.word	0x3ff00000
 800be18:	3ff2ffff 	.word	0x3ff2ffff
 800be1c:	40038000 	.word	0x40038000
 800be20:	3ff80000 	.word	0x3ff80000
 800be24:	bff00000 	.word	0xbff00000
 800be28:	0800c390 	.word	0x0800c390
 800be2c:	0800c370 	.word	0x0800c370

0800be30 <fabs>:
 800be30:	ec51 0b10 	vmov	r0, r1, d0
 800be34:	ee10 2a10 	vmov	r2, s0
 800be38:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800be3c:	ec43 2b10 	vmov	d0, r2, r3
 800be40:	4770      	bx	lr
	...

0800be44 <_init>:
 800be44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be46:	bf00      	nop
 800be48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800be4a:	bc08      	pop	{r3}
 800be4c:	469e      	mov	lr, r3
 800be4e:	4770      	bx	lr

0800be50 <_fini>:
 800be50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be52:	bf00      	nop
 800be54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800be56:	bc08      	pop	{r3}
 800be58:	469e      	mov	lr, r3
 800be5a:	4770      	bx	lr
