
Test_Stepper.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006ec4  080001c8  080001c8  000101c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08007090  08007090  00017090  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007118  08007118  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  08007118  08007118  00017118  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007120  08007120  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007120  08007120  00017120  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007124  08007124  00017124  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08007128  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002b0  20000080  080071a4  00020080  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000330  080071a4  00020330  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011985  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002457  00000000  00000000  00031a31  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001058  00000000  00000000  00033e88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f98  00000000  00000000  00034ee0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002294d  00000000  00000000  00035e78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000129fe  00000000  00000000  000587c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d4384  00000000  00000000  0006b1c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000c1  00000000  00000000  0013f547  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000048bc  00000000  00000000  0013f608  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000080 	.word	0x20000080
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08007074 	.word	0x08007074

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000084 	.word	0x20000084
 8000204:	08007074 	.word	0x08007074

08000208 <__aeabi_drsub>:
 8000208:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800020c:	e002      	b.n	8000214 <__adddf3>
 800020e:	bf00      	nop

08000210 <__aeabi_dsub>:
 8000210:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000214 <__adddf3>:
 8000214:	b530      	push	{r4, r5, lr}
 8000216:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800021a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021e:	ea94 0f05 	teq	r4, r5
 8000222:	bf08      	it	eq
 8000224:	ea90 0f02 	teqeq	r0, r2
 8000228:	bf1f      	itttt	ne
 800022a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000232:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000236:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800023a:	f000 80e2 	beq.w	8000402 <__adddf3+0x1ee>
 800023e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000242:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000246:	bfb8      	it	lt
 8000248:	426d      	neglt	r5, r5
 800024a:	dd0c      	ble.n	8000266 <__adddf3+0x52>
 800024c:	442c      	add	r4, r5
 800024e:	ea80 0202 	eor.w	r2, r0, r2
 8000252:	ea81 0303 	eor.w	r3, r1, r3
 8000256:	ea82 0000 	eor.w	r0, r2, r0
 800025a:	ea83 0101 	eor.w	r1, r3, r1
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	2d36      	cmp	r5, #54	; 0x36
 8000268:	bf88      	it	hi
 800026a:	bd30      	pophi	{r4, r5, pc}
 800026c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000270:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000274:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000278:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800027c:	d002      	beq.n	8000284 <__adddf3+0x70>
 800027e:	4240      	negs	r0, r0
 8000280:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000284:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000288:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800028c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000290:	d002      	beq.n	8000298 <__adddf3+0x84>
 8000292:	4252      	negs	r2, r2
 8000294:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000298:	ea94 0f05 	teq	r4, r5
 800029c:	f000 80a7 	beq.w	80003ee <__adddf3+0x1da>
 80002a0:	f1a4 0401 	sub.w	r4, r4, #1
 80002a4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a8:	db0d      	blt.n	80002c6 <__adddf3+0xb2>
 80002aa:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ae:	fa22 f205 	lsr.w	r2, r2, r5
 80002b2:	1880      	adds	r0, r0, r2
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002bc:	1880      	adds	r0, r0, r2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	4159      	adcs	r1, r3
 80002c4:	e00e      	b.n	80002e4 <__adddf3+0xd0>
 80002c6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ca:	f10e 0e20 	add.w	lr, lr, #32
 80002ce:	2a01      	cmp	r2, #1
 80002d0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d4:	bf28      	it	cs
 80002d6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002da:	fa43 f305 	asr.w	r3, r3, r5
 80002de:	18c0      	adds	r0, r0, r3
 80002e0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002e8:	d507      	bpl.n	80002fa <__adddf3+0xe6>
 80002ea:	f04f 0e00 	mov.w	lr, #0
 80002ee:	f1dc 0c00 	rsbs	ip, ip, #0
 80002f2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002fa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002fe:	d31b      	bcc.n	8000338 <__adddf3+0x124>
 8000300:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000304:	d30c      	bcc.n	8000320 <__adddf3+0x10c>
 8000306:	0849      	lsrs	r1, r1, #1
 8000308:	ea5f 0030 	movs.w	r0, r0, rrx
 800030c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000310:	f104 0401 	add.w	r4, r4, #1
 8000314:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000318:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800031c:	f080 809a 	bcs.w	8000454 <__adddf3+0x240>
 8000320:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	ea41 0105 	orr.w	r1, r1, r5
 8000336:	bd30      	pop	{r4, r5, pc}
 8000338:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800033c:	4140      	adcs	r0, r0
 800033e:	eb41 0101 	adc.w	r1, r1, r1
 8000342:	3c01      	subs	r4, #1
 8000344:	bf28      	it	cs
 8000346:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800034a:	d2e9      	bcs.n	8000320 <__adddf3+0x10c>
 800034c:	f091 0f00 	teq	r1, #0
 8000350:	bf04      	itt	eq
 8000352:	4601      	moveq	r1, r0
 8000354:	2000      	moveq	r0, #0
 8000356:	fab1 f381 	clz	r3, r1
 800035a:	bf08      	it	eq
 800035c:	3320      	addeq	r3, #32
 800035e:	f1a3 030b 	sub.w	r3, r3, #11
 8000362:	f1b3 0220 	subs.w	r2, r3, #32
 8000366:	da0c      	bge.n	8000382 <__adddf3+0x16e>
 8000368:	320c      	adds	r2, #12
 800036a:	dd08      	ble.n	800037e <__adddf3+0x16a>
 800036c:	f102 0c14 	add.w	ip, r2, #20
 8000370:	f1c2 020c 	rsb	r2, r2, #12
 8000374:	fa01 f00c 	lsl.w	r0, r1, ip
 8000378:	fa21 f102 	lsr.w	r1, r1, r2
 800037c:	e00c      	b.n	8000398 <__adddf3+0x184>
 800037e:	f102 0214 	add.w	r2, r2, #20
 8000382:	bfd8      	it	le
 8000384:	f1c2 0c20 	rsble	ip, r2, #32
 8000388:	fa01 f102 	lsl.w	r1, r1, r2
 800038c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000390:	bfdc      	itt	le
 8000392:	ea41 010c 	orrle.w	r1, r1, ip
 8000396:	4090      	lslle	r0, r2
 8000398:	1ae4      	subs	r4, r4, r3
 800039a:	bfa2      	ittt	ge
 800039c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a0:	4329      	orrge	r1, r5
 80003a2:	bd30      	popge	{r4, r5, pc}
 80003a4:	ea6f 0404 	mvn.w	r4, r4
 80003a8:	3c1f      	subs	r4, #31
 80003aa:	da1c      	bge.n	80003e6 <__adddf3+0x1d2>
 80003ac:	340c      	adds	r4, #12
 80003ae:	dc0e      	bgt.n	80003ce <__adddf3+0x1ba>
 80003b0:	f104 0414 	add.w	r4, r4, #20
 80003b4:	f1c4 0220 	rsb	r2, r4, #32
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f302 	lsl.w	r3, r1, r2
 80003c0:	ea40 0003 	orr.w	r0, r0, r3
 80003c4:	fa21 f304 	lsr.w	r3, r1, r4
 80003c8:	ea45 0103 	orr.w	r1, r5, r3
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f1c4 040c 	rsb	r4, r4, #12
 80003d2:	f1c4 0220 	rsb	r2, r4, #32
 80003d6:	fa20 f002 	lsr.w	r0, r0, r2
 80003da:	fa01 f304 	lsl.w	r3, r1, r4
 80003de:	ea40 0003 	orr.w	r0, r0, r3
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f094 0f00 	teq	r4, #0
 80003f2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003f6:	bf06      	itte	eq
 80003f8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003fc:	3401      	addeq	r4, #1
 80003fe:	3d01      	subne	r5, #1
 8000400:	e74e      	b.n	80002a0 <__adddf3+0x8c>
 8000402:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000406:	bf18      	it	ne
 8000408:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800040c:	d029      	beq.n	8000462 <__adddf3+0x24e>
 800040e:	ea94 0f05 	teq	r4, r5
 8000412:	bf08      	it	eq
 8000414:	ea90 0f02 	teqeq	r0, r2
 8000418:	d005      	beq.n	8000426 <__adddf3+0x212>
 800041a:	ea54 0c00 	orrs.w	ip, r4, r0
 800041e:	bf04      	itt	eq
 8000420:	4619      	moveq	r1, r3
 8000422:	4610      	moveq	r0, r2
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	ea91 0f03 	teq	r1, r3
 800042a:	bf1e      	ittt	ne
 800042c:	2100      	movne	r1, #0
 800042e:	2000      	movne	r0, #0
 8000430:	bd30      	popne	{r4, r5, pc}
 8000432:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000436:	d105      	bne.n	8000444 <__adddf3+0x230>
 8000438:	0040      	lsls	r0, r0, #1
 800043a:	4149      	adcs	r1, r1
 800043c:	bf28      	it	cs
 800043e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000442:	bd30      	pop	{r4, r5, pc}
 8000444:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000448:	bf3c      	itt	cc
 800044a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800044e:	bd30      	popcc	{r4, r5, pc}
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000466:	bf1a      	itte	ne
 8000468:	4619      	movne	r1, r3
 800046a:	4610      	movne	r0, r2
 800046c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000470:	bf1c      	itt	ne
 8000472:	460b      	movne	r3, r1
 8000474:	4602      	movne	r2, r0
 8000476:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800047a:	bf06      	itte	eq
 800047c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000480:	ea91 0f03 	teqeq	r1, r3
 8000484:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	bf00      	nop

0800048c <__aeabi_ui2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a0:	f04f 0500 	mov.w	r5, #0
 80004a4:	f04f 0100 	mov.w	r1, #0
 80004a8:	e750      	b.n	800034c <__adddf3+0x138>
 80004aa:	bf00      	nop

080004ac <__aeabi_i2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004c4:	bf48      	it	mi
 80004c6:	4240      	negmi	r0, r0
 80004c8:	f04f 0100 	mov.w	r1, #0
 80004cc:	e73e      	b.n	800034c <__adddf3+0x138>
 80004ce:	bf00      	nop

080004d0 <__aeabi_f2d>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004da:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004de:	bf1f      	itttt	ne
 80004e0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004e4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004e8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ec:	4770      	bxne	lr
 80004ee:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004f2:	bf08      	it	eq
 80004f4:	4770      	bxeq	lr
 80004f6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004fa:	bf04      	itt	eq
 80004fc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000500:	4770      	bxeq	lr
 8000502:	b530      	push	{r4, r5, lr}
 8000504:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000510:	e71c      	b.n	800034c <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_ul2d>:
 8000514:	ea50 0201 	orrs.w	r2, r0, r1
 8000518:	bf08      	it	eq
 800051a:	4770      	bxeq	lr
 800051c:	b530      	push	{r4, r5, lr}
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	e00a      	b.n	800053a <__aeabi_l2d+0x16>

08000524 <__aeabi_l2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000532:	d502      	bpl.n	800053a <__aeabi_l2d+0x16>
 8000534:	4240      	negs	r0, r0
 8000536:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800053a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800053e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000542:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000546:	f43f aed8 	beq.w	80002fa <__adddf3+0xe6>
 800054a:	f04f 0203 	mov.w	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000562:	f1c2 0320 	rsb	r3, r2, #32
 8000566:	fa00 fc03 	lsl.w	ip, r0, r3
 800056a:	fa20 f002 	lsr.w	r0, r0, r2
 800056e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000572:	ea40 000e 	orr.w	r0, r0, lr
 8000576:	fa21 f102 	lsr.w	r1, r1, r2
 800057a:	4414      	add	r4, r2
 800057c:	e6bd      	b.n	80002fa <__adddf3+0xe6>
 800057e:	bf00      	nop

08000580 <__aeabi_dmul>:
 8000580:	b570      	push	{r4, r5, r6, lr}
 8000582:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000586:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800058a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800058e:	bf1d      	ittte	ne
 8000590:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000594:	ea94 0f0c 	teqne	r4, ip
 8000598:	ea95 0f0c 	teqne	r5, ip
 800059c:	f000 f8de 	bleq	800075c <__aeabi_dmul+0x1dc>
 80005a0:	442c      	add	r4, r5
 80005a2:	ea81 0603 	eor.w	r6, r1, r3
 80005a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005b2:	bf18      	it	ne
 80005b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005c0:	d038      	beq.n	8000634 <__aeabi_dmul+0xb4>
 80005c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005d6:	f04f 0600 	mov.w	r6, #0
 80005da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005de:	f09c 0f00 	teq	ip, #0
 80005e2:	bf18      	it	ne
 80005e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005f4:	d204      	bcs.n	8000600 <__aeabi_dmul+0x80>
 80005f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005fa:	416d      	adcs	r5, r5
 80005fc:	eb46 0606 	adc.w	r6, r6, r6
 8000600:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000604:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000608:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800060c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000610:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000614:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000618:	bf88      	it	hi
 800061a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800061e:	d81e      	bhi.n	800065e <__aeabi_dmul+0xde>
 8000620:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000624:	bf08      	it	eq
 8000626:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800062a:	f150 0000 	adcs.w	r0, r0, #0
 800062e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000638:	ea46 0101 	orr.w	r1, r6, r1
 800063c:	ea40 0002 	orr.w	r0, r0, r2
 8000640:	ea81 0103 	eor.w	r1, r1, r3
 8000644:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000648:	bfc2      	ittt	gt
 800064a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800064e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000652:	bd70      	popgt	{r4, r5, r6, pc}
 8000654:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000658:	f04f 0e00 	mov.w	lr, #0
 800065c:	3c01      	subs	r4, #1
 800065e:	f300 80ab 	bgt.w	80007b8 <__aeabi_dmul+0x238>
 8000662:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000666:	bfde      	ittt	le
 8000668:	2000      	movle	r0, #0
 800066a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800066e:	bd70      	pople	{r4, r5, r6, pc}
 8000670:	f1c4 0400 	rsb	r4, r4, #0
 8000674:	3c20      	subs	r4, #32
 8000676:	da35      	bge.n	80006e4 <__aeabi_dmul+0x164>
 8000678:	340c      	adds	r4, #12
 800067a:	dc1b      	bgt.n	80006b4 <__aeabi_dmul+0x134>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f305 	lsl.w	r3, r0, r5
 8000688:	fa20 f004 	lsr.w	r0, r0, r4
 800068c:	fa01 f205 	lsl.w	r2, r1, r5
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000698:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800069c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a0:	fa21 f604 	lsr.w	r6, r1, r4
 80006a4:	eb42 0106 	adc.w	r1, r2, r6
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 040c 	rsb	r4, r4, #12
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f304 	lsl.w	r3, r0, r4
 80006c0:	fa20 f005 	lsr.w	r0, r0, r5
 80006c4:	fa01 f204 	lsl.w	r2, r1, r4
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d4:	f141 0100 	adc.w	r1, r1, #0
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 0520 	rsb	r5, r4, #32
 80006e8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80006f0:	fa20 f304 	lsr.w	r3, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea43 0302 	orr.w	r3, r3, r2
 80006fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	fa21 f204 	lsr.w	r2, r1, r4
 8000708:	ea20 0002 	bic.w	r0, r0, r2
 800070c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f094 0f00 	teq	r4, #0
 8000720:	d10f      	bne.n	8000742 <__aeabi_dmul+0x1c2>
 8000722:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000726:	0040      	lsls	r0, r0, #1
 8000728:	eb41 0101 	adc.w	r1, r1, r1
 800072c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000730:	bf08      	it	eq
 8000732:	3c01      	subeq	r4, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1a6>
 8000736:	ea41 0106 	orr.w	r1, r1, r6
 800073a:	f095 0f00 	teq	r5, #0
 800073e:	bf18      	it	ne
 8000740:	4770      	bxne	lr
 8000742:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000746:	0052      	lsls	r2, r2, #1
 8000748:	eb43 0303 	adc.w	r3, r3, r3
 800074c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000750:	bf08      	it	eq
 8000752:	3d01      	subeq	r5, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1c6>
 8000756:	ea43 0306 	orr.w	r3, r3, r6
 800075a:	4770      	bx	lr
 800075c:	ea94 0f0c 	teq	r4, ip
 8000760:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000764:	bf18      	it	ne
 8000766:	ea95 0f0c 	teqne	r5, ip
 800076a:	d00c      	beq.n	8000786 <__aeabi_dmul+0x206>
 800076c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000770:	bf18      	it	ne
 8000772:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000776:	d1d1      	bne.n	800071c <__aeabi_dmul+0x19c>
 8000778:	ea81 0103 	eor.w	r1, r1, r3
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000780:	f04f 0000 	mov.w	r0, #0
 8000784:	bd70      	pop	{r4, r5, r6, pc}
 8000786:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800078a:	bf06      	itte	eq
 800078c:	4610      	moveq	r0, r2
 800078e:	4619      	moveq	r1, r3
 8000790:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000794:	d019      	beq.n	80007ca <__aeabi_dmul+0x24a>
 8000796:	ea94 0f0c 	teq	r4, ip
 800079a:	d102      	bne.n	80007a2 <__aeabi_dmul+0x222>
 800079c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007a0:	d113      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007a2:	ea95 0f0c 	teq	r5, ip
 80007a6:	d105      	bne.n	80007b4 <__aeabi_dmul+0x234>
 80007a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007ac:	bf1c      	itt	ne
 80007ae:	4610      	movne	r0, r2
 80007b0:	4619      	movne	r1, r3
 80007b2:	d10a      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007b4:	ea81 0103 	eor.w	r1, r1, r3
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007c4:	f04f 0000 	mov.w	r0, #0
 80007c8:	bd70      	pop	{r4, r5, r6, pc}
 80007ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007d2:	bd70      	pop	{r4, r5, r6, pc}

080007d4 <__aeabi_ddiv>:
 80007d4:	b570      	push	{r4, r5, r6, lr}
 80007d6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007da:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007e2:	bf1d      	ittte	ne
 80007e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e8:	ea94 0f0c 	teqne	r4, ip
 80007ec:	ea95 0f0c 	teqne	r5, ip
 80007f0:	f000 f8a7 	bleq	8000942 <__aeabi_ddiv+0x16e>
 80007f4:	eba4 0405 	sub.w	r4, r4, r5
 80007f8:	ea81 0e03 	eor.w	lr, r1, r3
 80007fc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000800:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000804:	f000 8088 	beq.w	8000918 <__aeabi_ddiv+0x144>
 8000808:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800080c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000810:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000814:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000818:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800081c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000820:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000824:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000828:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800082c:	429d      	cmp	r5, r3
 800082e:	bf08      	it	eq
 8000830:	4296      	cmpeq	r6, r2
 8000832:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000836:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800083a:	d202      	bcs.n	8000842 <__aeabi_ddiv+0x6e>
 800083c:	085b      	lsrs	r3, r3, #1
 800083e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000842:	1ab6      	subs	r6, r6, r2
 8000844:	eb65 0503 	sbc.w	r5, r5, r3
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000852:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 000c 	orrcs.w	r0, r0, ip
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008b0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008b4:	d018      	beq.n	80008e8 <__aeabi_ddiv+0x114>
 80008b6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ba:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008be:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008c2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008c6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ca:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ce:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008d2:	d1c0      	bne.n	8000856 <__aeabi_ddiv+0x82>
 80008d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d8:	d10b      	bne.n	80008f2 <__aeabi_ddiv+0x11e>
 80008da:	ea41 0100 	orr.w	r1, r1, r0
 80008de:	f04f 0000 	mov.w	r0, #0
 80008e2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008e6:	e7b6      	b.n	8000856 <__aeabi_ddiv+0x82>
 80008e8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ec:	bf04      	itt	eq
 80008ee:	4301      	orreq	r1, r0
 80008f0:	2000      	moveq	r0, #0
 80008f2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008f6:	bf88      	it	hi
 80008f8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008fc:	f63f aeaf 	bhi.w	800065e <__aeabi_dmul+0xde>
 8000900:	ebb5 0c03 	subs.w	ip, r5, r3
 8000904:	bf04      	itt	eq
 8000906:	ebb6 0c02 	subseq.w	ip, r6, r2
 800090a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800090e:	f150 0000 	adcs.w	r0, r0, #0
 8000912:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000916:	bd70      	pop	{r4, r5, r6, pc}
 8000918:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800091c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000920:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000924:	bfc2      	ittt	gt
 8000926:	ebd4 050c 	rsbsgt	r5, r4, ip
 800092a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800092e:	bd70      	popgt	{r4, r5, r6, pc}
 8000930:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000934:	f04f 0e00 	mov.w	lr, #0
 8000938:	3c01      	subs	r4, #1
 800093a:	e690      	b.n	800065e <__aeabi_dmul+0xde>
 800093c:	ea45 0e06 	orr.w	lr, r5, r6
 8000940:	e68d      	b.n	800065e <__aeabi_dmul+0xde>
 8000942:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000946:	ea94 0f0c 	teq	r4, ip
 800094a:	bf08      	it	eq
 800094c:	ea95 0f0c 	teqeq	r5, ip
 8000950:	f43f af3b 	beq.w	80007ca <__aeabi_dmul+0x24a>
 8000954:	ea94 0f0c 	teq	r4, ip
 8000958:	d10a      	bne.n	8000970 <__aeabi_ddiv+0x19c>
 800095a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800095e:	f47f af34 	bne.w	80007ca <__aeabi_dmul+0x24a>
 8000962:	ea95 0f0c 	teq	r5, ip
 8000966:	f47f af25 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800096a:	4610      	mov	r0, r2
 800096c:	4619      	mov	r1, r3
 800096e:	e72c      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000970:	ea95 0f0c 	teq	r5, ip
 8000974:	d106      	bne.n	8000984 <__aeabi_ddiv+0x1b0>
 8000976:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800097a:	f43f aefd 	beq.w	8000778 <__aeabi_dmul+0x1f8>
 800097e:	4610      	mov	r0, r2
 8000980:	4619      	mov	r1, r3
 8000982:	e722      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000984:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800098e:	f47f aec5 	bne.w	800071c <__aeabi_dmul+0x19c>
 8000992:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000996:	f47f af0d 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800099a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800099e:	f47f aeeb 	bne.w	8000778 <__aeabi_dmul+0x1f8>
 80009a2:	e712      	b.n	80007ca <__aeabi_dmul+0x24a>

080009a4 <__gedf2>:
 80009a4:	f04f 3cff 	mov.w	ip, #4294967295
 80009a8:	e006      	b.n	80009b8 <__cmpdf2+0x4>
 80009aa:	bf00      	nop

080009ac <__ledf2>:
 80009ac:	f04f 0c01 	mov.w	ip, #1
 80009b0:	e002      	b.n	80009b8 <__cmpdf2+0x4>
 80009b2:	bf00      	nop

080009b4 <__cmpdf2>:
 80009b4:	f04f 0c01 	mov.w	ip, #1
 80009b8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009bc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009c0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009c4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009c8:	bf18      	it	ne
 80009ca:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ce:	d01b      	beq.n	8000a08 <__cmpdf2+0x54>
 80009d0:	b001      	add	sp, #4
 80009d2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009d6:	bf0c      	ite	eq
 80009d8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009dc:	ea91 0f03 	teqne	r1, r3
 80009e0:	bf02      	ittt	eq
 80009e2:	ea90 0f02 	teqeq	r0, r2
 80009e6:	2000      	moveq	r0, #0
 80009e8:	4770      	bxeq	lr
 80009ea:	f110 0f00 	cmn.w	r0, #0
 80009ee:	ea91 0f03 	teq	r1, r3
 80009f2:	bf58      	it	pl
 80009f4:	4299      	cmppl	r1, r3
 80009f6:	bf08      	it	eq
 80009f8:	4290      	cmpeq	r0, r2
 80009fa:	bf2c      	ite	cs
 80009fc:	17d8      	asrcs	r0, r3, #31
 80009fe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a02:	f040 0001 	orr.w	r0, r0, #1
 8000a06:	4770      	bx	lr
 8000a08:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a0c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a10:	d102      	bne.n	8000a18 <__cmpdf2+0x64>
 8000a12:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a16:	d107      	bne.n	8000a28 <__cmpdf2+0x74>
 8000a18:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d1d6      	bne.n	80009d0 <__cmpdf2+0x1c>
 8000a22:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a26:	d0d3      	beq.n	80009d0 <__cmpdf2+0x1c>
 8000a28:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop

08000a30 <__aeabi_cdrcmple>:
 8000a30:	4684      	mov	ip, r0
 8000a32:	4610      	mov	r0, r2
 8000a34:	4662      	mov	r2, ip
 8000a36:	468c      	mov	ip, r1
 8000a38:	4619      	mov	r1, r3
 8000a3a:	4663      	mov	r3, ip
 8000a3c:	e000      	b.n	8000a40 <__aeabi_cdcmpeq>
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdcmpeq>:
 8000a40:	b501      	push	{r0, lr}
 8000a42:	f7ff ffb7 	bl	80009b4 <__cmpdf2>
 8000a46:	2800      	cmp	r0, #0
 8000a48:	bf48      	it	mi
 8000a4a:	f110 0f00 	cmnmi.w	r0, #0
 8000a4e:	bd01      	pop	{r0, pc}

08000a50 <__aeabi_dcmpeq>:
 8000a50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a54:	f7ff fff4 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a58:	bf0c      	ite	eq
 8000a5a:	2001      	moveq	r0, #1
 8000a5c:	2000      	movne	r0, #0
 8000a5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a62:	bf00      	nop

08000a64 <__aeabi_dcmplt>:
 8000a64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a68:	f7ff ffea 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a6c:	bf34      	ite	cc
 8000a6e:	2001      	movcc	r0, #1
 8000a70:	2000      	movcs	r0, #0
 8000a72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a76:	bf00      	nop

08000a78 <__aeabi_dcmple>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff ffe0 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a80:	bf94      	ite	ls
 8000a82:	2001      	movls	r0, #1
 8000a84:	2000      	movhi	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmpge>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffce 	bl	8000a30 <__aeabi_cdrcmple>
 8000a94:	bf94      	ite	ls
 8000a96:	2001      	movls	r0, #1
 8000a98:	2000      	movhi	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmpgt>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffc4 	bl	8000a30 <__aeabi_cdrcmple>
 8000aa8:	bf34      	ite	cc
 8000aaa:	2001      	movcc	r0, #1
 8000aac:	2000      	movcs	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpun>:
 8000ab4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000abc:	d102      	bne.n	8000ac4 <__aeabi_dcmpun+0x10>
 8000abe:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ac2:	d10a      	bne.n	8000ada <__aeabi_dcmpun+0x26>
 8000ac4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000acc:	d102      	bne.n	8000ad4 <__aeabi_dcmpun+0x20>
 8000ace:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ad2:	d102      	bne.n	8000ada <__aeabi_dcmpun+0x26>
 8000ad4:	f04f 0000 	mov.w	r0, #0
 8000ad8:	4770      	bx	lr
 8000ada:	f04f 0001 	mov.w	r0, #1
 8000ade:	4770      	bx	lr

08000ae0 <__aeabi_d2f>:
 8000ae0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ae4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ae8:	bf24      	itt	cs
 8000aea:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000aee:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000af2:	d90d      	bls.n	8000b10 <__aeabi_d2f+0x30>
 8000af4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000af8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000afc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b00:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b04:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b08:	bf08      	it	eq
 8000b0a:	f020 0001 	biceq.w	r0, r0, #1
 8000b0e:	4770      	bx	lr
 8000b10:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b14:	d121      	bne.n	8000b5a <__aeabi_d2f+0x7a>
 8000b16:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b1a:	bfbc      	itt	lt
 8000b1c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b20:	4770      	bxlt	lr
 8000b22:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b26:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b2a:	f1c2 0218 	rsb	r2, r2, #24
 8000b2e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b32:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b36:	fa20 f002 	lsr.w	r0, r0, r2
 8000b3a:	bf18      	it	ne
 8000b3c:	f040 0001 	orrne.w	r0, r0, #1
 8000b40:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b44:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b48:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b4c:	ea40 000c 	orr.w	r0, r0, ip
 8000b50:	fa23 f302 	lsr.w	r3, r3, r2
 8000b54:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b58:	e7cc      	b.n	8000af4 <__aeabi_d2f+0x14>
 8000b5a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b5e:	d107      	bne.n	8000b70 <__aeabi_d2f+0x90>
 8000b60:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b64:	bf1e      	ittt	ne
 8000b66:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b6a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b6e:	4770      	bxne	lr
 8000b70:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b74:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b78:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b7c:	4770      	bx	lr
 8000b7e:	bf00      	nop

08000b80 <__aeabi_uldivmod>:
 8000b80:	b953      	cbnz	r3, 8000b98 <__aeabi_uldivmod+0x18>
 8000b82:	b94a      	cbnz	r2, 8000b98 <__aeabi_uldivmod+0x18>
 8000b84:	2900      	cmp	r1, #0
 8000b86:	bf08      	it	eq
 8000b88:	2800      	cmpeq	r0, #0
 8000b8a:	bf1c      	itt	ne
 8000b8c:	f04f 31ff 	movne.w	r1, #4294967295
 8000b90:	f04f 30ff 	movne.w	r0, #4294967295
 8000b94:	f000 b96e 	b.w	8000e74 <__aeabi_idiv0>
 8000b98:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b9c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ba0:	f000 f806 	bl	8000bb0 <__udivmoddi4>
 8000ba4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ba8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bac:	b004      	add	sp, #16
 8000bae:	4770      	bx	lr

08000bb0 <__udivmoddi4>:
 8000bb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bb4:	9d08      	ldr	r5, [sp, #32]
 8000bb6:	4604      	mov	r4, r0
 8000bb8:	468c      	mov	ip, r1
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	f040 8083 	bne.w	8000cc6 <__udivmoddi4+0x116>
 8000bc0:	428a      	cmp	r2, r1
 8000bc2:	4617      	mov	r7, r2
 8000bc4:	d947      	bls.n	8000c56 <__udivmoddi4+0xa6>
 8000bc6:	fab2 f282 	clz	r2, r2
 8000bca:	b142      	cbz	r2, 8000bde <__udivmoddi4+0x2e>
 8000bcc:	f1c2 0020 	rsb	r0, r2, #32
 8000bd0:	fa24 f000 	lsr.w	r0, r4, r0
 8000bd4:	4091      	lsls	r1, r2
 8000bd6:	4097      	lsls	r7, r2
 8000bd8:	ea40 0c01 	orr.w	ip, r0, r1
 8000bdc:	4094      	lsls	r4, r2
 8000bde:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000be2:	0c23      	lsrs	r3, r4, #16
 8000be4:	fbbc f6f8 	udiv	r6, ip, r8
 8000be8:	fa1f fe87 	uxth.w	lr, r7
 8000bec:	fb08 c116 	mls	r1, r8, r6, ip
 8000bf0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bf4:	fb06 f10e 	mul.w	r1, r6, lr
 8000bf8:	4299      	cmp	r1, r3
 8000bfa:	d909      	bls.n	8000c10 <__udivmoddi4+0x60>
 8000bfc:	18fb      	adds	r3, r7, r3
 8000bfe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c02:	f080 8119 	bcs.w	8000e38 <__udivmoddi4+0x288>
 8000c06:	4299      	cmp	r1, r3
 8000c08:	f240 8116 	bls.w	8000e38 <__udivmoddi4+0x288>
 8000c0c:	3e02      	subs	r6, #2
 8000c0e:	443b      	add	r3, r7
 8000c10:	1a5b      	subs	r3, r3, r1
 8000c12:	b2a4      	uxth	r4, r4
 8000c14:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c18:	fb08 3310 	mls	r3, r8, r0, r3
 8000c1c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c20:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c24:	45a6      	cmp	lr, r4
 8000c26:	d909      	bls.n	8000c3c <__udivmoddi4+0x8c>
 8000c28:	193c      	adds	r4, r7, r4
 8000c2a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c2e:	f080 8105 	bcs.w	8000e3c <__udivmoddi4+0x28c>
 8000c32:	45a6      	cmp	lr, r4
 8000c34:	f240 8102 	bls.w	8000e3c <__udivmoddi4+0x28c>
 8000c38:	3802      	subs	r0, #2
 8000c3a:	443c      	add	r4, r7
 8000c3c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c40:	eba4 040e 	sub.w	r4, r4, lr
 8000c44:	2600      	movs	r6, #0
 8000c46:	b11d      	cbz	r5, 8000c50 <__udivmoddi4+0xa0>
 8000c48:	40d4      	lsrs	r4, r2
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	e9c5 4300 	strd	r4, r3, [r5]
 8000c50:	4631      	mov	r1, r6
 8000c52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c56:	b902      	cbnz	r2, 8000c5a <__udivmoddi4+0xaa>
 8000c58:	deff      	udf	#255	; 0xff
 8000c5a:	fab2 f282 	clz	r2, r2
 8000c5e:	2a00      	cmp	r2, #0
 8000c60:	d150      	bne.n	8000d04 <__udivmoddi4+0x154>
 8000c62:	1bcb      	subs	r3, r1, r7
 8000c64:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c68:	fa1f f887 	uxth.w	r8, r7
 8000c6c:	2601      	movs	r6, #1
 8000c6e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c72:	0c21      	lsrs	r1, r4, #16
 8000c74:	fb0e 331c 	mls	r3, lr, ip, r3
 8000c78:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c7c:	fb08 f30c 	mul.w	r3, r8, ip
 8000c80:	428b      	cmp	r3, r1
 8000c82:	d907      	bls.n	8000c94 <__udivmoddi4+0xe4>
 8000c84:	1879      	adds	r1, r7, r1
 8000c86:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c8a:	d202      	bcs.n	8000c92 <__udivmoddi4+0xe2>
 8000c8c:	428b      	cmp	r3, r1
 8000c8e:	f200 80e9 	bhi.w	8000e64 <__udivmoddi4+0x2b4>
 8000c92:	4684      	mov	ip, r0
 8000c94:	1ac9      	subs	r1, r1, r3
 8000c96:	b2a3      	uxth	r3, r4
 8000c98:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c9c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ca0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000ca4:	fb08 f800 	mul.w	r8, r8, r0
 8000ca8:	45a0      	cmp	r8, r4
 8000caa:	d907      	bls.n	8000cbc <__udivmoddi4+0x10c>
 8000cac:	193c      	adds	r4, r7, r4
 8000cae:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cb2:	d202      	bcs.n	8000cba <__udivmoddi4+0x10a>
 8000cb4:	45a0      	cmp	r8, r4
 8000cb6:	f200 80d9 	bhi.w	8000e6c <__udivmoddi4+0x2bc>
 8000cba:	4618      	mov	r0, r3
 8000cbc:	eba4 0408 	sub.w	r4, r4, r8
 8000cc0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cc4:	e7bf      	b.n	8000c46 <__udivmoddi4+0x96>
 8000cc6:	428b      	cmp	r3, r1
 8000cc8:	d909      	bls.n	8000cde <__udivmoddi4+0x12e>
 8000cca:	2d00      	cmp	r5, #0
 8000ccc:	f000 80b1 	beq.w	8000e32 <__udivmoddi4+0x282>
 8000cd0:	2600      	movs	r6, #0
 8000cd2:	e9c5 0100 	strd	r0, r1, [r5]
 8000cd6:	4630      	mov	r0, r6
 8000cd8:	4631      	mov	r1, r6
 8000cda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cde:	fab3 f683 	clz	r6, r3
 8000ce2:	2e00      	cmp	r6, #0
 8000ce4:	d14a      	bne.n	8000d7c <__udivmoddi4+0x1cc>
 8000ce6:	428b      	cmp	r3, r1
 8000ce8:	d302      	bcc.n	8000cf0 <__udivmoddi4+0x140>
 8000cea:	4282      	cmp	r2, r0
 8000cec:	f200 80b8 	bhi.w	8000e60 <__udivmoddi4+0x2b0>
 8000cf0:	1a84      	subs	r4, r0, r2
 8000cf2:	eb61 0103 	sbc.w	r1, r1, r3
 8000cf6:	2001      	movs	r0, #1
 8000cf8:	468c      	mov	ip, r1
 8000cfa:	2d00      	cmp	r5, #0
 8000cfc:	d0a8      	beq.n	8000c50 <__udivmoddi4+0xa0>
 8000cfe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d02:	e7a5      	b.n	8000c50 <__udivmoddi4+0xa0>
 8000d04:	f1c2 0320 	rsb	r3, r2, #32
 8000d08:	fa20 f603 	lsr.w	r6, r0, r3
 8000d0c:	4097      	lsls	r7, r2
 8000d0e:	fa01 f002 	lsl.w	r0, r1, r2
 8000d12:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d16:	40d9      	lsrs	r1, r3
 8000d18:	4330      	orrs	r0, r6
 8000d1a:	0c03      	lsrs	r3, r0, #16
 8000d1c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d20:	fa1f f887 	uxth.w	r8, r7
 8000d24:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d28:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d2c:	fb06 f108 	mul.w	r1, r6, r8
 8000d30:	4299      	cmp	r1, r3
 8000d32:	fa04 f402 	lsl.w	r4, r4, r2
 8000d36:	d909      	bls.n	8000d4c <__udivmoddi4+0x19c>
 8000d38:	18fb      	adds	r3, r7, r3
 8000d3a:	f106 3cff 	add.w	ip, r6, #4294967295
 8000d3e:	f080 808d 	bcs.w	8000e5c <__udivmoddi4+0x2ac>
 8000d42:	4299      	cmp	r1, r3
 8000d44:	f240 808a 	bls.w	8000e5c <__udivmoddi4+0x2ac>
 8000d48:	3e02      	subs	r6, #2
 8000d4a:	443b      	add	r3, r7
 8000d4c:	1a5b      	subs	r3, r3, r1
 8000d4e:	b281      	uxth	r1, r0
 8000d50:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d54:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d58:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d5c:	fb00 f308 	mul.w	r3, r0, r8
 8000d60:	428b      	cmp	r3, r1
 8000d62:	d907      	bls.n	8000d74 <__udivmoddi4+0x1c4>
 8000d64:	1879      	adds	r1, r7, r1
 8000d66:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d6a:	d273      	bcs.n	8000e54 <__udivmoddi4+0x2a4>
 8000d6c:	428b      	cmp	r3, r1
 8000d6e:	d971      	bls.n	8000e54 <__udivmoddi4+0x2a4>
 8000d70:	3802      	subs	r0, #2
 8000d72:	4439      	add	r1, r7
 8000d74:	1acb      	subs	r3, r1, r3
 8000d76:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000d7a:	e778      	b.n	8000c6e <__udivmoddi4+0xbe>
 8000d7c:	f1c6 0c20 	rsb	ip, r6, #32
 8000d80:	fa03 f406 	lsl.w	r4, r3, r6
 8000d84:	fa22 f30c 	lsr.w	r3, r2, ip
 8000d88:	431c      	orrs	r4, r3
 8000d8a:	fa20 f70c 	lsr.w	r7, r0, ip
 8000d8e:	fa01 f306 	lsl.w	r3, r1, r6
 8000d92:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000d96:	fa21 f10c 	lsr.w	r1, r1, ip
 8000d9a:	431f      	orrs	r7, r3
 8000d9c:	0c3b      	lsrs	r3, r7, #16
 8000d9e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000da2:	fa1f f884 	uxth.w	r8, r4
 8000da6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000daa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000dae:	fb09 fa08 	mul.w	sl, r9, r8
 8000db2:	458a      	cmp	sl, r1
 8000db4:	fa02 f206 	lsl.w	r2, r2, r6
 8000db8:	fa00 f306 	lsl.w	r3, r0, r6
 8000dbc:	d908      	bls.n	8000dd0 <__udivmoddi4+0x220>
 8000dbe:	1861      	adds	r1, r4, r1
 8000dc0:	f109 30ff 	add.w	r0, r9, #4294967295
 8000dc4:	d248      	bcs.n	8000e58 <__udivmoddi4+0x2a8>
 8000dc6:	458a      	cmp	sl, r1
 8000dc8:	d946      	bls.n	8000e58 <__udivmoddi4+0x2a8>
 8000dca:	f1a9 0902 	sub.w	r9, r9, #2
 8000dce:	4421      	add	r1, r4
 8000dd0:	eba1 010a 	sub.w	r1, r1, sl
 8000dd4:	b2bf      	uxth	r7, r7
 8000dd6:	fbb1 f0fe 	udiv	r0, r1, lr
 8000dda:	fb0e 1110 	mls	r1, lr, r0, r1
 8000dde:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000de2:	fb00 f808 	mul.w	r8, r0, r8
 8000de6:	45b8      	cmp	r8, r7
 8000de8:	d907      	bls.n	8000dfa <__udivmoddi4+0x24a>
 8000dea:	19e7      	adds	r7, r4, r7
 8000dec:	f100 31ff 	add.w	r1, r0, #4294967295
 8000df0:	d22e      	bcs.n	8000e50 <__udivmoddi4+0x2a0>
 8000df2:	45b8      	cmp	r8, r7
 8000df4:	d92c      	bls.n	8000e50 <__udivmoddi4+0x2a0>
 8000df6:	3802      	subs	r0, #2
 8000df8:	4427      	add	r7, r4
 8000dfa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000dfe:	eba7 0708 	sub.w	r7, r7, r8
 8000e02:	fba0 8902 	umull	r8, r9, r0, r2
 8000e06:	454f      	cmp	r7, r9
 8000e08:	46c6      	mov	lr, r8
 8000e0a:	4649      	mov	r1, r9
 8000e0c:	d31a      	bcc.n	8000e44 <__udivmoddi4+0x294>
 8000e0e:	d017      	beq.n	8000e40 <__udivmoddi4+0x290>
 8000e10:	b15d      	cbz	r5, 8000e2a <__udivmoddi4+0x27a>
 8000e12:	ebb3 020e 	subs.w	r2, r3, lr
 8000e16:	eb67 0701 	sbc.w	r7, r7, r1
 8000e1a:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e1e:	40f2      	lsrs	r2, r6
 8000e20:	ea4c 0202 	orr.w	r2, ip, r2
 8000e24:	40f7      	lsrs	r7, r6
 8000e26:	e9c5 2700 	strd	r2, r7, [r5]
 8000e2a:	2600      	movs	r6, #0
 8000e2c:	4631      	mov	r1, r6
 8000e2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e32:	462e      	mov	r6, r5
 8000e34:	4628      	mov	r0, r5
 8000e36:	e70b      	b.n	8000c50 <__udivmoddi4+0xa0>
 8000e38:	4606      	mov	r6, r0
 8000e3a:	e6e9      	b.n	8000c10 <__udivmoddi4+0x60>
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	e6fd      	b.n	8000c3c <__udivmoddi4+0x8c>
 8000e40:	4543      	cmp	r3, r8
 8000e42:	d2e5      	bcs.n	8000e10 <__udivmoddi4+0x260>
 8000e44:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e48:	eb69 0104 	sbc.w	r1, r9, r4
 8000e4c:	3801      	subs	r0, #1
 8000e4e:	e7df      	b.n	8000e10 <__udivmoddi4+0x260>
 8000e50:	4608      	mov	r0, r1
 8000e52:	e7d2      	b.n	8000dfa <__udivmoddi4+0x24a>
 8000e54:	4660      	mov	r0, ip
 8000e56:	e78d      	b.n	8000d74 <__udivmoddi4+0x1c4>
 8000e58:	4681      	mov	r9, r0
 8000e5a:	e7b9      	b.n	8000dd0 <__udivmoddi4+0x220>
 8000e5c:	4666      	mov	r6, ip
 8000e5e:	e775      	b.n	8000d4c <__udivmoddi4+0x19c>
 8000e60:	4630      	mov	r0, r6
 8000e62:	e74a      	b.n	8000cfa <__udivmoddi4+0x14a>
 8000e64:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e68:	4439      	add	r1, r7
 8000e6a:	e713      	b.n	8000c94 <__udivmoddi4+0xe4>
 8000e6c:	3802      	subs	r0, #2
 8000e6e:	443c      	add	r4, r7
 8000e70:	e724      	b.n	8000cbc <__udivmoddi4+0x10c>
 8000e72:	bf00      	nop

08000e74 <__aeabi_idiv0>:
 8000e74:	4770      	bx	lr
 8000e76:	bf00      	nop

08000e78 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	b083      	sub	sp, #12
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	4603      	mov	r3, r0
 8000e80:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	db0b      	blt.n	8000ea2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e8a:	79fb      	ldrb	r3, [r7, #7]
 8000e8c:	f003 021f 	and.w	r2, r3, #31
 8000e90:	4907      	ldr	r1, [pc, #28]	; (8000eb0 <__NVIC_EnableIRQ+0x38>)
 8000e92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e96:	095b      	lsrs	r3, r3, #5
 8000e98:	2001      	movs	r0, #1
 8000e9a:	fa00 f202 	lsl.w	r2, r0, r2
 8000e9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000ea2:	bf00      	nop
 8000ea4:	370c      	adds	r7, #12
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eac:	4770      	bx	lr
 8000eae:	bf00      	nop
 8000eb0:	e000e100 	.word	0xe000e100

08000eb4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	b083      	sub	sp, #12
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	4603      	mov	r3, r0
 8000ebc:	6039      	str	r1, [r7, #0]
 8000ebe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ec0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	db0a      	blt.n	8000ede <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ec8:	683b      	ldr	r3, [r7, #0]
 8000eca:	b2da      	uxtb	r2, r3
 8000ecc:	490c      	ldr	r1, [pc, #48]	; (8000f00 <__NVIC_SetPriority+0x4c>)
 8000ece:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ed2:	0112      	lsls	r2, r2, #4
 8000ed4:	b2d2      	uxtb	r2, r2
 8000ed6:	440b      	add	r3, r1
 8000ed8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000edc:	e00a      	b.n	8000ef4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	b2da      	uxtb	r2, r3
 8000ee2:	4908      	ldr	r1, [pc, #32]	; (8000f04 <__NVIC_SetPriority+0x50>)
 8000ee4:	79fb      	ldrb	r3, [r7, #7]
 8000ee6:	f003 030f 	and.w	r3, r3, #15
 8000eea:	3b04      	subs	r3, #4
 8000eec:	0112      	lsls	r2, r2, #4
 8000eee:	b2d2      	uxtb	r2, r2
 8000ef0:	440b      	add	r3, r1
 8000ef2:	761a      	strb	r2, [r3, #24]
}
 8000ef4:	bf00      	nop
 8000ef6:	370c      	adds	r7, #12
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efe:	4770      	bx	lr
 8000f00:	e000e100 	.word	0xe000e100
 8000f04:	e000ed00 	.word	0xe000ed00

08000f08 <USART2_IRQHandler>:
/* USER CODE BEGIN 0 */

//void stopMotor(void);
void read_UART_input(void);

void USART2_IRQHandler(void){
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	af00      	add	r7, sp, #0
	HAL_UART_IRQHandler(&huart2);
 8000f0c:	4802      	ldr	r0, [pc, #8]	; (8000f18 <USART2_IRQHandler+0x10>)
 8000f0e:	f004 fff5 	bl	8005efc <HAL_UART_IRQHandler>
}
 8000f12:	bf00      	nop
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	200002d4 	.word	0x200002d4

08000f1c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle) {
 8000f1c:	b480      	push	{r7}
 8000f1e:	b083      	sub	sp, #12
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
	// Set transmission flag: transfer complete
	UartReady = SET;
 8000f24:	4b04      	ldr	r3, [pc, #16]	; (8000f38 <HAL_UART_RxCpltCallback+0x1c>)
 8000f26:	2201      	movs	r2, #1
 8000f28:	701a      	strb	r2, [r3, #0]
}
 8000f2a:	bf00      	nop
 8000f2c:	370c      	adds	r7, #12
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop
 8000f38:	20000000 	.word	0x20000000

08000f3c <TIM2_IRQHandler>:


void TIM2_IRQHandler(void) {
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	af00      	add	r7, sp, #0
	j++;
 8000f40:	4b04      	ldr	r3, [pc, #16]	; (8000f54 <TIM2_IRQHandler+0x18>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	3301      	adds	r3, #1
 8000f46:	4a03      	ldr	r2, [pc, #12]	; (8000f54 <TIM2_IRQHandler+0x18>)
 8000f48:	6013      	str	r3, [r2, #0]
	HAL_TIM_IRQHandler(&htim2);
 8000f4a:	4803      	ldr	r0, [pc, #12]	; (8000f58 <TIM2_IRQHandler+0x1c>)
 8000f4c:	f004 f95e 	bl	800520c <HAL_TIM_IRQHandler>
}
 8000f50:	bf00      	nop
 8000f52:	bd80      	pop	{r7, pc}
 8000f54:	200000c8 	.word	0x200000c8
 8000f58:	20000288 	.word	0x20000288

08000f5c <TIM3_IRQHandler>:

void TIM3_IRQHandler(void) {
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	af00      	add	r7, sp, #0
	k++;
 8000f60:	4b04      	ldr	r3, [pc, #16]	; (8000f74 <TIM3_IRQHandler+0x18>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	3301      	adds	r3, #1
 8000f66:	4a03      	ldr	r2, [pc, #12]	; (8000f74 <TIM3_IRQHandler+0x18>)
 8000f68:	6013      	str	r3, [r2, #0]
	HAL_TIM_IRQHandler(&htim3);
 8000f6a:	4803      	ldr	r0, [pc, #12]	; (8000f78 <TIM3_IRQHandler+0x1c>)
 8000f6c:	f004 f94e 	bl	800520c <HAL_TIM_IRQHandler>
}
 8000f70:	bf00      	nop
 8000f72:	bd80      	pop	{r7, pc}
 8000f74:	20000158 	.word	0x20000158
 8000f78:	20000168 	.word	0x20000168

08000f7c <TIM6_DAC_IRQHandler>:

void TIM6_DAC_IRQHandler(void) {
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	af00      	add	r7, sp, #0
	HAL_TIM_IRQHandler(&htim6);
 8000f80:	4802      	ldr	r0, [pc, #8]	; (8000f8c <TIM6_DAC_IRQHandler+0x10>)
 8000f82:	f004 f943 	bl	800520c <HAL_TIM_IRQHandler>
}
 8000f86:	bf00      	nop
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	20000210 	.word	0x20000210

08000f90 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b082      	sub	sp, #8
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  // Check which version of the timer triggered this callback
 // if (htim == &htim6 ){
	if(htim->Instance == TIM6){
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	4a0c      	ldr	r2, [pc, #48]	; (8000fd0 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8000f9e:	4293      	cmp	r3, r2
 8000fa0:	d111      	bne.n	8000fc6 <HAL_TIM_PeriodElapsedCallback+0x36>
		stopMotor(&htim2,&htim3, &htim6);
 8000fa2:	4a0c      	ldr	r2, [pc, #48]	; (8000fd4 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8000fa4:	490c      	ldr	r1, [pc, #48]	; (8000fd8 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000fa6:	480d      	ldr	r0, [pc, #52]	; (8000fdc <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000fa8:	f001 fcc4 	bl	8002934 <stopMotor>
		HAL_TIM_Base_Stop_IT(&htim6);
 8000fac:	4809      	ldr	r0, [pc, #36]	; (8000fd4 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8000fae:	f003 fee1 	bl	8004d74 <HAL_TIM_Base_Stop_IT>
		__HAL_TIM_CLEAR_FLAG(&htim6, TIM_SR_UIF);
 8000fb2:	4b08      	ldr	r3, [pc, #32]	; (8000fd4 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	f06f 0201 	mvn.w	r2, #1
 8000fba:	611a      	str	r2, [r3, #16]
		__HAL_TIM_CLEAR_FLAG(&htim6, TIM_IT_UPDATE);
 8000fbc:	4b05      	ldr	r3, [pc, #20]	; (8000fd4 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	f06f 0201 	mvn.w	r2, #1
 8000fc4:	611a      	str	r2, [r3, #16]
  }
}
 8000fc6:	bf00      	nop
 8000fc8:	3708      	adds	r7, #8
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	40001000 	.word	0x40001000
 8000fd4:	20000210 	.word	0x20000210
 8000fd8:	20000168 	.word	0x20000168
 8000fdc:	20000288 	.word	0x20000288

08000fe0 <MPU6050_Init>:
double Ax_0, Ay_0, Az_0, Gx_0, Gy_0, Gz_0;


uint8_t check;
uint8_t Data;
void MPU6050_Init (void){
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b084      	sub	sp, #16
 8000fe4:	af04      	add	r7, sp, #16
	// check device ID WHO_AM_I
	HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR, WHO_AM_I_REG,1, &check, 1, 1000);
 8000fe6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fea:	9302      	str	r3, [sp, #8]
 8000fec:	2301      	movs	r3, #1
 8000fee:	9301      	str	r3, [sp, #4]
 8000ff0:	4b27      	ldr	r3, [pc, #156]	; (8001090 <MPU6050_Init+0xb0>)
 8000ff2:	9300      	str	r3, [sp, #0]
 8000ff4:	2301      	movs	r3, #1
 8000ff6:	2275      	movs	r2, #117	; 0x75
 8000ff8:	21d0      	movs	r1, #208	; 0xd0
 8000ffa:	4826      	ldr	r0, [pc, #152]	; (8001094 <MPU6050_Init+0xb4>)
 8000ffc:	f002 fb0e 	bl	800361c <HAL_I2C_Mem_Read>
	if (check == 104)  // 0x68 will be returned by the sensor if everything goes well
 8001000:	4b23      	ldr	r3, [pc, #140]	; (8001090 <MPU6050_Init+0xb0>)
 8001002:	781b      	ldrb	r3, [r3, #0]
 8001004:	2b68      	cmp	r3, #104	; 0x68
 8001006:	d13f      	bne.n	8001088 <MPU6050_Init+0xa8>
	{
		// power management register 0X6B we should write all 0's to wake the sensor up
		Data = 0;
 8001008:	4b23      	ldr	r3, [pc, #140]	; (8001098 <MPU6050_Init+0xb8>)
 800100a:	2200      	movs	r2, #0
 800100c:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, PWR_MGMT_1_REG, 1,&Data, 1, 1000);
 800100e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001012:	9302      	str	r3, [sp, #8]
 8001014:	2301      	movs	r3, #1
 8001016:	9301      	str	r3, [sp, #4]
 8001018:	4b1f      	ldr	r3, [pc, #124]	; (8001098 <MPU6050_Init+0xb8>)
 800101a:	9300      	str	r3, [sp, #0]
 800101c:	2301      	movs	r3, #1
 800101e:	226b      	movs	r2, #107	; 0x6b
 8001020:	21d0      	movs	r1, #208	; 0xd0
 8001022:	481c      	ldr	r0, [pc, #112]	; (8001094 <MPU6050_Init+0xb4>)
 8001024:	f002 fa00 	bl	8003428 <HAL_I2C_Mem_Write>

		// Set DATA RATE of 1KHz by writing SMPLRT_DIV register
		Data = 0x07;
 8001028:	4b1b      	ldr	r3, [pc, #108]	; (8001098 <MPU6050_Init+0xb8>)
 800102a:	2207      	movs	r2, #7
 800102c:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, 1000);
 800102e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001032:	9302      	str	r3, [sp, #8]
 8001034:	2301      	movs	r3, #1
 8001036:	9301      	str	r3, [sp, #4]
 8001038:	4b17      	ldr	r3, [pc, #92]	; (8001098 <MPU6050_Init+0xb8>)
 800103a:	9300      	str	r3, [sp, #0]
 800103c:	2301      	movs	r3, #1
 800103e:	2219      	movs	r2, #25
 8001040:	21d0      	movs	r1, #208	; 0xd0
 8001042:	4814      	ldr	r0, [pc, #80]	; (8001094 <MPU6050_Init+0xb4>)
 8001044:	f002 f9f0 	bl	8003428 <HAL_I2C_Mem_Write>

		// Set accelerometer configuration in ACCEL_CONFIG Register
		// XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> � 2g
		Data = 0x00;
 8001048:	4b13      	ldr	r3, [pc, #76]	; (8001098 <MPU6050_Init+0xb8>)
 800104a:	2200      	movs	r2, #0
 800104c:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, 1000);
 800104e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001052:	9302      	str	r3, [sp, #8]
 8001054:	2301      	movs	r3, #1
 8001056:	9301      	str	r3, [sp, #4]
 8001058:	4b0f      	ldr	r3, [pc, #60]	; (8001098 <MPU6050_Init+0xb8>)
 800105a:	9300      	str	r3, [sp, #0]
 800105c:	2301      	movs	r3, #1
 800105e:	221c      	movs	r2, #28
 8001060:	21d0      	movs	r1, #208	; 0xd0
 8001062:	480c      	ldr	r0, [pc, #48]	; (8001094 <MPU6050_Init+0xb4>)
 8001064:	f002 f9e0 	bl	8003428 <HAL_I2C_Mem_Write>

		// Set Gyroscopic configuration in GYRO_CONFIG Register
		// XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> � 250 �/s
		Data = 0x00;
 8001068:	4b0b      	ldr	r3, [pc, #44]	; (8001098 <MPU6050_Init+0xb8>)
 800106a:	2200      	movs	r2, #0
 800106c:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, 1000);
 800106e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001072:	9302      	str	r3, [sp, #8]
 8001074:	2301      	movs	r3, #1
 8001076:	9301      	str	r3, [sp, #4]
 8001078:	4b07      	ldr	r3, [pc, #28]	; (8001098 <MPU6050_Init+0xb8>)
 800107a:	9300      	str	r3, [sp, #0]
 800107c:	2301      	movs	r3, #1
 800107e:	221b      	movs	r2, #27
 8001080:	21d0      	movs	r1, #208	; 0xd0
 8001082:	4804      	ldr	r0, [pc, #16]	; (8001094 <MPU6050_Init+0xb4>)
 8001084:	f002 f9d0 	bl	8003428 <HAL_I2C_Mem_Write>
	}

}
 8001088:	bf00      	nop
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	200001f4 	.word	0x200001f4
 8001094:	200000e4 	.word	0x200000e4
 8001098:	200001f5 	.word	0x200001f5

0800109c <MPU6050_getStatus>:

void MPU6050_getStatus(void){
 800109c:	b580      	push	{r7, lr}
 800109e:	b084      	sub	sp, #16
 80010a0:	af04      	add	r7, sp, #16
	HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR, WHO_AM_I_REG,1, &check, 1, 1000);
 80010a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010a6:	9302      	str	r3, [sp, #8]
 80010a8:	2301      	movs	r3, #1
 80010aa:	9301      	str	r3, [sp, #4]
 80010ac:	4b08      	ldr	r3, [pc, #32]	; (80010d0 <MPU6050_getStatus+0x34>)
 80010ae:	9300      	str	r3, [sp, #0]
 80010b0:	2301      	movs	r3, #1
 80010b2:	2275      	movs	r2, #117	; 0x75
 80010b4:	21d0      	movs	r1, #208	; 0xd0
 80010b6:	4807      	ldr	r0, [pc, #28]	; (80010d4 <MPU6050_getStatus+0x38>)
 80010b8:	f002 fab0 	bl	800361c <HAL_I2C_Mem_Read>
	if (check != 104){
 80010bc:	4b04      	ldr	r3, [pc, #16]	; (80010d0 <MPU6050_getStatus+0x34>)
 80010be:	781b      	ldrb	r3, [r3, #0]
 80010c0:	2b68      	cmp	r3, #104	; 0x68
 80010c2:	d001      	beq.n	80010c8 <MPU6050_getStatus+0x2c>
		MPU6050_Init();
 80010c4:	f7ff ff8c 	bl	8000fe0 <MPU6050_Init>
	}
}
 80010c8:	bf00      	nop
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	200001f4 	.word	0x200001f4
 80010d4:	200000e4 	.word	0x200000e4

080010d8 <MPU6050_Read_Accel>:


uint8_t Rec_Data_Accel[6];
void MPU6050_Read_Accel (void){
 80010d8:	b5b0      	push	{r4, r5, r7, lr}
 80010da:	ed2d 8b02 	vpush	{d8}
 80010de:	b084      	sub	sp, #16
 80010e0:	af04      	add	r7, sp, #16
	// Read 6 BYTES of data starting from ACCEL_XOUT_H register

	HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data_Accel, 6, 1000);
 80010e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010e6:	9302      	str	r3, [sp, #8]
 80010e8:	2306      	movs	r3, #6
 80010ea:	9301      	str	r3, [sp, #4]
 80010ec:	4b7a      	ldr	r3, [pc, #488]	; (80012d8 <MPU6050_Read_Accel+0x200>)
 80010ee:	9300      	str	r3, [sp, #0]
 80010f0:	2301      	movs	r3, #1
 80010f2:	223b      	movs	r2, #59	; 0x3b
 80010f4:	21d0      	movs	r1, #208	; 0xd0
 80010f6:	4879      	ldr	r0, [pc, #484]	; (80012dc <MPU6050_Read_Accel+0x204>)
 80010f8:	f002 fa90 	bl	800361c <HAL_I2C_Mem_Read>

	Accel_X_RAW = (int16_t)(Rec_Data_Accel[0] << 8 | Rec_Data_Accel [1]);
 80010fc:	4b76      	ldr	r3, [pc, #472]	; (80012d8 <MPU6050_Read_Accel+0x200>)
 80010fe:	781b      	ldrb	r3, [r3, #0]
 8001100:	021b      	lsls	r3, r3, #8
 8001102:	b21a      	sxth	r2, r3
 8001104:	4b74      	ldr	r3, [pc, #464]	; (80012d8 <MPU6050_Read_Accel+0x200>)
 8001106:	785b      	ldrb	r3, [r3, #1]
 8001108:	b21b      	sxth	r3, r3
 800110a:	4313      	orrs	r3, r2
 800110c:	b21a      	sxth	r2, r3
 800110e:	4b74      	ldr	r3, [pc, #464]	; (80012e0 <MPU6050_Read_Accel+0x208>)
 8001110:	801a      	strh	r2, [r3, #0]
	Accel_Y_RAW = (int16_t)(Rec_Data_Accel[2] << 8 | Rec_Data_Accel [3]);
 8001112:	4b71      	ldr	r3, [pc, #452]	; (80012d8 <MPU6050_Read_Accel+0x200>)
 8001114:	789b      	ldrb	r3, [r3, #2]
 8001116:	021b      	lsls	r3, r3, #8
 8001118:	b21a      	sxth	r2, r3
 800111a:	4b6f      	ldr	r3, [pc, #444]	; (80012d8 <MPU6050_Read_Accel+0x200>)
 800111c:	78db      	ldrb	r3, [r3, #3]
 800111e:	b21b      	sxth	r3, r3
 8001120:	4313      	orrs	r3, r2
 8001122:	b21a      	sxth	r2, r3
 8001124:	4b6f      	ldr	r3, [pc, #444]	; (80012e4 <MPU6050_Read_Accel+0x20c>)
 8001126:	801a      	strh	r2, [r3, #0]
	Accel_Z_RAW = (int16_t)(Rec_Data_Accel[4] << 8 | Rec_Data_Accel [5]);
 8001128:	4b6b      	ldr	r3, [pc, #428]	; (80012d8 <MPU6050_Read_Accel+0x200>)
 800112a:	791b      	ldrb	r3, [r3, #4]
 800112c:	021b      	lsls	r3, r3, #8
 800112e:	b21a      	sxth	r2, r3
 8001130:	4b69      	ldr	r3, [pc, #420]	; (80012d8 <MPU6050_Read_Accel+0x200>)
 8001132:	795b      	ldrb	r3, [r3, #5]
 8001134:	b21b      	sxth	r3, r3
 8001136:	4313      	orrs	r3, r2
 8001138:	b21a      	sxth	r2, r3
 800113a:	4b6b      	ldr	r3, [pc, #428]	; (80012e8 <MPU6050_Read_Accel+0x210>)
 800113c:	801a      	strh	r2, [r3, #0]
	/*** convert the RAW values into acceleration in 'g'
	     we have to divide according to the Full scale value set in FS_SEL
	     I have configured FS_SEL = 0. So I am dividing by 16384.0
	     for more details check ACCEL_CONFIG Register              ****/

	Ax = (double)(Accel_X_RAW/16384.0);
 800113e:	4b68      	ldr	r3, [pc, #416]	; (80012e0 <MPU6050_Read_Accel+0x208>)
 8001140:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001144:	4618      	mov	r0, r3
 8001146:	f7ff f9b1 	bl	80004ac <__aeabi_i2d>
 800114a:	f04f 0200 	mov.w	r2, #0
 800114e:	4b67      	ldr	r3, [pc, #412]	; (80012ec <MPU6050_Read_Accel+0x214>)
 8001150:	f7ff fb40 	bl	80007d4 <__aeabi_ddiv>
 8001154:	4602      	mov	r2, r0
 8001156:	460b      	mov	r3, r1
 8001158:	4965      	ldr	r1, [pc, #404]	; (80012f0 <MPU6050_Read_Accel+0x218>)
 800115a:	e9c1 2300 	strd	r2, r3, [r1]
	Ay = (double)(Accel_Y_RAW/16384.0);
 800115e:	4b61      	ldr	r3, [pc, #388]	; (80012e4 <MPU6050_Read_Accel+0x20c>)
 8001160:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001164:	4618      	mov	r0, r3
 8001166:	f7ff f9a1 	bl	80004ac <__aeabi_i2d>
 800116a:	f04f 0200 	mov.w	r2, #0
 800116e:	4b5f      	ldr	r3, [pc, #380]	; (80012ec <MPU6050_Read_Accel+0x214>)
 8001170:	f7ff fb30 	bl	80007d4 <__aeabi_ddiv>
 8001174:	4602      	mov	r2, r0
 8001176:	460b      	mov	r3, r1
 8001178:	495e      	ldr	r1, [pc, #376]	; (80012f4 <MPU6050_Read_Accel+0x21c>)
 800117a:	e9c1 2300 	strd	r2, r3, [r1]
	Az = (double)(Accel_Z_RAW/16384.0);
 800117e:	4b5a      	ldr	r3, [pc, #360]	; (80012e8 <MPU6050_Read_Accel+0x210>)
 8001180:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001184:	4618      	mov	r0, r3
 8001186:	f7ff f991 	bl	80004ac <__aeabi_i2d>
 800118a:	f04f 0200 	mov.w	r2, #0
 800118e:	4b57      	ldr	r3, [pc, #348]	; (80012ec <MPU6050_Read_Accel+0x214>)
 8001190:	f7ff fb20 	bl	80007d4 <__aeabi_ddiv>
 8001194:	4602      	mov	r2, r0
 8001196:	460b      	mov	r3, r1
 8001198:	4957      	ldr	r1, [pc, #348]	; (80012f8 <MPU6050_Read_Accel+0x220>)
 800119a:	e9c1 2300 	strd	r2, r3, [r1]

	if(MPU6050_Calib_status == 1){
 800119e:	4b57      	ldr	r3, [pc, #348]	; (80012fc <MPU6050_Read_Accel+0x224>)
 80011a0:	781b      	ldrb	r3, [r3, #0]
 80011a2:	2b01      	cmp	r3, #1
 80011a4:	f040 808a 	bne.w	80012bc <MPU6050_Read_Accel+0x1e4>
//		Ax = (double)((Ax - Ax_0)* 180 / M_PI);
//		Ay = (double)((Ay - Ay_0)* 180 / M_PI);
//		Az = (double)((Az - Az_0)* 180 / M_PI);


		roll	=	(double)( (atan2(Ay, sqrt(Az*Az+Ax*Ax)))* (180.0 / M_PI) ); // [-pigreco, pigreco] ---> [0, 2pigreco]
 80011a8:	4b52      	ldr	r3, [pc, #328]	; (80012f4 <MPU6050_Read_Accel+0x21c>)
 80011aa:	ed93 8b00 	vldr	d8, [r3]
 80011ae:	4b52      	ldr	r3, [pc, #328]	; (80012f8 <MPU6050_Read_Accel+0x220>)
 80011b0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80011b4:	4b50      	ldr	r3, [pc, #320]	; (80012f8 <MPU6050_Read_Accel+0x220>)
 80011b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011ba:	f7ff f9e1 	bl	8000580 <__aeabi_dmul>
 80011be:	4602      	mov	r2, r0
 80011c0:	460b      	mov	r3, r1
 80011c2:	4614      	mov	r4, r2
 80011c4:	461d      	mov	r5, r3
 80011c6:	4b4a      	ldr	r3, [pc, #296]	; (80012f0 <MPU6050_Read_Accel+0x218>)
 80011c8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80011cc:	4b48      	ldr	r3, [pc, #288]	; (80012f0 <MPU6050_Read_Accel+0x218>)
 80011ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011d2:	f7ff f9d5 	bl	8000580 <__aeabi_dmul>
 80011d6:	4602      	mov	r2, r0
 80011d8:	460b      	mov	r3, r1
 80011da:	4620      	mov	r0, r4
 80011dc:	4629      	mov	r1, r5
 80011de:	f7ff f819 	bl	8000214 <__adddf3>
 80011e2:	4602      	mov	r2, r0
 80011e4:	460b      	mov	r3, r1
 80011e6:	ec43 2b17 	vmov	d7, r2, r3
 80011ea:	eeb0 0a47 	vmov.f32	s0, s14
 80011ee:	eef0 0a67 	vmov.f32	s1, s15
 80011f2:	f005 fbe1 	bl	80069b8 <sqrt>
 80011f6:	eeb0 7a40 	vmov.f32	s14, s0
 80011fa:	eef0 7a60 	vmov.f32	s15, s1
 80011fe:	eeb0 1a47 	vmov.f32	s2, s14
 8001202:	eef0 1a67 	vmov.f32	s3, s15
 8001206:	eeb0 0a48 	vmov.f32	s0, s16
 800120a:	eef0 0a68 	vmov.f32	s1, s17
 800120e:	f005 fbd1 	bl	80069b4 <atan2>
 8001212:	ec51 0b10 	vmov	r0, r1, d0
 8001216:	a32c      	add	r3, pc, #176	; (adr r3, 80012c8 <MPU6050_Read_Accel+0x1f0>)
 8001218:	e9d3 2300 	ldrd	r2, r3, [r3]
 800121c:	f7ff f9b0 	bl	8000580 <__aeabi_dmul>
 8001220:	4602      	mov	r2, r0
 8001222:	460b      	mov	r3, r1
 8001224:	4610      	mov	r0, r2
 8001226:	4619      	mov	r1, r3
 8001228:	f7ff fc5a 	bl	8000ae0 <__aeabi_d2f>
 800122c:	4603      	mov	r3, r0
 800122e:	4a34      	ldr	r2, [pc, #208]	; (8001300 <MPU6050_Read_Accel+0x228>)
 8001230:	6013      	str	r3, [r2, #0]
		pitch	=	(double)( (atan2(Ax, sqrt(Az*Az+Ay*Ay)))* (-180.0 / M_PI) );
 8001232:	4b2f      	ldr	r3, [pc, #188]	; (80012f0 <MPU6050_Read_Accel+0x218>)
 8001234:	ed93 8b00 	vldr	d8, [r3]
 8001238:	4b2f      	ldr	r3, [pc, #188]	; (80012f8 <MPU6050_Read_Accel+0x220>)
 800123a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800123e:	4b2e      	ldr	r3, [pc, #184]	; (80012f8 <MPU6050_Read_Accel+0x220>)
 8001240:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001244:	f7ff f99c 	bl	8000580 <__aeabi_dmul>
 8001248:	4602      	mov	r2, r0
 800124a:	460b      	mov	r3, r1
 800124c:	4614      	mov	r4, r2
 800124e:	461d      	mov	r5, r3
 8001250:	4b28      	ldr	r3, [pc, #160]	; (80012f4 <MPU6050_Read_Accel+0x21c>)
 8001252:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001256:	4b27      	ldr	r3, [pc, #156]	; (80012f4 <MPU6050_Read_Accel+0x21c>)
 8001258:	e9d3 2300 	ldrd	r2, r3, [r3]
 800125c:	f7ff f990 	bl	8000580 <__aeabi_dmul>
 8001260:	4602      	mov	r2, r0
 8001262:	460b      	mov	r3, r1
 8001264:	4620      	mov	r0, r4
 8001266:	4629      	mov	r1, r5
 8001268:	f7fe ffd4 	bl	8000214 <__adddf3>
 800126c:	4602      	mov	r2, r0
 800126e:	460b      	mov	r3, r1
 8001270:	ec43 2b17 	vmov	d7, r2, r3
 8001274:	eeb0 0a47 	vmov.f32	s0, s14
 8001278:	eef0 0a67 	vmov.f32	s1, s15
 800127c:	f005 fb9c 	bl	80069b8 <sqrt>
 8001280:	eeb0 7a40 	vmov.f32	s14, s0
 8001284:	eef0 7a60 	vmov.f32	s15, s1
 8001288:	eeb0 1a47 	vmov.f32	s2, s14
 800128c:	eef0 1a67 	vmov.f32	s3, s15
 8001290:	eeb0 0a48 	vmov.f32	s0, s16
 8001294:	eef0 0a68 	vmov.f32	s1, s17
 8001298:	f005 fb8c 	bl	80069b4 <atan2>
 800129c:	ec51 0b10 	vmov	r0, r1, d0
 80012a0:	a30b      	add	r3, pc, #44	; (adr r3, 80012d0 <MPU6050_Read_Accel+0x1f8>)
 80012a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012a6:	f7ff f96b 	bl	8000580 <__aeabi_dmul>
 80012aa:	4602      	mov	r2, r0
 80012ac:	460b      	mov	r3, r1
 80012ae:	4610      	mov	r0, r2
 80012b0:	4619      	mov	r1, r3
 80012b2:	f7ff fc15 	bl	8000ae0 <__aeabi_d2f>
 80012b6:	4603      	mov	r3, r0
 80012b8:	4a12      	ldr	r2, [pc, #72]	; (8001304 <MPU6050_Read_Accel+0x22c>)
 80012ba:	6013      	str	r3, [r2, #0]
		//yaw		= 	(double)( (atan2(Az, sqrt(Ax*Ax+Ay*Ay)))* (-180.0 / M_PI) );
	}
}
 80012bc:	bf00      	nop
 80012be:	46bd      	mov	sp, r7
 80012c0:	ecbd 8b02 	vpop	{d8}
 80012c4:	bdb0      	pop	{r4, r5, r7, pc}
 80012c6:	bf00      	nop
 80012c8:	1a63c1f8 	.word	0x1a63c1f8
 80012cc:	404ca5dc 	.word	0x404ca5dc
 80012d0:	1a63c1f8 	.word	0x1a63c1f8
 80012d4:	c04ca5dc 	.word	0xc04ca5dc
 80012d8:	200001f8 	.word	0x200001f8
 80012dc:	200000e4 	.word	0x200000e4
 80012e0:	200000aa 	.word	0x200000aa
 80012e4:	200000ac 	.word	0x200000ac
 80012e8:	200000ae 	.word	0x200000ae
 80012ec:	40d00000 	.word	0x40d00000
 80012f0:	20000208 	.word	0x20000208
 80012f4:	200001b0 	.word	0x200001b0
 80012f8:	20000260 	.word	0x20000260
 80012fc:	200000a8 	.word	0x200000a8
 8001300:	2000031c 	.word	0x2000031c
 8001304:	20000318 	.word	0x20000318

08001308 <MPU6050_Read_Gyro>:

uint8_t Rec_Data_Gyro[6];

void MPU6050_Read_Gyro (void){
 8001308:	b580      	push	{r7, lr}
 800130a:	b084      	sub	sp, #16
 800130c:	af04      	add	r7, sp, #16
	// Read 6 BYTES of data starting from GYRO_XOUT_H register

	HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR, GYRO_XOUT_H_REG, 1, Rec_Data_Gyro, 6, 1000);
 800130e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001312:	9302      	str	r3, [sp, #8]
 8001314:	2306      	movs	r3, #6
 8001316:	9301      	str	r3, [sp, #4]
 8001318:	4b77      	ldr	r3, [pc, #476]	; (80014f8 <MPU6050_Read_Gyro+0x1f0>)
 800131a:	9300      	str	r3, [sp, #0]
 800131c:	2301      	movs	r3, #1
 800131e:	2243      	movs	r2, #67	; 0x43
 8001320:	21d0      	movs	r1, #208	; 0xd0
 8001322:	4876      	ldr	r0, [pc, #472]	; (80014fc <MPU6050_Read_Gyro+0x1f4>)
 8001324:	f002 f97a 	bl	800361c <HAL_I2C_Mem_Read>

	Gyro_X_RAW = (int16_t)(Rec_Data_Gyro[0] << 8 | Rec_Data_Gyro [1]);
 8001328:	4b73      	ldr	r3, [pc, #460]	; (80014f8 <MPU6050_Read_Gyro+0x1f0>)
 800132a:	781b      	ldrb	r3, [r3, #0]
 800132c:	021b      	lsls	r3, r3, #8
 800132e:	b21a      	sxth	r2, r3
 8001330:	4b71      	ldr	r3, [pc, #452]	; (80014f8 <MPU6050_Read_Gyro+0x1f0>)
 8001332:	785b      	ldrb	r3, [r3, #1]
 8001334:	b21b      	sxth	r3, r3
 8001336:	4313      	orrs	r3, r2
 8001338:	b21a      	sxth	r2, r3
 800133a:	4b71      	ldr	r3, [pc, #452]	; (8001500 <MPU6050_Read_Gyro+0x1f8>)
 800133c:	801a      	strh	r2, [r3, #0]
	Gyro_Y_RAW = (int16_t)(Rec_Data_Gyro[2] << 8 | Rec_Data_Gyro [3]);
 800133e:	4b6e      	ldr	r3, [pc, #440]	; (80014f8 <MPU6050_Read_Gyro+0x1f0>)
 8001340:	789b      	ldrb	r3, [r3, #2]
 8001342:	021b      	lsls	r3, r3, #8
 8001344:	b21a      	sxth	r2, r3
 8001346:	4b6c      	ldr	r3, [pc, #432]	; (80014f8 <MPU6050_Read_Gyro+0x1f0>)
 8001348:	78db      	ldrb	r3, [r3, #3]
 800134a:	b21b      	sxth	r3, r3
 800134c:	4313      	orrs	r3, r2
 800134e:	b21a      	sxth	r2, r3
 8001350:	4b6c      	ldr	r3, [pc, #432]	; (8001504 <MPU6050_Read_Gyro+0x1fc>)
 8001352:	801a      	strh	r2, [r3, #0]
	Gyro_Z_RAW = (int16_t)(Rec_Data_Gyro[4] << 8 | Rec_Data_Gyro [5]);
 8001354:	4b68      	ldr	r3, [pc, #416]	; (80014f8 <MPU6050_Read_Gyro+0x1f0>)
 8001356:	791b      	ldrb	r3, [r3, #4]
 8001358:	021b      	lsls	r3, r3, #8
 800135a:	b21a      	sxth	r2, r3
 800135c:	4b66      	ldr	r3, [pc, #408]	; (80014f8 <MPU6050_Read_Gyro+0x1f0>)
 800135e:	795b      	ldrb	r3, [r3, #5]
 8001360:	b21b      	sxth	r3, r3
 8001362:	4313      	orrs	r3, r2
 8001364:	b21a      	sxth	r2, r3
 8001366:	4b68      	ldr	r3, [pc, #416]	; (8001508 <MPU6050_Read_Gyro+0x200>)
 8001368:	801a      	strh	r2, [r3, #0]
	/*** convert the RAW values into dps (�/s)
	     we have to divide according to the Full scale value set in FS_SEL
	     I have configured FS_SEL = 0. So I am dividing by 131.0
	     for more details check GYRO_CONFIG Register              ****/

	Gx = Gyro_X_RAW/131.0;
 800136a:	4b65      	ldr	r3, [pc, #404]	; (8001500 <MPU6050_Read_Gyro+0x1f8>)
 800136c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001370:	4618      	mov	r0, r3
 8001372:	f7ff f89b 	bl	80004ac <__aeabi_i2d>
 8001376:	a35e      	add	r3, pc, #376	; (adr r3, 80014f0 <MPU6050_Read_Gyro+0x1e8>)
 8001378:	e9d3 2300 	ldrd	r2, r3, [r3]
 800137c:	f7ff fa2a 	bl	80007d4 <__aeabi_ddiv>
 8001380:	4602      	mov	r2, r0
 8001382:	460b      	mov	r3, r1
 8001384:	4961      	ldr	r1, [pc, #388]	; (800150c <MPU6050_Read_Gyro+0x204>)
 8001386:	e9c1 2300 	strd	r2, r3, [r1]
	Gy = Gyro_Y_RAW/131.0;
 800138a:	4b5e      	ldr	r3, [pc, #376]	; (8001504 <MPU6050_Read_Gyro+0x1fc>)
 800138c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001390:	4618      	mov	r0, r3
 8001392:	f7ff f88b 	bl	80004ac <__aeabi_i2d>
 8001396:	a356      	add	r3, pc, #344	; (adr r3, 80014f0 <MPU6050_Read_Gyro+0x1e8>)
 8001398:	e9d3 2300 	ldrd	r2, r3, [r3]
 800139c:	f7ff fa1a 	bl	80007d4 <__aeabi_ddiv>
 80013a0:	4602      	mov	r2, r0
 80013a2:	460b      	mov	r3, r1
 80013a4:	495a      	ldr	r1, [pc, #360]	; (8001510 <MPU6050_Read_Gyro+0x208>)
 80013a6:	e9c1 2300 	strd	r2, r3, [r1]
	Gz = Gyro_Z_RAW/131.0;
 80013aa:	4b57      	ldr	r3, [pc, #348]	; (8001508 <MPU6050_Read_Gyro+0x200>)
 80013ac:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013b0:	4618      	mov	r0, r3
 80013b2:	f7ff f87b 	bl	80004ac <__aeabi_i2d>
 80013b6:	a34e      	add	r3, pc, #312	; (adr r3, 80014f0 <MPU6050_Read_Gyro+0x1e8>)
 80013b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013bc:	f7ff fa0a 	bl	80007d4 <__aeabi_ddiv>
 80013c0:	4602      	mov	r2, r0
 80013c2:	460b      	mov	r3, r1
 80013c4:	4953      	ldr	r1, [pc, #332]	; (8001514 <MPU6050_Read_Gyro+0x20c>)
 80013c6:	e9c1 2300 	strd	r2, r3, [r1]

	if(MPU6050_Calib_status == 1){
 80013ca:	4b53      	ldr	r3, [pc, #332]	; (8001518 <MPU6050_Read_Gyro+0x210>)
 80013cc:	781b      	ldrb	r3, [r3, #0]
 80013ce:	2b01      	cmp	r3, #1
 80013d0:	f040 808a 	bne.w	80014e8 <MPU6050_Read_Gyro+0x1e0>
		Gx = Gx - Gx_0;
 80013d4:	4b4d      	ldr	r3, [pc, #308]	; (800150c <MPU6050_Read_Gyro+0x204>)
 80013d6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80013da:	4b50      	ldr	r3, [pc, #320]	; (800151c <MPU6050_Read_Gyro+0x214>)
 80013dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013e0:	f7fe ff16 	bl	8000210 <__aeabi_dsub>
 80013e4:	4602      	mov	r2, r0
 80013e6:	460b      	mov	r3, r1
 80013e8:	4948      	ldr	r1, [pc, #288]	; (800150c <MPU6050_Read_Gyro+0x204>)
 80013ea:	e9c1 2300 	strd	r2, r3, [r1]
		Gy = Gy - Gy_0;
 80013ee:	4b48      	ldr	r3, [pc, #288]	; (8001510 <MPU6050_Read_Gyro+0x208>)
 80013f0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80013f4:	4b4a      	ldr	r3, [pc, #296]	; (8001520 <MPU6050_Read_Gyro+0x218>)
 80013f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013fa:	f7fe ff09 	bl	8000210 <__aeabi_dsub>
 80013fe:	4602      	mov	r2, r0
 8001400:	460b      	mov	r3, r1
 8001402:	4943      	ldr	r1, [pc, #268]	; (8001510 <MPU6050_Read_Gyro+0x208>)
 8001404:	e9c1 2300 	strd	r2, r3, [r1]
		Gz = Gz - Gz_0;
 8001408:	4b42      	ldr	r3, [pc, #264]	; (8001514 <MPU6050_Read_Gyro+0x20c>)
 800140a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800140e:	4b45      	ldr	r3, [pc, #276]	; (8001524 <MPU6050_Read_Gyro+0x21c>)
 8001410:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001414:	f7fe fefc 	bl	8000210 <__aeabi_dsub>
 8001418:	4602      	mov	r2, r0
 800141a:	460b      	mov	r3, r1
 800141c:	493d      	ldr	r1, [pc, #244]	; (8001514 <MPU6050_Read_Gyro+0x20c>)
 800141e:	e9c1 2300 	strd	r2, r3, [r1]

		// angoli ottenuti solo dal giroscopio
		Gx_angle += (Gx * dTime/1000); // the gyro drifts over time
 8001422:	4b41      	ldr	r3, [pc, #260]	; (8001528 <MPU6050_Read_Gyro+0x220>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	4618      	mov	r0, r3
 8001428:	f7ff f852 	bl	80004d0 <__aeabi_f2d>
 800142c:	4b37      	ldr	r3, [pc, #220]	; (800150c <MPU6050_Read_Gyro+0x204>)
 800142e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001432:	f7ff f8a5 	bl	8000580 <__aeabi_dmul>
 8001436:	4602      	mov	r2, r0
 8001438:	460b      	mov	r3, r1
 800143a:	4610      	mov	r0, r2
 800143c:	4619      	mov	r1, r3
 800143e:	f04f 0200 	mov.w	r2, #0
 8001442:	4b3a      	ldr	r3, [pc, #232]	; (800152c <MPU6050_Read_Gyro+0x224>)
 8001444:	f7ff f9c6 	bl	80007d4 <__aeabi_ddiv>
 8001448:	4602      	mov	r2, r0
 800144a:	460b      	mov	r3, r1
 800144c:	4610      	mov	r0, r2
 800144e:	4619      	mov	r1, r3
 8001450:	4b37      	ldr	r3, [pc, #220]	; (8001530 <MPU6050_Read_Gyro+0x228>)
 8001452:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001456:	f7fe fedd 	bl	8000214 <__adddf3>
 800145a:	4602      	mov	r2, r0
 800145c:	460b      	mov	r3, r1
 800145e:	4934      	ldr	r1, [pc, #208]	; (8001530 <MPU6050_Read_Gyro+0x228>)
 8001460:	e9c1 2300 	strd	r2, r3, [r1]
		Gy_angle += (Gy * dTime/1000); // the gyro drifts over time
 8001464:	4b30      	ldr	r3, [pc, #192]	; (8001528 <MPU6050_Read_Gyro+0x220>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	4618      	mov	r0, r3
 800146a:	f7ff f831 	bl	80004d0 <__aeabi_f2d>
 800146e:	4b28      	ldr	r3, [pc, #160]	; (8001510 <MPU6050_Read_Gyro+0x208>)
 8001470:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001474:	f7ff f884 	bl	8000580 <__aeabi_dmul>
 8001478:	4602      	mov	r2, r0
 800147a:	460b      	mov	r3, r1
 800147c:	4610      	mov	r0, r2
 800147e:	4619      	mov	r1, r3
 8001480:	f04f 0200 	mov.w	r2, #0
 8001484:	4b29      	ldr	r3, [pc, #164]	; (800152c <MPU6050_Read_Gyro+0x224>)
 8001486:	f7ff f9a5 	bl	80007d4 <__aeabi_ddiv>
 800148a:	4602      	mov	r2, r0
 800148c:	460b      	mov	r3, r1
 800148e:	4610      	mov	r0, r2
 8001490:	4619      	mov	r1, r3
 8001492:	4b28      	ldr	r3, [pc, #160]	; (8001534 <MPU6050_Read_Gyro+0x22c>)
 8001494:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001498:	f7fe febc 	bl	8000214 <__adddf3>
 800149c:	4602      	mov	r2, r0
 800149e:	460b      	mov	r3, r1
 80014a0:	4924      	ldr	r1, [pc, #144]	; (8001534 <MPU6050_Read_Gyro+0x22c>)
 80014a2:	e9c1 2300 	strd	r2, r3, [r1]
		Gz_angle += (Gz * dTime/1000); // the gyro drifts over time
 80014a6:	4b20      	ldr	r3, [pc, #128]	; (8001528 <MPU6050_Read_Gyro+0x220>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	4618      	mov	r0, r3
 80014ac:	f7ff f810 	bl	80004d0 <__aeabi_f2d>
 80014b0:	4b18      	ldr	r3, [pc, #96]	; (8001514 <MPU6050_Read_Gyro+0x20c>)
 80014b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014b6:	f7ff f863 	bl	8000580 <__aeabi_dmul>
 80014ba:	4602      	mov	r2, r0
 80014bc:	460b      	mov	r3, r1
 80014be:	4610      	mov	r0, r2
 80014c0:	4619      	mov	r1, r3
 80014c2:	f04f 0200 	mov.w	r2, #0
 80014c6:	4b19      	ldr	r3, [pc, #100]	; (800152c <MPU6050_Read_Gyro+0x224>)
 80014c8:	f7ff f984 	bl	80007d4 <__aeabi_ddiv>
 80014cc:	4602      	mov	r2, r0
 80014ce:	460b      	mov	r3, r1
 80014d0:	4610      	mov	r0, r2
 80014d2:	4619      	mov	r1, r3
 80014d4:	4b18      	ldr	r3, [pc, #96]	; (8001538 <MPU6050_Read_Gyro+0x230>)
 80014d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014da:	f7fe fe9b 	bl	8000214 <__adddf3>
 80014de:	4602      	mov	r2, r0
 80014e0:	460b      	mov	r3, r1
 80014e2:	4915      	ldr	r1, [pc, #84]	; (8001538 <MPU6050_Read_Gyro+0x230>)
 80014e4:	e9c1 2300 	strd	r2, r3, [r1]
	}
}
 80014e8:	bf00      	nop
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	bf00      	nop
 80014f0:	00000000 	.word	0x00000000
 80014f4:	40606000 	.word	0x40606000
 80014f8:	20000258 	.word	0x20000258
 80014fc:	200000e4 	.word	0x200000e4
 8001500:	200000b0 	.word	0x200000b0
 8001504:	200000b2 	.word	0x200000b2
 8001508:	200000b4 	.word	0x200000b4
 800150c:	200000b8 	.word	0x200000b8
 8001510:	200001d0 	.word	0x200001d0
 8001514:	20000320 	.word	0x20000320
 8001518:	200000a8 	.word	0x200000a8
 800151c:	200001e8 	.word	0x200001e8
 8001520:	20000270 	.word	0x20000270
 8001524:	20000278 	.word	0x20000278
 8001528:	200000d0 	.word	0x200000d0
 800152c:	408f4000 	.word	0x408f4000
 8001530:	200000d8 	.word	0x200000d8
 8001534:	20000150 	.word	0x20000150
 8001538:	200001c0 	.word	0x200001c0

0800153c <MPU6050_Calibration>:

void MPU6050_Calibration(void){
 800153c:	b580      	push	{r7, lr}
 800153e:	b082      	sub	sp, #8
 8001540:	af00      	add	r7, sp, #0
	  for (uint8_t i = 0; i < 100; i++) { // Take the average of 100 readings
 8001542:	2300      	movs	r3, #0
 8001544:	71fb      	strb	r3, [r7, #7]
 8001546:	e057      	b.n	80015f8 <MPU6050_Calibration+0xbc>
		  MPU6050_Read_Accel();
 8001548:	f7ff fdc6 	bl	80010d8 <MPU6050_Read_Accel>
		  MPU6050_Read_Gyro();
 800154c:	f7ff fedc 	bl	8001308 <MPU6050_Read_Gyro>
		  Ax_0 += Ax;
 8001550:	4b55      	ldr	r3, [pc, #340]	; (80016a8 <MPU6050_Calibration+0x16c>)
 8001552:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001556:	4b55      	ldr	r3, [pc, #340]	; (80016ac <MPU6050_Calibration+0x170>)
 8001558:	e9d3 2300 	ldrd	r2, r3, [r3]
 800155c:	f7fe fe5a 	bl	8000214 <__adddf3>
 8001560:	4602      	mov	r2, r0
 8001562:	460b      	mov	r3, r1
 8001564:	4950      	ldr	r1, [pc, #320]	; (80016a8 <MPU6050_Calibration+0x16c>)
 8001566:	e9c1 2300 	strd	r2, r3, [r1]
		  Ay_0 += Ay;
 800156a:	4b51      	ldr	r3, [pc, #324]	; (80016b0 <MPU6050_Calibration+0x174>)
 800156c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001570:	4b50      	ldr	r3, [pc, #320]	; (80016b4 <MPU6050_Calibration+0x178>)
 8001572:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001576:	f7fe fe4d 	bl	8000214 <__adddf3>
 800157a:	4602      	mov	r2, r0
 800157c:	460b      	mov	r3, r1
 800157e:	494c      	ldr	r1, [pc, #304]	; (80016b0 <MPU6050_Calibration+0x174>)
 8001580:	e9c1 2300 	strd	r2, r3, [r1]
		  Az_0 += Az;
 8001584:	4b4c      	ldr	r3, [pc, #304]	; (80016b8 <MPU6050_Calibration+0x17c>)
 8001586:	e9d3 0100 	ldrd	r0, r1, [r3]
 800158a:	4b4c      	ldr	r3, [pc, #304]	; (80016bc <MPU6050_Calibration+0x180>)
 800158c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001590:	f7fe fe40 	bl	8000214 <__adddf3>
 8001594:	4602      	mov	r2, r0
 8001596:	460b      	mov	r3, r1
 8001598:	4947      	ldr	r1, [pc, #284]	; (80016b8 <MPU6050_Calibration+0x17c>)
 800159a:	e9c1 2300 	strd	r2, r3, [r1]

		  Gx_0 += Gx;
 800159e:	4b48      	ldr	r3, [pc, #288]	; (80016c0 <MPU6050_Calibration+0x184>)
 80015a0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80015a4:	4b47      	ldr	r3, [pc, #284]	; (80016c4 <MPU6050_Calibration+0x188>)
 80015a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015aa:	f7fe fe33 	bl	8000214 <__adddf3>
 80015ae:	4602      	mov	r2, r0
 80015b0:	460b      	mov	r3, r1
 80015b2:	4943      	ldr	r1, [pc, #268]	; (80016c0 <MPU6050_Calibration+0x184>)
 80015b4:	e9c1 2300 	strd	r2, r3, [r1]
		  Gy_0 += Gy;
 80015b8:	4b43      	ldr	r3, [pc, #268]	; (80016c8 <MPU6050_Calibration+0x18c>)
 80015ba:	e9d3 0100 	ldrd	r0, r1, [r3]
 80015be:	4b43      	ldr	r3, [pc, #268]	; (80016cc <MPU6050_Calibration+0x190>)
 80015c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015c4:	f7fe fe26 	bl	8000214 <__adddf3>
 80015c8:	4602      	mov	r2, r0
 80015ca:	460b      	mov	r3, r1
 80015cc:	493e      	ldr	r1, [pc, #248]	; (80016c8 <MPU6050_Calibration+0x18c>)
 80015ce:	e9c1 2300 	strd	r2, r3, [r1]
		  Gz_0 += Gz;
 80015d2:	4b3f      	ldr	r3, [pc, #252]	; (80016d0 <MPU6050_Calibration+0x194>)
 80015d4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80015d8:	4b3e      	ldr	r3, [pc, #248]	; (80016d4 <MPU6050_Calibration+0x198>)
 80015da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015de:	f7fe fe19 	bl	8000214 <__adddf3>
 80015e2:	4602      	mov	r2, r0
 80015e4:	460b      	mov	r3, r1
 80015e6:	493a      	ldr	r1, [pc, #232]	; (80016d0 <MPU6050_Calibration+0x194>)
 80015e8:	e9c1 2300 	strd	r2, r3, [r1]

		  HAL_Delay(10);
 80015ec:	200a      	movs	r0, #10
 80015ee:	f001 fa61 	bl	8002ab4 <HAL_Delay>
	  for (uint8_t i = 0; i < 100; i++) { // Take the average of 100 readings
 80015f2:	79fb      	ldrb	r3, [r7, #7]
 80015f4:	3301      	adds	r3, #1
 80015f6:	71fb      	strb	r3, [r7, #7]
 80015f8:	79fb      	ldrb	r3, [r7, #7]
 80015fa:	2b63      	cmp	r3, #99	; 0x63
 80015fc:	d9a4      	bls.n	8001548 <MPU6050_Calibration+0xc>
	  }
	  Ax_0 = Ax_0/100;
 80015fe:	4b2a      	ldr	r3, [pc, #168]	; (80016a8 <MPU6050_Calibration+0x16c>)
 8001600:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001604:	f04f 0200 	mov.w	r2, #0
 8001608:	4b33      	ldr	r3, [pc, #204]	; (80016d8 <MPU6050_Calibration+0x19c>)
 800160a:	f7ff f8e3 	bl	80007d4 <__aeabi_ddiv>
 800160e:	4602      	mov	r2, r0
 8001610:	460b      	mov	r3, r1
 8001612:	4925      	ldr	r1, [pc, #148]	; (80016a8 <MPU6050_Calibration+0x16c>)
 8001614:	e9c1 2300 	strd	r2, r3, [r1]
	  Ay_0 = Ay_0/100;
 8001618:	4b25      	ldr	r3, [pc, #148]	; (80016b0 <MPU6050_Calibration+0x174>)
 800161a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800161e:	f04f 0200 	mov.w	r2, #0
 8001622:	4b2d      	ldr	r3, [pc, #180]	; (80016d8 <MPU6050_Calibration+0x19c>)
 8001624:	f7ff f8d6 	bl	80007d4 <__aeabi_ddiv>
 8001628:	4602      	mov	r2, r0
 800162a:	460b      	mov	r3, r1
 800162c:	4920      	ldr	r1, [pc, #128]	; (80016b0 <MPU6050_Calibration+0x174>)
 800162e:	e9c1 2300 	strd	r2, r3, [r1]
	  Az_0 = Az_0/100;
 8001632:	4b21      	ldr	r3, [pc, #132]	; (80016b8 <MPU6050_Calibration+0x17c>)
 8001634:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001638:	f04f 0200 	mov.w	r2, #0
 800163c:	4b26      	ldr	r3, [pc, #152]	; (80016d8 <MPU6050_Calibration+0x19c>)
 800163e:	f7ff f8c9 	bl	80007d4 <__aeabi_ddiv>
 8001642:	4602      	mov	r2, r0
 8001644:	460b      	mov	r3, r1
 8001646:	491c      	ldr	r1, [pc, #112]	; (80016b8 <MPU6050_Calibration+0x17c>)
 8001648:	e9c1 2300 	strd	r2, r3, [r1]

	  Gx_0 = Gx_0/100;
 800164c:	4b1c      	ldr	r3, [pc, #112]	; (80016c0 <MPU6050_Calibration+0x184>)
 800164e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001652:	f04f 0200 	mov.w	r2, #0
 8001656:	4b20      	ldr	r3, [pc, #128]	; (80016d8 <MPU6050_Calibration+0x19c>)
 8001658:	f7ff f8bc 	bl	80007d4 <__aeabi_ddiv>
 800165c:	4602      	mov	r2, r0
 800165e:	460b      	mov	r3, r1
 8001660:	4917      	ldr	r1, [pc, #92]	; (80016c0 <MPU6050_Calibration+0x184>)
 8001662:	e9c1 2300 	strd	r2, r3, [r1]
	  Gy_0 = Gy_0/100;
 8001666:	4b18      	ldr	r3, [pc, #96]	; (80016c8 <MPU6050_Calibration+0x18c>)
 8001668:	e9d3 0100 	ldrd	r0, r1, [r3]
 800166c:	f04f 0200 	mov.w	r2, #0
 8001670:	4b19      	ldr	r3, [pc, #100]	; (80016d8 <MPU6050_Calibration+0x19c>)
 8001672:	f7ff f8af 	bl	80007d4 <__aeabi_ddiv>
 8001676:	4602      	mov	r2, r0
 8001678:	460b      	mov	r3, r1
 800167a:	4913      	ldr	r1, [pc, #76]	; (80016c8 <MPU6050_Calibration+0x18c>)
 800167c:	e9c1 2300 	strd	r2, r3, [r1]
	  Gz_0 = Gz_0/100;
 8001680:	4b13      	ldr	r3, [pc, #76]	; (80016d0 <MPU6050_Calibration+0x194>)
 8001682:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001686:	f04f 0200 	mov.w	r2, #0
 800168a:	4b13      	ldr	r3, [pc, #76]	; (80016d8 <MPU6050_Calibration+0x19c>)
 800168c:	f7ff f8a2 	bl	80007d4 <__aeabi_ddiv>
 8001690:	4602      	mov	r2, r0
 8001692:	460b      	mov	r3, r1
 8001694:	490e      	ldr	r1, [pc, #56]	; (80016d0 <MPU6050_Calibration+0x194>)
 8001696:	e9c1 2300 	strd	r2, r3, [r1]

	  MPU6050_Calib_status = 1;
 800169a:	4b10      	ldr	r3, [pc, #64]	; (80016dc <MPU6050_Calibration+0x1a0>)
 800169c:	2201      	movs	r2, #1
 800169e:	701a      	strb	r2, [r3, #0]
}
 80016a0:	bf00      	nop
 80016a2:	3708      	adds	r7, #8
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bd80      	pop	{r7, pc}
 80016a8:	20000280 	.word	0x20000280
 80016ac:	20000208 	.word	0x20000208
 80016b0:	20000140 	.word	0x20000140
 80016b4:	200001b0 	.word	0x200001b0
 80016b8:	20000160 	.word	0x20000160
 80016bc:	20000260 	.word	0x20000260
 80016c0:	200001e8 	.word	0x200001e8
 80016c4:	200000b8 	.word	0x200000b8
 80016c8:	20000270 	.word	0x20000270
 80016cc:	200001d0 	.word	0x200001d0
 80016d0:	20000278 	.word	0x20000278
 80016d4:	20000320 	.word	0x20000320
 80016d8:	40590000 	.word	0x40590000
 80016dc:	200000a8 	.word	0x200000a8

080016e0 <complementaryFilter>:

void complementaryFilter(void){
 80016e0:	b5b0      	push	{r4, r5, r7, lr}
 80016e2:	af00      	add	r7, sp, #0
	angleX = (0.97 * (angleX+Gy*(dTime/1000))) + 0.03*pitch;
 80016e4:	4b48      	ldr	r3, [pc, #288]	; (8001808 <complementaryFilter+0x128>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	4618      	mov	r0, r3
 80016ea:	f7fe fef1 	bl	80004d0 <__aeabi_f2d>
 80016ee:	4604      	mov	r4, r0
 80016f0:	460d      	mov	r5, r1
 80016f2:	4b46      	ldr	r3, [pc, #280]	; (800180c <complementaryFilter+0x12c>)
 80016f4:	edd3 7a00 	vldr	s15, [r3]
 80016f8:	ed9f 7a45 	vldr	s14, [pc, #276]	; 8001810 <complementaryFilter+0x130>
 80016fc:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001700:	ee16 0a90 	vmov	r0, s13
 8001704:	f7fe fee4 	bl	80004d0 <__aeabi_f2d>
 8001708:	4b42      	ldr	r3, [pc, #264]	; (8001814 <complementaryFilter+0x134>)
 800170a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800170e:	f7fe ff37 	bl	8000580 <__aeabi_dmul>
 8001712:	4602      	mov	r2, r0
 8001714:	460b      	mov	r3, r1
 8001716:	4620      	mov	r0, r4
 8001718:	4629      	mov	r1, r5
 800171a:	f7fe fd7b 	bl	8000214 <__adddf3>
 800171e:	4602      	mov	r2, r0
 8001720:	460b      	mov	r3, r1
 8001722:	4610      	mov	r0, r2
 8001724:	4619      	mov	r1, r3
 8001726:	a334      	add	r3, pc, #208	; (adr r3, 80017f8 <complementaryFilter+0x118>)
 8001728:	e9d3 2300 	ldrd	r2, r3, [r3]
 800172c:	f7fe ff28 	bl	8000580 <__aeabi_dmul>
 8001730:	4602      	mov	r2, r0
 8001732:	460b      	mov	r3, r1
 8001734:	4614      	mov	r4, r2
 8001736:	461d      	mov	r5, r3
 8001738:	4b37      	ldr	r3, [pc, #220]	; (8001818 <complementaryFilter+0x138>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	4618      	mov	r0, r3
 800173e:	f7fe fec7 	bl	80004d0 <__aeabi_f2d>
 8001742:	a32f      	add	r3, pc, #188	; (adr r3, 8001800 <complementaryFilter+0x120>)
 8001744:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001748:	f7fe ff1a 	bl	8000580 <__aeabi_dmul>
 800174c:	4602      	mov	r2, r0
 800174e:	460b      	mov	r3, r1
 8001750:	4620      	mov	r0, r4
 8001752:	4629      	mov	r1, r5
 8001754:	f7fe fd5e 	bl	8000214 <__adddf3>
 8001758:	4602      	mov	r2, r0
 800175a:	460b      	mov	r3, r1
 800175c:	4610      	mov	r0, r2
 800175e:	4619      	mov	r1, r3
 8001760:	f7ff f9be 	bl	8000ae0 <__aeabi_d2f>
 8001764:	4603      	mov	r3, r0
 8001766:	4a28      	ldr	r2, [pc, #160]	; (8001808 <complementaryFilter+0x128>)
 8001768:	6013      	str	r3, [r2, #0]
	angleY = (0.97 * (angleY+Gx*(dTime/1000))) + 0.03*roll;
 800176a:	4b2c      	ldr	r3, [pc, #176]	; (800181c <complementaryFilter+0x13c>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	4618      	mov	r0, r3
 8001770:	f7fe feae 	bl	80004d0 <__aeabi_f2d>
 8001774:	4604      	mov	r4, r0
 8001776:	460d      	mov	r5, r1
 8001778:	4b24      	ldr	r3, [pc, #144]	; (800180c <complementaryFilter+0x12c>)
 800177a:	edd3 7a00 	vldr	s15, [r3]
 800177e:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8001810 <complementaryFilter+0x130>
 8001782:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001786:	ee16 0a90 	vmov	r0, s13
 800178a:	f7fe fea1 	bl	80004d0 <__aeabi_f2d>
 800178e:	4b24      	ldr	r3, [pc, #144]	; (8001820 <complementaryFilter+0x140>)
 8001790:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001794:	f7fe fef4 	bl	8000580 <__aeabi_dmul>
 8001798:	4602      	mov	r2, r0
 800179a:	460b      	mov	r3, r1
 800179c:	4620      	mov	r0, r4
 800179e:	4629      	mov	r1, r5
 80017a0:	f7fe fd38 	bl	8000214 <__adddf3>
 80017a4:	4602      	mov	r2, r0
 80017a6:	460b      	mov	r3, r1
 80017a8:	4610      	mov	r0, r2
 80017aa:	4619      	mov	r1, r3
 80017ac:	a312      	add	r3, pc, #72	; (adr r3, 80017f8 <complementaryFilter+0x118>)
 80017ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017b2:	f7fe fee5 	bl	8000580 <__aeabi_dmul>
 80017b6:	4602      	mov	r2, r0
 80017b8:	460b      	mov	r3, r1
 80017ba:	4614      	mov	r4, r2
 80017bc:	461d      	mov	r5, r3
 80017be:	4b19      	ldr	r3, [pc, #100]	; (8001824 <complementaryFilter+0x144>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	4618      	mov	r0, r3
 80017c4:	f7fe fe84 	bl	80004d0 <__aeabi_f2d>
 80017c8:	a30d      	add	r3, pc, #52	; (adr r3, 8001800 <complementaryFilter+0x120>)
 80017ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017ce:	f7fe fed7 	bl	8000580 <__aeabi_dmul>
 80017d2:	4602      	mov	r2, r0
 80017d4:	460b      	mov	r3, r1
 80017d6:	4620      	mov	r0, r4
 80017d8:	4629      	mov	r1, r5
 80017da:	f7fe fd1b 	bl	8000214 <__adddf3>
 80017de:	4602      	mov	r2, r0
 80017e0:	460b      	mov	r3, r1
 80017e2:	4610      	mov	r0, r2
 80017e4:	4619      	mov	r1, r3
 80017e6:	f7ff f97b 	bl	8000ae0 <__aeabi_d2f>
 80017ea:	4603      	mov	r3, r0
 80017ec:	4a0b      	ldr	r2, [pc, #44]	; (800181c <complementaryFilter+0x13c>)
 80017ee:	6013      	str	r3, [r2, #0]
}
 80017f0:	bf00      	nop
 80017f2:	bdb0      	pop	{r4, r5, r7, pc}
 80017f4:	f3af 8000 	nop.w
 80017f8:	70a3d70a 	.word	0x70a3d70a
 80017fc:	3fef0a3d 	.word	0x3fef0a3d
 8001800:	eb851eb8 	.word	0xeb851eb8
 8001804:	3f9eb851 	.word	0x3f9eb851
 8001808:	200000a0 	.word	0x200000a0
 800180c:	200000d0 	.word	0x200000d0
 8001810:	447a0000 	.word	0x447a0000
 8001814:	200001d0 	.word	0x200001d0
 8001818:	20000318 	.word	0x20000318
 800181c:	200000a4 	.word	0x200000a4
 8001820:	200000b8 	.word	0x200000b8
 8001824:	2000031c 	.word	0x2000031c

08001828 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b09c      	sub	sp, #112	; 0x70
 800182c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

	steps_per_rev_eff = (steps_per_rev_motor * microsteps_set * 2);
 800182e:	4b9a      	ldr	r3, [pc, #616]	; (8001a98 <main+0x270>)
 8001830:	f44f 6248 	mov.w	r2, #3200	; 0xc80
 8001834:	601a      	str	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001836:	f001 f8cb 	bl	80029d0 <HAL_Init>

  arm_pid_instance_f32 PID;

  /* Set PID parameters */
   /* Set this for your needs */
   PID.Kp = PID_KP;        /* Proporcional */
 800183a:	4b98      	ldr	r3, [pc, #608]	; (8001a9c <main+0x274>)
 800183c:	657b      	str	r3, [r7, #84]	; 0x54
   PID.Ki = PID_KI;        /* Integral */
 800183e:	4b98      	ldr	r3, [pc, #608]	; (8001aa0 <main+0x278>)
 8001840:	65bb      	str	r3, [r7, #88]	; 0x58
   PID.Kd = PID_KD;        /* Derivative */
 8001842:	f04f 0300 	mov.w	r3, #0
 8001846:	65fb      	str	r3, [r7, #92]	; 0x5c

   /* Initialize PID system, float32_t format */
   arm_pid_init_f32(&PID, 1);
 8001848:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800184c:	2101      	movs	r1, #1
 800184e:	4618      	mov	r0, r3
 8001850:	f005 f862 	bl	8006918 <arm_pid_init_f32>



  /* Init PID controller */
  PIDController pid = { PID_KP, PID_KI, PID_KD,
 8001854:	1d3b      	adds	r3, r7, #4
 8001856:	2238      	movs	r2, #56	; 0x38
 8001858:	2100      	movs	r1, #0
 800185a:	4618      	mov	r0, r3
 800185c:	f005 f8a2 	bl	80069a4 <memset>
 8001860:	4b8e      	ldr	r3, [pc, #568]	; (8001a9c <main+0x274>)
 8001862:	607b      	str	r3, [r7, #4]
 8001864:	4b8e      	ldr	r3, [pc, #568]	; (8001aa0 <main+0x278>)
 8001866:	60bb      	str	r3, [r7, #8]
 8001868:	4b8e      	ldr	r3, [pc, #568]	; (8001aa4 <main+0x27c>)
 800186a:	617b      	str	r3, [r7, #20]
 800186c:	4b8e      	ldr	r3, [pc, #568]	; (8001aa8 <main+0x280>)
 800186e:	61bb      	str	r3, [r7, #24]
 8001870:	4b8c      	ldr	r3, [pc, #560]	; (8001aa4 <main+0x27c>)
 8001872:	61fb      	str	r3, [r7, #28]
 8001874:	4b8c      	ldr	r3, [pc, #560]	; (8001aa8 <main+0x280>)
 8001876:	623b      	str	r3, [r7, #32]
 8001878:	4b8c      	ldr	r3, [pc, #560]	; (8001aac <main+0x284>)
 800187a:	627b      	str	r3, [r7, #36]	; 0x24
                        PID_TAU,
                        PID_LIM_MIN, PID_LIM_MAX,
						PID_LIM_MIN_INT, PID_LIM_MAX_INT,
                        SAMPLE_TIME_S };

  PIDController_Init(&pid);
 800187c:	1d3b      	adds	r3, r7, #4
 800187e:	4618      	mov	r0, r3
 8001880:	f000 fd72 	bl	8002368 <PIDController_Init>

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001884:	f000 f932 	bl	8001aec <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001888:	f000 fb16 	bl	8001eb8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800188c:	f000 faea 	bl	8001e64 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8001890:	f000 f9c8 	bl	8001c24 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001894:	f000 fa3a 	bl	8001d0c <MX_TIM3_Init>
  MX_TIM6_Init();
 8001898:	f000 faae 	bl	8001df8 <MX_TIM6_Init>
  MX_I2C1_Init();
 800189c:	f000 f994 	bl	8001bc8 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80018a0:	2200      	movs	r2, #0
 80018a2:	2100      	movs	r1, #0
 80018a4:	2026      	movs	r0, #38	; 0x26
 80018a6:	f001 fa04 	bl	8002cb2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 80018aa:	2026      	movs	r0, #38	; 0x26
 80018ac:	f001 fa1d 	bl	8002cea <HAL_NVIC_EnableIRQ>

  NVIC_SetPriority(TIM2_IRQn, 0);
 80018b0:	2100      	movs	r1, #0
 80018b2:	201c      	movs	r0, #28
 80018b4:	f7ff fafe 	bl	8000eb4 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM2_IRQn);
 80018b8:	201c      	movs	r0, #28
 80018ba:	f7ff fadd 	bl	8000e78 <__NVIC_EnableIRQ>

  NVIC_SetPriority(TIM3_IRQn, 0);
 80018be:	2100      	movs	r1, #0
 80018c0:	201d      	movs	r0, #29
 80018c2:	f7ff faf7 	bl	8000eb4 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM3_IRQn);
 80018c6:	201d      	movs	r0, #29
 80018c8:	f7ff fad6 	bl	8000e78 <__NVIC_EnableIRQ>

  NVIC_SetPriority(TIM6_DAC_IRQn, 0);
 80018cc:	2100      	movs	r1, #0
 80018ce:	2036      	movs	r0, #54	; 0x36
 80018d0:	f7ff faf0 	bl	8000eb4 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80018d4:	2036      	movs	r0, #54	; 0x36
 80018d6:	f7ff facf 	bl	8000e78 <__NVIC_EnableIRQ>
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 80018da:	b662      	cpsie	i
}
 80018dc:	bf00      	nop

  __enable_irq();

//  HAL_TIM_Base_Start_IT(&htim6);
  HAL_TIM_Base_Stop_IT(&htim6);
 80018de:	4874      	ldr	r0, [pc, #464]	; (8001ab0 <main+0x288>)
 80018e0:	f003 fa48 	bl	8004d74 <HAL_TIM_Base_Stop_IT>
  __HAL_TIM_CLEAR_FLAG(&htim6, TIM_SR_UIF);
 80018e4:	4b72      	ldr	r3, [pc, #456]	; (8001ab0 <main+0x288>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f06f 0201 	mvn.w	r2, #1
 80018ec:	611a      	str	r2, [r3, #16]
  __HAL_TIM_CLEAR_FLAG(&htim6, TIM_IT_UPDATE);
 80018ee:	4b70      	ldr	r3, [pc, #448]	; (8001ab0 <main+0x288>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f06f 0201 	mvn.w	r2, #1
 80018f6:	611a      	str	r2, [r3, #16]


  HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_1);
 80018f8:	2100      	movs	r1, #0
 80018fa:	486e      	ldr	r0, [pc, #440]	; (8001ab4 <main+0x28c>)
 80018fc:	f003 fac2 	bl	8004e84 <HAL_TIM_OC_Start_IT>
  HAL_TIM_OC_Start_IT(&htim3, TIM_CHANNEL_1);
 8001900:	2100      	movs	r1, #0
 8001902:	486d      	ldr	r0, [pc, #436]	; (8001ab8 <main+0x290>)
 8001904:	f003 fabe 	bl	8004e84 <HAL_TIM_OC_Start_IT>

  HAL_TIM_OC_Stop_IT(&htim2, TIM_CHANNEL_1);
 8001908:	2100      	movs	r1, #0
 800190a:	486a      	ldr	r0, [pc, #424]	; (8001ab4 <main+0x28c>)
 800190c:	f003 fbc8 	bl	80050a0 <HAL_TIM_OC_Stop_IT>
  HAL_TIM_OC_Stop_IT(&htim3, TIM_CHANNEL_1);
 8001910:	2100      	movs	r1, #0
 8001912:	4869      	ldr	r0, [pc, #420]	; (8001ab8 <main+0x290>)
 8001914:	f003 fbc4 	bl	80050a0 <HAL_TIM_OC_Stop_IT>

  HAL_GPIO_WritePin(GPIOA, DIR_DX_Pin, GPIO_PIN_SET);
 8001918:	2201      	movs	r2, #1
 800191a:	2102      	movs	r1, #2
 800191c:	4867      	ldr	r0, [pc, #412]	; (8001abc <main+0x294>)
 800191e:	f001 fc25 	bl	800316c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, DIR_SX_Pin, GPIO_PIN_SET);
 8001922:	2201      	movs	r2, #1
 8001924:	2180      	movs	r1, #128	; 0x80
 8001926:	4865      	ldr	r0, [pc, #404]	; (8001abc <main+0x294>)
 8001928:	f001 fc20 	bl	800316c <HAL_GPIO_WritePin>

  MPU6050_Init();
 800192c:	f7ff fb58 	bl	8000fe0 <MPU6050_Init>
  MPU6050_Calibration();
 8001930:	f7ff fe04 	bl	800153c <MPU6050_Calibration>

  float setpoint = 0.0f;
 8001934:	f04f 0300 	mov.w	r3, #0
 8001938:	66fb      	str	r3, [r7, #108]	; 0x6c
  while (1){
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	dTime = HAL_GetTick() - last;
 800193a:	f001 f8af 	bl	8002a9c <HAL_GetTick>
 800193e:	4602      	mov	r2, r0
 8001940:	4b5f      	ldr	r3, [pc, #380]	; (8001ac0 <main+0x298>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	1ad3      	subs	r3, r2, r3
 8001946:	ee07 3a90 	vmov	s15, r3
 800194a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800194e:	4b5d      	ldr	r3, [pc, #372]	; (8001ac4 <main+0x29c>)
 8001950:	edc3 7a00 	vstr	s15, [r3]
	last = HAL_GetTick();
 8001954:	f001 f8a2 	bl	8002a9c <HAL_GetTick>
 8001958:	4603      	mov	r3, r0
 800195a:	4a59      	ldr	r2, [pc, #356]	; (8001ac0 <main+0x298>)
 800195c:	6013      	str	r3, [r2, #0]
//	freq = HAL_GetTickFreq();

	MPU6050_getStatus();
 800195e:	f7ff fb9d 	bl	800109c <MPU6050_getStatus>
	MPU6050_Read_Accel();
 8001962:	f7ff fbb9 	bl	80010d8 <MPU6050_Read_Accel>
	MPU6050_Read_Gyro();
 8001966:	f7ff fccf 	bl	8001308 <MPU6050_Read_Gyro>

	read_UART_input();
 800196a:	f000 fb23 	bl	8001fb4 <read_UART_input>

//	VELOCITY = 0.6381/4;
//	setSpeed(VELOCITY);
	VELOCITY = pid.out;
 800196e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001970:	4a55      	ldr	r2, [pc, #340]	; (8001ac8 <main+0x2a0>)
 8001972:	6013      	str	r3, [r2, #0]
	setSpeedPID(VELOCITY);
 8001974:	4b54      	ldr	r3, [pc, #336]	; (8001ac8 <main+0x2a0>)
 8001976:	edd3 7a00 	vldr	s15, [r3]
 800197a:	eeb0 0a67 	vmov.f32	s0, s15
 800197e:	f000 fe13 	bl	80025a8 <setSpeedPID>

	getDirection();
 8001982:	f000 fdf5 	bl	8002570 <getDirection>
	setDirection(direction);
 8001986:	4b51      	ldr	r3, [pc, #324]	; (8001acc <main+0x2a4>)
 8001988:	781b      	ldrb	r3, [r3, #0]
 800198a:	4618      	mov	r0, r3
 800198c:	f000 fdcc 	bl	8002528 <setDirection>

	if ((readBuf[0] == STOP) ){
 8001990:	4b4f      	ldr	r3, [pc, #316]	; (8001ad0 <main+0x2a8>)
 8001992:	781b      	ldrb	r3, [r3, #0]
 8001994:	2b53      	cmp	r3, #83	; 0x53
 8001996:	d104      	bne.n	80019a2 <main+0x17a>
		stopMotor(&htim2,&htim3, &htim6);
 8001998:	4a45      	ldr	r2, [pc, #276]	; (8001ab0 <main+0x288>)
 800199a:	4947      	ldr	r1, [pc, #284]	; (8001ab8 <main+0x290>)
 800199c:	4845      	ldr	r0, [pc, #276]	; (8001ab4 <main+0x28c>)
 800199e:	f000 ffc9 	bl	8002934 <stopMotor>
	}
	if ((readBuf[0] == GO) ){
 80019a2:	4b4b      	ldr	r3, [pc, #300]	; (8001ad0 <main+0x2a8>)
 80019a4:	781b      	ldrb	r3, [r3, #0]
 80019a6:	2b47      	cmp	r3, #71	; 0x47
 80019a8:	d106      	bne.n	80019b8 <main+0x190>
		goForward(&htim2, &htim3, &htim6, 0.1);
 80019aa:	ed9f 0a4a 	vldr	s0, [pc, #296]	; 8001ad4 <main+0x2ac>
 80019ae:	4a40      	ldr	r2, [pc, #256]	; (8001ab0 <main+0x288>)
 80019b0:	4941      	ldr	r1, [pc, #260]	; (8001ab8 <main+0x290>)
 80019b2:	4840      	ldr	r0, [pc, #256]	; (8001ab4 <main+0x28c>)
 80019b4:	f000 fe78 	bl	80026a8 <goForward>
	}
	if ((readBuf[0] == BACK) ){
 80019b8:	4b45      	ldr	r3, [pc, #276]	; (8001ad0 <main+0x2a8>)
 80019ba:	781b      	ldrb	r3, [r3, #0]
 80019bc:	2b42      	cmp	r3, #66	; 0x42
 80019be:	d106      	bne.n	80019ce <main+0x1a6>
		goBackward(&htim2, &htim3, &htim6, 0.2);
 80019c0:	ed9f 0a45 	vldr	s0, [pc, #276]	; 8001ad8 <main+0x2b0>
 80019c4:	4a3a      	ldr	r2, [pc, #232]	; (8001ab0 <main+0x288>)
 80019c6:	493c      	ldr	r1, [pc, #240]	; (8001ab8 <main+0x290>)
 80019c8:	483a      	ldr	r0, [pc, #232]	; (8001ab4 <main+0x28c>)
 80019ca:	f000 feb1 	bl	8002730 <goBackward>
	}
	if ((readBuf[0] == LEFT) ){
 80019ce:	4b40      	ldr	r3, [pc, #256]	; (8001ad0 <main+0x2a8>)
 80019d0:	781b      	ldrb	r3, [r3, #0]
 80019d2:	2b4c      	cmp	r3, #76	; 0x4c
 80019d4:	d106      	bne.n	80019e4 <main+0x1bc>
		rotateL(&htim2, &htim3, &htim6, M_PI/2);
 80019d6:	ed9f 0a41 	vldr	s0, [pc, #260]	; 8001adc <main+0x2b4>
 80019da:	4a35      	ldr	r2, [pc, #212]	; (8001ab0 <main+0x288>)
 80019dc:	4936      	ldr	r1, [pc, #216]	; (8001ab8 <main+0x290>)
 80019de:	4835      	ldr	r0, [pc, #212]	; (8001ab4 <main+0x28c>)
 80019e0:	f000 feea 	bl	80027b8 <rotateL>
	}
	if ((readBuf[0] == RIGHT) ){
 80019e4:	4b3a      	ldr	r3, [pc, #232]	; (8001ad0 <main+0x2a8>)
 80019e6:	781b      	ldrb	r3, [r3, #0]
 80019e8:	2b52      	cmp	r3, #82	; 0x52
 80019ea:	d106      	bne.n	80019fa <main+0x1d2>
		rotateR(&htim2, &htim3, &htim6, M_PI/2);
 80019ec:	ed9f 0a3b 	vldr	s0, [pc, #236]	; 8001adc <main+0x2b4>
 80019f0:	4a2f      	ldr	r2, [pc, #188]	; (8001ab0 <main+0x288>)
 80019f2:	4931      	ldr	r1, [pc, #196]	; (8001ab8 <main+0x290>)
 80019f4:	482f      	ldr	r0, [pc, #188]	; (8001ab4 <main+0x28c>)
 80019f6:	f000 ff3f 	bl	8002878 <rotateR>
	}

	if((readBuf[0] == TEST) ){
 80019fa:	4b35      	ldr	r3, [pc, #212]	; (8001ad0 <main+0x2a8>)
 80019fc:	781b      	ldrb	r3, [r3, #0]
 80019fe:	2b54      	cmp	r3, #84	; 0x54
 8001a00:	d103      	bne.n	8001a0a <main+0x1e2>
		simpleGO(&htim2, &htim3);
 8001a02:	492d      	ldr	r1, [pc, #180]	; (8001ab8 <main+0x290>)
 8001a04:	482b      	ldr	r0, [pc, #172]	; (8001ab4 <main+0x28c>)
 8001a06:	f000 fe21 	bl	800264c <simpleGO>
	}

	complementaryFilter();
 8001a0a:	f7ff fe69 	bl	80016e0 <complementaryFilter>

    PIDController_Update(&pid, setpoint, angleX);	//IN: angle in deg; OUT: angular speed (deg/sec)
 8001a0e:	4b34      	ldr	r3, [pc, #208]	; (8001ae0 <main+0x2b8>)
 8001a10:	edd3 7a00 	vldr	s15, [r3]
 8001a14:	1d3b      	adds	r3, r7, #4
 8001a16:	eef0 0a67 	vmov.f32	s1, s15
 8001a1a:	ed97 0a1b 	vldr	s0, [r7, #108]	; 0x6c
 8001a1e:	4618      	mov	r0, r3
 8001a20:	f000 fcc0 	bl	80023a4 <PIDController_Update>

    pid_error = pid.prevError;
 8001a24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a26:	4a2f      	ldr	r2, [pc, #188]	; (8001ae4 <main+0x2bc>)
 8001a28:	6013      	str	r3, [r2, #0]
    vel = arm_pid_f32(&PID, pid_error);
 8001a2a:	4b2e      	ldr	r3, [pc, #184]	; (8001ae4 <main+0x2bc>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8001a32:	66ba      	str	r2, [r7, #104]	; 0x68
 8001a34:	667b      	str	r3, [r7, #100]	; 0x64
  float32_t in)
  {
    float32_t out;

    /* y[n] = y[n-1] + A0 * x[n] + A1 * x[n-1] + A2 * x[n-2]  */
    out = (S->A0 * in) +
 8001a36:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001a38:	ed93 7a00 	vldr	s14, [r3]
 8001a3c:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8001a40:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8001a44:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001a46:	edd3 6a01 	vldr	s13, [r3, #4]
 8001a4a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001a4c:	edd3 7a03 	vldr	s15, [r3, #12]
 8001a50:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 8001a54:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8001a58:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001a5a:	edd3 6a02 	vldr	s13, [r3, #8]
 8001a5e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001a60:	edd3 7a04 	vldr	s15, [r3, #16]
 8001a64:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a68:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001a6c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001a6e:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 8001a72:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a76:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60

    /* Update state */
    S->state[1] = S->state[0];
 8001a7a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001a7c:	68da      	ldr	r2, [r3, #12]
 8001a7e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001a80:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 8001a82:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001a84:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8001a86:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 8001a88:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001a8a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001a8c:	615a      	str	r2, [r3, #20]

    /* return to application */
    return (out);
 8001a8e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001a90:	4a15      	ldr	r2, [pc, #84]	; (8001ae8 <main+0x2c0>)
 8001a92:	6013      	str	r3, [r2, #0]
	dTime = HAL_GetTick() - last;
 8001a94:	e751      	b.n	800193a <main+0x112>
 8001a96:	bf00      	nop
 8001a98:	20000008 	.word	0x20000008
 8001a9c:	41200000 	.word	0x41200000
 8001aa0:	43480000 	.word	0x43480000
 8001aa4:	c3bb8000 	.word	0xc3bb8000
 8001aa8:	43bb8000 	.word	0x43bb8000
 8001aac:	3c23d70a 	.word	0x3c23d70a
 8001ab0:	20000210 	.word	0x20000210
 8001ab4:	20000288 	.word	0x20000288
 8001ab8:	20000168 	.word	0x20000168
 8001abc:	40020000 	.word	0x40020000
 8001ac0:	2000009c 	.word	0x2000009c
 8001ac4:	200000d0 	.word	0x200000d0
 8001ac8:	200000e0 	.word	0x200000e0
 8001acc:	200001c8 	.word	0x200001c8
 8001ad0:	20000328 	.word	0x20000328
 8001ad4:	3dcccccd 	.word	0x3dcccccd
 8001ad8:	3e4ccccd 	.word	0x3e4ccccd
 8001adc:	3fc90fdb 	.word	0x3fc90fdb
 8001ae0:	200000a0 	.word	0x200000a0
 8001ae4:	200001e0 	.word	0x200001e0
 8001ae8:	200001b8 	.word	0x200001b8

08001aec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b094      	sub	sp, #80	; 0x50
 8001af0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001af2:	f107 031c 	add.w	r3, r7, #28
 8001af6:	2234      	movs	r2, #52	; 0x34
 8001af8:	2100      	movs	r1, #0
 8001afa:	4618      	mov	r0, r3
 8001afc:	f004 ff52 	bl	80069a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b00:	f107 0308 	add.w	r3, r7, #8
 8001b04:	2200      	movs	r2, #0
 8001b06:	601a      	str	r2, [r3, #0]
 8001b08:	605a      	str	r2, [r3, #4]
 8001b0a:	609a      	str	r2, [r3, #8]
 8001b0c:	60da      	str	r2, [r3, #12]
 8001b0e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b10:	2300      	movs	r3, #0
 8001b12:	607b      	str	r3, [r7, #4]
 8001b14:	4b2a      	ldr	r3, [pc, #168]	; (8001bc0 <SystemClock_Config+0xd4>)
 8001b16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b18:	4a29      	ldr	r2, [pc, #164]	; (8001bc0 <SystemClock_Config+0xd4>)
 8001b1a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b1e:	6413      	str	r3, [r2, #64]	; 0x40
 8001b20:	4b27      	ldr	r3, [pc, #156]	; (8001bc0 <SystemClock_Config+0xd4>)
 8001b22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b28:	607b      	str	r3, [r7, #4]
 8001b2a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	603b      	str	r3, [r7, #0]
 8001b30:	4b24      	ldr	r3, [pc, #144]	; (8001bc4 <SystemClock_Config+0xd8>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001b38:	4a22      	ldr	r2, [pc, #136]	; (8001bc4 <SystemClock_Config+0xd8>)
 8001b3a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b3e:	6013      	str	r3, [r2, #0]
 8001b40:	4b20      	ldr	r3, [pc, #128]	; (8001bc4 <SystemClock_Config+0xd8>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001b48:	603b      	str	r3, [r7, #0]
 8001b4a:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001b4c:	2302      	movs	r3, #2
 8001b4e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001b50:	2301      	movs	r3, #1
 8001b52:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001b54:	2310      	movs	r3, #16
 8001b56:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b58:	2302      	movs	r3, #2
 8001b5a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001b60:	2310      	movs	r3, #16
 8001b62:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001b64:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001b68:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001b6a:	2304      	movs	r3, #4
 8001b6c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001b6e:	2302      	movs	r3, #2
 8001b70:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001b72:	2302      	movs	r3, #2
 8001b74:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b76:	f107 031c 	add.w	r3, r7, #28
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	f002 fd9c 	bl	80046b8 <HAL_RCC_OscConfig>
 8001b80:	4603      	mov	r3, r0
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d001      	beq.n	8001b8a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8001b86:	f000 fa2d 	bl	8001fe4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b8a:	230f      	movs	r3, #15
 8001b8c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b8e:	2302      	movs	r3, #2
 8001b90:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b92:	2300      	movs	r3, #0
 8001b94:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001b96:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b9a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001ba0:	f107 0308 	add.w	r3, r7, #8
 8001ba4:	2102      	movs	r1, #2
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	f002 faba 	bl	8004120 <HAL_RCC_ClockConfig>
 8001bac:	4603      	mov	r3, r0
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d001      	beq.n	8001bb6 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8001bb2:	f000 fa17 	bl	8001fe4 <Error_Handler>
  }
}
 8001bb6:	bf00      	nop
 8001bb8:	3750      	adds	r7, #80	; 0x50
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}
 8001bbe:	bf00      	nop
 8001bc0:	40023800 	.word	0x40023800
 8001bc4:	40007000 	.word	0x40007000

08001bc8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001bcc:	4b12      	ldr	r3, [pc, #72]	; (8001c18 <MX_I2C1_Init+0x50>)
 8001bce:	4a13      	ldr	r2, [pc, #76]	; (8001c1c <MX_I2C1_Init+0x54>)
 8001bd0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001bd2:	4b11      	ldr	r3, [pc, #68]	; (8001c18 <MX_I2C1_Init+0x50>)
 8001bd4:	4a12      	ldr	r2, [pc, #72]	; (8001c20 <MX_I2C1_Init+0x58>)
 8001bd6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001bd8:	4b0f      	ldr	r3, [pc, #60]	; (8001c18 <MX_I2C1_Init+0x50>)
 8001bda:	2200      	movs	r2, #0
 8001bdc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001bde:	4b0e      	ldr	r3, [pc, #56]	; (8001c18 <MX_I2C1_Init+0x50>)
 8001be0:	2200      	movs	r2, #0
 8001be2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001be4:	4b0c      	ldr	r3, [pc, #48]	; (8001c18 <MX_I2C1_Init+0x50>)
 8001be6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001bea:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001bec:	4b0a      	ldr	r3, [pc, #40]	; (8001c18 <MX_I2C1_Init+0x50>)
 8001bee:	2200      	movs	r2, #0
 8001bf0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001bf2:	4b09      	ldr	r3, [pc, #36]	; (8001c18 <MX_I2C1_Init+0x50>)
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001bf8:	4b07      	ldr	r3, [pc, #28]	; (8001c18 <MX_I2C1_Init+0x50>)
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001bfe:	4b06      	ldr	r3, [pc, #24]	; (8001c18 <MX_I2C1_Init+0x50>)
 8001c00:	2200      	movs	r2, #0
 8001c02:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001c04:	4804      	ldr	r0, [pc, #16]	; (8001c18 <MX_I2C1_Init+0x50>)
 8001c06:	f001 facb 	bl	80031a0 <HAL_I2C_Init>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d001      	beq.n	8001c14 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001c10:	f000 f9e8 	bl	8001fe4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001c14:	bf00      	nop
 8001c16:	bd80      	pop	{r7, pc}
 8001c18:	200000e4 	.word	0x200000e4
 8001c1c:	40005400 	.word	0x40005400
 8001c20:	000186a0 	.word	0x000186a0

08001c24 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b08e      	sub	sp, #56	; 0x38
 8001c28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c2a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c2e:	2200      	movs	r2, #0
 8001c30:	601a      	str	r2, [r3, #0]
 8001c32:	605a      	str	r2, [r3, #4]
 8001c34:	609a      	str	r2, [r3, #8]
 8001c36:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c38:	f107 0320 	add.w	r3, r7, #32
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	601a      	str	r2, [r3, #0]
 8001c40:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c42:	1d3b      	adds	r3, r7, #4
 8001c44:	2200      	movs	r2, #0
 8001c46:	601a      	str	r2, [r3, #0]
 8001c48:	605a      	str	r2, [r3, #4]
 8001c4a:	609a      	str	r2, [r3, #8]
 8001c4c:	60da      	str	r2, [r3, #12]
 8001c4e:	611a      	str	r2, [r3, #16]
 8001c50:	615a      	str	r2, [r3, #20]
 8001c52:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001c54:	4b2c      	ldr	r3, [pc, #176]	; (8001d08 <MX_TIM2_Init+0xe4>)
 8001c56:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001c5a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 83;
 8001c5c:	4b2a      	ldr	r3, [pc, #168]	; (8001d08 <MX_TIM2_Init+0xe4>)
 8001c5e:	2253      	movs	r2, #83	; 0x53
 8001c60:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c62:	4b29      	ldr	r3, [pc, #164]	; (8001d08 <MX_TIM2_Init+0xe4>)
 8001c64:	2200      	movs	r2, #0
 8001c66:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99;
 8001c68:	4b27      	ldr	r3, [pc, #156]	; (8001d08 <MX_TIM2_Init+0xe4>)
 8001c6a:	2263      	movs	r2, #99	; 0x63
 8001c6c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c6e:	4b26      	ldr	r3, [pc, #152]	; (8001d08 <MX_TIM2_Init+0xe4>)
 8001c70:	2200      	movs	r2, #0
 8001c72:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001c74:	4b24      	ldr	r3, [pc, #144]	; (8001d08 <MX_TIM2_Init+0xe4>)
 8001c76:	2280      	movs	r2, #128	; 0x80
 8001c78:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001c7a:	4823      	ldr	r0, [pc, #140]	; (8001d08 <MX_TIM2_Init+0xe4>)
 8001c7c:	f002 ffba 	bl	8004bf4 <HAL_TIM_Base_Init>
 8001c80:	4603      	mov	r3, r0
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d001      	beq.n	8001c8a <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 8001c86:	f000 f9ad 	bl	8001fe4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c8a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c8e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001c90:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c94:	4619      	mov	r1, r3
 8001c96:	481c      	ldr	r0, [pc, #112]	; (8001d08 <MX_TIM2_Init+0xe4>)
 8001c98:	f003 fc18 	bl	80054cc <HAL_TIM_ConfigClockSource>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d001      	beq.n	8001ca6 <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 8001ca2:	f000 f99f 	bl	8001fe4 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 8001ca6:	4818      	ldr	r0, [pc, #96]	; (8001d08 <MX_TIM2_Init+0xe4>)
 8001ca8:	f003 f893 	bl	8004dd2 <HAL_TIM_OC_Init>
 8001cac:	4603      	mov	r3, r0
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d001      	beq.n	8001cb6 <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 8001cb2:	f000 f997 	bl	8001fe4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001cbe:	f107 0320 	add.w	r3, r7, #32
 8001cc2:	4619      	mov	r1, r3
 8001cc4:	4810      	ldr	r0, [pc, #64]	; (8001d08 <MX_TIM2_Init+0xe4>)
 8001cc6:	f004 f80b 	bl	8005ce0 <HAL_TIMEx_MasterConfigSynchronization>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d001      	beq.n	8001cd4 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 8001cd0:	f000 f988 	bl	8001fe4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8001cd4:	2330      	movs	r3, #48	; 0x30
 8001cd6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001ce4:	1d3b      	adds	r3, r7, #4
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	4619      	mov	r1, r3
 8001cea:	4807      	ldr	r0, [pc, #28]	; (8001d08 <MX_TIM2_Init+0xe4>)
 8001cec:	f003 fb96 	bl	800541c <HAL_TIM_OC_ConfigChannel>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d001      	beq.n	8001cfa <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 8001cf6:	f000 f975 	bl	8001fe4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001cfa:	4803      	ldr	r0, [pc, #12]	; (8001d08 <MX_TIM2_Init+0xe4>)
 8001cfc:	f000 fa4a 	bl	8002194 <HAL_TIM_MspPostInit>

}
 8001d00:	bf00      	nop
 8001d02:	3738      	adds	r7, #56	; 0x38
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bd80      	pop	{r7, pc}
 8001d08:	20000288 	.word	0x20000288

08001d0c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b08e      	sub	sp, #56	; 0x38
 8001d10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d12:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001d16:	2200      	movs	r2, #0
 8001d18:	601a      	str	r2, [r3, #0]
 8001d1a:	605a      	str	r2, [r3, #4]
 8001d1c:	609a      	str	r2, [r3, #8]
 8001d1e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d20:	f107 0320 	add.w	r3, r7, #32
 8001d24:	2200      	movs	r2, #0
 8001d26:	601a      	str	r2, [r3, #0]
 8001d28:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d2a:	1d3b      	adds	r3, r7, #4
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	601a      	str	r2, [r3, #0]
 8001d30:	605a      	str	r2, [r3, #4]
 8001d32:	609a      	str	r2, [r3, #8]
 8001d34:	60da      	str	r2, [r3, #12]
 8001d36:	611a      	str	r2, [r3, #16]
 8001d38:	615a      	str	r2, [r3, #20]
 8001d3a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001d3c:	4b2c      	ldr	r3, [pc, #176]	; (8001df0 <MX_TIM3_Init+0xe4>)
 8001d3e:	4a2d      	ldr	r2, [pc, #180]	; (8001df4 <MX_TIM3_Init+0xe8>)
 8001d40:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 83;
 8001d42:	4b2b      	ldr	r3, [pc, #172]	; (8001df0 <MX_TIM3_Init+0xe4>)
 8001d44:	2253      	movs	r2, #83	; 0x53
 8001d46:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d48:	4b29      	ldr	r3, [pc, #164]	; (8001df0 <MX_TIM3_Init+0xe4>)
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 99;
 8001d4e:	4b28      	ldr	r3, [pc, #160]	; (8001df0 <MX_TIM3_Init+0xe4>)
 8001d50:	2263      	movs	r2, #99	; 0x63
 8001d52:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d54:	4b26      	ldr	r3, [pc, #152]	; (8001df0 <MX_TIM3_Init+0xe4>)
 8001d56:	2200      	movs	r2, #0
 8001d58:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001d5a:	4b25      	ldr	r3, [pc, #148]	; (8001df0 <MX_TIM3_Init+0xe4>)
 8001d5c:	2280      	movs	r2, #128	; 0x80
 8001d5e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001d60:	4823      	ldr	r0, [pc, #140]	; (8001df0 <MX_TIM3_Init+0xe4>)
 8001d62:	f002 ff47 	bl	8004bf4 <HAL_TIM_Base_Init>
 8001d66:	4603      	mov	r3, r0
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d001      	beq.n	8001d70 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 8001d6c:	f000 f93a 	bl	8001fe4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d70:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d74:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001d76:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001d7a:	4619      	mov	r1, r3
 8001d7c:	481c      	ldr	r0, [pc, #112]	; (8001df0 <MX_TIM3_Init+0xe4>)
 8001d7e:	f003 fba5 	bl	80054cc <HAL_TIM_ConfigClockSource>
 8001d82:	4603      	mov	r3, r0
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d001      	beq.n	8001d8c <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 8001d88:	f000 f92c 	bl	8001fe4 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 8001d8c:	4818      	ldr	r0, [pc, #96]	; (8001df0 <MX_TIM3_Init+0xe4>)
 8001d8e:	f003 f820 	bl	8004dd2 <HAL_TIM_OC_Init>
 8001d92:	4603      	mov	r3, r0
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d001      	beq.n	8001d9c <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 8001d98:	f000 f924 	bl	8001fe4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001da0:	2300      	movs	r3, #0
 8001da2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001da4:	f107 0320 	add.w	r3, r7, #32
 8001da8:	4619      	mov	r1, r3
 8001daa:	4811      	ldr	r0, [pc, #68]	; (8001df0 <MX_TIM3_Init+0xe4>)
 8001dac:	f003 ff98 	bl	8005ce0 <HAL_TIMEx_MasterConfigSynchronization>
 8001db0:	4603      	mov	r3, r0
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d001      	beq.n	8001dba <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 8001db6:	f000 f915 	bl	8001fe4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8001dba:	2330      	movs	r3, #48	; 0x30
 8001dbc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001dca:	1d3b      	adds	r3, r7, #4
 8001dcc:	2200      	movs	r2, #0
 8001dce:	4619      	mov	r1, r3
 8001dd0:	4807      	ldr	r0, [pc, #28]	; (8001df0 <MX_TIM3_Init+0xe4>)
 8001dd2:	f003 fb23 	bl	800541c <HAL_TIM_OC_ConfigChannel>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d001      	beq.n	8001de0 <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 8001ddc:	f000 f902 	bl	8001fe4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001de0:	4803      	ldr	r0, [pc, #12]	; (8001df0 <MX_TIM3_Init+0xe4>)
 8001de2:	f000 f9d7 	bl	8002194 <HAL_TIM_MspPostInit>

}
 8001de6:	bf00      	nop
 8001de8:	3738      	adds	r7, #56	; 0x38
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd80      	pop	{r7, pc}
 8001dee:	bf00      	nop
 8001df0:	20000168 	.word	0x20000168
 8001df4:	40000400 	.word	0x40000400

08001df8 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b082      	sub	sp, #8
 8001dfc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001dfe:	463b      	mov	r3, r7
 8001e00:	2200      	movs	r2, #0
 8001e02:	601a      	str	r2, [r3, #0]
 8001e04:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001e06:	4b15      	ldr	r3, [pc, #84]	; (8001e5c <MX_TIM6_Init+0x64>)
 8001e08:	4a15      	ldr	r2, [pc, #84]	; (8001e60 <MX_TIM6_Init+0x68>)
 8001e0a:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 8399;
 8001e0c:	4b13      	ldr	r3, [pc, #76]	; (8001e5c <MX_TIM6_Init+0x64>)
 8001e0e:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8001e12:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e14:	4b11      	ldr	r3, [pc, #68]	; (8001e5c <MX_TIM6_Init+0x64>)
 8001e16:	2200      	movs	r2, #0
 8001e18:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 9999;
 8001e1a:	4b10      	ldr	r3, [pc, #64]	; (8001e5c <MX_TIM6_Init+0x64>)
 8001e1c:	f242 720f 	movw	r2, #9999	; 0x270f
 8001e20:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e22:	4b0e      	ldr	r3, [pc, #56]	; (8001e5c <MX_TIM6_Init+0x64>)
 8001e24:	2200      	movs	r2, #0
 8001e26:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001e28:	480c      	ldr	r0, [pc, #48]	; (8001e5c <MX_TIM6_Init+0x64>)
 8001e2a:	f002 fee3 	bl	8004bf4 <HAL_TIM_Base_Init>
 8001e2e:	4603      	mov	r3, r0
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d001      	beq.n	8001e38 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001e34:	f000 f8d6 	bl	8001fe4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001e40:	463b      	mov	r3, r7
 8001e42:	4619      	mov	r1, r3
 8001e44:	4805      	ldr	r0, [pc, #20]	; (8001e5c <MX_TIM6_Init+0x64>)
 8001e46:	f003 ff4b 	bl	8005ce0 <HAL_TIMEx_MasterConfigSynchronization>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d001      	beq.n	8001e54 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001e50:	f000 f8c8 	bl	8001fe4 <Error_Handler>
  /* USER CODE BEGIN TIM6_Init 2 */
  // __HAL_TIM_CLEAR_FLAG(&htim6, TIM_SR_UIF);//Add this statement to solve the problem

  /* USER CODE END TIM6_Init 2 */

}
 8001e54:	bf00      	nop
 8001e56:	3708      	adds	r7, #8
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bd80      	pop	{r7, pc}
 8001e5c:	20000210 	.word	0x20000210
 8001e60:	40001000 	.word	0x40001000

08001e64 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001e68:	4b11      	ldr	r3, [pc, #68]	; (8001eb0 <MX_USART2_UART_Init+0x4c>)
 8001e6a:	4a12      	ldr	r2, [pc, #72]	; (8001eb4 <MX_USART2_UART_Init+0x50>)
 8001e6c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001e6e:	4b10      	ldr	r3, [pc, #64]	; (8001eb0 <MX_USART2_UART_Init+0x4c>)
 8001e70:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001e74:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001e76:	4b0e      	ldr	r3, [pc, #56]	; (8001eb0 <MX_USART2_UART_Init+0x4c>)
 8001e78:	2200      	movs	r2, #0
 8001e7a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001e7c:	4b0c      	ldr	r3, [pc, #48]	; (8001eb0 <MX_USART2_UART_Init+0x4c>)
 8001e7e:	2200      	movs	r2, #0
 8001e80:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001e82:	4b0b      	ldr	r3, [pc, #44]	; (8001eb0 <MX_USART2_UART_Init+0x4c>)
 8001e84:	2200      	movs	r2, #0
 8001e86:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001e88:	4b09      	ldr	r3, [pc, #36]	; (8001eb0 <MX_USART2_UART_Init+0x4c>)
 8001e8a:	220c      	movs	r2, #12
 8001e8c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e8e:	4b08      	ldr	r3, [pc, #32]	; (8001eb0 <MX_USART2_UART_Init+0x4c>)
 8001e90:	2200      	movs	r2, #0
 8001e92:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e94:	4b06      	ldr	r3, [pc, #24]	; (8001eb0 <MX_USART2_UART_Init+0x4c>)
 8001e96:	2200      	movs	r2, #0
 8001e98:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001e9a:	4805      	ldr	r0, [pc, #20]	; (8001eb0 <MX_USART2_UART_Init+0x4c>)
 8001e9c:	f003 ffb0 	bl	8005e00 <HAL_UART_Init>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d001      	beq.n	8001eaa <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001ea6:	f000 f89d 	bl	8001fe4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001eaa:	bf00      	nop
 8001eac:	bd80      	pop	{r7, pc}
 8001eae:	bf00      	nop
 8001eb0:	200002d4 	.word	0x200002d4
 8001eb4:	40004400 	.word	0x40004400

08001eb8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b08a      	sub	sp, #40	; 0x28
 8001ebc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ebe:	f107 0314 	add.w	r3, r7, #20
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	601a      	str	r2, [r3, #0]
 8001ec6:	605a      	str	r2, [r3, #4]
 8001ec8:	609a      	str	r2, [r3, #8]
 8001eca:	60da      	str	r2, [r3, #12]
 8001ecc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ece:	2300      	movs	r3, #0
 8001ed0:	613b      	str	r3, [r7, #16]
 8001ed2:	4b34      	ldr	r3, [pc, #208]	; (8001fa4 <MX_GPIO_Init+0xec>)
 8001ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ed6:	4a33      	ldr	r2, [pc, #204]	; (8001fa4 <MX_GPIO_Init+0xec>)
 8001ed8:	f043 0304 	orr.w	r3, r3, #4
 8001edc:	6313      	str	r3, [r2, #48]	; 0x30
 8001ede:	4b31      	ldr	r3, [pc, #196]	; (8001fa4 <MX_GPIO_Init+0xec>)
 8001ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ee2:	f003 0304 	and.w	r3, r3, #4
 8001ee6:	613b      	str	r3, [r7, #16]
 8001ee8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001eea:	2300      	movs	r3, #0
 8001eec:	60fb      	str	r3, [r7, #12]
 8001eee:	4b2d      	ldr	r3, [pc, #180]	; (8001fa4 <MX_GPIO_Init+0xec>)
 8001ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ef2:	4a2c      	ldr	r2, [pc, #176]	; (8001fa4 <MX_GPIO_Init+0xec>)
 8001ef4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ef8:	6313      	str	r3, [r2, #48]	; 0x30
 8001efa:	4b2a      	ldr	r3, [pc, #168]	; (8001fa4 <MX_GPIO_Init+0xec>)
 8001efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001efe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f02:	60fb      	str	r3, [r7, #12]
 8001f04:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f06:	2300      	movs	r3, #0
 8001f08:	60bb      	str	r3, [r7, #8]
 8001f0a:	4b26      	ldr	r3, [pc, #152]	; (8001fa4 <MX_GPIO_Init+0xec>)
 8001f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f0e:	4a25      	ldr	r2, [pc, #148]	; (8001fa4 <MX_GPIO_Init+0xec>)
 8001f10:	f043 0301 	orr.w	r3, r3, #1
 8001f14:	6313      	str	r3, [r2, #48]	; 0x30
 8001f16:	4b23      	ldr	r3, [pc, #140]	; (8001fa4 <MX_GPIO_Init+0xec>)
 8001f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f1a:	f003 0301 	and.w	r3, r3, #1
 8001f1e:	60bb      	str	r3, [r7, #8]
 8001f20:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f22:	2300      	movs	r3, #0
 8001f24:	607b      	str	r3, [r7, #4]
 8001f26:	4b1f      	ldr	r3, [pc, #124]	; (8001fa4 <MX_GPIO_Init+0xec>)
 8001f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f2a:	4a1e      	ldr	r2, [pc, #120]	; (8001fa4 <MX_GPIO_Init+0xec>)
 8001f2c:	f043 0302 	orr.w	r3, r3, #2
 8001f30:	6313      	str	r3, [r2, #48]	; 0x30
 8001f32:	4b1c      	ldr	r3, [pc, #112]	; (8001fa4 <MX_GPIO_Init+0xec>)
 8001f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f36:	f003 0302 	and.w	r3, r3, #2
 8001f3a:	607b      	str	r3, [r7, #4]
 8001f3c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DIR_DX_Pin|LD2_Pin|DIR_SX_Pin, GPIO_PIN_RESET);
 8001f3e:	2200      	movs	r2, #0
 8001f40:	21a2      	movs	r1, #162	; 0xa2
 8001f42:	4819      	ldr	r0, [pc, #100]	; (8001fa8 <MX_GPIO_Init+0xf0>)
 8001f44:	f001 f912 	bl	800316c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001f48:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001f4c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001f4e:	4b17      	ldr	r3, [pc, #92]	; (8001fac <MX_GPIO_Init+0xf4>)
 8001f50:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f52:	2300      	movs	r3, #0
 8001f54:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001f56:	f107 0314 	add.w	r3, r7, #20
 8001f5a:	4619      	mov	r1, r3
 8001f5c:	4814      	ldr	r0, [pc, #80]	; (8001fb0 <MX_GPIO_Init+0xf8>)
 8001f5e:	f000 ff71 	bl	8002e44 <HAL_GPIO_Init>

  /*Configure GPIO pins : DIR_DX_Pin DIR_SX_Pin */
  GPIO_InitStruct.Pin = DIR_DX_Pin|DIR_SX_Pin;
 8001f62:	2382      	movs	r3, #130	; 0x82
 8001f64:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f66:	2301      	movs	r3, #1
 8001f68:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001f6a:	2302      	movs	r3, #2
 8001f6c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f72:	f107 0314 	add.w	r3, r7, #20
 8001f76:	4619      	mov	r1, r3
 8001f78:	480b      	ldr	r0, [pc, #44]	; (8001fa8 <MX_GPIO_Init+0xf0>)
 8001f7a:	f000 ff63 	bl	8002e44 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001f7e:	2320      	movs	r3, #32
 8001f80:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f82:	2301      	movs	r3, #1
 8001f84:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f86:	2300      	movs	r3, #0
 8001f88:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001f8e:	f107 0314 	add.w	r3, r7, #20
 8001f92:	4619      	mov	r1, r3
 8001f94:	4804      	ldr	r0, [pc, #16]	; (8001fa8 <MX_GPIO_Init+0xf0>)
 8001f96:	f000 ff55 	bl	8002e44 <HAL_GPIO_Init>

}
 8001f9a:	bf00      	nop
 8001f9c:	3728      	adds	r7, #40	; 0x28
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bd80      	pop	{r7, pc}
 8001fa2:	bf00      	nop
 8001fa4:	40023800 	.word	0x40023800
 8001fa8:	40020000 	.word	0x40020000
 8001fac:	10210000 	.word	0x10210000
 8001fb0:	40020800 	.word	0x40020800

08001fb4 <read_UART_input>:

/* USER CODE BEGIN 4 */
void read_UART_input() {
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	af00      	add	r7, sp, #0
	if(UartReady == SET) {
 8001fb8:	4b07      	ldr	r3, [pc, #28]	; (8001fd8 <read_UART_input+0x24>)
 8001fba:	781b      	ldrb	r3, [r3, #0]
 8001fbc:	b2db      	uxtb	r3, r3
 8001fbe:	2b01      	cmp	r3, #1
 8001fc0:	d107      	bne.n	8001fd2 <read_UART_input+0x1e>
		UartReady = RESET;
 8001fc2:	4b05      	ldr	r3, [pc, #20]	; (8001fd8 <read_UART_input+0x24>)
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart2, (uint8_t*)readBuf, 1);
 8001fc8:	2201      	movs	r2, #1
 8001fca:	4904      	ldr	r1, [pc, #16]	; (8001fdc <read_UART_input+0x28>)
 8001fcc:	4804      	ldr	r0, [pc, #16]	; (8001fe0 <read_UART_input+0x2c>)
 8001fce:	f003 ff64 	bl	8005e9a <HAL_UART_Receive_IT>
		//read_value = atoi(readBuf);
	}
}
 8001fd2:	bf00      	nop
 8001fd4:	bd80      	pop	{r7, pc}
 8001fd6:	bf00      	nop
 8001fd8:	20000000 	.word	0x20000000
 8001fdc:	20000328 	.word	0x20000328
 8001fe0:	200002d4 	.word	0x200002d4

08001fe4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001fe8:	b672      	cpsid	i
}
 8001fea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001fec:	e7fe      	b.n	8001fec <Error_Handler+0x8>
	...

08001ff0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b082      	sub	sp, #8
 8001ff4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	607b      	str	r3, [r7, #4]
 8001ffa:	4b10      	ldr	r3, [pc, #64]	; (800203c <HAL_MspInit+0x4c>)
 8001ffc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ffe:	4a0f      	ldr	r2, [pc, #60]	; (800203c <HAL_MspInit+0x4c>)
 8002000:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002004:	6453      	str	r3, [r2, #68]	; 0x44
 8002006:	4b0d      	ldr	r3, [pc, #52]	; (800203c <HAL_MspInit+0x4c>)
 8002008:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800200a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800200e:	607b      	str	r3, [r7, #4]
 8002010:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002012:	2300      	movs	r3, #0
 8002014:	603b      	str	r3, [r7, #0]
 8002016:	4b09      	ldr	r3, [pc, #36]	; (800203c <HAL_MspInit+0x4c>)
 8002018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800201a:	4a08      	ldr	r2, [pc, #32]	; (800203c <HAL_MspInit+0x4c>)
 800201c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002020:	6413      	str	r3, [r2, #64]	; 0x40
 8002022:	4b06      	ldr	r3, [pc, #24]	; (800203c <HAL_MspInit+0x4c>)
 8002024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002026:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800202a:	603b      	str	r3, [r7, #0]
 800202c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800202e:	2007      	movs	r0, #7
 8002030:	f000 fe34 	bl	8002c9c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002034:	bf00      	nop
 8002036:	3708      	adds	r7, #8
 8002038:	46bd      	mov	sp, r7
 800203a:	bd80      	pop	{r7, pc}
 800203c:	40023800 	.word	0x40023800

08002040 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b08a      	sub	sp, #40	; 0x28
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002048:	f107 0314 	add.w	r3, r7, #20
 800204c:	2200      	movs	r2, #0
 800204e:	601a      	str	r2, [r3, #0]
 8002050:	605a      	str	r2, [r3, #4]
 8002052:	609a      	str	r2, [r3, #8]
 8002054:	60da      	str	r2, [r3, #12]
 8002056:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	4a19      	ldr	r2, [pc, #100]	; (80020c4 <HAL_I2C_MspInit+0x84>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d12c      	bne.n	80020bc <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002062:	2300      	movs	r3, #0
 8002064:	613b      	str	r3, [r7, #16]
 8002066:	4b18      	ldr	r3, [pc, #96]	; (80020c8 <HAL_I2C_MspInit+0x88>)
 8002068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800206a:	4a17      	ldr	r2, [pc, #92]	; (80020c8 <HAL_I2C_MspInit+0x88>)
 800206c:	f043 0302 	orr.w	r3, r3, #2
 8002070:	6313      	str	r3, [r2, #48]	; 0x30
 8002072:	4b15      	ldr	r3, [pc, #84]	; (80020c8 <HAL_I2C_MspInit+0x88>)
 8002074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002076:	f003 0302 	and.w	r3, r3, #2
 800207a:	613b      	str	r3, [r7, #16]
 800207c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800207e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002082:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002084:	2312      	movs	r3, #18
 8002086:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002088:	2301      	movs	r3, #1
 800208a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800208c:	2303      	movs	r3, #3
 800208e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002090:	2304      	movs	r3, #4
 8002092:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002094:	f107 0314 	add.w	r3, r7, #20
 8002098:	4619      	mov	r1, r3
 800209a:	480c      	ldr	r0, [pc, #48]	; (80020cc <HAL_I2C_MspInit+0x8c>)
 800209c:	f000 fed2 	bl	8002e44 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80020a0:	2300      	movs	r3, #0
 80020a2:	60fb      	str	r3, [r7, #12]
 80020a4:	4b08      	ldr	r3, [pc, #32]	; (80020c8 <HAL_I2C_MspInit+0x88>)
 80020a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020a8:	4a07      	ldr	r2, [pc, #28]	; (80020c8 <HAL_I2C_MspInit+0x88>)
 80020aa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80020ae:	6413      	str	r3, [r2, #64]	; 0x40
 80020b0:	4b05      	ldr	r3, [pc, #20]	; (80020c8 <HAL_I2C_MspInit+0x88>)
 80020b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020b8:	60fb      	str	r3, [r7, #12]
 80020ba:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80020bc:	bf00      	nop
 80020be:	3728      	adds	r7, #40	; 0x28
 80020c0:	46bd      	mov	sp, r7
 80020c2:	bd80      	pop	{r7, pc}
 80020c4:	40005400 	.word	0x40005400
 80020c8:	40023800 	.word	0x40023800
 80020cc:	40020400 	.word	0x40020400

080020d0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b086      	sub	sp, #24
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020e0:	d116      	bne.n	8002110 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80020e2:	2300      	movs	r3, #0
 80020e4:	617b      	str	r3, [r7, #20]
 80020e6:	4b28      	ldr	r3, [pc, #160]	; (8002188 <HAL_TIM_Base_MspInit+0xb8>)
 80020e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ea:	4a27      	ldr	r2, [pc, #156]	; (8002188 <HAL_TIM_Base_MspInit+0xb8>)
 80020ec:	f043 0301 	orr.w	r3, r3, #1
 80020f0:	6413      	str	r3, [r2, #64]	; 0x40
 80020f2:	4b25      	ldr	r3, [pc, #148]	; (8002188 <HAL_TIM_Base_MspInit+0xb8>)
 80020f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020f6:	f003 0301 	and.w	r3, r3, #1
 80020fa:	617b      	str	r3, [r7, #20]
 80020fc:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80020fe:	2200      	movs	r2, #0
 8002100:	2100      	movs	r1, #0
 8002102:	201c      	movs	r0, #28
 8002104:	f000 fdd5 	bl	8002cb2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002108:	201c      	movs	r0, #28
 800210a:	f000 fdee 	bl	8002cea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 800210e:	e036      	b.n	800217e <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM3)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4a1d      	ldr	r2, [pc, #116]	; (800218c <HAL_TIM_Base_MspInit+0xbc>)
 8002116:	4293      	cmp	r3, r2
 8002118:	d116      	bne.n	8002148 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800211a:	2300      	movs	r3, #0
 800211c:	613b      	str	r3, [r7, #16]
 800211e:	4b1a      	ldr	r3, [pc, #104]	; (8002188 <HAL_TIM_Base_MspInit+0xb8>)
 8002120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002122:	4a19      	ldr	r2, [pc, #100]	; (8002188 <HAL_TIM_Base_MspInit+0xb8>)
 8002124:	f043 0302 	orr.w	r3, r3, #2
 8002128:	6413      	str	r3, [r2, #64]	; 0x40
 800212a:	4b17      	ldr	r3, [pc, #92]	; (8002188 <HAL_TIM_Base_MspInit+0xb8>)
 800212c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800212e:	f003 0302 	and.w	r3, r3, #2
 8002132:	613b      	str	r3, [r7, #16]
 8002134:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002136:	2200      	movs	r2, #0
 8002138:	2100      	movs	r1, #0
 800213a:	201d      	movs	r0, #29
 800213c:	f000 fdb9 	bl	8002cb2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002140:	201d      	movs	r0, #29
 8002142:	f000 fdd2 	bl	8002cea <HAL_NVIC_EnableIRQ>
}
 8002146:	e01a      	b.n	800217e <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM6)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	4a10      	ldr	r2, [pc, #64]	; (8002190 <HAL_TIM_Base_MspInit+0xc0>)
 800214e:	4293      	cmp	r3, r2
 8002150:	d115      	bne.n	800217e <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002152:	2300      	movs	r3, #0
 8002154:	60fb      	str	r3, [r7, #12]
 8002156:	4b0c      	ldr	r3, [pc, #48]	; (8002188 <HAL_TIM_Base_MspInit+0xb8>)
 8002158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800215a:	4a0b      	ldr	r2, [pc, #44]	; (8002188 <HAL_TIM_Base_MspInit+0xb8>)
 800215c:	f043 0310 	orr.w	r3, r3, #16
 8002160:	6413      	str	r3, [r2, #64]	; 0x40
 8002162:	4b09      	ldr	r3, [pc, #36]	; (8002188 <HAL_TIM_Base_MspInit+0xb8>)
 8002164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002166:	f003 0310 	and.w	r3, r3, #16
 800216a:	60fb      	str	r3, [r7, #12]
 800216c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800216e:	2200      	movs	r2, #0
 8002170:	2100      	movs	r1, #0
 8002172:	2036      	movs	r0, #54	; 0x36
 8002174:	f000 fd9d 	bl	8002cb2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002178:	2036      	movs	r0, #54	; 0x36
 800217a:	f000 fdb6 	bl	8002cea <HAL_NVIC_EnableIRQ>
}
 800217e:	bf00      	nop
 8002180:	3718      	adds	r7, #24
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}
 8002186:	bf00      	nop
 8002188:	40023800 	.word	0x40023800
 800218c:	40000400 	.word	0x40000400
 8002190:	40001000 	.word	0x40001000

08002194 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b08a      	sub	sp, #40	; 0x28
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800219c:	f107 0314 	add.w	r3, r7, #20
 80021a0:	2200      	movs	r2, #0
 80021a2:	601a      	str	r2, [r3, #0]
 80021a4:	605a      	str	r2, [r3, #4]
 80021a6:	609a      	str	r2, [r3, #8]
 80021a8:	60da      	str	r2, [r3, #12]
 80021aa:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021b4:	d11e      	bne.n	80021f4 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021b6:	2300      	movs	r3, #0
 80021b8:	613b      	str	r3, [r7, #16]
 80021ba:	4b22      	ldr	r3, [pc, #136]	; (8002244 <HAL_TIM_MspPostInit+0xb0>)
 80021bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021be:	4a21      	ldr	r2, [pc, #132]	; (8002244 <HAL_TIM_MspPostInit+0xb0>)
 80021c0:	f043 0301 	orr.w	r3, r3, #1
 80021c4:	6313      	str	r3, [r2, #48]	; 0x30
 80021c6:	4b1f      	ldr	r3, [pc, #124]	; (8002244 <HAL_TIM_MspPostInit+0xb0>)
 80021c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ca:	f003 0301 	and.w	r3, r3, #1
 80021ce:	613b      	str	r3, [r7, #16]
 80021d0:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = STEP_DX_Pin;
 80021d2:	2301      	movs	r3, #1
 80021d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021d6:	2302      	movs	r3, #2
 80021d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80021da:	2301      	movs	r3, #1
 80021dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80021de:	2302      	movs	r3, #2
 80021e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80021e2:	2301      	movs	r3, #1
 80021e4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(STEP_DX_GPIO_Port, &GPIO_InitStruct);
 80021e6:	f107 0314 	add.w	r3, r7, #20
 80021ea:	4619      	mov	r1, r3
 80021ec:	4816      	ldr	r0, [pc, #88]	; (8002248 <HAL_TIM_MspPostInit+0xb4>)
 80021ee:	f000 fe29 	bl	8002e44 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80021f2:	e022      	b.n	800223a <HAL_TIM_MspPostInit+0xa6>
  else if(htim->Instance==TIM3)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4a14      	ldr	r2, [pc, #80]	; (800224c <HAL_TIM_MspPostInit+0xb8>)
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d11d      	bne.n	800223a <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021fe:	2300      	movs	r3, #0
 8002200:	60fb      	str	r3, [r7, #12]
 8002202:	4b10      	ldr	r3, [pc, #64]	; (8002244 <HAL_TIM_MspPostInit+0xb0>)
 8002204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002206:	4a0f      	ldr	r2, [pc, #60]	; (8002244 <HAL_TIM_MspPostInit+0xb0>)
 8002208:	f043 0301 	orr.w	r3, r3, #1
 800220c:	6313      	str	r3, [r2, #48]	; 0x30
 800220e:	4b0d      	ldr	r3, [pc, #52]	; (8002244 <HAL_TIM_MspPostInit+0xb0>)
 8002210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002212:	f003 0301 	and.w	r3, r3, #1
 8002216:	60fb      	str	r3, [r7, #12]
 8002218:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STEP_SX_Pin;
 800221a:	2340      	movs	r3, #64	; 0x40
 800221c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800221e:	2302      	movs	r3, #2
 8002220:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002222:	2301      	movs	r3, #1
 8002224:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002226:	2302      	movs	r3, #2
 8002228:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800222a:	2302      	movs	r3, #2
 800222c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(STEP_SX_GPIO_Port, &GPIO_InitStruct);
 800222e:	f107 0314 	add.w	r3, r7, #20
 8002232:	4619      	mov	r1, r3
 8002234:	4804      	ldr	r0, [pc, #16]	; (8002248 <HAL_TIM_MspPostInit+0xb4>)
 8002236:	f000 fe05 	bl	8002e44 <HAL_GPIO_Init>
}
 800223a:	bf00      	nop
 800223c:	3728      	adds	r7, #40	; 0x28
 800223e:	46bd      	mov	sp, r7
 8002240:	bd80      	pop	{r7, pc}
 8002242:	bf00      	nop
 8002244:	40023800 	.word	0x40023800
 8002248:	40020000 	.word	0x40020000
 800224c:	40000400 	.word	0x40000400

08002250 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b08a      	sub	sp, #40	; 0x28
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002258:	f107 0314 	add.w	r3, r7, #20
 800225c:	2200      	movs	r2, #0
 800225e:	601a      	str	r2, [r3, #0]
 8002260:	605a      	str	r2, [r3, #4]
 8002262:	609a      	str	r2, [r3, #8]
 8002264:	60da      	str	r2, [r3, #12]
 8002266:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	4a1d      	ldr	r2, [pc, #116]	; (80022e4 <HAL_UART_MspInit+0x94>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d133      	bne.n	80022da <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002272:	2300      	movs	r3, #0
 8002274:	613b      	str	r3, [r7, #16]
 8002276:	4b1c      	ldr	r3, [pc, #112]	; (80022e8 <HAL_UART_MspInit+0x98>)
 8002278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800227a:	4a1b      	ldr	r2, [pc, #108]	; (80022e8 <HAL_UART_MspInit+0x98>)
 800227c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002280:	6413      	str	r3, [r2, #64]	; 0x40
 8002282:	4b19      	ldr	r3, [pc, #100]	; (80022e8 <HAL_UART_MspInit+0x98>)
 8002284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002286:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800228a:	613b      	str	r3, [r7, #16]
 800228c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800228e:	2300      	movs	r3, #0
 8002290:	60fb      	str	r3, [r7, #12]
 8002292:	4b15      	ldr	r3, [pc, #84]	; (80022e8 <HAL_UART_MspInit+0x98>)
 8002294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002296:	4a14      	ldr	r2, [pc, #80]	; (80022e8 <HAL_UART_MspInit+0x98>)
 8002298:	f043 0301 	orr.w	r3, r3, #1
 800229c:	6313      	str	r3, [r2, #48]	; 0x30
 800229e:	4b12      	ldr	r3, [pc, #72]	; (80022e8 <HAL_UART_MspInit+0x98>)
 80022a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022a2:	f003 0301 	and.w	r3, r3, #1
 80022a6:	60fb      	str	r3, [r7, #12]
 80022a8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80022aa:	230c      	movs	r3, #12
 80022ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022ae:	2302      	movs	r3, #2
 80022b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022b2:	2300      	movs	r3, #0
 80022b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022b6:	2303      	movs	r3, #3
 80022b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80022ba:	2307      	movs	r3, #7
 80022bc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022be:	f107 0314 	add.w	r3, r7, #20
 80022c2:	4619      	mov	r1, r3
 80022c4:	4809      	ldr	r0, [pc, #36]	; (80022ec <HAL_UART_MspInit+0x9c>)
 80022c6:	f000 fdbd 	bl	8002e44 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80022ca:	2200      	movs	r2, #0
 80022cc:	2100      	movs	r1, #0
 80022ce:	2026      	movs	r0, #38	; 0x26
 80022d0:	f000 fcef 	bl	8002cb2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80022d4:	2026      	movs	r0, #38	; 0x26
 80022d6:	f000 fd08 	bl	8002cea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80022da:	bf00      	nop
 80022dc:	3728      	adds	r7, #40	; 0x28
 80022de:	46bd      	mov	sp, r7
 80022e0:	bd80      	pop	{r7, pc}
 80022e2:	bf00      	nop
 80022e4:	40004400 	.word	0x40004400
 80022e8:	40023800 	.word	0x40023800
 80022ec:	40020000 	.word	0x40020000

080022f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80022f0:	b480      	push	{r7}
 80022f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80022f4:	e7fe      	b.n	80022f4 <NMI_Handler+0x4>

080022f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80022f6:	b480      	push	{r7}
 80022f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80022fa:	e7fe      	b.n	80022fa <HardFault_Handler+0x4>

080022fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80022fc:	b480      	push	{r7}
 80022fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002300:	e7fe      	b.n	8002300 <MemManage_Handler+0x4>

08002302 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002302:	b480      	push	{r7}
 8002304:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002306:	e7fe      	b.n	8002306 <BusFault_Handler+0x4>

08002308 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002308:	b480      	push	{r7}
 800230a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800230c:	e7fe      	b.n	800230c <UsageFault_Handler+0x4>

0800230e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800230e:	b480      	push	{r7}
 8002310:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002312:	bf00      	nop
 8002314:	46bd      	mov	sp, r7
 8002316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231a:	4770      	bx	lr

0800231c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800231c:	b480      	push	{r7}
 800231e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002320:	bf00      	nop
 8002322:	46bd      	mov	sp, r7
 8002324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002328:	4770      	bx	lr

0800232a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800232a:	b480      	push	{r7}
 800232c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800232e:	bf00      	nop
 8002330:	46bd      	mov	sp, r7
 8002332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002336:	4770      	bx	lr

08002338 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800233c:	f000 fb9a 	bl	8002a74 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002340:	bf00      	nop
 8002342:	bd80      	pop	{r7, pc}

08002344 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002344:	b480      	push	{r7}
 8002346:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002348:	4b06      	ldr	r3, [pc, #24]	; (8002364 <SystemInit+0x20>)
 800234a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800234e:	4a05      	ldr	r2, [pc, #20]	; (8002364 <SystemInit+0x20>)
 8002350:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002354:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002358:	bf00      	nop
 800235a:	46bd      	mov	sp, r7
 800235c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002360:	4770      	bx	lr
 8002362:	bf00      	nop
 8002364:	e000ed00 	.word	0xe000ed00

08002368 <PIDController_Init>:
#include "myLib/PID.h"

void PIDController_Init(PIDController *pid) {
 8002368:	b480      	push	{r7}
 800236a:	b083      	sub	sp, #12
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]

	/* Clear controller variables */
	pid->integrator = 0.0f;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	f04f 0200 	mov.w	r2, #0
 8002376:	625a      	str	r2, [r3, #36]	; 0x24
	pid->prevError  = 0.0f;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	f04f 0200 	mov.w	r2, #0
 800237e:	629a      	str	r2, [r3, #40]	; 0x28

	pid->differentiator  = 0.0f;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	f04f 0200 	mov.w	r2, #0
 8002386:	62da      	str	r2, [r3, #44]	; 0x2c
	pid->prevMeasurement = 0.0f;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	f04f 0200 	mov.w	r2, #0
 800238e:	631a      	str	r2, [r3, #48]	; 0x30

	pid->out = 0.0f;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	f04f 0200 	mov.w	r2, #0
 8002396:	635a      	str	r2, [r3, #52]	; 0x34

}
 8002398:	bf00      	nop
 800239a:	370c      	adds	r7, #12
 800239c:	46bd      	mov	sp, r7
 800239e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a2:	4770      	bx	lr

080023a4 <PIDController_Update>:

float PIDController_Update(PIDController *pid, float setpoint, float measurement) {
 80023a4:	b480      	push	{r7}
 80023a6:	b087      	sub	sp, #28
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	60f8      	str	r0, [r7, #12]
 80023ac:	ed87 0a02 	vstr	s0, [r7, #8]
 80023b0:	edc7 0a01 	vstr	s1, [r7, #4]
	//Error signal
    float error = setpoint - measurement;
 80023b4:	ed97 7a02 	vldr	s14, [r7, #8]
 80023b8:	edd7 7a01 	vldr	s15, [r7, #4]
 80023bc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80023c0:	edc7 7a05 	vstr	s15, [r7, #20]
	// Proportional
	float proportional = pid->Kp * error;
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	edd3 7a00 	vldr	s15, [r3]
 80023ca:	ed97 7a05 	vldr	s14, [r7, #20]
 80023ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023d2:	edc7 7a04 	vstr	s15, [r7, #16]
	// Integral
	pid->integrator = pid->integrator + 0.5f * pid->Ki * pid->T * (error + pid->prevError);
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	edd3 7a01 	vldr	s15, [r3, #4]
 80023e2:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 80023e6:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	edd3 7a08 	vldr	s15, [r3, #32]
 80023f0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	ed93 6a0a 	vldr	s12, [r3, #40]	; 0x28
 80023fa:	edd7 7a05 	vldr	s15, [r7, #20]
 80023fe:	ee76 7a27 	vadd.f32	s15, s12, s15
 8002402:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002406:	ee77 7a27 	vadd.f32	s15, s14, s15
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

	/* Anti-wind-up via integrator clamping */
    if (pid->integrator > pid->limMaxInt) {
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	edd3 7a07 	vldr	s15, [r3, #28]
 800241c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002420:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002424:	dd04      	ble.n	8002430 <PIDController_Update+0x8c>
        pid->integrator = pid->limMaxInt;
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	69da      	ldr	r2, [r3, #28]
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	625a      	str	r2, [r3, #36]	; 0x24
 800242e:	e00e      	b.n	800244e <PIDController_Update+0xaa>
    } else if (pid->integrator < pid->limMinInt) {
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	edd3 7a06 	vldr	s15, [r3, #24]
 800243c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002440:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002444:	d503      	bpl.n	800244e <PIDController_Update+0xaa>
        pid->integrator = pid->limMinInt;
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	699a      	ldr	r2, [r3, #24]
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	625a      	str	r2, [r3, #36]	; 0x24
    }

	// Derivative (band-limited differentiator)
	pid->differentiator = (2.0f * pid->Kd * (measurement - pid->prevMeasurement)	/* Note: derivative on measurement, therefore minus sign in front of equation! */
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	edd3 7a02 	vldr	s15, [r3, #8]
 8002454:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 800245e:	edd7 6a01 	vldr	s13, [r7, #4]
 8002462:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002466:	ee27 7a27 	vmul.f32	s14, s14, s15
						+ (2.0f * pid->tau - pid->T) * pid->differentiator)
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	edd3 7a03 	vldr	s15, [r3, #12]
 8002470:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	edd3 7a08 	vldr	s15, [r3, #32]
 800247a:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8002484:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002488:	ee77 6a27 	vadd.f32	s13, s14, s15
                        / (2.0f * pid->tau + pid->T);
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	edd3 7a03 	vldr	s15, [r3, #12]
 8002492:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	edd3 7a08 	vldr	s15, [r3, #32]
 800249c:	ee37 7a27 	vadd.f32	s14, s14, s15
 80024a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
	pid->differentiator = (2.0f * pid->Kd * (measurement - pid->prevMeasurement)	/* Note: derivative on measurement, therefore minus sign in front of equation! */
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c

		// Compute output and apply limits
	pid->out = proportional + pid->integrator + pid->differentiator;
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 80024b0:	edd7 7a04 	vldr	s15, [r7, #16]
 80024b4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80024be:	ee77 7a27 	vadd.f32	s15, s14, s15
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34

    if (pid->out > pid->limMax) {
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	edd3 7a05 	vldr	s15, [r3, #20]
 80024d4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80024d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024dc:	dd04      	ble.n	80024e8 <PIDController_Update+0x144>
        pid->out = pid->limMax;
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	695a      	ldr	r2, [r3, #20]
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	635a      	str	r2, [r3, #52]	; 0x34
 80024e6:	e00e      	b.n	8002506 <PIDController_Update+0x162>
    } else if (pid->out < pid->limMin) {
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	edd3 7a04 	vldr	s15, [r3, #16]
 80024f4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80024f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024fc:	d503      	bpl.n	8002506 <PIDController_Update+0x162>
        pid->out = pid->limMin;
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	691a      	ldr	r2, [r3, #16]
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	635a      	str	r2, [r3, #52]	; 0x34
    }

	/* Store error and measurement for later use */
    pid->prevError       = error;
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	697a      	ldr	r2, [r7, #20]
 800250a:	629a      	str	r2, [r3, #40]	; 0x28
    pid->prevMeasurement = measurement;
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	687a      	ldr	r2, [r7, #4]
 8002510:	631a      	str	r2, [r3, #48]	; 0x30

	/* Return controller output */
    return pid->out;
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002516:	ee07 3a90 	vmov	s15, r3
}
 800251a:	eeb0 0a67 	vmov.f32	s0, s15
 800251e:	371c      	adds	r7, #28
 8002520:	46bd      	mov	sp, r7
 8002522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002526:	4770      	bx	lr

08002528 <setDirection>:
#include "myLib/StepperMotor.h"

steps_per_rev_eff = (int)(steps_per_rev_motor * microsteps_set * 2);


void setDirection(uint8_t dir){
 8002528:	b580      	push	{r7, lr}
 800252a:	b082      	sub	sp, #8
 800252c:	af00      	add	r7, sp, #0
 800252e:	4603      	mov	r3, r0
 8002530:	71fb      	strb	r3, [r7, #7]
	if (dir == 0){
 8002532:	79fb      	ldrb	r3, [r7, #7]
 8002534:	2b00      	cmp	r3, #0
 8002536:	d10a      	bne.n	800254e <setDirection+0x26>
		HAL_GPIO_WritePin(GPIOA, DIR_DX_Pin, GPIO_PIN_SET);
 8002538:	2201      	movs	r2, #1
 800253a:	2102      	movs	r1, #2
 800253c:	480b      	ldr	r0, [pc, #44]	; (800256c <setDirection+0x44>)
 800253e:	f000 fe15 	bl	800316c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, DIR_SX_Pin, GPIO_PIN_SET);
 8002542:	2201      	movs	r2, #1
 8002544:	2180      	movs	r1, #128	; 0x80
 8002546:	4809      	ldr	r0, [pc, #36]	; (800256c <setDirection+0x44>)
 8002548:	f000 fe10 	bl	800316c <HAL_GPIO_WritePin>
	}else{
		HAL_GPIO_WritePin(GPIOA, DIR_DX_Pin, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(GPIOA, DIR_SX_Pin, GPIO_PIN_RESET);
	}
}
 800254c:	e009      	b.n	8002562 <setDirection+0x3a>
		HAL_GPIO_WritePin(GPIOA, DIR_DX_Pin, GPIO_PIN_RESET);
 800254e:	2200      	movs	r2, #0
 8002550:	2102      	movs	r1, #2
 8002552:	4806      	ldr	r0, [pc, #24]	; (800256c <setDirection+0x44>)
 8002554:	f000 fe0a 	bl	800316c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, DIR_SX_Pin, GPIO_PIN_RESET);
 8002558:	2200      	movs	r2, #0
 800255a:	2180      	movs	r1, #128	; 0x80
 800255c:	4803      	ldr	r0, [pc, #12]	; (800256c <setDirection+0x44>)
 800255e:	f000 fe05 	bl	800316c <HAL_GPIO_WritePin>
}
 8002562:	bf00      	nop
 8002564:	3708      	adds	r7, #8
 8002566:	46bd      	mov	sp, r7
 8002568:	bd80      	pop	{r7, pc}
 800256a:	bf00      	nop
 800256c:	40020000 	.word	0x40020000

08002570 <getDirection>:

void getDirection(void){
 8002570:	b480      	push	{r7}
 8002572:	af00      	add	r7, sp, #0
	if(VELOCITY>0){
 8002574:	4b09      	ldr	r3, [pc, #36]	; (800259c <getDirection+0x2c>)
 8002576:	edd3 7a00 	vldr	s15, [r3]
 800257a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800257e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002582:	dd03      	ble.n	800258c <getDirection+0x1c>
		direction = 0;
 8002584:	4b06      	ldr	r3, [pc, #24]	; (80025a0 <getDirection+0x30>)
 8002586:	2200      	movs	r2, #0
 8002588:	701a      	strb	r2, [r3, #0]
	}else{
		direction = 1;
	}
}
 800258a:	e002      	b.n	8002592 <getDirection+0x22>
		direction = 1;
 800258c:	4b04      	ldr	r3, [pc, #16]	; (80025a0 <getDirection+0x30>)
 800258e:	2201      	movs	r2, #1
 8002590:	701a      	strb	r2, [r3, #0]
}
 8002592:	bf00      	nop
 8002594:	46bd      	mov	sp, r7
 8002596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259a:	4770      	bx	lr
 800259c:	200000e0 	.word	0x200000e0
 80025a0:	200001c8 	.word	0x200001c8
 80025a4:	00000000 	.word	0x00000000

080025a8 <setSpeedPID>:
//	float x = 0.6381375/speed;
	TIM2->ARR = (uint32_t)((100-1)*x);	// (100-1)*16
	TIM3->ARR = (uint32_t)((100-1)*x);	// (100-1)*16
}

void setSpeedPID(float speedPID){ // deg/s
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b084      	sub	sp, #16
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	ed87 0a01 	vstr	s0, [r7, #4]
//	s_per_rev =
//	s_per_pulse = s_per_rev/steps_per_rev_eff;
//	0.32 = s_per_pulse * steps_per_rev_eff;
//	angular_speed = 2*M_PI/0.32;

	if(speedPID < 0.0){
 80025b2:	edd7 7a01 	vldr	s15, [r7, #4]
 80025b6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80025ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025be:	d505      	bpl.n	80025cc <setSpeedPID+0x24>
		speedPID = speedPID * (-1.0f);
 80025c0:	edd7 7a01 	vldr	s15, [r7, #4]
 80025c4:	eef1 7a67 	vneg.f32	s15, s15
 80025c8:	edc7 7a01 	vstr	s15, [r7, #4]
	}

	float x = (float)( (360.0f)/(0.32*speedPID) );	// deg/sec
 80025cc:	6878      	ldr	r0, [r7, #4]
 80025ce:	f7fd ff7f 	bl	80004d0 <__aeabi_f2d>
 80025d2:	a31c      	add	r3, pc, #112	; (adr r3, 8002644 <setSpeedPID+0x9c>)
 80025d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025d8:	f7fd ffd2 	bl	8000580 <__aeabi_dmul>
 80025dc:	4602      	mov	r2, r0
 80025de:	460b      	mov	r3, r1
 80025e0:	f04f 0000 	mov.w	r0, #0
 80025e4:	4914      	ldr	r1, [pc, #80]	; (8002638 <setSpeedPID+0x90>)
 80025e6:	f7fe f8f5 	bl	80007d4 <__aeabi_ddiv>
 80025ea:	4602      	mov	r2, r0
 80025ec:	460b      	mov	r3, r1
 80025ee:	4610      	mov	r0, r2
 80025f0:	4619      	mov	r1, r3
 80025f2:	f7fe fa75 	bl	8000ae0 <__aeabi_d2f>
 80025f6:	4603      	mov	r3, r0
 80025f8:	60fb      	str	r3, [r7, #12]

	//float x = (float)( (0.32*speedPID/(2*M_PI)) );	// deg/sec
	TIM2->ARR = (uint32_t)((100-1)*x);	// (100-1)*16
 80025fa:	edd7 7a03 	vldr	s15, [r7, #12]
 80025fe:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 800263c <setSpeedPID+0x94>
 8002602:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002606:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800260a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800260e:	ee17 2a90 	vmov	r2, s15
 8002612:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM3->ARR = (uint32_t)((100-1)*x);	// (100-1)*16
 8002614:	edd7 7a03 	vldr	s15, [r7, #12]
 8002618:	ed9f 7a08 	vldr	s14, [pc, #32]	; 800263c <setSpeedPID+0x94>
 800261c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002620:	4b07      	ldr	r3, [pc, #28]	; (8002640 <setSpeedPID+0x98>)
 8002622:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002626:	ee17 2a90 	vmov	r2, s15
 800262a:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800262c:	bf00      	nop
 800262e:	3710      	adds	r7, #16
 8002630:	46bd      	mov	sp, r7
 8002632:	bd80      	pop	{r7, pc}
 8002634:	f3af 8000 	nop.w
 8002638:	40768000 	.word	0x40768000
 800263c:	42c60000 	.word	0x42c60000
 8002640:	40000400 	.word	0x40000400
 8002644:	47ae147b 	.word	0x47ae147b
 8002648:	3fd47ae1 	.word	0x3fd47ae1

0800264c <simpleGO>:

void simpleGO(TIM_HandleTypeDef* htim2, TIM_HandleTypeDef* htim3){
 800264c:	b580      	push	{r7, lr}
 800264e:	b082      	sub	sp, #8
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
 8002654:	6039      	str	r1, [r7, #0]
	//HAL_TIM_Base_Start_IT(&htim6);

	HAL_GPIO_WritePin(GPIOA, DIR_DX_Pin, GPIO_PIN_SET);
 8002656:	2201      	movs	r2, #1
 8002658:	2102      	movs	r1, #2
 800265a:	4811      	ldr	r0, [pc, #68]	; (80026a0 <simpleGO+0x54>)
 800265c:	f000 fd86 	bl	800316c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, DIR_SX_Pin, GPIO_PIN_SET);
 8002660:	2201      	movs	r2, #1
 8002662:	2180      	movs	r1, #128	; 0x80
 8002664:	480e      	ldr	r0, [pc, #56]	; (80026a0 <simpleGO+0x54>)
 8002666:	f000 fd81 	bl	800316c <HAL_GPIO_WritePin>

	if(HAL_TIM_OC_GetState(htim2) != HAL_TIM_STATE_BUSY){
 800266a:	6878      	ldr	r0, [r7, #4]
 800266c:	f003 f81a 	bl	80056a4 <HAL_TIM_OC_GetState>
 8002670:	4603      	mov	r3, r0
 8002672:	2b02      	cmp	r3, #2
 8002674:	d003      	beq.n	800267e <simpleGO+0x32>
		HAL_TIM_OC_Start_IT(htim2, TIM_CHANNEL_1);
 8002676:	2100      	movs	r1, #0
 8002678:	6878      	ldr	r0, [r7, #4]
 800267a:	f002 fc03 	bl	8004e84 <HAL_TIM_OC_Start_IT>
	}

	if(HAL_TIM_OC_GetState(htim3) != HAL_TIM_STATE_BUSY){
 800267e:	6838      	ldr	r0, [r7, #0]
 8002680:	f003 f810 	bl	80056a4 <HAL_TIM_OC_GetState>
 8002684:	4603      	mov	r3, r0
 8002686:	2b02      	cmp	r3, #2
 8002688:	d003      	beq.n	8002692 <simpleGO+0x46>
		HAL_TIM_OC_Start_IT(htim3, TIM_CHANNEL_1);
 800268a:	2100      	movs	r1, #0
 800268c:	6838      	ldr	r0, [r7, #0]
 800268e:	f002 fbf9 	bl	8004e84 <HAL_TIM_OC_Start_IT>
	}
	readBuf[0]=0;
 8002692:	4b04      	ldr	r3, [pc, #16]	; (80026a4 <simpleGO+0x58>)
 8002694:	2200      	movs	r2, #0
 8002696:	701a      	strb	r2, [r3, #0]
}
 8002698:	bf00      	nop
 800269a:	3708      	adds	r7, #8
 800269c:	46bd      	mov	sp, r7
 800269e:	bd80      	pop	{r7, pc}
 80026a0:	40020000 	.word	0x40020000
 80026a4:	20000328 	.word	0x20000328

080026a8 <goForward>:

void goForward(TIM_HandleTypeDef* htim2, TIM_HandleTypeDef* htim3, TIM_HandleTypeDef* htim6, float metri){
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b086      	sub	sp, #24
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	60f8      	str	r0, [r7, #12]
 80026b0:	60b9      	str	r1, [r7, #8]
 80026b2:	607a      	str	r2, [r7, #4]
 80026b4:	ed87 0a00 	vstr	s0, [r7]
	HAL_TIM_Base_Start_IT(htim6);
 80026b8:	6878      	ldr	r0, [r7, #4]
 80026ba:	f002 faeb 	bl	8004c94 <HAL_TIM_Base_Start_IT>
	float seconds = metri/VELOCITY;
 80026be:	4b17      	ldr	r3, [pc, #92]	; (800271c <goForward+0x74>)
 80026c0:	ed93 7a00 	vldr	s14, [r3]
 80026c4:	edd7 6a00 	vldr	s13, [r7]
 80026c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80026cc:	edc7 7a05 	vstr	s15, [r7, #20]
	TIM6->ARR = (uint32_t)(10000/seconds);
 80026d0:	eddf 6a13 	vldr	s13, [pc, #76]	; 8002720 <goForward+0x78>
 80026d4:	ed97 7a05 	vldr	s14, [r7, #20]
 80026d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80026dc:	4b11      	ldr	r3, [pc, #68]	; (8002724 <goForward+0x7c>)
 80026de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80026e2:	ee17 2a90 	vmov	r2, s15
 80026e6:	62da      	str	r2, [r3, #44]	; 0x2c

	HAL_GPIO_WritePin(GPIOA, DIR_DX_Pin, GPIO_PIN_SET);
 80026e8:	2201      	movs	r2, #1
 80026ea:	2102      	movs	r1, #2
 80026ec:	480e      	ldr	r0, [pc, #56]	; (8002728 <goForward+0x80>)
 80026ee:	f000 fd3d 	bl	800316c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, DIR_SX_Pin, GPIO_PIN_SET);
 80026f2:	2201      	movs	r2, #1
 80026f4:	2180      	movs	r1, #128	; 0x80
 80026f6:	480c      	ldr	r0, [pc, #48]	; (8002728 <goForward+0x80>)
 80026f8:	f000 fd38 	bl	800316c <HAL_GPIO_WritePin>
	HAL_TIM_OC_Start_IT(htim2, TIM_CHANNEL_1);
 80026fc:	2100      	movs	r1, #0
 80026fe:	68f8      	ldr	r0, [r7, #12]
 8002700:	f002 fbc0 	bl	8004e84 <HAL_TIM_OC_Start_IT>
	HAL_TIM_OC_Start_IT(htim3, TIM_CHANNEL_1);
 8002704:	2100      	movs	r1, #0
 8002706:	68b8      	ldr	r0, [r7, #8]
 8002708:	f002 fbbc 	bl	8004e84 <HAL_TIM_OC_Start_IT>
	readBuf[0]=0;
 800270c:	4b07      	ldr	r3, [pc, #28]	; (800272c <goForward+0x84>)
 800270e:	2200      	movs	r2, #0
 8002710:	701a      	strb	r2, [r3, #0]
}
 8002712:	bf00      	nop
 8002714:	3718      	adds	r7, #24
 8002716:	46bd      	mov	sp, r7
 8002718:	bd80      	pop	{r7, pc}
 800271a:	bf00      	nop
 800271c:	200000e0 	.word	0x200000e0
 8002720:	461c4000 	.word	0x461c4000
 8002724:	40001000 	.word	0x40001000
 8002728:	40020000 	.word	0x40020000
 800272c:	20000328 	.word	0x20000328

08002730 <goBackward>:

void goBackward(TIM_HandleTypeDef* htim2, TIM_HandleTypeDef* htim3, TIM_HandleTypeDef* htim6, float metri){
 8002730:	b580      	push	{r7, lr}
 8002732:	b086      	sub	sp, #24
 8002734:	af00      	add	r7, sp, #0
 8002736:	60f8      	str	r0, [r7, #12]
 8002738:	60b9      	str	r1, [r7, #8]
 800273a:	607a      	str	r2, [r7, #4]
 800273c:	ed87 0a00 	vstr	s0, [r7]
	HAL_TIM_Base_Start_IT(htim6);
 8002740:	6878      	ldr	r0, [r7, #4]
 8002742:	f002 faa7 	bl	8004c94 <HAL_TIM_Base_Start_IT>
	float seconds = metri/VELOCITY;
 8002746:	4b17      	ldr	r3, [pc, #92]	; (80027a4 <goBackward+0x74>)
 8002748:	ed93 7a00 	vldr	s14, [r3]
 800274c:	edd7 6a00 	vldr	s13, [r7]
 8002750:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002754:	edc7 7a05 	vstr	s15, [r7, #20]
	TIM6->ARR = (uint32_t)(10000/seconds);
 8002758:	eddf 6a13 	vldr	s13, [pc, #76]	; 80027a8 <goBackward+0x78>
 800275c:	ed97 7a05 	vldr	s14, [r7, #20]
 8002760:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002764:	4b11      	ldr	r3, [pc, #68]	; (80027ac <goBackward+0x7c>)
 8002766:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800276a:	ee17 2a90 	vmov	r2, s15
 800276e:	62da      	str	r2, [r3, #44]	; 0x2c

	HAL_GPIO_WritePin(GPIOA, DIR_DX_Pin, GPIO_PIN_RESET);
 8002770:	2200      	movs	r2, #0
 8002772:	2102      	movs	r1, #2
 8002774:	480e      	ldr	r0, [pc, #56]	; (80027b0 <goBackward+0x80>)
 8002776:	f000 fcf9 	bl	800316c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, DIR_SX_Pin, GPIO_PIN_RESET);
 800277a:	2200      	movs	r2, #0
 800277c:	2180      	movs	r1, #128	; 0x80
 800277e:	480c      	ldr	r0, [pc, #48]	; (80027b0 <goBackward+0x80>)
 8002780:	f000 fcf4 	bl	800316c <HAL_GPIO_WritePin>
	HAL_TIM_OC_Start_IT(htim2, TIM_CHANNEL_1);
 8002784:	2100      	movs	r1, #0
 8002786:	68f8      	ldr	r0, [r7, #12]
 8002788:	f002 fb7c 	bl	8004e84 <HAL_TIM_OC_Start_IT>
	HAL_TIM_OC_Start_IT(htim3, TIM_CHANNEL_1);
 800278c:	2100      	movs	r1, #0
 800278e:	68b8      	ldr	r0, [r7, #8]
 8002790:	f002 fb78 	bl	8004e84 <HAL_TIM_OC_Start_IT>
	readBuf[0]=0;
 8002794:	4b07      	ldr	r3, [pc, #28]	; (80027b4 <goBackward+0x84>)
 8002796:	2200      	movs	r2, #0
 8002798:	701a      	strb	r2, [r3, #0]
}
 800279a:	bf00      	nop
 800279c:	3718      	adds	r7, #24
 800279e:	46bd      	mov	sp, r7
 80027a0:	bd80      	pop	{r7, pc}
 80027a2:	bf00      	nop
 80027a4:	200000e0 	.word	0x200000e0
 80027a8:	461c4000 	.word	0x461c4000
 80027ac:	40001000 	.word	0x40001000
 80027b0:	40020000 	.word	0x40020000
 80027b4:	20000328 	.word	0x20000328

080027b8 <rotateL>:

void rotateL(TIM_HandleTypeDef* htim2, TIM_HandleTypeDef* htim3, TIM_HandleTypeDef* htim6, float rad){
 80027b8:	b5b0      	push	{r4, r5, r7, lr}
 80027ba:	b086      	sub	sp, #24
 80027bc:	af00      	add	r7, sp, #0
 80027be:	60f8      	str	r0, [r7, #12]
 80027c0:	60b9      	str	r1, [r7, #8]
 80027c2:	607a      	str	r2, [r7, #4]
 80027c4:	ed87 0a00 	vstr	s0, [r7]
	HAL_TIM_Base_Start_IT(htim6);
 80027c8:	6878      	ldr	r0, [r7, #4]
 80027ca:	f002 fa63 	bl	8004c94 <HAL_TIM_Base_Start_IT>
//	float metri = rad/L_body;
	float 	seconds = (rad*L_body)/VELOCITY;
 80027ce:	6838      	ldr	r0, [r7, #0]
 80027d0:	f7fd fe7e 	bl	80004d0 <__aeabi_f2d>
 80027d4:	a325      	add	r3, pc, #148	; (adr r3, 800286c <rotateL+0xb4>)
 80027d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027da:	f7fd fed1 	bl	8000580 <__aeabi_dmul>
 80027de:	4602      	mov	r2, r0
 80027e0:	460b      	mov	r3, r1
 80027e2:	4614      	mov	r4, r2
 80027e4:	461d      	mov	r5, r3
 80027e6:	4b1c      	ldr	r3, [pc, #112]	; (8002858 <rotateL+0xa0>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	4618      	mov	r0, r3
 80027ec:	f7fd fe70 	bl	80004d0 <__aeabi_f2d>
 80027f0:	4602      	mov	r2, r0
 80027f2:	460b      	mov	r3, r1
 80027f4:	4620      	mov	r0, r4
 80027f6:	4629      	mov	r1, r5
 80027f8:	f7fd ffec 	bl	80007d4 <__aeabi_ddiv>
 80027fc:	4602      	mov	r2, r0
 80027fe:	460b      	mov	r3, r1
 8002800:	4610      	mov	r0, r2
 8002802:	4619      	mov	r1, r3
 8002804:	f7fe f96c 	bl	8000ae0 <__aeabi_d2f>
 8002808:	4603      	mov	r3, r0
 800280a:	617b      	str	r3, [r7, #20]
	TIM6->ARR = (uint32_t)(10000*seconds);
 800280c:	edd7 7a05 	vldr	s15, [r7, #20]
 8002810:	ed9f 7a12 	vldr	s14, [pc, #72]	; 800285c <rotateL+0xa4>
 8002814:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002818:	4b11      	ldr	r3, [pc, #68]	; (8002860 <rotateL+0xa8>)
 800281a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800281e:	ee17 2a90 	vmov	r2, s15
 8002822:	62da      	str	r2, [r3, #44]	; 0x2c

	HAL_GPIO_WritePin(GPIOA, DIR_DX_Pin, GPIO_PIN_SET);
 8002824:	2201      	movs	r2, #1
 8002826:	2102      	movs	r1, #2
 8002828:	480e      	ldr	r0, [pc, #56]	; (8002864 <rotateL+0xac>)
 800282a:	f000 fc9f 	bl	800316c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, DIR_SX_Pin, GPIO_PIN_SET);
 800282e:	2201      	movs	r2, #1
 8002830:	2180      	movs	r1, #128	; 0x80
 8002832:	480c      	ldr	r0, [pc, #48]	; (8002864 <rotateL+0xac>)
 8002834:	f000 fc9a 	bl	800316c <HAL_GPIO_WritePin>
	HAL_TIM_OC_Start_IT(htim2, TIM_CHANNEL_1);
 8002838:	2100      	movs	r1, #0
 800283a:	68f8      	ldr	r0, [r7, #12]
 800283c:	f002 fb22 	bl	8004e84 <HAL_TIM_OC_Start_IT>
	HAL_TIM_OC_Stop_IT(htim3, TIM_CHANNEL_1);
 8002840:	2100      	movs	r1, #0
 8002842:	68b8      	ldr	r0, [r7, #8]
 8002844:	f002 fc2c 	bl	80050a0 <HAL_TIM_OC_Stop_IT>

	readBuf[0]=0;
 8002848:	4b07      	ldr	r3, [pc, #28]	; (8002868 <rotateL+0xb0>)
 800284a:	2200      	movs	r2, #0
 800284c:	701a      	strb	r2, [r3, #0]
}
 800284e:	bf00      	nop
 8002850:	3718      	adds	r7, #24
 8002852:	46bd      	mov	sp, r7
 8002854:	bdb0      	pop	{r4, r5, r7, pc}
 8002856:	bf00      	nop
 8002858:	200000e0 	.word	0x200000e0
 800285c:	461c4000 	.word	0x461c4000
 8002860:	40001000 	.word	0x40001000
 8002864:	40020000 	.word	0x40020000
 8002868:	20000328 	.word	0x20000328
 800286c:	1eb851ec 	.word	0x1eb851ec
 8002870:	3fc1eb85 	.word	0x3fc1eb85
 8002874:	00000000 	.word	0x00000000

08002878 <rotateR>:

void rotateR(TIM_HandleTypeDef* htim2, TIM_HandleTypeDef* htim3, TIM_HandleTypeDef* htim6, float rad){
 8002878:	b5b0      	push	{r4, r5, r7, lr}
 800287a:	b086      	sub	sp, #24
 800287c:	af00      	add	r7, sp, #0
 800287e:	60f8      	str	r0, [r7, #12]
 8002880:	60b9      	str	r1, [r7, #8]
 8002882:	607a      	str	r2, [r7, #4]
 8002884:	ed87 0a00 	vstr	s0, [r7]
	HAL_TIM_Base_Start_IT(htim6);
 8002888:	6878      	ldr	r0, [r7, #4]
 800288a:	f002 fa03 	bl	8004c94 <HAL_TIM_Base_Start_IT>
//	float metri = rad/L_body;
	float seconds = (rad*L_body)/VELOCITY;
 800288e:	6838      	ldr	r0, [r7, #0]
 8002890:	f7fd fe1e 	bl	80004d0 <__aeabi_f2d>
 8002894:	a325      	add	r3, pc, #148	; (adr r3, 800292c <rotateR+0xb4>)
 8002896:	e9d3 2300 	ldrd	r2, r3, [r3]
 800289a:	f7fd fe71 	bl	8000580 <__aeabi_dmul>
 800289e:	4602      	mov	r2, r0
 80028a0:	460b      	mov	r3, r1
 80028a2:	4614      	mov	r4, r2
 80028a4:	461d      	mov	r5, r3
 80028a6:	4b1c      	ldr	r3, [pc, #112]	; (8002918 <rotateR+0xa0>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	4618      	mov	r0, r3
 80028ac:	f7fd fe10 	bl	80004d0 <__aeabi_f2d>
 80028b0:	4602      	mov	r2, r0
 80028b2:	460b      	mov	r3, r1
 80028b4:	4620      	mov	r0, r4
 80028b6:	4629      	mov	r1, r5
 80028b8:	f7fd ff8c 	bl	80007d4 <__aeabi_ddiv>
 80028bc:	4602      	mov	r2, r0
 80028be:	460b      	mov	r3, r1
 80028c0:	4610      	mov	r0, r2
 80028c2:	4619      	mov	r1, r3
 80028c4:	f7fe f90c 	bl	8000ae0 <__aeabi_d2f>
 80028c8:	4603      	mov	r3, r0
 80028ca:	617b      	str	r3, [r7, #20]
	TIM6->ARR = (uint32_t)(10000*seconds);
 80028cc:	edd7 7a05 	vldr	s15, [r7, #20]
 80028d0:	ed9f 7a12 	vldr	s14, [pc, #72]	; 800291c <rotateR+0xa4>
 80028d4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80028d8:	4b11      	ldr	r3, [pc, #68]	; (8002920 <rotateR+0xa8>)
 80028da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80028de:	ee17 2a90 	vmov	r2, s15
 80028e2:	62da      	str	r2, [r3, #44]	; 0x2c
	HAL_GPIO_WritePin(GPIOA, DIR_DX_Pin, GPIO_PIN_SET);
 80028e4:	2201      	movs	r2, #1
 80028e6:	2102      	movs	r1, #2
 80028e8:	480e      	ldr	r0, [pc, #56]	; (8002924 <rotateR+0xac>)
 80028ea:	f000 fc3f 	bl	800316c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, DIR_SX_Pin, GPIO_PIN_SET);
 80028ee:	2201      	movs	r2, #1
 80028f0:	2180      	movs	r1, #128	; 0x80
 80028f2:	480c      	ldr	r0, [pc, #48]	; (8002924 <rotateR+0xac>)
 80028f4:	f000 fc3a 	bl	800316c <HAL_GPIO_WritePin>
	HAL_TIM_OC_Stop_IT(htim2, TIM_CHANNEL_1);
 80028f8:	2100      	movs	r1, #0
 80028fa:	68f8      	ldr	r0, [r7, #12]
 80028fc:	f002 fbd0 	bl	80050a0 <HAL_TIM_OC_Stop_IT>
	HAL_TIM_OC_Start_IT(htim3, TIM_CHANNEL_1);
 8002900:	2100      	movs	r1, #0
 8002902:	68b8      	ldr	r0, [r7, #8]
 8002904:	f002 fabe 	bl	8004e84 <HAL_TIM_OC_Start_IT>
	readBuf[0]=0;
 8002908:	4b07      	ldr	r3, [pc, #28]	; (8002928 <rotateR+0xb0>)
 800290a:	2200      	movs	r2, #0
 800290c:	701a      	strb	r2, [r3, #0]

}
 800290e:	bf00      	nop
 8002910:	3718      	adds	r7, #24
 8002912:	46bd      	mov	sp, r7
 8002914:	bdb0      	pop	{r4, r5, r7, pc}
 8002916:	bf00      	nop
 8002918:	200000e0 	.word	0x200000e0
 800291c:	461c4000 	.word	0x461c4000
 8002920:	40001000 	.word	0x40001000
 8002924:	40020000 	.word	0x40020000
 8002928:	20000328 	.word	0x20000328
 800292c:	1eb851ec 	.word	0x1eb851ec
 8002930:	3fc1eb85 	.word	0x3fc1eb85

08002934 <stopMotor>:

void stopMotor(TIM_HandleTypeDef* htim2, TIM_HandleTypeDef* htim3, TIM_HandleTypeDef* htim6){
 8002934:	b580      	push	{r7, lr}
 8002936:	b084      	sub	sp, #16
 8002938:	af00      	add	r7, sp, #0
 800293a:	60f8      	str	r0, [r7, #12]
 800293c:	60b9      	str	r1, [r7, #8]
 800293e:	607a      	str	r2, [r7, #4]
	HAL_TIM_OC_Stop_IT(htim2, TIM_CHANNEL_1);
 8002940:	2100      	movs	r1, #0
 8002942:	68f8      	ldr	r0, [r7, #12]
 8002944:	f002 fbac 	bl	80050a0 <HAL_TIM_OC_Stop_IT>
	HAL_TIM_OC_Stop_IT(htim3, TIM_CHANNEL_1);
 8002948:	2100      	movs	r1, #0
 800294a:	68b8      	ldr	r0, [r7, #8]
 800294c:	f002 fba8 	bl	80050a0 <HAL_TIM_OC_Stop_IT>
	HAL_TIM_Base_Stop_IT(htim6);
 8002950:	6878      	ldr	r0, [r7, #4]
 8002952:	f002 fa0f 	bl	8004d74 <HAL_TIM_Base_Stop_IT>
	__HAL_TIM_CLEAR_FLAG(htim6, TIM_SR_UIF);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f06f 0201 	mvn.w	r2, #1
 800295e:	611a      	str	r2, [r3, #16]
	__HAL_TIM_CLEAR_FLAG(htim6, TIM_IT_UPDATE);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f06f 0201 	mvn.w	r2, #1
 8002968:	611a      	str	r2, [r3, #16]
	readBuf[0]=0;
 800296a:	4b03      	ldr	r3, [pc, #12]	; (8002978 <stopMotor+0x44>)
 800296c:	2200      	movs	r2, #0
 800296e:	701a      	strb	r2, [r3, #0]
//	i=0; // escludo eventuali overflow
//	j=0;
}
 8002970:	bf00      	nop
 8002972:	3710      	adds	r7, #16
 8002974:	46bd      	mov	sp, r7
 8002976:	bd80      	pop	{r7, pc}
 8002978:	20000328 	.word	0x20000328

0800297c <Reset_Handler>:
    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  

  ldr   sp, =_estack      /* set stack pointer */
 800297c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80029b4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002980:	480d      	ldr	r0, [pc, #52]	; (80029b8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002982:	490e      	ldr	r1, [pc, #56]	; (80029bc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002984:	4a0e      	ldr	r2, [pc, #56]	; (80029c0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002986:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002988:	e002      	b.n	8002990 <LoopCopyDataInit>

0800298a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800298a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800298c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800298e:	3304      	adds	r3, #4

08002990 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002990:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002992:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002994:	d3f9      	bcc.n	800298a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002996:	4a0b      	ldr	r2, [pc, #44]	; (80029c4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002998:	4c0b      	ldr	r4, [pc, #44]	; (80029c8 <LoopFillZerobss+0x26>)
  movs r3, #0
 800299a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800299c:	e001      	b.n	80029a2 <LoopFillZerobss>

0800299e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800299e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80029a0:	3204      	adds	r2, #4

080029a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80029a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80029a4:	d3fb      	bcc.n	800299e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80029a6:	f7ff fccd 	bl	8002344 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80029aa:	f003 ffd7 	bl	800695c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80029ae:	f7fe ff3b 	bl	8001828 <main>
  bx  lr    
 80029b2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80029b4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80029b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80029bc:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 80029c0:	08007128 	.word	0x08007128
  ldr r2, =_sbss
 80029c4:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 80029c8:	20000330 	.word	0x20000330

080029cc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80029cc:	e7fe      	b.n	80029cc <ADC_IRQHandler>
	...

080029d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80029d4:	4b0e      	ldr	r3, [pc, #56]	; (8002a10 <HAL_Init+0x40>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4a0d      	ldr	r2, [pc, #52]	; (8002a10 <HAL_Init+0x40>)
 80029da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80029de:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80029e0:	4b0b      	ldr	r3, [pc, #44]	; (8002a10 <HAL_Init+0x40>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4a0a      	ldr	r2, [pc, #40]	; (8002a10 <HAL_Init+0x40>)
 80029e6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80029ea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80029ec:	4b08      	ldr	r3, [pc, #32]	; (8002a10 <HAL_Init+0x40>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4a07      	ldr	r2, [pc, #28]	; (8002a10 <HAL_Init+0x40>)
 80029f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029f6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80029f8:	2003      	movs	r0, #3
 80029fa:	f000 f94f 	bl	8002c9c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80029fe:	2000      	movs	r0, #0
 8002a00:	f000 f808 	bl	8002a14 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002a04:	f7ff faf4 	bl	8001ff0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002a08:	2300      	movs	r3, #0
}
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	bd80      	pop	{r7, pc}
 8002a0e:	bf00      	nop
 8002a10:	40023c00 	.word	0x40023c00

08002a14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b082      	sub	sp, #8
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002a1c:	4b12      	ldr	r3, [pc, #72]	; (8002a68 <HAL_InitTick+0x54>)
 8002a1e:	681a      	ldr	r2, [r3, #0]
 8002a20:	4b12      	ldr	r3, [pc, #72]	; (8002a6c <HAL_InitTick+0x58>)
 8002a22:	781b      	ldrb	r3, [r3, #0]
 8002a24:	4619      	mov	r1, r3
 8002a26:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002a2a:	fbb3 f3f1 	udiv	r3, r3, r1
 8002a2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a32:	4618      	mov	r0, r3
 8002a34:	f000 f967 	bl	8002d06 <HAL_SYSTICK_Config>
 8002a38:	4603      	mov	r3, r0
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d001      	beq.n	8002a42 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002a3e:	2301      	movs	r3, #1
 8002a40:	e00e      	b.n	8002a60 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	2b0f      	cmp	r3, #15
 8002a46:	d80a      	bhi.n	8002a5e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002a48:	2200      	movs	r2, #0
 8002a4a:	6879      	ldr	r1, [r7, #4]
 8002a4c:	f04f 30ff 	mov.w	r0, #4294967295
 8002a50:	f000 f92f 	bl	8002cb2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002a54:	4a06      	ldr	r2, [pc, #24]	; (8002a70 <HAL_InitTick+0x5c>)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	e000      	b.n	8002a60 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002a5e:	2301      	movs	r3, #1
}
 8002a60:	4618      	mov	r0, r3
 8002a62:	3708      	adds	r7, #8
 8002a64:	46bd      	mov	sp, r7
 8002a66:	bd80      	pop	{r7, pc}
 8002a68:	20000004 	.word	0x20000004
 8002a6c:	20000010 	.word	0x20000010
 8002a70:	2000000c 	.word	0x2000000c

08002a74 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a74:	b480      	push	{r7}
 8002a76:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002a78:	4b06      	ldr	r3, [pc, #24]	; (8002a94 <HAL_IncTick+0x20>)
 8002a7a:	781b      	ldrb	r3, [r3, #0]
 8002a7c:	461a      	mov	r2, r3
 8002a7e:	4b06      	ldr	r3, [pc, #24]	; (8002a98 <HAL_IncTick+0x24>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4413      	add	r3, r2
 8002a84:	4a04      	ldr	r2, [pc, #16]	; (8002a98 <HAL_IncTick+0x24>)
 8002a86:	6013      	str	r3, [r2, #0]
}
 8002a88:	bf00      	nop
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a90:	4770      	bx	lr
 8002a92:	bf00      	nop
 8002a94:	20000010 	.word	0x20000010
 8002a98:	2000032c 	.word	0x2000032c

08002a9c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	af00      	add	r7, sp, #0
  return uwTick;
 8002aa0:	4b03      	ldr	r3, [pc, #12]	; (8002ab0 <HAL_GetTick+0x14>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
}
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aac:	4770      	bx	lr
 8002aae:	bf00      	nop
 8002ab0:	2000032c 	.word	0x2000032c

08002ab4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b084      	sub	sp, #16
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002abc:	f7ff ffee 	bl	8002a9c <HAL_GetTick>
 8002ac0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002acc:	d005      	beq.n	8002ada <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002ace:	4b0a      	ldr	r3, [pc, #40]	; (8002af8 <HAL_Delay+0x44>)
 8002ad0:	781b      	ldrb	r3, [r3, #0]
 8002ad2:	461a      	mov	r2, r3
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	4413      	add	r3, r2
 8002ad8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002ada:	bf00      	nop
 8002adc:	f7ff ffde 	bl	8002a9c <HAL_GetTick>
 8002ae0:	4602      	mov	r2, r0
 8002ae2:	68bb      	ldr	r3, [r7, #8]
 8002ae4:	1ad3      	subs	r3, r2, r3
 8002ae6:	68fa      	ldr	r2, [r7, #12]
 8002ae8:	429a      	cmp	r2, r3
 8002aea:	d8f7      	bhi.n	8002adc <HAL_Delay+0x28>
  {
  }
}
 8002aec:	bf00      	nop
 8002aee:	bf00      	nop
 8002af0:	3710      	adds	r7, #16
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bd80      	pop	{r7, pc}
 8002af6:	bf00      	nop
 8002af8:	20000010 	.word	0x20000010

08002afc <__NVIC_SetPriorityGrouping>:
{
 8002afc:	b480      	push	{r7}
 8002afe:	b085      	sub	sp, #20
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	f003 0307 	and.w	r3, r3, #7
 8002b0a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b0c:	4b0c      	ldr	r3, [pc, #48]	; (8002b40 <__NVIC_SetPriorityGrouping+0x44>)
 8002b0e:	68db      	ldr	r3, [r3, #12]
 8002b10:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b12:	68ba      	ldr	r2, [r7, #8]
 8002b14:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002b18:	4013      	ands	r3, r2
 8002b1a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b20:	68bb      	ldr	r3, [r7, #8]
 8002b22:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002b24:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002b28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b2e:	4a04      	ldr	r2, [pc, #16]	; (8002b40 <__NVIC_SetPriorityGrouping+0x44>)
 8002b30:	68bb      	ldr	r3, [r7, #8]
 8002b32:	60d3      	str	r3, [r2, #12]
}
 8002b34:	bf00      	nop
 8002b36:	3714      	adds	r7, #20
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3e:	4770      	bx	lr
 8002b40:	e000ed00 	.word	0xe000ed00

08002b44 <__NVIC_GetPriorityGrouping>:
{
 8002b44:	b480      	push	{r7}
 8002b46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b48:	4b04      	ldr	r3, [pc, #16]	; (8002b5c <__NVIC_GetPriorityGrouping+0x18>)
 8002b4a:	68db      	ldr	r3, [r3, #12]
 8002b4c:	0a1b      	lsrs	r3, r3, #8
 8002b4e:	f003 0307 	and.w	r3, r3, #7
}
 8002b52:	4618      	mov	r0, r3
 8002b54:	46bd      	mov	sp, r7
 8002b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5a:	4770      	bx	lr
 8002b5c:	e000ed00 	.word	0xe000ed00

08002b60 <__NVIC_EnableIRQ>:
{
 8002b60:	b480      	push	{r7}
 8002b62:	b083      	sub	sp, #12
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	4603      	mov	r3, r0
 8002b68:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	db0b      	blt.n	8002b8a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b72:	79fb      	ldrb	r3, [r7, #7]
 8002b74:	f003 021f 	and.w	r2, r3, #31
 8002b78:	4907      	ldr	r1, [pc, #28]	; (8002b98 <__NVIC_EnableIRQ+0x38>)
 8002b7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b7e:	095b      	lsrs	r3, r3, #5
 8002b80:	2001      	movs	r0, #1
 8002b82:	fa00 f202 	lsl.w	r2, r0, r2
 8002b86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002b8a:	bf00      	nop
 8002b8c:	370c      	adds	r7, #12
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b94:	4770      	bx	lr
 8002b96:	bf00      	nop
 8002b98:	e000e100 	.word	0xe000e100

08002b9c <__NVIC_SetPriority>:
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	b083      	sub	sp, #12
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	4603      	mov	r3, r0
 8002ba4:	6039      	str	r1, [r7, #0]
 8002ba6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ba8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	db0a      	blt.n	8002bc6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	b2da      	uxtb	r2, r3
 8002bb4:	490c      	ldr	r1, [pc, #48]	; (8002be8 <__NVIC_SetPriority+0x4c>)
 8002bb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bba:	0112      	lsls	r2, r2, #4
 8002bbc:	b2d2      	uxtb	r2, r2
 8002bbe:	440b      	add	r3, r1
 8002bc0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002bc4:	e00a      	b.n	8002bdc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	b2da      	uxtb	r2, r3
 8002bca:	4908      	ldr	r1, [pc, #32]	; (8002bec <__NVIC_SetPriority+0x50>)
 8002bcc:	79fb      	ldrb	r3, [r7, #7]
 8002bce:	f003 030f 	and.w	r3, r3, #15
 8002bd2:	3b04      	subs	r3, #4
 8002bd4:	0112      	lsls	r2, r2, #4
 8002bd6:	b2d2      	uxtb	r2, r2
 8002bd8:	440b      	add	r3, r1
 8002bda:	761a      	strb	r2, [r3, #24]
}
 8002bdc:	bf00      	nop
 8002bde:	370c      	adds	r7, #12
 8002be0:	46bd      	mov	sp, r7
 8002be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be6:	4770      	bx	lr
 8002be8:	e000e100 	.word	0xe000e100
 8002bec:	e000ed00 	.word	0xe000ed00

08002bf0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002bf0:	b480      	push	{r7}
 8002bf2:	b089      	sub	sp, #36	; 0x24
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	60f8      	str	r0, [r7, #12]
 8002bf8:	60b9      	str	r1, [r7, #8]
 8002bfa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	f003 0307 	and.w	r3, r3, #7
 8002c02:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c04:	69fb      	ldr	r3, [r7, #28]
 8002c06:	f1c3 0307 	rsb	r3, r3, #7
 8002c0a:	2b04      	cmp	r3, #4
 8002c0c:	bf28      	it	cs
 8002c0e:	2304      	movcs	r3, #4
 8002c10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c12:	69fb      	ldr	r3, [r7, #28]
 8002c14:	3304      	adds	r3, #4
 8002c16:	2b06      	cmp	r3, #6
 8002c18:	d902      	bls.n	8002c20 <NVIC_EncodePriority+0x30>
 8002c1a:	69fb      	ldr	r3, [r7, #28]
 8002c1c:	3b03      	subs	r3, #3
 8002c1e:	e000      	b.n	8002c22 <NVIC_EncodePriority+0x32>
 8002c20:	2300      	movs	r3, #0
 8002c22:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c24:	f04f 32ff 	mov.w	r2, #4294967295
 8002c28:	69bb      	ldr	r3, [r7, #24]
 8002c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c2e:	43da      	mvns	r2, r3
 8002c30:	68bb      	ldr	r3, [r7, #8]
 8002c32:	401a      	ands	r2, r3
 8002c34:	697b      	ldr	r3, [r7, #20]
 8002c36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c38:	f04f 31ff 	mov.w	r1, #4294967295
 8002c3c:	697b      	ldr	r3, [r7, #20]
 8002c3e:	fa01 f303 	lsl.w	r3, r1, r3
 8002c42:	43d9      	mvns	r1, r3
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c48:	4313      	orrs	r3, r2
         );
}
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	3724      	adds	r7, #36	; 0x24
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c54:	4770      	bx	lr
	...

08002c58 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b082      	sub	sp, #8
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	3b01      	subs	r3, #1
 8002c64:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002c68:	d301      	bcc.n	8002c6e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	e00f      	b.n	8002c8e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c6e:	4a0a      	ldr	r2, [pc, #40]	; (8002c98 <SysTick_Config+0x40>)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	3b01      	subs	r3, #1
 8002c74:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c76:	210f      	movs	r1, #15
 8002c78:	f04f 30ff 	mov.w	r0, #4294967295
 8002c7c:	f7ff ff8e 	bl	8002b9c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c80:	4b05      	ldr	r3, [pc, #20]	; (8002c98 <SysTick_Config+0x40>)
 8002c82:	2200      	movs	r2, #0
 8002c84:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c86:	4b04      	ldr	r3, [pc, #16]	; (8002c98 <SysTick_Config+0x40>)
 8002c88:	2207      	movs	r2, #7
 8002c8a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c8c:	2300      	movs	r3, #0
}
 8002c8e:	4618      	mov	r0, r3
 8002c90:	3708      	adds	r7, #8
 8002c92:	46bd      	mov	sp, r7
 8002c94:	bd80      	pop	{r7, pc}
 8002c96:	bf00      	nop
 8002c98:	e000e010 	.word	0xe000e010

08002c9c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b082      	sub	sp, #8
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ca4:	6878      	ldr	r0, [r7, #4]
 8002ca6:	f7ff ff29 	bl	8002afc <__NVIC_SetPriorityGrouping>
}
 8002caa:	bf00      	nop
 8002cac:	3708      	adds	r7, #8
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	bd80      	pop	{r7, pc}

08002cb2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002cb2:	b580      	push	{r7, lr}
 8002cb4:	b086      	sub	sp, #24
 8002cb6:	af00      	add	r7, sp, #0
 8002cb8:	4603      	mov	r3, r0
 8002cba:	60b9      	str	r1, [r7, #8]
 8002cbc:	607a      	str	r2, [r7, #4]
 8002cbe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002cc4:	f7ff ff3e 	bl	8002b44 <__NVIC_GetPriorityGrouping>
 8002cc8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002cca:	687a      	ldr	r2, [r7, #4]
 8002ccc:	68b9      	ldr	r1, [r7, #8]
 8002cce:	6978      	ldr	r0, [r7, #20]
 8002cd0:	f7ff ff8e 	bl	8002bf0 <NVIC_EncodePriority>
 8002cd4:	4602      	mov	r2, r0
 8002cd6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002cda:	4611      	mov	r1, r2
 8002cdc:	4618      	mov	r0, r3
 8002cde:	f7ff ff5d 	bl	8002b9c <__NVIC_SetPriority>
}
 8002ce2:	bf00      	nop
 8002ce4:	3718      	adds	r7, #24
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	bd80      	pop	{r7, pc}

08002cea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002cea:	b580      	push	{r7, lr}
 8002cec:	b082      	sub	sp, #8
 8002cee:	af00      	add	r7, sp, #0
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002cf4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	f7ff ff31 	bl	8002b60 <__NVIC_EnableIRQ>
}
 8002cfe:	bf00      	nop
 8002d00:	3708      	adds	r7, #8
 8002d02:	46bd      	mov	sp, r7
 8002d04:	bd80      	pop	{r7, pc}

08002d06 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002d06:	b580      	push	{r7, lr}
 8002d08:	b082      	sub	sp, #8
 8002d0a:	af00      	add	r7, sp, #0
 8002d0c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002d0e:	6878      	ldr	r0, [r7, #4]
 8002d10:	f7ff ffa2 	bl	8002c58 <SysTick_Config>
 8002d14:	4603      	mov	r3, r0
}
 8002d16:	4618      	mov	r0, r3
 8002d18:	3708      	adds	r7, #8
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	bd80      	pop	{r7, pc}

08002d1e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002d1e:	b580      	push	{r7, lr}
 8002d20:	b084      	sub	sp, #16
 8002d22:	af00      	add	r7, sp, #0
 8002d24:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d2a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002d2c:	f7ff feb6 	bl	8002a9c <HAL_GetTick>
 8002d30:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002d38:	b2db      	uxtb	r3, r3
 8002d3a:	2b02      	cmp	r3, #2
 8002d3c:	d008      	beq.n	8002d50 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	2280      	movs	r2, #128	; 0x80
 8002d42:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2200      	movs	r2, #0
 8002d48:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002d4c:	2301      	movs	r3, #1
 8002d4e:	e052      	b.n	8002df6 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	681a      	ldr	r2, [r3, #0]
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f022 0216 	bic.w	r2, r2, #22
 8002d5e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	695a      	ldr	r2, [r3, #20]
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002d6e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d103      	bne.n	8002d80 <HAL_DMA_Abort+0x62>
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d007      	beq.n	8002d90 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	681a      	ldr	r2, [r3, #0]
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f022 0208 	bic.w	r2, r2, #8
 8002d8e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	681a      	ldr	r2, [r3, #0]
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f022 0201 	bic.w	r2, r2, #1
 8002d9e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002da0:	e013      	b.n	8002dca <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002da2:	f7ff fe7b 	bl	8002a9c <HAL_GetTick>
 8002da6:	4602      	mov	r2, r0
 8002da8:	68bb      	ldr	r3, [r7, #8]
 8002daa:	1ad3      	subs	r3, r2, r3
 8002dac:	2b05      	cmp	r3, #5
 8002dae:	d90c      	bls.n	8002dca <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2220      	movs	r2, #32
 8002db4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2200      	movs	r2, #0
 8002dba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	2203      	movs	r2, #3
 8002dc2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8002dc6:	2303      	movs	r3, #3
 8002dc8:	e015      	b.n	8002df6 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f003 0301 	and.w	r3, r3, #1
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d1e4      	bne.n	8002da2 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ddc:	223f      	movs	r2, #63	; 0x3f
 8002dde:	409a      	lsls	r2, r3
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2200      	movs	r2, #0
 8002de8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2201      	movs	r2, #1
 8002df0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8002df4:	2300      	movs	r3, #0
}
 8002df6:	4618      	mov	r0, r3
 8002df8:	3710      	adds	r7, #16
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	bd80      	pop	{r7, pc}

08002dfe <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002dfe:	b480      	push	{r7}
 8002e00:	b083      	sub	sp, #12
 8002e02:	af00      	add	r7, sp, #0
 8002e04:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002e0c:	b2db      	uxtb	r3, r3
 8002e0e:	2b02      	cmp	r3, #2
 8002e10:	d004      	beq.n	8002e1c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	2280      	movs	r2, #128	; 0x80
 8002e16:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002e18:	2301      	movs	r3, #1
 8002e1a:	e00c      	b.n	8002e36 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2205      	movs	r2, #5
 8002e20:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	681a      	ldr	r2, [r3, #0]
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f022 0201 	bic.w	r2, r2, #1
 8002e32:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002e34:	2300      	movs	r3, #0
}
 8002e36:	4618      	mov	r0, r3
 8002e38:	370c      	adds	r7, #12
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e40:	4770      	bx	lr
	...

08002e44 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e44:	b480      	push	{r7}
 8002e46:	b089      	sub	sp, #36	; 0x24
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
 8002e4c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002e4e:	2300      	movs	r3, #0
 8002e50:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002e52:	2300      	movs	r3, #0
 8002e54:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002e56:	2300      	movs	r3, #0
 8002e58:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	61fb      	str	r3, [r7, #28]
 8002e5e:	e165      	b.n	800312c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002e60:	2201      	movs	r2, #1
 8002e62:	69fb      	ldr	r3, [r7, #28]
 8002e64:	fa02 f303 	lsl.w	r3, r2, r3
 8002e68:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	697a      	ldr	r2, [r7, #20]
 8002e70:	4013      	ands	r3, r2
 8002e72:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002e74:	693a      	ldr	r2, [r7, #16]
 8002e76:	697b      	ldr	r3, [r7, #20]
 8002e78:	429a      	cmp	r2, r3
 8002e7a:	f040 8154 	bne.w	8003126 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	685b      	ldr	r3, [r3, #4]
 8002e82:	f003 0303 	and.w	r3, r3, #3
 8002e86:	2b01      	cmp	r3, #1
 8002e88:	d005      	beq.n	8002e96 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	685b      	ldr	r3, [r3, #4]
 8002e8e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002e92:	2b02      	cmp	r3, #2
 8002e94:	d130      	bne.n	8002ef8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	689b      	ldr	r3, [r3, #8]
 8002e9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002e9c:	69fb      	ldr	r3, [r7, #28]
 8002e9e:	005b      	lsls	r3, r3, #1
 8002ea0:	2203      	movs	r2, #3
 8002ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea6:	43db      	mvns	r3, r3
 8002ea8:	69ba      	ldr	r2, [r7, #24]
 8002eaa:	4013      	ands	r3, r2
 8002eac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	68da      	ldr	r2, [r3, #12]
 8002eb2:	69fb      	ldr	r3, [r7, #28]
 8002eb4:	005b      	lsls	r3, r3, #1
 8002eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8002eba:	69ba      	ldr	r2, [r7, #24]
 8002ebc:	4313      	orrs	r3, r2
 8002ebe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	69ba      	ldr	r2, [r7, #24]
 8002ec4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	685b      	ldr	r3, [r3, #4]
 8002eca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002ecc:	2201      	movs	r2, #1
 8002ece:	69fb      	ldr	r3, [r7, #28]
 8002ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed4:	43db      	mvns	r3, r3
 8002ed6:	69ba      	ldr	r2, [r7, #24]
 8002ed8:	4013      	ands	r3, r2
 8002eda:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	685b      	ldr	r3, [r3, #4]
 8002ee0:	091b      	lsrs	r3, r3, #4
 8002ee2:	f003 0201 	and.w	r2, r3, #1
 8002ee6:	69fb      	ldr	r3, [r7, #28]
 8002ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8002eec:	69ba      	ldr	r2, [r7, #24]
 8002eee:	4313      	orrs	r3, r2
 8002ef0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	69ba      	ldr	r2, [r7, #24]
 8002ef6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	685b      	ldr	r3, [r3, #4]
 8002efc:	f003 0303 	and.w	r3, r3, #3
 8002f00:	2b03      	cmp	r3, #3
 8002f02:	d017      	beq.n	8002f34 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	68db      	ldr	r3, [r3, #12]
 8002f08:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002f0a:	69fb      	ldr	r3, [r7, #28]
 8002f0c:	005b      	lsls	r3, r3, #1
 8002f0e:	2203      	movs	r2, #3
 8002f10:	fa02 f303 	lsl.w	r3, r2, r3
 8002f14:	43db      	mvns	r3, r3
 8002f16:	69ba      	ldr	r2, [r7, #24]
 8002f18:	4013      	ands	r3, r2
 8002f1a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	689a      	ldr	r2, [r3, #8]
 8002f20:	69fb      	ldr	r3, [r7, #28]
 8002f22:	005b      	lsls	r3, r3, #1
 8002f24:	fa02 f303 	lsl.w	r3, r2, r3
 8002f28:	69ba      	ldr	r2, [r7, #24]
 8002f2a:	4313      	orrs	r3, r2
 8002f2c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	69ba      	ldr	r2, [r7, #24]
 8002f32:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	685b      	ldr	r3, [r3, #4]
 8002f38:	f003 0303 	and.w	r3, r3, #3
 8002f3c:	2b02      	cmp	r3, #2
 8002f3e:	d123      	bne.n	8002f88 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002f40:	69fb      	ldr	r3, [r7, #28]
 8002f42:	08da      	lsrs	r2, r3, #3
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	3208      	adds	r2, #8
 8002f48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002f4e:	69fb      	ldr	r3, [r7, #28]
 8002f50:	f003 0307 	and.w	r3, r3, #7
 8002f54:	009b      	lsls	r3, r3, #2
 8002f56:	220f      	movs	r2, #15
 8002f58:	fa02 f303 	lsl.w	r3, r2, r3
 8002f5c:	43db      	mvns	r3, r3
 8002f5e:	69ba      	ldr	r2, [r7, #24]
 8002f60:	4013      	ands	r3, r2
 8002f62:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	691a      	ldr	r2, [r3, #16]
 8002f68:	69fb      	ldr	r3, [r7, #28]
 8002f6a:	f003 0307 	and.w	r3, r3, #7
 8002f6e:	009b      	lsls	r3, r3, #2
 8002f70:	fa02 f303 	lsl.w	r3, r2, r3
 8002f74:	69ba      	ldr	r2, [r7, #24]
 8002f76:	4313      	orrs	r3, r2
 8002f78:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002f7a:	69fb      	ldr	r3, [r7, #28]
 8002f7c:	08da      	lsrs	r2, r3, #3
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	3208      	adds	r2, #8
 8002f82:	69b9      	ldr	r1, [r7, #24]
 8002f84:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002f8e:	69fb      	ldr	r3, [r7, #28]
 8002f90:	005b      	lsls	r3, r3, #1
 8002f92:	2203      	movs	r2, #3
 8002f94:	fa02 f303 	lsl.w	r3, r2, r3
 8002f98:	43db      	mvns	r3, r3
 8002f9a:	69ba      	ldr	r2, [r7, #24]
 8002f9c:	4013      	ands	r3, r2
 8002f9e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	685b      	ldr	r3, [r3, #4]
 8002fa4:	f003 0203 	and.w	r2, r3, #3
 8002fa8:	69fb      	ldr	r3, [r7, #28]
 8002faa:	005b      	lsls	r3, r3, #1
 8002fac:	fa02 f303 	lsl.w	r3, r2, r3
 8002fb0:	69ba      	ldr	r2, [r7, #24]
 8002fb2:	4313      	orrs	r3, r2
 8002fb4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	69ba      	ldr	r2, [r7, #24]
 8002fba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	685b      	ldr	r3, [r3, #4]
 8002fc0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	f000 80ae 	beq.w	8003126 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002fca:	2300      	movs	r3, #0
 8002fcc:	60fb      	str	r3, [r7, #12]
 8002fce:	4b5d      	ldr	r3, [pc, #372]	; (8003144 <HAL_GPIO_Init+0x300>)
 8002fd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fd2:	4a5c      	ldr	r2, [pc, #368]	; (8003144 <HAL_GPIO_Init+0x300>)
 8002fd4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002fd8:	6453      	str	r3, [r2, #68]	; 0x44
 8002fda:	4b5a      	ldr	r3, [pc, #360]	; (8003144 <HAL_GPIO_Init+0x300>)
 8002fdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fde:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002fe2:	60fb      	str	r3, [r7, #12]
 8002fe4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002fe6:	4a58      	ldr	r2, [pc, #352]	; (8003148 <HAL_GPIO_Init+0x304>)
 8002fe8:	69fb      	ldr	r3, [r7, #28]
 8002fea:	089b      	lsrs	r3, r3, #2
 8002fec:	3302      	adds	r3, #2
 8002fee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ff2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002ff4:	69fb      	ldr	r3, [r7, #28]
 8002ff6:	f003 0303 	and.w	r3, r3, #3
 8002ffa:	009b      	lsls	r3, r3, #2
 8002ffc:	220f      	movs	r2, #15
 8002ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8003002:	43db      	mvns	r3, r3
 8003004:	69ba      	ldr	r2, [r7, #24]
 8003006:	4013      	ands	r3, r2
 8003008:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	4a4f      	ldr	r2, [pc, #316]	; (800314c <HAL_GPIO_Init+0x308>)
 800300e:	4293      	cmp	r3, r2
 8003010:	d025      	beq.n	800305e <HAL_GPIO_Init+0x21a>
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	4a4e      	ldr	r2, [pc, #312]	; (8003150 <HAL_GPIO_Init+0x30c>)
 8003016:	4293      	cmp	r3, r2
 8003018:	d01f      	beq.n	800305a <HAL_GPIO_Init+0x216>
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	4a4d      	ldr	r2, [pc, #308]	; (8003154 <HAL_GPIO_Init+0x310>)
 800301e:	4293      	cmp	r3, r2
 8003020:	d019      	beq.n	8003056 <HAL_GPIO_Init+0x212>
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	4a4c      	ldr	r2, [pc, #304]	; (8003158 <HAL_GPIO_Init+0x314>)
 8003026:	4293      	cmp	r3, r2
 8003028:	d013      	beq.n	8003052 <HAL_GPIO_Init+0x20e>
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	4a4b      	ldr	r2, [pc, #300]	; (800315c <HAL_GPIO_Init+0x318>)
 800302e:	4293      	cmp	r3, r2
 8003030:	d00d      	beq.n	800304e <HAL_GPIO_Init+0x20a>
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	4a4a      	ldr	r2, [pc, #296]	; (8003160 <HAL_GPIO_Init+0x31c>)
 8003036:	4293      	cmp	r3, r2
 8003038:	d007      	beq.n	800304a <HAL_GPIO_Init+0x206>
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	4a49      	ldr	r2, [pc, #292]	; (8003164 <HAL_GPIO_Init+0x320>)
 800303e:	4293      	cmp	r3, r2
 8003040:	d101      	bne.n	8003046 <HAL_GPIO_Init+0x202>
 8003042:	2306      	movs	r3, #6
 8003044:	e00c      	b.n	8003060 <HAL_GPIO_Init+0x21c>
 8003046:	2307      	movs	r3, #7
 8003048:	e00a      	b.n	8003060 <HAL_GPIO_Init+0x21c>
 800304a:	2305      	movs	r3, #5
 800304c:	e008      	b.n	8003060 <HAL_GPIO_Init+0x21c>
 800304e:	2304      	movs	r3, #4
 8003050:	e006      	b.n	8003060 <HAL_GPIO_Init+0x21c>
 8003052:	2303      	movs	r3, #3
 8003054:	e004      	b.n	8003060 <HAL_GPIO_Init+0x21c>
 8003056:	2302      	movs	r3, #2
 8003058:	e002      	b.n	8003060 <HAL_GPIO_Init+0x21c>
 800305a:	2301      	movs	r3, #1
 800305c:	e000      	b.n	8003060 <HAL_GPIO_Init+0x21c>
 800305e:	2300      	movs	r3, #0
 8003060:	69fa      	ldr	r2, [r7, #28]
 8003062:	f002 0203 	and.w	r2, r2, #3
 8003066:	0092      	lsls	r2, r2, #2
 8003068:	4093      	lsls	r3, r2
 800306a:	69ba      	ldr	r2, [r7, #24]
 800306c:	4313      	orrs	r3, r2
 800306e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003070:	4935      	ldr	r1, [pc, #212]	; (8003148 <HAL_GPIO_Init+0x304>)
 8003072:	69fb      	ldr	r3, [r7, #28]
 8003074:	089b      	lsrs	r3, r3, #2
 8003076:	3302      	adds	r3, #2
 8003078:	69ba      	ldr	r2, [r7, #24]
 800307a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800307e:	4b3a      	ldr	r3, [pc, #232]	; (8003168 <HAL_GPIO_Init+0x324>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003084:	693b      	ldr	r3, [r7, #16]
 8003086:	43db      	mvns	r3, r3
 8003088:	69ba      	ldr	r2, [r7, #24]
 800308a:	4013      	ands	r3, r2
 800308c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	685b      	ldr	r3, [r3, #4]
 8003092:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003096:	2b00      	cmp	r3, #0
 8003098:	d003      	beq.n	80030a2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800309a:	69ba      	ldr	r2, [r7, #24]
 800309c:	693b      	ldr	r3, [r7, #16]
 800309e:	4313      	orrs	r3, r2
 80030a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80030a2:	4a31      	ldr	r2, [pc, #196]	; (8003168 <HAL_GPIO_Init+0x324>)
 80030a4:	69bb      	ldr	r3, [r7, #24]
 80030a6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80030a8:	4b2f      	ldr	r3, [pc, #188]	; (8003168 <HAL_GPIO_Init+0x324>)
 80030aa:	685b      	ldr	r3, [r3, #4]
 80030ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030ae:	693b      	ldr	r3, [r7, #16]
 80030b0:	43db      	mvns	r3, r3
 80030b2:	69ba      	ldr	r2, [r7, #24]
 80030b4:	4013      	ands	r3, r2
 80030b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	685b      	ldr	r3, [r3, #4]
 80030bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d003      	beq.n	80030cc <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80030c4:	69ba      	ldr	r2, [r7, #24]
 80030c6:	693b      	ldr	r3, [r7, #16]
 80030c8:	4313      	orrs	r3, r2
 80030ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80030cc:	4a26      	ldr	r2, [pc, #152]	; (8003168 <HAL_GPIO_Init+0x324>)
 80030ce:	69bb      	ldr	r3, [r7, #24]
 80030d0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80030d2:	4b25      	ldr	r3, [pc, #148]	; (8003168 <HAL_GPIO_Init+0x324>)
 80030d4:	689b      	ldr	r3, [r3, #8]
 80030d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030d8:	693b      	ldr	r3, [r7, #16]
 80030da:	43db      	mvns	r3, r3
 80030dc:	69ba      	ldr	r2, [r7, #24]
 80030de:	4013      	ands	r3, r2
 80030e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	685b      	ldr	r3, [r3, #4]
 80030e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d003      	beq.n	80030f6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80030ee:	69ba      	ldr	r2, [r7, #24]
 80030f0:	693b      	ldr	r3, [r7, #16]
 80030f2:	4313      	orrs	r3, r2
 80030f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80030f6:	4a1c      	ldr	r2, [pc, #112]	; (8003168 <HAL_GPIO_Init+0x324>)
 80030f8:	69bb      	ldr	r3, [r7, #24]
 80030fa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80030fc:	4b1a      	ldr	r3, [pc, #104]	; (8003168 <HAL_GPIO_Init+0x324>)
 80030fe:	68db      	ldr	r3, [r3, #12]
 8003100:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003102:	693b      	ldr	r3, [r7, #16]
 8003104:	43db      	mvns	r3, r3
 8003106:	69ba      	ldr	r2, [r7, #24]
 8003108:	4013      	ands	r3, r2
 800310a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	685b      	ldr	r3, [r3, #4]
 8003110:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003114:	2b00      	cmp	r3, #0
 8003116:	d003      	beq.n	8003120 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003118:	69ba      	ldr	r2, [r7, #24]
 800311a:	693b      	ldr	r3, [r7, #16]
 800311c:	4313      	orrs	r3, r2
 800311e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003120:	4a11      	ldr	r2, [pc, #68]	; (8003168 <HAL_GPIO_Init+0x324>)
 8003122:	69bb      	ldr	r3, [r7, #24]
 8003124:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003126:	69fb      	ldr	r3, [r7, #28]
 8003128:	3301      	adds	r3, #1
 800312a:	61fb      	str	r3, [r7, #28]
 800312c:	69fb      	ldr	r3, [r7, #28]
 800312e:	2b0f      	cmp	r3, #15
 8003130:	f67f ae96 	bls.w	8002e60 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003134:	bf00      	nop
 8003136:	bf00      	nop
 8003138:	3724      	adds	r7, #36	; 0x24
 800313a:	46bd      	mov	sp, r7
 800313c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003140:	4770      	bx	lr
 8003142:	bf00      	nop
 8003144:	40023800 	.word	0x40023800
 8003148:	40013800 	.word	0x40013800
 800314c:	40020000 	.word	0x40020000
 8003150:	40020400 	.word	0x40020400
 8003154:	40020800 	.word	0x40020800
 8003158:	40020c00 	.word	0x40020c00
 800315c:	40021000 	.word	0x40021000
 8003160:	40021400 	.word	0x40021400
 8003164:	40021800 	.word	0x40021800
 8003168:	40013c00 	.word	0x40013c00

0800316c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800316c:	b480      	push	{r7}
 800316e:	b083      	sub	sp, #12
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
 8003174:	460b      	mov	r3, r1
 8003176:	807b      	strh	r3, [r7, #2]
 8003178:	4613      	mov	r3, r2
 800317a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800317c:	787b      	ldrb	r3, [r7, #1]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d003      	beq.n	800318a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003182:	887a      	ldrh	r2, [r7, #2]
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003188:	e003      	b.n	8003192 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800318a:	887b      	ldrh	r3, [r7, #2]
 800318c:	041a      	lsls	r2, r3, #16
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	619a      	str	r2, [r3, #24]
}
 8003192:	bf00      	nop
 8003194:	370c      	adds	r7, #12
 8003196:	46bd      	mov	sp, r7
 8003198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319c:	4770      	bx	lr
	...

080031a0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b084      	sub	sp, #16
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d101      	bne.n	80031b2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80031ae:	2301      	movs	r3, #1
 80031b0:	e12b      	b.n	800340a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031b8:	b2db      	uxtb	r3, r3
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d106      	bne.n	80031cc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2200      	movs	r2, #0
 80031c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80031c6:	6878      	ldr	r0, [r7, #4]
 80031c8:	f7fe ff3a 	bl	8002040 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2224      	movs	r2, #36	; 0x24
 80031d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	681a      	ldr	r2, [r3, #0]
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f022 0201 	bic.w	r2, r2, #1
 80031e2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	681a      	ldr	r2, [r3, #0]
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80031f2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	681a      	ldr	r2, [r3, #0]
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003202:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003204:	f001 f87e 	bl	8004304 <HAL_RCC_GetPCLK1Freq>
 8003208:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	685b      	ldr	r3, [r3, #4]
 800320e:	4a81      	ldr	r2, [pc, #516]	; (8003414 <HAL_I2C_Init+0x274>)
 8003210:	4293      	cmp	r3, r2
 8003212:	d807      	bhi.n	8003224 <HAL_I2C_Init+0x84>
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	4a80      	ldr	r2, [pc, #512]	; (8003418 <HAL_I2C_Init+0x278>)
 8003218:	4293      	cmp	r3, r2
 800321a:	bf94      	ite	ls
 800321c:	2301      	movls	r3, #1
 800321e:	2300      	movhi	r3, #0
 8003220:	b2db      	uxtb	r3, r3
 8003222:	e006      	b.n	8003232 <HAL_I2C_Init+0x92>
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	4a7d      	ldr	r2, [pc, #500]	; (800341c <HAL_I2C_Init+0x27c>)
 8003228:	4293      	cmp	r3, r2
 800322a:	bf94      	ite	ls
 800322c:	2301      	movls	r3, #1
 800322e:	2300      	movhi	r3, #0
 8003230:	b2db      	uxtb	r3, r3
 8003232:	2b00      	cmp	r3, #0
 8003234:	d001      	beq.n	800323a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003236:	2301      	movs	r3, #1
 8003238:	e0e7      	b.n	800340a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	4a78      	ldr	r2, [pc, #480]	; (8003420 <HAL_I2C_Init+0x280>)
 800323e:	fba2 2303 	umull	r2, r3, r2, r3
 8003242:	0c9b      	lsrs	r3, r3, #18
 8003244:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	685b      	ldr	r3, [r3, #4]
 800324c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	68ba      	ldr	r2, [r7, #8]
 8003256:	430a      	orrs	r2, r1
 8003258:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	6a1b      	ldr	r3, [r3, #32]
 8003260:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	685b      	ldr	r3, [r3, #4]
 8003268:	4a6a      	ldr	r2, [pc, #424]	; (8003414 <HAL_I2C_Init+0x274>)
 800326a:	4293      	cmp	r3, r2
 800326c:	d802      	bhi.n	8003274 <HAL_I2C_Init+0xd4>
 800326e:	68bb      	ldr	r3, [r7, #8]
 8003270:	3301      	adds	r3, #1
 8003272:	e009      	b.n	8003288 <HAL_I2C_Init+0xe8>
 8003274:	68bb      	ldr	r3, [r7, #8]
 8003276:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800327a:	fb02 f303 	mul.w	r3, r2, r3
 800327e:	4a69      	ldr	r2, [pc, #420]	; (8003424 <HAL_I2C_Init+0x284>)
 8003280:	fba2 2303 	umull	r2, r3, r2, r3
 8003284:	099b      	lsrs	r3, r3, #6
 8003286:	3301      	adds	r3, #1
 8003288:	687a      	ldr	r2, [r7, #4]
 800328a:	6812      	ldr	r2, [r2, #0]
 800328c:	430b      	orrs	r3, r1
 800328e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	69db      	ldr	r3, [r3, #28]
 8003296:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800329a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	685b      	ldr	r3, [r3, #4]
 80032a2:	495c      	ldr	r1, [pc, #368]	; (8003414 <HAL_I2C_Init+0x274>)
 80032a4:	428b      	cmp	r3, r1
 80032a6:	d819      	bhi.n	80032dc <HAL_I2C_Init+0x13c>
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	1e59      	subs	r1, r3, #1
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	685b      	ldr	r3, [r3, #4]
 80032b0:	005b      	lsls	r3, r3, #1
 80032b2:	fbb1 f3f3 	udiv	r3, r1, r3
 80032b6:	1c59      	adds	r1, r3, #1
 80032b8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80032bc:	400b      	ands	r3, r1
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d00a      	beq.n	80032d8 <HAL_I2C_Init+0x138>
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	1e59      	subs	r1, r3, #1
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	685b      	ldr	r3, [r3, #4]
 80032ca:	005b      	lsls	r3, r3, #1
 80032cc:	fbb1 f3f3 	udiv	r3, r1, r3
 80032d0:	3301      	adds	r3, #1
 80032d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032d6:	e051      	b.n	800337c <HAL_I2C_Init+0x1dc>
 80032d8:	2304      	movs	r3, #4
 80032da:	e04f      	b.n	800337c <HAL_I2C_Init+0x1dc>
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	689b      	ldr	r3, [r3, #8]
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d111      	bne.n	8003308 <HAL_I2C_Init+0x168>
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	1e58      	subs	r0, r3, #1
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6859      	ldr	r1, [r3, #4]
 80032ec:	460b      	mov	r3, r1
 80032ee:	005b      	lsls	r3, r3, #1
 80032f0:	440b      	add	r3, r1
 80032f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80032f6:	3301      	adds	r3, #1
 80032f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	bf0c      	ite	eq
 8003300:	2301      	moveq	r3, #1
 8003302:	2300      	movne	r3, #0
 8003304:	b2db      	uxtb	r3, r3
 8003306:	e012      	b.n	800332e <HAL_I2C_Init+0x18e>
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	1e58      	subs	r0, r3, #1
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6859      	ldr	r1, [r3, #4]
 8003310:	460b      	mov	r3, r1
 8003312:	009b      	lsls	r3, r3, #2
 8003314:	440b      	add	r3, r1
 8003316:	0099      	lsls	r1, r3, #2
 8003318:	440b      	add	r3, r1
 800331a:	fbb0 f3f3 	udiv	r3, r0, r3
 800331e:	3301      	adds	r3, #1
 8003320:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003324:	2b00      	cmp	r3, #0
 8003326:	bf0c      	ite	eq
 8003328:	2301      	moveq	r3, #1
 800332a:	2300      	movne	r3, #0
 800332c:	b2db      	uxtb	r3, r3
 800332e:	2b00      	cmp	r3, #0
 8003330:	d001      	beq.n	8003336 <HAL_I2C_Init+0x196>
 8003332:	2301      	movs	r3, #1
 8003334:	e022      	b.n	800337c <HAL_I2C_Init+0x1dc>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	689b      	ldr	r3, [r3, #8]
 800333a:	2b00      	cmp	r3, #0
 800333c:	d10e      	bne.n	800335c <HAL_I2C_Init+0x1bc>
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	1e58      	subs	r0, r3, #1
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6859      	ldr	r1, [r3, #4]
 8003346:	460b      	mov	r3, r1
 8003348:	005b      	lsls	r3, r3, #1
 800334a:	440b      	add	r3, r1
 800334c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003350:	3301      	adds	r3, #1
 8003352:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003356:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800335a:	e00f      	b.n	800337c <HAL_I2C_Init+0x1dc>
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	1e58      	subs	r0, r3, #1
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6859      	ldr	r1, [r3, #4]
 8003364:	460b      	mov	r3, r1
 8003366:	009b      	lsls	r3, r3, #2
 8003368:	440b      	add	r3, r1
 800336a:	0099      	lsls	r1, r3, #2
 800336c:	440b      	add	r3, r1
 800336e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003372:	3301      	adds	r3, #1
 8003374:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003378:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800337c:	6879      	ldr	r1, [r7, #4]
 800337e:	6809      	ldr	r1, [r1, #0]
 8003380:	4313      	orrs	r3, r2
 8003382:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	69da      	ldr	r2, [r3, #28]
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6a1b      	ldr	r3, [r3, #32]
 8003396:	431a      	orrs	r2, r3
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	430a      	orrs	r2, r1
 800339e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	689b      	ldr	r3, [r3, #8]
 80033a6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80033aa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80033ae:	687a      	ldr	r2, [r7, #4]
 80033b0:	6911      	ldr	r1, [r2, #16]
 80033b2:	687a      	ldr	r2, [r7, #4]
 80033b4:	68d2      	ldr	r2, [r2, #12]
 80033b6:	4311      	orrs	r1, r2
 80033b8:	687a      	ldr	r2, [r7, #4]
 80033ba:	6812      	ldr	r2, [r2, #0]
 80033bc:	430b      	orrs	r3, r1
 80033be:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	68db      	ldr	r3, [r3, #12]
 80033c6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	695a      	ldr	r2, [r3, #20]
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	699b      	ldr	r3, [r3, #24]
 80033d2:	431a      	orrs	r2, r3
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	430a      	orrs	r2, r1
 80033da:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	681a      	ldr	r2, [r3, #0]
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f042 0201 	orr.w	r2, r2, #1
 80033ea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2200      	movs	r2, #0
 80033f0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2220      	movs	r2, #32
 80033f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	2200      	movs	r2, #0
 80033fe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2200      	movs	r2, #0
 8003404:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003408:	2300      	movs	r3, #0
}
 800340a:	4618      	mov	r0, r3
 800340c:	3710      	adds	r7, #16
 800340e:	46bd      	mov	sp, r7
 8003410:	bd80      	pop	{r7, pc}
 8003412:	bf00      	nop
 8003414:	000186a0 	.word	0x000186a0
 8003418:	001e847f 	.word	0x001e847f
 800341c:	003d08ff 	.word	0x003d08ff
 8003420:	431bde83 	.word	0x431bde83
 8003424:	10624dd3 	.word	0x10624dd3

08003428 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b088      	sub	sp, #32
 800342c:	af02      	add	r7, sp, #8
 800342e:	60f8      	str	r0, [r7, #12]
 8003430:	4608      	mov	r0, r1
 8003432:	4611      	mov	r1, r2
 8003434:	461a      	mov	r2, r3
 8003436:	4603      	mov	r3, r0
 8003438:	817b      	strh	r3, [r7, #10]
 800343a:	460b      	mov	r3, r1
 800343c:	813b      	strh	r3, [r7, #8]
 800343e:	4613      	mov	r3, r2
 8003440:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003442:	f7ff fb2b 	bl	8002a9c <HAL_GetTick>
 8003446:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800344e:	b2db      	uxtb	r3, r3
 8003450:	2b20      	cmp	r3, #32
 8003452:	f040 80d9 	bne.w	8003608 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003456:	697b      	ldr	r3, [r7, #20]
 8003458:	9300      	str	r3, [sp, #0]
 800345a:	2319      	movs	r3, #25
 800345c:	2201      	movs	r2, #1
 800345e:	496d      	ldr	r1, [pc, #436]	; (8003614 <HAL_I2C_Mem_Write+0x1ec>)
 8003460:	68f8      	ldr	r0, [r7, #12]
 8003462:	f000 fc7f 	bl	8003d64 <I2C_WaitOnFlagUntilTimeout>
 8003466:	4603      	mov	r3, r0
 8003468:	2b00      	cmp	r3, #0
 800346a:	d001      	beq.n	8003470 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800346c:	2302      	movs	r3, #2
 800346e:	e0cc      	b.n	800360a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003476:	2b01      	cmp	r3, #1
 8003478:	d101      	bne.n	800347e <HAL_I2C_Mem_Write+0x56>
 800347a:	2302      	movs	r3, #2
 800347c:	e0c5      	b.n	800360a <HAL_I2C_Mem_Write+0x1e2>
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	2201      	movs	r2, #1
 8003482:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f003 0301 	and.w	r3, r3, #1
 8003490:	2b01      	cmp	r3, #1
 8003492:	d007      	beq.n	80034a4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	681a      	ldr	r2, [r3, #0]
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f042 0201 	orr.w	r2, r2, #1
 80034a2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	681a      	ldr	r2, [r3, #0]
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80034b2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	2221      	movs	r2, #33	; 0x21
 80034b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	2240      	movs	r2, #64	; 0x40
 80034c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	2200      	movs	r2, #0
 80034c8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	6a3a      	ldr	r2, [r7, #32]
 80034ce:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80034d4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034da:	b29a      	uxth	r2, r3
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	4a4d      	ldr	r2, [pc, #308]	; (8003618 <HAL_I2C_Mem_Write+0x1f0>)
 80034e4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80034e6:	88f8      	ldrh	r0, [r7, #6]
 80034e8:	893a      	ldrh	r2, [r7, #8]
 80034ea:	8979      	ldrh	r1, [r7, #10]
 80034ec:	697b      	ldr	r3, [r7, #20]
 80034ee:	9301      	str	r3, [sp, #4]
 80034f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034f2:	9300      	str	r3, [sp, #0]
 80034f4:	4603      	mov	r3, r0
 80034f6:	68f8      	ldr	r0, [r7, #12]
 80034f8:	f000 fab6 	bl	8003a68 <I2C_RequestMemoryWrite>
 80034fc:	4603      	mov	r3, r0
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d052      	beq.n	80035a8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003502:	2301      	movs	r3, #1
 8003504:	e081      	b.n	800360a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003506:	697a      	ldr	r2, [r7, #20]
 8003508:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800350a:	68f8      	ldr	r0, [r7, #12]
 800350c:	f000 fd00 	bl	8003f10 <I2C_WaitOnTXEFlagUntilTimeout>
 8003510:	4603      	mov	r3, r0
 8003512:	2b00      	cmp	r3, #0
 8003514:	d00d      	beq.n	8003532 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800351a:	2b04      	cmp	r3, #4
 800351c:	d107      	bne.n	800352e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	681a      	ldr	r2, [r3, #0]
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800352c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800352e:	2301      	movs	r3, #1
 8003530:	e06b      	b.n	800360a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003536:	781a      	ldrb	r2, [r3, #0]
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003542:	1c5a      	adds	r2, r3, #1
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800354c:	3b01      	subs	r3, #1
 800354e:	b29a      	uxth	r2, r3
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003558:	b29b      	uxth	r3, r3
 800355a:	3b01      	subs	r3, #1
 800355c:	b29a      	uxth	r2, r3
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	695b      	ldr	r3, [r3, #20]
 8003568:	f003 0304 	and.w	r3, r3, #4
 800356c:	2b04      	cmp	r3, #4
 800356e:	d11b      	bne.n	80035a8 <HAL_I2C_Mem_Write+0x180>
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003574:	2b00      	cmp	r3, #0
 8003576:	d017      	beq.n	80035a8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800357c:	781a      	ldrb	r2, [r3, #0]
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003588:	1c5a      	adds	r2, r3, #1
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003592:	3b01      	subs	r3, #1
 8003594:	b29a      	uxth	r2, r3
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800359e:	b29b      	uxth	r3, r3
 80035a0:	3b01      	subs	r3, #1
 80035a2:	b29a      	uxth	r2, r3
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d1aa      	bne.n	8003506 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80035b0:	697a      	ldr	r2, [r7, #20]
 80035b2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80035b4:	68f8      	ldr	r0, [r7, #12]
 80035b6:	f000 fcec 	bl	8003f92 <I2C_WaitOnBTFFlagUntilTimeout>
 80035ba:	4603      	mov	r3, r0
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d00d      	beq.n	80035dc <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035c4:	2b04      	cmp	r3, #4
 80035c6:	d107      	bne.n	80035d8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	681a      	ldr	r2, [r3, #0]
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035d6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80035d8:	2301      	movs	r3, #1
 80035da:	e016      	b.n	800360a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	681a      	ldr	r2, [r3, #0]
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035ea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	2220      	movs	r2, #32
 80035f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	2200      	movs	r2, #0
 80035f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	2200      	movs	r2, #0
 8003600:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003604:	2300      	movs	r3, #0
 8003606:	e000      	b.n	800360a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003608:	2302      	movs	r3, #2
  }
}
 800360a:	4618      	mov	r0, r3
 800360c:	3718      	adds	r7, #24
 800360e:	46bd      	mov	sp, r7
 8003610:	bd80      	pop	{r7, pc}
 8003612:	bf00      	nop
 8003614:	00100002 	.word	0x00100002
 8003618:	ffff0000 	.word	0xffff0000

0800361c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b08c      	sub	sp, #48	; 0x30
 8003620:	af02      	add	r7, sp, #8
 8003622:	60f8      	str	r0, [r7, #12]
 8003624:	4608      	mov	r0, r1
 8003626:	4611      	mov	r1, r2
 8003628:	461a      	mov	r2, r3
 800362a:	4603      	mov	r3, r0
 800362c:	817b      	strh	r3, [r7, #10]
 800362e:	460b      	mov	r3, r1
 8003630:	813b      	strh	r3, [r7, #8]
 8003632:	4613      	mov	r3, r2
 8003634:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003636:	f7ff fa31 	bl	8002a9c <HAL_GetTick>
 800363a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003642:	b2db      	uxtb	r3, r3
 8003644:	2b20      	cmp	r3, #32
 8003646:	f040 8208 	bne.w	8003a5a <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800364a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800364c:	9300      	str	r3, [sp, #0]
 800364e:	2319      	movs	r3, #25
 8003650:	2201      	movs	r2, #1
 8003652:	497b      	ldr	r1, [pc, #492]	; (8003840 <HAL_I2C_Mem_Read+0x224>)
 8003654:	68f8      	ldr	r0, [r7, #12]
 8003656:	f000 fb85 	bl	8003d64 <I2C_WaitOnFlagUntilTimeout>
 800365a:	4603      	mov	r3, r0
 800365c:	2b00      	cmp	r3, #0
 800365e:	d001      	beq.n	8003664 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003660:	2302      	movs	r3, #2
 8003662:	e1fb      	b.n	8003a5c <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800366a:	2b01      	cmp	r3, #1
 800366c:	d101      	bne.n	8003672 <HAL_I2C_Mem_Read+0x56>
 800366e:	2302      	movs	r3, #2
 8003670:	e1f4      	b.n	8003a5c <HAL_I2C_Mem_Read+0x440>
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	2201      	movs	r2, #1
 8003676:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f003 0301 	and.w	r3, r3, #1
 8003684:	2b01      	cmp	r3, #1
 8003686:	d007      	beq.n	8003698 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	681a      	ldr	r2, [r3, #0]
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f042 0201 	orr.w	r2, r2, #1
 8003696:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	681a      	ldr	r2, [r3, #0]
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80036a6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	2222      	movs	r2, #34	; 0x22
 80036ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	2240      	movs	r2, #64	; 0x40
 80036b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	2200      	movs	r2, #0
 80036bc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80036c2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80036c8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036ce:	b29a      	uxth	r2, r3
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	4a5b      	ldr	r2, [pc, #364]	; (8003844 <HAL_I2C_Mem_Read+0x228>)
 80036d8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80036da:	88f8      	ldrh	r0, [r7, #6]
 80036dc:	893a      	ldrh	r2, [r7, #8]
 80036de:	8979      	ldrh	r1, [r7, #10]
 80036e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036e2:	9301      	str	r3, [sp, #4]
 80036e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036e6:	9300      	str	r3, [sp, #0]
 80036e8:	4603      	mov	r3, r0
 80036ea:	68f8      	ldr	r0, [r7, #12]
 80036ec:	f000 fa52 	bl	8003b94 <I2C_RequestMemoryRead>
 80036f0:	4603      	mov	r3, r0
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d001      	beq.n	80036fa <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80036f6:	2301      	movs	r3, #1
 80036f8:	e1b0      	b.n	8003a5c <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d113      	bne.n	800372a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003702:	2300      	movs	r3, #0
 8003704:	623b      	str	r3, [r7, #32]
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	695b      	ldr	r3, [r3, #20]
 800370c:	623b      	str	r3, [r7, #32]
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	699b      	ldr	r3, [r3, #24]
 8003714:	623b      	str	r3, [r7, #32]
 8003716:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	681a      	ldr	r2, [r3, #0]
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003726:	601a      	str	r2, [r3, #0]
 8003728:	e184      	b.n	8003a34 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800372e:	2b01      	cmp	r3, #1
 8003730:	d11b      	bne.n	800376a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	681a      	ldr	r2, [r3, #0]
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003740:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003742:	2300      	movs	r3, #0
 8003744:	61fb      	str	r3, [r7, #28]
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	695b      	ldr	r3, [r3, #20]
 800374c:	61fb      	str	r3, [r7, #28]
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	699b      	ldr	r3, [r3, #24]
 8003754:	61fb      	str	r3, [r7, #28]
 8003756:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	681a      	ldr	r2, [r3, #0]
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003766:	601a      	str	r2, [r3, #0]
 8003768:	e164      	b.n	8003a34 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800376e:	2b02      	cmp	r3, #2
 8003770:	d11b      	bne.n	80037aa <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	681a      	ldr	r2, [r3, #0]
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003780:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	681a      	ldr	r2, [r3, #0]
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003790:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003792:	2300      	movs	r3, #0
 8003794:	61bb      	str	r3, [r7, #24]
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	695b      	ldr	r3, [r3, #20]
 800379c:	61bb      	str	r3, [r7, #24]
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	699b      	ldr	r3, [r3, #24]
 80037a4:	61bb      	str	r3, [r7, #24]
 80037a6:	69bb      	ldr	r3, [r7, #24]
 80037a8:	e144      	b.n	8003a34 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80037aa:	2300      	movs	r3, #0
 80037ac:	617b      	str	r3, [r7, #20]
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	695b      	ldr	r3, [r3, #20]
 80037b4:	617b      	str	r3, [r7, #20]
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	699b      	ldr	r3, [r3, #24]
 80037bc:	617b      	str	r3, [r7, #20]
 80037be:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80037c0:	e138      	b.n	8003a34 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037c6:	2b03      	cmp	r3, #3
 80037c8:	f200 80f1 	bhi.w	80039ae <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037d0:	2b01      	cmp	r3, #1
 80037d2:	d123      	bne.n	800381c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80037d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037d6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80037d8:	68f8      	ldr	r0, [r7, #12]
 80037da:	f000 fc1b 	bl	8004014 <I2C_WaitOnRXNEFlagUntilTimeout>
 80037de:	4603      	mov	r3, r0
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d001      	beq.n	80037e8 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80037e4:	2301      	movs	r3, #1
 80037e6:	e139      	b.n	8003a5c <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	691a      	ldr	r2, [r3, #16]
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037f2:	b2d2      	uxtb	r2, r2
 80037f4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037fa:	1c5a      	adds	r2, r3, #1
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003804:	3b01      	subs	r3, #1
 8003806:	b29a      	uxth	r2, r3
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003810:	b29b      	uxth	r3, r3
 8003812:	3b01      	subs	r3, #1
 8003814:	b29a      	uxth	r2, r3
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	855a      	strh	r2, [r3, #42]	; 0x2a
 800381a:	e10b      	b.n	8003a34 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003820:	2b02      	cmp	r3, #2
 8003822:	d14e      	bne.n	80038c2 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003826:	9300      	str	r3, [sp, #0]
 8003828:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800382a:	2200      	movs	r2, #0
 800382c:	4906      	ldr	r1, [pc, #24]	; (8003848 <HAL_I2C_Mem_Read+0x22c>)
 800382e:	68f8      	ldr	r0, [r7, #12]
 8003830:	f000 fa98 	bl	8003d64 <I2C_WaitOnFlagUntilTimeout>
 8003834:	4603      	mov	r3, r0
 8003836:	2b00      	cmp	r3, #0
 8003838:	d008      	beq.n	800384c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800383a:	2301      	movs	r3, #1
 800383c:	e10e      	b.n	8003a5c <HAL_I2C_Mem_Read+0x440>
 800383e:	bf00      	nop
 8003840:	00100002 	.word	0x00100002
 8003844:	ffff0000 	.word	0xffff0000
 8003848:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	681a      	ldr	r2, [r3, #0]
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800385a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	691a      	ldr	r2, [r3, #16]
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003866:	b2d2      	uxtb	r2, r2
 8003868:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800386e:	1c5a      	adds	r2, r3, #1
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003878:	3b01      	subs	r3, #1
 800387a:	b29a      	uxth	r2, r3
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003884:	b29b      	uxth	r3, r3
 8003886:	3b01      	subs	r3, #1
 8003888:	b29a      	uxth	r2, r3
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	691a      	ldr	r2, [r3, #16]
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003898:	b2d2      	uxtb	r2, r2
 800389a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038a0:	1c5a      	adds	r2, r3, #1
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038aa:	3b01      	subs	r3, #1
 80038ac:	b29a      	uxth	r2, r3
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038b6:	b29b      	uxth	r3, r3
 80038b8:	3b01      	subs	r3, #1
 80038ba:	b29a      	uxth	r2, r3
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	855a      	strh	r2, [r3, #42]	; 0x2a
 80038c0:	e0b8      	b.n	8003a34 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80038c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038c4:	9300      	str	r3, [sp, #0]
 80038c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038c8:	2200      	movs	r2, #0
 80038ca:	4966      	ldr	r1, [pc, #408]	; (8003a64 <HAL_I2C_Mem_Read+0x448>)
 80038cc:	68f8      	ldr	r0, [r7, #12]
 80038ce:	f000 fa49 	bl	8003d64 <I2C_WaitOnFlagUntilTimeout>
 80038d2:	4603      	mov	r3, r0
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d001      	beq.n	80038dc <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80038d8:	2301      	movs	r3, #1
 80038da:	e0bf      	b.n	8003a5c <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	681a      	ldr	r2, [r3, #0]
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80038ea:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	691a      	ldr	r2, [r3, #16]
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038f6:	b2d2      	uxtb	r2, r2
 80038f8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038fe:	1c5a      	adds	r2, r3, #1
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003908:	3b01      	subs	r3, #1
 800390a:	b29a      	uxth	r2, r3
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003914:	b29b      	uxth	r3, r3
 8003916:	3b01      	subs	r3, #1
 8003918:	b29a      	uxth	r2, r3
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800391e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003920:	9300      	str	r3, [sp, #0]
 8003922:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003924:	2200      	movs	r2, #0
 8003926:	494f      	ldr	r1, [pc, #316]	; (8003a64 <HAL_I2C_Mem_Read+0x448>)
 8003928:	68f8      	ldr	r0, [r7, #12]
 800392a:	f000 fa1b 	bl	8003d64 <I2C_WaitOnFlagUntilTimeout>
 800392e:	4603      	mov	r3, r0
 8003930:	2b00      	cmp	r3, #0
 8003932:	d001      	beq.n	8003938 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003934:	2301      	movs	r3, #1
 8003936:	e091      	b.n	8003a5c <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	681a      	ldr	r2, [r3, #0]
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003946:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	691a      	ldr	r2, [r3, #16]
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003952:	b2d2      	uxtb	r2, r2
 8003954:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800395a:	1c5a      	adds	r2, r3, #1
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003964:	3b01      	subs	r3, #1
 8003966:	b29a      	uxth	r2, r3
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003970:	b29b      	uxth	r3, r3
 8003972:	3b01      	subs	r3, #1
 8003974:	b29a      	uxth	r2, r3
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	691a      	ldr	r2, [r3, #16]
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003984:	b2d2      	uxtb	r2, r2
 8003986:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800398c:	1c5a      	adds	r2, r3, #1
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003996:	3b01      	subs	r3, #1
 8003998:	b29a      	uxth	r2, r3
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039a2:	b29b      	uxth	r3, r3
 80039a4:	3b01      	subs	r3, #1
 80039a6:	b29a      	uxth	r2, r3
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	855a      	strh	r2, [r3, #42]	; 0x2a
 80039ac:	e042      	b.n	8003a34 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80039ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039b0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80039b2:	68f8      	ldr	r0, [r7, #12]
 80039b4:	f000 fb2e 	bl	8004014 <I2C_WaitOnRXNEFlagUntilTimeout>
 80039b8:	4603      	mov	r3, r0
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d001      	beq.n	80039c2 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80039be:	2301      	movs	r3, #1
 80039c0:	e04c      	b.n	8003a5c <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	691a      	ldr	r2, [r3, #16]
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039cc:	b2d2      	uxtb	r2, r2
 80039ce:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039d4:	1c5a      	adds	r2, r3, #1
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039de:	3b01      	subs	r3, #1
 80039e0:	b29a      	uxth	r2, r3
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039ea:	b29b      	uxth	r3, r3
 80039ec:	3b01      	subs	r3, #1
 80039ee:	b29a      	uxth	r2, r3
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	695b      	ldr	r3, [r3, #20]
 80039fa:	f003 0304 	and.w	r3, r3, #4
 80039fe:	2b04      	cmp	r3, #4
 8003a00:	d118      	bne.n	8003a34 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	691a      	ldr	r2, [r3, #16]
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a0c:	b2d2      	uxtb	r2, r2
 8003a0e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a14:	1c5a      	adds	r2, r3, #1
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a1e:	3b01      	subs	r3, #1
 8003a20:	b29a      	uxth	r2, r3
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a2a:	b29b      	uxth	r3, r3
 8003a2c:	3b01      	subs	r3, #1
 8003a2e:	b29a      	uxth	r2, r3
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	f47f aec2 	bne.w	80037c2 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	2220      	movs	r2, #32
 8003a42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	2200      	movs	r2, #0
 8003a4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	2200      	movs	r2, #0
 8003a52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003a56:	2300      	movs	r3, #0
 8003a58:	e000      	b.n	8003a5c <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003a5a:	2302      	movs	r3, #2
  }
}
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	3728      	adds	r7, #40	; 0x28
 8003a60:	46bd      	mov	sp, r7
 8003a62:	bd80      	pop	{r7, pc}
 8003a64:	00010004 	.word	0x00010004

08003a68 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b088      	sub	sp, #32
 8003a6c:	af02      	add	r7, sp, #8
 8003a6e:	60f8      	str	r0, [r7, #12]
 8003a70:	4608      	mov	r0, r1
 8003a72:	4611      	mov	r1, r2
 8003a74:	461a      	mov	r2, r3
 8003a76:	4603      	mov	r3, r0
 8003a78:	817b      	strh	r3, [r7, #10]
 8003a7a:	460b      	mov	r3, r1
 8003a7c:	813b      	strh	r3, [r7, #8]
 8003a7e:	4613      	mov	r3, r2
 8003a80:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	681a      	ldr	r2, [r3, #0]
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003a90:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a94:	9300      	str	r3, [sp, #0]
 8003a96:	6a3b      	ldr	r3, [r7, #32]
 8003a98:	2200      	movs	r2, #0
 8003a9a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003a9e:	68f8      	ldr	r0, [r7, #12]
 8003aa0:	f000 f960 	bl	8003d64 <I2C_WaitOnFlagUntilTimeout>
 8003aa4:	4603      	mov	r3, r0
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d00d      	beq.n	8003ac6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ab4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ab8:	d103      	bne.n	8003ac2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003ac0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003ac2:	2303      	movs	r3, #3
 8003ac4:	e05f      	b.n	8003b86 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003ac6:	897b      	ldrh	r3, [r7, #10]
 8003ac8:	b2db      	uxtb	r3, r3
 8003aca:	461a      	mov	r2, r3
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003ad4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ad8:	6a3a      	ldr	r2, [r7, #32]
 8003ada:	492d      	ldr	r1, [pc, #180]	; (8003b90 <I2C_RequestMemoryWrite+0x128>)
 8003adc:	68f8      	ldr	r0, [r7, #12]
 8003ade:	f000 f998 	bl	8003e12 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003ae2:	4603      	mov	r3, r0
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d001      	beq.n	8003aec <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003ae8:	2301      	movs	r3, #1
 8003aea:	e04c      	b.n	8003b86 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003aec:	2300      	movs	r3, #0
 8003aee:	617b      	str	r3, [r7, #20]
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	695b      	ldr	r3, [r3, #20]
 8003af6:	617b      	str	r3, [r7, #20]
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	699b      	ldr	r3, [r3, #24]
 8003afe:	617b      	str	r3, [r7, #20]
 8003b00:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b04:	6a39      	ldr	r1, [r7, #32]
 8003b06:	68f8      	ldr	r0, [r7, #12]
 8003b08:	f000 fa02 	bl	8003f10 <I2C_WaitOnTXEFlagUntilTimeout>
 8003b0c:	4603      	mov	r3, r0
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d00d      	beq.n	8003b2e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b16:	2b04      	cmp	r3, #4
 8003b18:	d107      	bne.n	8003b2a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	681a      	ldr	r2, [r3, #0]
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b28:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003b2a:	2301      	movs	r3, #1
 8003b2c:	e02b      	b.n	8003b86 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003b2e:	88fb      	ldrh	r3, [r7, #6]
 8003b30:	2b01      	cmp	r3, #1
 8003b32:	d105      	bne.n	8003b40 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003b34:	893b      	ldrh	r3, [r7, #8]
 8003b36:	b2da      	uxtb	r2, r3
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	611a      	str	r2, [r3, #16]
 8003b3e:	e021      	b.n	8003b84 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003b40:	893b      	ldrh	r3, [r7, #8]
 8003b42:	0a1b      	lsrs	r3, r3, #8
 8003b44:	b29b      	uxth	r3, r3
 8003b46:	b2da      	uxtb	r2, r3
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b50:	6a39      	ldr	r1, [r7, #32]
 8003b52:	68f8      	ldr	r0, [r7, #12]
 8003b54:	f000 f9dc 	bl	8003f10 <I2C_WaitOnTXEFlagUntilTimeout>
 8003b58:	4603      	mov	r3, r0
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d00d      	beq.n	8003b7a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b62:	2b04      	cmp	r3, #4
 8003b64:	d107      	bne.n	8003b76 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	681a      	ldr	r2, [r3, #0]
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b74:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003b76:	2301      	movs	r3, #1
 8003b78:	e005      	b.n	8003b86 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003b7a:	893b      	ldrh	r3, [r7, #8]
 8003b7c:	b2da      	uxtb	r2, r3
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003b84:	2300      	movs	r3, #0
}
 8003b86:	4618      	mov	r0, r3
 8003b88:	3718      	adds	r7, #24
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	bd80      	pop	{r7, pc}
 8003b8e:	bf00      	nop
 8003b90:	00010002 	.word	0x00010002

08003b94 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b088      	sub	sp, #32
 8003b98:	af02      	add	r7, sp, #8
 8003b9a:	60f8      	str	r0, [r7, #12]
 8003b9c:	4608      	mov	r0, r1
 8003b9e:	4611      	mov	r1, r2
 8003ba0:	461a      	mov	r2, r3
 8003ba2:	4603      	mov	r3, r0
 8003ba4:	817b      	strh	r3, [r7, #10]
 8003ba6:	460b      	mov	r3, r1
 8003ba8:	813b      	strh	r3, [r7, #8]
 8003baa:	4613      	mov	r3, r2
 8003bac:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	681a      	ldr	r2, [r3, #0]
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003bbc:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	681a      	ldr	r2, [r3, #0]
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003bcc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bd0:	9300      	str	r3, [sp, #0]
 8003bd2:	6a3b      	ldr	r3, [r7, #32]
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003bda:	68f8      	ldr	r0, [r7, #12]
 8003bdc:	f000 f8c2 	bl	8003d64 <I2C_WaitOnFlagUntilTimeout>
 8003be0:	4603      	mov	r3, r0
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d00d      	beq.n	8003c02 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bf0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003bf4:	d103      	bne.n	8003bfe <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003bfc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003bfe:	2303      	movs	r3, #3
 8003c00:	e0aa      	b.n	8003d58 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003c02:	897b      	ldrh	r3, [r7, #10]
 8003c04:	b2db      	uxtb	r3, r3
 8003c06:	461a      	mov	r2, r3
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003c10:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c14:	6a3a      	ldr	r2, [r7, #32]
 8003c16:	4952      	ldr	r1, [pc, #328]	; (8003d60 <I2C_RequestMemoryRead+0x1cc>)
 8003c18:	68f8      	ldr	r0, [r7, #12]
 8003c1a:	f000 f8fa 	bl	8003e12 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003c1e:	4603      	mov	r3, r0
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d001      	beq.n	8003c28 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003c24:	2301      	movs	r3, #1
 8003c26:	e097      	b.n	8003d58 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c28:	2300      	movs	r3, #0
 8003c2a:	617b      	str	r3, [r7, #20]
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	695b      	ldr	r3, [r3, #20]
 8003c32:	617b      	str	r3, [r7, #20]
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	699b      	ldr	r3, [r3, #24]
 8003c3a:	617b      	str	r3, [r7, #20]
 8003c3c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c40:	6a39      	ldr	r1, [r7, #32]
 8003c42:	68f8      	ldr	r0, [r7, #12]
 8003c44:	f000 f964 	bl	8003f10 <I2C_WaitOnTXEFlagUntilTimeout>
 8003c48:	4603      	mov	r3, r0
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d00d      	beq.n	8003c6a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c52:	2b04      	cmp	r3, #4
 8003c54:	d107      	bne.n	8003c66 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	681a      	ldr	r2, [r3, #0]
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c64:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003c66:	2301      	movs	r3, #1
 8003c68:	e076      	b.n	8003d58 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003c6a:	88fb      	ldrh	r3, [r7, #6]
 8003c6c:	2b01      	cmp	r3, #1
 8003c6e:	d105      	bne.n	8003c7c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003c70:	893b      	ldrh	r3, [r7, #8]
 8003c72:	b2da      	uxtb	r2, r3
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	611a      	str	r2, [r3, #16]
 8003c7a:	e021      	b.n	8003cc0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003c7c:	893b      	ldrh	r3, [r7, #8]
 8003c7e:	0a1b      	lsrs	r3, r3, #8
 8003c80:	b29b      	uxth	r3, r3
 8003c82:	b2da      	uxtb	r2, r3
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c8c:	6a39      	ldr	r1, [r7, #32]
 8003c8e:	68f8      	ldr	r0, [r7, #12]
 8003c90:	f000 f93e 	bl	8003f10 <I2C_WaitOnTXEFlagUntilTimeout>
 8003c94:	4603      	mov	r3, r0
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d00d      	beq.n	8003cb6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c9e:	2b04      	cmp	r3, #4
 8003ca0:	d107      	bne.n	8003cb2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	681a      	ldr	r2, [r3, #0]
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003cb0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003cb2:	2301      	movs	r3, #1
 8003cb4:	e050      	b.n	8003d58 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003cb6:	893b      	ldrh	r3, [r7, #8]
 8003cb8:	b2da      	uxtb	r2, r3
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003cc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cc2:	6a39      	ldr	r1, [r7, #32]
 8003cc4:	68f8      	ldr	r0, [r7, #12]
 8003cc6:	f000 f923 	bl	8003f10 <I2C_WaitOnTXEFlagUntilTimeout>
 8003cca:	4603      	mov	r3, r0
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d00d      	beq.n	8003cec <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cd4:	2b04      	cmp	r3, #4
 8003cd6:	d107      	bne.n	8003ce8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	681a      	ldr	r2, [r3, #0]
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ce6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003ce8:	2301      	movs	r3, #1
 8003cea:	e035      	b.n	8003d58 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	681a      	ldr	r2, [r3, #0]
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003cfa:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cfe:	9300      	str	r3, [sp, #0]
 8003d00:	6a3b      	ldr	r3, [r7, #32]
 8003d02:	2200      	movs	r2, #0
 8003d04:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003d08:	68f8      	ldr	r0, [r7, #12]
 8003d0a:	f000 f82b 	bl	8003d64 <I2C_WaitOnFlagUntilTimeout>
 8003d0e:	4603      	mov	r3, r0
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d00d      	beq.n	8003d30 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d1e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d22:	d103      	bne.n	8003d2c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003d2a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003d2c:	2303      	movs	r3, #3
 8003d2e:	e013      	b.n	8003d58 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003d30:	897b      	ldrh	r3, [r7, #10]
 8003d32:	b2db      	uxtb	r3, r3
 8003d34:	f043 0301 	orr.w	r3, r3, #1
 8003d38:	b2da      	uxtb	r2, r3
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d42:	6a3a      	ldr	r2, [r7, #32]
 8003d44:	4906      	ldr	r1, [pc, #24]	; (8003d60 <I2C_RequestMemoryRead+0x1cc>)
 8003d46:	68f8      	ldr	r0, [r7, #12]
 8003d48:	f000 f863 	bl	8003e12 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003d4c:	4603      	mov	r3, r0
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d001      	beq.n	8003d56 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003d52:	2301      	movs	r3, #1
 8003d54:	e000      	b.n	8003d58 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003d56:	2300      	movs	r3, #0
}
 8003d58:	4618      	mov	r0, r3
 8003d5a:	3718      	adds	r7, #24
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	bd80      	pop	{r7, pc}
 8003d60:	00010002 	.word	0x00010002

08003d64 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b084      	sub	sp, #16
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	60f8      	str	r0, [r7, #12]
 8003d6c:	60b9      	str	r1, [r7, #8]
 8003d6e:	603b      	str	r3, [r7, #0]
 8003d70:	4613      	mov	r3, r2
 8003d72:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003d74:	e025      	b.n	8003dc2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d76:	683b      	ldr	r3, [r7, #0]
 8003d78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d7c:	d021      	beq.n	8003dc2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d7e:	f7fe fe8d 	bl	8002a9c <HAL_GetTick>
 8003d82:	4602      	mov	r2, r0
 8003d84:	69bb      	ldr	r3, [r7, #24]
 8003d86:	1ad3      	subs	r3, r2, r3
 8003d88:	683a      	ldr	r2, [r7, #0]
 8003d8a:	429a      	cmp	r2, r3
 8003d8c:	d302      	bcc.n	8003d94 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d116      	bne.n	8003dc2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	2200      	movs	r2, #0
 8003d98:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	2220      	movs	r2, #32
 8003d9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	2200      	movs	r2, #0
 8003da6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dae:	f043 0220 	orr.w	r2, r3, #32
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	2200      	movs	r2, #0
 8003dba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003dbe:	2301      	movs	r3, #1
 8003dc0:	e023      	b.n	8003e0a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003dc2:	68bb      	ldr	r3, [r7, #8]
 8003dc4:	0c1b      	lsrs	r3, r3, #16
 8003dc6:	b2db      	uxtb	r3, r3
 8003dc8:	2b01      	cmp	r3, #1
 8003dca:	d10d      	bne.n	8003de8 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	695b      	ldr	r3, [r3, #20]
 8003dd2:	43da      	mvns	r2, r3
 8003dd4:	68bb      	ldr	r3, [r7, #8]
 8003dd6:	4013      	ands	r3, r2
 8003dd8:	b29b      	uxth	r3, r3
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	bf0c      	ite	eq
 8003dde:	2301      	moveq	r3, #1
 8003de0:	2300      	movne	r3, #0
 8003de2:	b2db      	uxtb	r3, r3
 8003de4:	461a      	mov	r2, r3
 8003de6:	e00c      	b.n	8003e02 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	699b      	ldr	r3, [r3, #24]
 8003dee:	43da      	mvns	r2, r3
 8003df0:	68bb      	ldr	r3, [r7, #8]
 8003df2:	4013      	ands	r3, r2
 8003df4:	b29b      	uxth	r3, r3
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	bf0c      	ite	eq
 8003dfa:	2301      	moveq	r3, #1
 8003dfc:	2300      	movne	r3, #0
 8003dfe:	b2db      	uxtb	r3, r3
 8003e00:	461a      	mov	r2, r3
 8003e02:	79fb      	ldrb	r3, [r7, #7]
 8003e04:	429a      	cmp	r2, r3
 8003e06:	d0b6      	beq.n	8003d76 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003e08:	2300      	movs	r3, #0
}
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	3710      	adds	r7, #16
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	bd80      	pop	{r7, pc}

08003e12 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003e12:	b580      	push	{r7, lr}
 8003e14:	b084      	sub	sp, #16
 8003e16:	af00      	add	r7, sp, #0
 8003e18:	60f8      	str	r0, [r7, #12]
 8003e1a:	60b9      	str	r1, [r7, #8]
 8003e1c:	607a      	str	r2, [r7, #4]
 8003e1e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003e20:	e051      	b.n	8003ec6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	695b      	ldr	r3, [r3, #20]
 8003e28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e2c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e30:	d123      	bne.n	8003e7a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	681a      	ldr	r2, [r3, #0]
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e40:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003e4a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	2200      	movs	r2, #0
 8003e50:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	2220      	movs	r2, #32
 8003e56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e66:	f043 0204 	orr.w	r2, r3, #4
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	2200      	movs	r2, #0
 8003e72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003e76:	2301      	movs	r3, #1
 8003e78:	e046      	b.n	8003f08 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e80:	d021      	beq.n	8003ec6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e82:	f7fe fe0b 	bl	8002a9c <HAL_GetTick>
 8003e86:	4602      	mov	r2, r0
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	1ad3      	subs	r3, r2, r3
 8003e8c:	687a      	ldr	r2, [r7, #4]
 8003e8e:	429a      	cmp	r2, r3
 8003e90:	d302      	bcc.n	8003e98 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d116      	bne.n	8003ec6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	2220      	movs	r2, #32
 8003ea2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eb2:	f043 0220 	orr.w	r2, r3, #32
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003ec2:	2301      	movs	r3, #1
 8003ec4:	e020      	b.n	8003f08 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003ec6:	68bb      	ldr	r3, [r7, #8]
 8003ec8:	0c1b      	lsrs	r3, r3, #16
 8003eca:	b2db      	uxtb	r3, r3
 8003ecc:	2b01      	cmp	r3, #1
 8003ece:	d10c      	bne.n	8003eea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	695b      	ldr	r3, [r3, #20]
 8003ed6:	43da      	mvns	r2, r3
 8003ed8:	68bb      	ldr	r3, [r7, #8]
 8003eda:	4013      	ands	r3, r2
 8003edc:	b29b      	uxth	r3, r3
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	bf14      	ite	ne
 8003ee2:	2301      	movne	r3, #1
 8003ee4:	2300      	moveq	r3, #0
 8003ee6:	b2db      	uxtb	r3, r3
 8003ee8:	e00b      	b.n	8003f02 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	699b      	ldr	r3, [r3, #24]
 8003ef0:	43da      	mvns	r2, r3
 8003ef2:	68bb      	ldr	r3, [r7, #8]
 8003ef4:	4013      	ands	r3, r2
 8003ef6:	b29b      	uxth	r3, r3
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	bf14      	ite	ne
 8003efc:	2301      	movne	r3, #1
 8003efe:	2300      	moveq	r3, #0
 8003f00:	b2db      	uxtb	r3, r3
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d18d      	bne.n	8003e22 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003f06:	2300      	movs	r3, #0
}
 8003f08:	4618      	mov	r0, r3
 8003f0a:	3710      	adds	r7, #16
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	bd80      	pop	{r7, pc}

08003f10 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b084      	sub	sp, #16
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	60f8      	str	r0, [r7, #12]
 8003f18:	60b9      	str	r1, [r7, #8]
 8003f1a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003f1c:	e02d      	b.n	8003f7a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003f1e:	68f8      	ldr	r0, [r7, #12]
 8003f20:	f000 f8ce 	bl	80040c0 <I2C_IsAcknowledgeFailed>
 8003f24:	4603      	mov	r3, r0
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d001      	beq.n	8003f2e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003f2a:	2301      	movs	r3, #1
 8003f2c:	e02d      	b.n	8003f8a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f2e:	68bb      	ldr	r3, [r7, #8]
 8003f30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f34:	d021      	beq.n	8003f7a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f36:	f7fe fdb1 	bl	8002a9c <HAL_GetTick>
 8003f3a:	4602      	mov	r2, r0
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	1ad3      	subs	r3, r2, r3
 8003f40:	68ba      	ldr	r2, [r7, #8]
 8003f42:	429a      	cmp	r2, r3
 8003f44:	d302      	bcc.n	8003f4c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003f46:	68bb      	ldr	r3, [r7, #8]
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d116      	bne.n	8003f7a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	2200      	movs	r2, #0
 8003f50:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	2220      	movs	r2, #32
 8003f56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f66:	f043 0220 	orr.w	r2, r3, #32
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	2200      	movs	r2, #0
 8003f72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003f76:	2301      	movs	r3, #1
 8003f78:	e007      	b.n	8003f8a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	695b      	ldr	r3, [r3, #20]
 8003f80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f84:	2b80      	cmp	r3, #128	; 0x80
 8003f86:	d1ca      	bne.n	8003f1e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003f88:	2300      	movs	r3, #0
}
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	3710      	adds	r7, #16
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	bd80      	pop	{r7, pc}

08003f92 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003f92:	b580      	push	{r7, lr}
 8003f94:	b084      	sub	sp, #16
 8003f96:	af00      	add	r7, sp, #0
 8003f98:	60f8      	str	r0, [r7, #12]
 8003f9a:	60b9      	str	r1, [r7, #8]
 8003f9c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003f9e:	e02d      	b.n	8003ffc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003fa0:	68f8      	ldr	r0, [r7, #12]
 8003fa2:	f000 f88d 	bl	80040c0 <I2C_IsAcknowledgeFailed>
 8003fa6:	4603      	mov	r3, r0
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d001      	beq.n	8003fb0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003fac:	2301      	movs	r3, #1
 8003fae:	e02d      	b.n	800400c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003fb0:	68bb      	ldr	r3, [r7, #8]
 8003fb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fb6:	d021      	beq.n	8003ffc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003fb8:	f7fe fd70 	bl	8002a9c <HAL_GetTick>
 8003fbc:	4602      	mov	r2, r0
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	1ad3      	subs	r3, r2, r3
 8003fc2:	68ba      	ldr	r2, [r7, #8]
 8003fc4:	429a      	cmp	r2, r3
 8003fc6:	d302      	bcc.n	8003fce <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003fc8:	68bb      	ldr	r3, [r7, #8]
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d116      	bne.n	8003ffc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	2220      	movs	r2, #32
 8003fd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	2200      	movs	r2, #0
 8003fe0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fe8:	f043 0220 	orr.w	r2, r3, #32
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003ff8:	2301      	movs	r3, #1
 8003ffa:	e007      	b.n	800400c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	695b      	ldr	r3, [r3, #20]
 8004002:	f003 0304 	and.w	r3, r3, #4
 8004006:	2b04      	cmp	r3, #4
 8004008:	d1ca      	bne.n	8003fa0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800400a:	2300      	movs	r3, #0
}
 800400c:	4618      	mov	r0, r3
 800400e:	3710      	adds	r7, #16
 8004010:	46bd      	mov	sp, r7
 8004012:	bd80      	pop	{r7, pc}

08004014 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004014:	b580      	push	{r7, lr}
 8004016:	b084      	sub	sp, #16
 8004018:	af00      	add	r7, sp, #0
 800401a:	60f8      	str	r0, [r7, #12]
 800401c:	60b9      	str	r1, [r7, #8]
 800401e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004020:	e042      	b.n	80040a8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	695b      	ldr	r3, [r3, #20]
 8004028:	f003 0310 	and.w	r3, r3, #16
 800402c:	2b10      	cmp	r3, #16
 800402e:	d119      	bne.n	8004064 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f06f 0210 	mvn.w	r2, #16
 8004038:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	2200      	movs	r2, #0
 800403e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	2220      	movs	r2, #32
 8004044:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	2200      	movs	r2, #0
 800404c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	2200      	movs	r2, #0
 800405c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004060:	2301      	movs	r3, #1
 8004062:	e029      	b.n	80040b8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004064:	f7fe fd1a 	bl	8002a9c <HAL_GetTick>
 8004068:	4602      	mov	r2, r0
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	1ad3      	subs	r3, r2, r3
 800406e:	68ba      	ldr	r2, [r7, #8]
 8004070:	429a      	cmp	r2, r3
 8004072:	d302      	bcc.n	800407a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004074:	68bb      	ldr	r3, [r7, #8]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d116      	bne.n	80040a8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	2200      	movs	r2, #0
 800407e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	2220      	movs	r2, #32
 8004084:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	2200      	movs	r2, #0
 800408c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004094:	f043 0220 	orr.w	r2, r3, #32
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	2200      	movs	r2, #0
 80040a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80040a4:	2301      	movs	r3, #1
 80040a6:	e007      	b.n	80040b8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	695b      	ldr	r3, [r3, #20]
 80040ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040b2:	2b40      	cmp	r3, #64	; 0x40
 80040b4:	d1b5      	bne.n	8004022 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80040b6:	2300      	movs	r3, #0
}
 80040b8:	4618      	mov	r0, r3
 80040ba:	3710      	adds	r7, #16
 80040bc:	46bd      	mov	sp, r7
 80040be:	bd80      	pop	{r7, pc}

080040c0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80040c0:	b480      	push	{r7}
 80040c2:	b083      	sub	sp, #12
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	695b      	ldr	r3, [r3, #20]
 80040ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040d6:	d11b      	bne.n	8004110 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80040e0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	2200      	movs	r2, #0
 80040e6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2220      	movs	r2, #32
 80040ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2200      	movs	r2, #0
 80040f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040fc:	f043 0204 	orr.w	r2, r3, #4
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2200      	movs	r2, #0
 8004108:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800410c:	2301      	movs	r3, #1
 800410e:	e000      	b.n	8004112 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004110:	2300      	movs	r3, #0
}
 8004112:	4618      	mov	r0, r3
 8004114:	370c      	adds	r7, #12
 8004116:	46bd      	mov	sp, r7
 8004118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411c:	4770      	bx	lr
	...

08004120 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b084      	sub	sp, #16
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
 8004128:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2b00      	cmp	r3, #0
 800412e:	d101      	bne.n	8004134 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004130:	2301      	movs	r3, #1
 8004132:	e0cc      	b.n	80042ce <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004134:	4b68      	ldr	r3, [pc, #416]	; (80042d8 <HAL_RCC_ClockConfig+0x1b8>)
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f003 030f 	and.w	r3, r3, #15
 800413c:	683a      	ldr	r2, [r7, #0]
 800413e:	429a      	cmp	r2, r3
 8004140:	d90c      	bls.n	800415c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004142:	4b65      	ldr	r3, [pc, #404]	; (80042d8 <HAL_RCC_ClockConfig+0x1b8>)
 8004144:	683a      	ldr	r2, [r7, #0]
 8004146:	b2d2      	uxtb	r2, r2
 8004148:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800414a:	4b63      	ldr	r3, [pc, #396]	; (80042d8 <HAL_RCC_ClockConfig+0x1b8>)
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f003 030f 	and.w	r3, r3, #15
 8004152:	683a      	ldr	r2, [r7, #0]
 8004154:	429a      	cmp	r2, r3
 8004156:	d001      	beq.n	800415c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004158:	2301      	movs	r3, #1
 800415a:	e0b8      	b.n	80042ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f003 0302 	and.w	r3, r3, #2
 8004164:	2b00      	cmp	r3, #0
 8004166:	d020      	beq.n	80041aa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f003 0304 	and.w	r3, r3, #4
 8004170:	2b00      	cmp	r3, #0
 8004172:	d005      	beq.n	8004180 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004174:	4b59      	ldr	r3, [pc, #356]	; (80042dc <HAL_RCC_ClockConfig+0x1bc>)
 8004176:	689b      	ldr	r3, [r3, #8]
 8004178:	4a58      	ldr	r2, [pc, #352]	; (80042dc <HAL_RCC_ClockConfig+0x1bc>)
 800417a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800417e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f003 0308 	and.w	r3, r3, #8
 8004188:	2b00      	cmp	r3, #0
 800418a:	d005      	beq.n	8004198 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800418c:	4b53      	ldr	r3, [pc, #332]	; (80042dc <HAL_RCC_ClockConfig+0x1bc>)
 800418e:	689b      	ldr	r3, [r3, #8]
 8004190:	4a52      	ldr	r2, [pc, #328]	; (80042dc <HAL_RCC_ClockConfig+0x1bc>)
 8004192:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004196:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004198:	4b50      	ldr	r3, [pc, #320]	; (80042dc <HAL_RCC_ClockConfig+0x1bc>)
 800419a:	689b      	ldr	r3, [r3, #8]
 800419c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	689b      	ldr	r3, [r3, #8]
 80041a4:	494d      	ldr	r1, [pc, #308]	; (80042dc <HAL_RCC_ClockConfig+0x1bc>)
 80041a6:	4313      	orrs	r3, r2
 80041a8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f003 0301 	and.w	r3, r3, #1
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d044      	beq.n	8004240 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	685b      	ldr	r3, [r3, #4]
 80041ba:	2b01      	cmp	r3, #1
 80041bc:	d107      	bne.n	80041ce <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041be:	4b47      	ldr	r3, [pc, #284]	; (80042dc <HAL_RCC_ClockConfig+0x1bc>)
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d119      	bne.n	80041fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041ca:	2301      	movs	r3, #1
 80041cc:	e07f      	b.n	80042ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	685b      	ldr	r3, [r3, #4]
 80041d2:	2b02      	cmp	r3, #2
 80041d4:	d003      	beq.n	80041de <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80041da:	2b03      	cmp	r3, #3
 80041dc:	d107      	bne.n	80041ee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041de:	4b3f      	ldr	r3, [pc, #252]	; (80042dc <HAL_RCC_ClockConfig+0x1bc>)
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d109      	bne.n	80041fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041ea:	2301      	movs	r3, #1
 80041ec:	e06f      	b.n	80042ce <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041ee:	4b3b      	ldr	r3, [pc, #236]	; (80042dc <HAL_RCC_ClockConfig+0x1bc>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f003 0302 	and.w	r3, r3, #2
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d101      	bne.n	80041fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041fa:	2301      	movs	r3, #1
 80041fc:	e067      	b.n	80042ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80041fe:	4b37      	ldr	r3, [pc, #220]	; (80042dc <HAL_RCC_ClockConfig+0x1bc>)
 8004200:	689b      	ldr	r3, [r3, #8]
 8004202:	f023 0203 	bic.w	r2, r3, #3
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	685b      	ldr	r3, [r3, #4]
 800420a:	4934      	ldr	r1, [pc, #208]	; (80042dc <HAL_RCC_ClockConfig+0x1bc>)
 800420c:	4313      	orrs	r3, r2
 800420e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004210:	f7fe fc44 	bl	8002a9c <HAL_GetTick>
 8004214:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004216:	e00a      	b.n	800422e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004218:	f7fe fc40 	bl	8002a9c <HAL_GetTick>
 800421c:	4602      	mov	r2, r0
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	1ad3      	subs	r3, r2, r3
 8004222:	f241 3288 	movw	r2, #5000	; 0x1388
 8004226:	4293      	cmp	r3, r2
 8004228:	d901      	bls.n	800422e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800422a:	2303      	movs	r3, #3
 800422c:	e04f      	b.n	80042ce <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800422e:	4b2b      	ldr	r3, [pc, #172]	; (80042dc <HAL_RCC_ClockConfig+0x1bc>)
 8004230:	689b      	ldr	r3, [r3, #8]
 8004232:	f003 020c 	and.w	r2, r3, #12
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	685b      	ldr	r3, [r3, #4]
 800423a:	009b      	lsls	r3, r3, #2
 800423c:	429a      	cmp	r2, r3
 800423e:	d1eb      	bne.n	8004218 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004240:	4b25      	ldr	r3, [pc, #148]	; (80042d8 <HAL_RCC_ClockConfig+0x1b8>)
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f003 030f 	and.w	r3, r3, #15
 8004248:	683a      	ldr	r2, [r7, #0]
 800424a:	429a      	cmp	r2, r3
 800424c:	d20c      	bcs.n	8004268 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800424e:	4b22      	ldr	r3, [pc, #136]	; (80042d8 <HAL_RCC_ClockConfig+0x1b8>)
 8004250:	683a      	ldr	r2, [r7, #0]
 8004252:	b2d2      	uxtb	r2, r2
 8004254:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004256:	4b20      	ldr	r3, [pc, #128]	; (80042d8 <HAL_RCC_ClockConfig+0x1b8>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f003 030f 	and.w	r3, r3, #15
 800425e:	683a      	ldr	r2, [r7, #0]
 8004260:	429a      	cmp	r2, r3
 8004262:	d001      	beq.n	8004268 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004264:	2301      	movs	r3, #1
 8004266:	e032      	b.n	80042ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f003 0304 	and.w	r3, r3, #4
 8004270:	2b00      	cmp	r3, #0
 8004272:	d008      	beq.n	8004286 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004274:	4b19      	ldr	r3, [pc, #100]	; (80042dc <HAL_RCC_ClockConfig+0x1bc>)
 8004276:	689b      	ldr	r3, [r3, #8]
 8004278:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	68db      	ldr	r3, [r3, #12]
 8004280:	4916      	ldr	r1, [pc, #88]	; (80042dc <HAL_RCC_ClockConfig+0x1bc>)
 8004282:	4313      	orrs	r3, r2
 8004284:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f003 0308 	and.w	r3, r3, #8
 800428e:	2b00      	cmp	r3, #0
 8004290:	d009      	beq.n	80042a6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004292:	4b12      	ldr	r3, [pc, #72]	; (80042dc <HAL_RCC_ClockConfig+0x1bc>)
 8004294:	689b      	ldr	r3, [r3, #8]
 8004296:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	691b      	ldr	r3, [r3, #16]
 800429e:	00db      	lsls	r3, r3, #3
 80042a0:	490e      	ldr	r1, [pc, #56]	; (80042dc <HAL_RCC_ClockConfig+0x1bc>)
 80042a2:	4313      	orrs	r3, r2
 80042a4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80042a6:	f000 f855 	bl	8004354 <HAL_RCC_GetSysClockFreq>
 80042aa:	4602      	mov	r2, r0
 80042ac:	4b0b      	ldr	r3, [pc, #44]	; (80042dc <HAL_RCC_ClockConfig+0x1bc>)
 80042ae:	689b      	ldr	r3, [r3, #8]
 80042b0:	091b      	lsrs	r3, r3, #4
 80042b2:	f003 030f 	and.w	r3, r3, #15
 80042b6:	490a      	ldr	r1, [pc, #40]	; (80042e0 <HAL_RCC_ClockConfig+0x1c0>)
 80042b8:	5ccb      	ldrb	r3, [r1, r3]
 80042ba:	fa22 f303 	lsr.w	r3, r2, r3
 80042be:	4a09      	ldr	r2, [pc, #36]	; (80042e4 <HAL_RCC_ClockConfig+0x1c4>)
 80042c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80042c2:	4b09      	ldr	r3, [pc, #36]	; (80042e8 <HAL_RCC_ClockConfig+0x1c8>)
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	4618      	mov	r0, r3
 80042c8:	f7fe fba4 	bl	8002a14 <HAL_InitTick>

  return HAL_OK;
 80042cc:	2300      	movs	r3, #0
}
 80042ce:	4618      	mov	r0, r3
 80042d0:	3710      	adds	r7, #16
 80042d2:	46bd      	mov	sp, r7
 80042d4:	bd80      	pop	{r7, pc}
 80042d6:	bf00      	nop
 80042d8:	40023c00 	.word	0x40023c00
 80042dc:	40023800 	.word	0x40023800
 80042e0:	08007090 	.word	0x08007090
 80042e4:	20000004 	.word	0x20000004
 80042e8:	2000000c 	.word	0x2000000c

080042ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80042ec:	b480      	push	{r7}
 80042ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80042f0:	4b03      	ldr	r3, [pc, #12]	; (8004300 <HAL_RCC_GetHCLKFreq+0x14>)
 80042f2:	681b      	ldr	r3, [r3, #0]
}
 80042f4:	4618      	mov	r0, r3
 80042f6:	46bd      	mov	sp, r7
 80042f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fc:	4770      	bx	lr
 80042fe:	bf00      	nop
 8004300:	20000004 	.word	0x20000004

08004304 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004304:	b580      	push	{r7, lr}
 8004306:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004308:	f7ff fff0 	bl	80042ec <HAL_RCC_GetHCLKFreq>
 800430c:	4602      	mov	r2, r0
 800430e:	4b05      	ldr	r3, [pc, #20]	; (8004324 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004310:	689b      	ldr	r3, [r3, #8]
 8004312:	0a9b      	lsrs	r3, r3, #10
 8004314:	f003 0307 	and.w	r3, r3, #7
 8004318:	4903      	ldr	r1, [pc, #12]	; (8004328 <HAL_RCC_GetPCLK1Freq+0x24>)
 800431a:	5ccb      	ldrb	r3, [r1, r3]
 800431c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004320:	4618      	mov	r0, r3
 8004322:	bd80      	pop	{r7, pc}
 8004324:	40023800 	.word	0x40023800
 8004328:	080070a0 	.word	0x080070a0

0800432c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800432c:	b580      	push	{r7, lr}
 800432e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004330:	f7ff ffdc 	bl	80042ec <HAL_RCC_GetHCLKFreq>
 8004334:	4602      	mov	r2, r0
 8004336:	4b05      	ldr	r3, [pc, #20]	; (800434c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004338:	689b      	ldr	r3, [r3, #8]
 800433a:	0b5b      	lsrs	r3, r3, #13
 800433c:	f003 0307 	and.w	r3, r3, #7
 8004340:	4903      	ldr	r1, [pc, #12]	; (8004350 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004342:	5ccb      	ldrb	r3, [r1, r3]
 8004344:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004348:	4618      	mov	r0, r3
 800434a:	bd80      	pop	{r7, pc}
 800434c:	40023800 	.word	0x40023800
 8004350:	080070a0 	.word	0x080070a0

08004354 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004354:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004358:	b088      	sub	sp, #32
 800435a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800435c:	2300      	movs	r3, #0
 800435e:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 8004360:	2300      	movs	r3, #0
 8004362:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 8004364:	2300      	movs	r3, #0
 8004366:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 8004368:	2300      	movs	r3, #0
 800436a:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 800436c:	2300      	movs	r3, #0
 800436e:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004370:	4bce      	ldr	r3, [pc, #824]	; (80046ac <HAL_RCC_GetSysClockFreq+0x358>)
 8004372:	689b      	ldr	r3, [r3, #8]
 8004374:	f003 030c 	and.w	r3, r3, #12
 8004378:	2b0c      	cmp	r3, #12
 800437a:	f200 818d 	bhi.w	8004698 <HAL_RCC_GetSysClockFreq+0x344>
 800437e:	a201      	add	r2, pc, #4	; (adr r2, 8004384 <HAL_RCC_GetSysClockFreq+0x30>)
 8004380:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004384:	080043b9 	.word	0x080043b9
 8004388:	08004699 	.word	0x08004699
 800438c:	08004699 	.word	0x08004699
 8004390:	08004699 	.word	0x08004699
 8004394:	080043bf 	.word	0x080043bf
 8004398:	08004699 	.word	0x08004699
 800439c:	08004699 	.word	0x08004699
 80043a0:	08004699 	.word	0x08004699
 80043a4:	080043c5 	.word	0x080043c5
 80043a8:	08004699 	.word	0x08004699
 80043ac:	08004699 	.word	0x08004699
 80043b0:	08004699 	.word	0x08004699
 80043b4:	08004539 	.word	0x08004539
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80043b8:	4bbd      	ldr	r3, [pc, #756]	; (80046b0 <HAL_RCC_GetSysClockFreq+0x35c>)
 80043ba:	61bb      	str	r3, [r7, #24]
       break;
 80043bc:	e16f      	b.n	800469e <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80043be:	4bbd      	ldr	r3, [pc, #756]	; (80046b4 <HAL_RCC_GetSysClockFreq+0x360>)
 80043c0:	61bb      	str	r3, [r7, #24]
      break;
 80043c2:	e16c      	b.n	800469e <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80043c4:	4bb9      	ldr	r3, [pc, #740]	; (80046ac <HAL_RCC_GetSysClockFreq+0x358>)
 80043c6:	685b      	ldr	r3, [r3, #4]
 80043c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80043cc:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80043ce:	4bb7      	ldr	r3, [pc, #732]	; (80046ac <HAL_RCC_GetSysClockFreq+0x358>)
 80043d0:	685b      	ldr	r3, [r3, #4]
 80043d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d053      	beq.n	8004482 <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80043da:	4bb4      	ldr	r3, [pc, #720]	; (80046ac <HAL_RCC_GetSysClockFreq+0x358>)
 80043dc:	685b      	ldr	r3, [r3, #4]
 80043de:	099b      	lsrs	r3, r3, #6
 80043e0:	461a      	mov	r2, r3
 80043e2:	f04f 0300 	mov.w	r3, #0
 80043e6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80043ea:	f04f 0100 	mov.w	r1, #0
 80043ee:	ea02 0400 	and.w	r4, r2, r0
 80043f2:	603c      	str	r4, [r7, #0]
 80043f4:	400b      	ands	r3, r1
 80043f6:	607b      	str	r3, [r7, #4]
 80043f8:	e9d7 4500 	ldrd	r4, r5, [r7]
 80043fc:	4620      	mov	r0, r4
 80043fe:	4629      	mov	r1, r5
 8004400:	f04f 0200 	mov.w	r2, #0
 8004404:	f04f 0300 	mov.w	r3, #0
 8004408:	014b      	lsls	r3, r1, #5
 800440a:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800440e:	0142      	lsls	r2, r0, #5
 8004410:	4610      	mov	r0, r2
 8004412:	4619      	mov	r1, r3
 8004414:	4623      	mov	r3, r4
 8004416:	1ac0      	subs	r0, r0, r3
 8004418:	462b      	mov	r3, r5
 800441a:	eb61 0103 	sbc.w	r1, r1, r3
 800441e:	f04f 0200 	mov.w	r2, #0
 8004422:	f04f 0300 	mov.w	r3, #0
 8004426:	018b      	lsls	r3, r1, #6
 8004428:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800442c:	0182      	lsls	r2, r0, #6
 800442e:	1a12      	subs	r2, r2, r0
 8004430:	eb63 0301 	sbc.w	r3, r3, r1
 8004434:	f04f 0000 	mov.w	r0, #0
 8004438:	f04f 0100 	mov.w	r1, #0
 800443c:	00d9      	lsls	r1, r3, #3
 800443e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004442:	00d0      	lsls	r0, r2, #3
 8004444:	4602      	mov	r2, r0
 8004446:	460b      	mov	r3, r1
 8004448:	4621      	mov	r1, r4
 800444a:	1852      	adds	r2, r2, r1
 800444c:	4629      	mov	r1, r5
 800444e:	eb43 0101 	adc.w	r1, r3, r1
 8004452:	460b      	mov	r3, r1
 8004454:	f04f 0000 	mov.w	r0, #0
 8004458:	f04f 0100 	mov.w	r1, #0
 800445c:	0259      	lsls	r1, r3, #9
 800445e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8004462:	0250      	lsls	r0, r2, #9
 8004464:	4602      	mov	r2, r0
 8004466:	460b      	mov	r3, r1
 8004468:	4610      	mov	r0, r2
 800446a:	4619      	mov	r1, r3
 800446c:	697b      	ldr	r3, [r7, #20]
 800446e:	461a      	mov	r2, r3
 8004470:	f04f 0300 	mov.w	r3, #0
 8004474:	f7fc fb84 	bl	8000b80 <__aeabi_uldivmod>
 8004478:	4602      	mov	r2, r0
 800447a:	460b      	mov	r3, r1
 800447c:	4613      	mov	r3, r2
 800447e:	61fb      	str	r3, [r7, #28]
 8004480:	e04c      	b.n	800451c <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004482:	4b8a      	ldr	r3, [pc, #552]	; (80046ac <HAL_RCC_GetSysClockFreq+0x358>)
 8004484:	685b      	ldr	r3, [r3, #4]
 8004486:	099b      	lsrs	r3, r3, #6
 8004488:	461a      	mov	r2, r3
 800448a:	f04f 0300 	mov.w	r3, #0
 800448e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004492:	f04f 0100 	mov.w	r1, #0
 8004496:	ea02 0a00 	and.w	sl, r2, r0
 800449a:	ea03 0b01 	and.w	fp, r3, r1
 800449e:	4650      	mov	r0, sl
 80044a0:	4659      	mov	r1, fp
 80044a2:	f04f 0200 	mov.w	r2, #0
 80044a6:	f04f 0300 	mov.w	r3, #0
 80044aa:	014b      	lsls	r3, r1, #5
 80044ac:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80044b0:	0142      	lsls	r2, r0, #5
 80044b2:	4610      	mov	r0, r2
 80044b4:	4619      	mov	r1, r3
 80044b6:	ebb0 000a 	subs.w	r0, r0, sl
 80044ba:	eb61 010b 	sbc.w	r1, r1, fp
 80044be:	f04f 0200 	mov.w	r2, #0
 80044c2:	f04f 0300 	mov.w	r3, #0
 80044c6:	018b      	lsls	r3, r1, #6
 80044c8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80044cc:	0182      	lsls	r2, r0, #6
 80044ce:	1a12      	subs	r2, r2, r0
 80044d0:	eb63 0301 	sbc.w	r3, r3, r1
 80044d4:	f04f 0000 	mov.w	r0, #0
 80044d8:	f04f 0100 	mov.w	r1, #0
 80044dc:	00d9      	lsls	r1, r3, #3
 80044de:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80044e2:	00d0      	lsls	r0, r2, #3
 80044e4:	4602      	mov	r2, r0
 80044e6:	460b      	mov	r3, r1
 80044e8:	eb12 020a 	adds.w	r2, r2, sl
 80044ec:	eb43 030b 	adc.w	r3, r3, fp
 80044f0:	f04f 0000 	mov.w	r0, #0
 80044f4:	f04f 0100 	mov.w	r1, #0
 80044f8:	0299      	lsls	r1, r3, #10
 80044fa:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80044fe:	0290      	lsls	r0, r2, #10
 8004500:	4602      	mov	r2, r0
 8004502:	460b      	mov	r3, r1
 8004504:	4610      	mov	r0, r2
 8004506:	4619      	mov	r1, r3
 8004508:	697b      	ldr	r3, [r7, #20]
 800450a:	461a      	mov	r2, r3
 800450c:	f04f 0300 	mov.w	r3, #0
 8004510:	f7fc fb36 	bl	8000b80 <__aeabi_uldivmod>
 8004514:	4602      	mov	r2, r0
 8004516:	460b      	mov	r3, r1
 8004518:	4613      	mov	r3, r2
 800451a:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800451c:	4b63      	ldr	r3, [pc, #396]	; (80046ac <HAL_RCC_GetSysClockFreq+0x358>)
 800451e:	685b      	ldr	r3, [r3, #4]
 8004520:	0c1b      	lsrs	r3, r3, #16
 8004522:	f003 0303 	and.w	r3, r3, #3
 8004526:	3301      	adds	r3, #1
 8004528:	005b      	lsls	r3, r3, #1
 800452a:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 800452c:	69fa      	ldr	r2, [r7, #28]
 800452e:	693b      	ldr	r3, [r7, #16]
 8004530:	fbb2 f3f3 	udiv	r3, r2, r3
 8004534:	61bb      	str	r3, [r7, #24]
      break;
 8004536:	e0b2      	b.n	800469e <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004538:	4b5c      	ldr	r3, [pc, #368]	; (80046ac <HAL_RCC_GetSysClockFreq+0x358>)
 800453a:	685b      	ldr	r3, [r3, #4]
 800453c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004540:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004542:	4b5a      	ldr	r3, [pc, #360]	; (80046ac <HAL_RCC_GetSysClockFreq+0x358>)
 8004544:	685b      	ldr	r3, [r3, #4]
 8004546:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800454a:	2b00      	cmp	r3, #0
 800454c:	d04d      	beq.n	80045ea <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800454e:	4b57      	ldr	r3, [pc, #348]	; (80046ac <HAL_RCC_GetSysClockFreq+0x358>)
 8004550:	685b      	ldr	r3, [r3, #4]
 8004552:	099b      	lsrs	r3, r3, #6
 8004554:	461a      	mov	r2, r3
 8004556:	f04f 0300 	mov.w	r3, #0
 800455a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800455e:	f04f 0100 	mov.w	r1, #0
 8004562:	ea02 0800 	and.w	r8, r2, r0
 8004566:	ea03 0901 	and.w	r9, r3, r1
 800456a:	4640      	mov	r0, r8
 800456c:	4649      	mov	r1, r9
 800456e:	f04f 0200 	mov.w	r2, #0
 8004572:	f04f 0300 	mov.w	r3, #0
 8004576:	014b      	lsls	r3, r1, #5
 8004578:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800457c:	0142      	lsls	r2, r0, #5
 800457e:	4610      	mov	r0, r2
 8004580:	4619      	mov	r1, r3
 8004582:	ebb0 0008 	subs.w	r0, r0, r8
 8004586:	eb61 0109 	sbc.w	r1, r1, r9
 800458a:	f04f 0200 	mov.w	r2, #0
 800458e:	f04f 0300 	mov.w	r3, #0
 8004592:	018b      	lsls	r3, r1, #6
 8004594:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004598:	0182      	lsls	r2, r0, #6
 800459a:	1a12      	subs	r2, r2, r0
 800459c:	eb63 0301 	sbc.w	r3, r3, r1
 80045a0:	f04f 0000 	mov.w	r0, #0
 80045a4:	f04f 0100 	mov.w	r1, #0
 80045a8:	00d9      	lsls	r1, r3, #3
 80045aa:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80045ae:	00d0      	lsls	r0, r2, #3
 80045b0:	4602      	mov	r2, r0
 80045b2:	460b      	mov	r3, r1
 80045b4:	eb12 0208 	adds.w	r2, r2, r8
 80045b8:	eb43 0309 	adc.w	r3, r3, r9
 80045bc:	f04f 0000 	mov.w	r0, #0
 80045c0:	f04f 0100 	mov.w	r1, #0
 80045c4:	0259      	lsls	r1, r3, #9
 80045c6:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80045ca:	0250      	lsls	r0, r2, #9
 80045cc:	4602      	mov	r2, r0
 80045ce:	460b      	mov	r3, r1
 80045d0:	4610      	mov	r0, r2
 80045d2:	4619      	mov	r1, r3
 80045d4:	697b      	ldr	r3, [r7, #20]
 80045d6:	461a      	mov	r2, r3
 80045d8:	f04f 0300 	mov.w	r3, #0
 80045dc:	f7fc fad0 	bl	8000b80 <__aeabi_uldivmod>
 80045e0:	4602      	mov	r2, r0
 80045e2:	460b      	mov	r3, r1
 80045e4:	4613      	mov	r3, r2
 80045e6:	61fb      	str	r3, [r7, #28]
 80045e8:	e04a      	b.n	8004680 <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80045ea:	4b30      	ldr	r3, [pc, #192]	; (80046ac <HAL_RCC_GetSysClockFreq+0x358>)
 80045ec:	685b      	ldr	r3, [r3, #4]
 80045ee:	099b      	lsrs	r3, r3, #6
 80045f0:	461a      	mov	r2, r3
 80045f2:	f04f 0300 	mov.w	r3, #0
 80045f6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80045fa:	f04f 0100 	mov.w	r1, #0
 80045fe:	ea02 0400 	and.w	r4, r2, r0
 8004602:	ea03 0501 	and.w	r5, r3, r1
 8004606:	4620      	mov	r0, r4
 8004608:	4629      	mov	r1, r5
 800460a:	f04f 0200 	mov.w	r2, #0
 800460e:	f04f 0300 	mov.w	r3, #0
 8004612:	014b      	lsls	r3, r1, #5
 8004614:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004618:	0142      	lsls	r2, r0, #5
 800461a:	4610      	mov	r0, r2
 800461c:	4619      	mov	r1, r3
 800461e:	1b00      	subs	r0, r0, r4
 8004620:	eb61 0105 	sbc.w	r1, r1, r5
 8004624:	f04f 0200 	mov.w	r2, #0
 8004628:	f04f 0300 	mov.w	r3, #0
 800462c:	018b      	lsls	r3, r1, #6
 800462e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004632:	0182      	lsls	r2, r0, #6
 8004634:	1a12      	subs	r2, r2, r0
 8004636:	eb63 0301 	sbc.w	r3, r3, r1
 800463a:	f04f 0000 	mov.w	r0, #0
 800463e:	f04f 0100 	mov.w	r1, #0
 8004642:	00d9      	lsls	r1, r3, #3
 8004644:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004648:	00d0      	lsls	r0, r2, #3
 800464a:	4602      	mov	r2, r0
 800464c:	460b      	mov	r3, r1
 800464e:	1912      	adds	r2, r2, r4
 8004650:	eb45 0303 	adc.w	r3, r5, r3
 8004654:	f04f 0000 	mov.w	r0, #0
 8004658:	f04f 0100 	mov.w	r1, #0
 800465c:	0299      	lsls	r1, r3, #10
 800465e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004662:	0290      	lsls	r0, r2, #10
 8004664:	4602      	mov	r2, r0
 8004666:	460b      	mov	r3, r1
 8004668:	4610      	mov	r0, r2
 800466a:	4619      	mov	r1, r3
 800466c:	697b      	ldr	r3, [r7, #20]
 800466e:	461a      	mov	r2, r3
 8004670:	f04f 0300 	mov.w	r3, #0
 8004674:	f7fc fa84 	bl	8000b80 <__aeabi_uldivmod>
 8004678:	4602      	mov	r2, r0
 800467a:	460b      	mov	r3, r1
 800467c:	4613      	mov	r3, r2
 800467e:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004680:	4b0a      	ldr	r3, [pc, #40]	; (80046ac <HAL_RCC_GetSysClockFreq+0x358>)
 8004682:	685b      	ldr	r3, [r3, #4]
 8004684:	0f1b      	lsrs	r3, r3, #28
 8004686:	f003 0307 	and.w	r3, r3, #7
 800468a:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 800468c:	69fa      	ldr	r2, [r7, #28]
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	fbb2 f3f3 	udiv	r3, r2, r3
 8004694:	61bb      	str	r3, [r7, #24]
      break;
 8004696:	e002      	b.n	800469e <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004698:	4b05      	ldr	r3, [pc, #20]	; (80046b0 <HAL_RCC_GetSysClockFreq+0x35c>)
 800469a:	61bb      	str	r3, [r7, #24]
      break;
 800469c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800469e:	69bb      	ldr	r3, [r7, #24]
}
 80046a0:	4618      	mov	r0, r3
 80046a2:	3720      	adds	r7, #32
 80046a4:	46bd      	mov	sp, r7
 80046a6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80046aa:	bf00      	nop
 80046ac:	40023800 	.word	0x40023800
 80046b0:	00f42400 	.word	0x00f42400
 80046b4:	007a1200 	.word	0x007a1200

080046b8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80046b8:	b580      	push	{r7, lr}
 80046ba:	b086      	sub	sp, #24
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d101      	bne.n	80046ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80046c6:	2301      	movs	r3, #1
 80046c8:	e28d      	b.n	8004be6 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f003 0301 	and.w	r3, r3, #1
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	f000 8083 	beq.w	80047de <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80046d8:	4b94      	ldr	r3, [pc, #592]	; (800492c <HAL_RCC_OscConfig+0x274>)
 80046da:	689b      	ldr	r3, [r3, #8]
 80046dc:	f003 030c 	and.w	r3, r3, #12
 80046e0:	2b04      	cmp	r3, #4
 80046e2:	d019      	beq.n	8004718 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80046e4:	4b91      	ldr	r3, [pc, #580]	; (800492c <HAL_RCC_OscConfig+0x274>)
 80046e6:	689b      	ldr	r3, [r3, #8]
 80046e8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80046ec:	2b08      	cmp	r3, #8
 80046ee:	d106      	bne.n	80046fe <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80046f0:	4b8e      	ldr	r3, [pc, #568]	; (800492c <HAL_RCC_OscConfig+0x274>)
 80046f2:	685b      	ldr	r3, [r3, #4]
 80046f4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80046f8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80046fc:	d00c      	beq.n	8004718 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80046fe:	4b8b      	ldr	r3, [pc, #556]	; (800492c <HAL_RCC_OscConfig+0x274>)
 8004700:	689b      	ldr	r3, [r3, #8]
 8004702:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004706:	2b0c      	cmp	r3, #12
 8004708:	d112      	bne.n	8004730 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800470a:	4b88      	ldr	r3, [pc, #544]	; (800492c <HAL_RCC_OscConfig+0x274>)
 800470c:	685b      	ldr	r3, [r3, #4]
 800470e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004712:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004716:	d10b      	bne.n	8004730 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004718:	4b84      	ldr	r3, [pc, #528]	; (800492c <HAL_RCC_OscConfig+0x274>)
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004720:	2b00      	cmp	r3, #0
 8004722:	d05b      	beq.n	80047dc <HAL_RCC_OscConfig+0x124>
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	685b      	ldr	r3, [r3, #4]
 8004728:	2b00      	cmp	r3, #0
 800472a:	d157      	bne.n	80047dc <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800472c:	2301      	movs	r3, #1
 800472e:	e25a      	b.n	8004be6 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	685b      	ldr	r3, [r3, #4]
 8004734:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004738:	d106      	bne.n	8004748 <HAL_RCC_OscConfig+0x90>
 800473a:	4b7c      	ldr	r3, [pc, #496]	; (800492c <HAL_RCC_OscConfig+0x274>)
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	4a7b      	ldr	r2, [pc, #492]	; (800492c <HAL_RCC_OscConfig+0x274>)
 8004740:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004744:	6013      	str	r3, [r2, #0]
 8004746:	e01d      	b.n	8004784 <HAL_RCC_OscConfig+0xcc>
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	685b      	ldr	r3, [r3, #4]
 800474c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004750:	d10c      	bne.n	800476c <HAL_RCC_OscConfig+0xb4>
 8004752:	4b76      	ldr	r3, [pc, #472]	; (800492c <HAL_RCC_OscConfig+0x274>)
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	4a75      	ldr	r2, [pc, #468]	; (800492c <HAL_RCC_OscConfig+0x274>)
 8004758:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800475c:	6013      	str	r3, [r2, #0]
 800475e:	4b73      	ldr	r3, [pc, #460]	; (800492c <HAL_RCC_OscConfig+0x274>)
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	4a72      	ldr	r2, [pc, #456]	; (800492c <HAL_RCC_OscConfig+0x274>)
 8004764:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004768:	6013      	str	r3, [r2, #0]
 800476a:	e00b      	b.n	8004784 <HAL_RCC_OscConfig+0xcc>
 800476c:	4b6f      	ldr	r3, [pc, #444]	; (800492c <HAL_RCC_OscConfig+0x274>)
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	4a6e      	ldr	r2, [pc, #440]	; (800492c <HAL_RCC_OscConfig+0x274>)
 8004772:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004776:	6013      	str	r3, [r2, #0]
 8004778:	4b6c      	ldr	r3, [pc, #432]	; (800492c <HAL_RCC_OscConfig+0x274>)
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	4a6b      	ldr	r2, [pc, #428]	; (800492c <HAL_RCC_OscConfig+0x274>)
 800477e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004782:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	685b      	ldr	r3, [r3, #4]
 8004788:	2b00      	cmp	r3, #0
 800478a:	d013      	beq.n	80047b4 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800478c:	f7fe f986 	bl	8002a9c <HAL_GetTick>
 8004790:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004792:	e008      	b.n	80047a6 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004794:	f7fe f982 	bl	8002a9c <HAL_GetTick>
 8004798:	4602      	mov	r2, r0
 800479a:	693b      	ldr	r3, [r7, #16]
 800479c:	1ad3      	subs	r3, r2, r3
 800479e:	2b64      	cmp	r3, #100	; 0x64
 80047a0:	d901      	bls.n	80047a6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80047a2:	2303      	movs	r3, #3
 80047a4:	e21f      	b.n	8004be6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047a6:	4b61      	ldr	r3, [pc, #388]	; (800492c <HAL_RCC_OscConfig+0x274>)
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d0f0      	beq.n	8004794 <HAL_RCC_OscConfig+0xdc>
 80047b2:	e014      	b.n	80047de <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047b4:	f7fe f972 	bl	8002a9c <HAL_GetTick>
 80047b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80047ba:	e008      	b.n	80047ce <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80047bc:	f7fe f96e 	bl	8002a9c <HAL_GetTick>
 80047c0:	4602      	mov	r2, r0
 80047c2:	693b      	ldr	r3, [r7, #16]
 80047c4:	1ad3      	subs	r3, r2, r3
 80047c6:	2b64      	cmp	r3, #100	; 0x64
 80047c8:	d901      	bls.n	80047ce <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80047ca:	2303      	movs	r3, #3
 80047cc:	e20b      	b.n	8004be6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80047ce:	4b57      	ldr	r3, [pc, #348]	; (800492c <HAL_RCC_OscConfig+0x274>)
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d1f0      	bne.n	80047bc <HAL_RCC_OscConfig+0x104>
 80047da:	e000      	b.n	80047de <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f003 0302 	and.w	r3, r3, #2
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d06f      	beq.n	80048ca <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80047ea:	4b50      	ldr	r3, [pc, #320]	; (800492c <HAL_RCC_OscConfig+0x274>)
 80047ec:	689b      	ldr	r3, [r3, #8]
 80047ee:	f003 030c 	and.w	r3, r3, #12
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d017      	beq.n	8004826 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80047f6:	4b4d      	ldr	r3, [pc, #308]	; (800492c <HAL_RCC_OscConfig+0x274>)
 80047f8:	689b      	ldr	r3, [r3, #8]
 80047fa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80047fe:	2b08      	cmp	r3, #8
 8004800:	d105      	bne.n	800480e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004802:	4b4a      	ldr	r3, [pc, #296]	; (800492c <HAL_RCC_OscConfig+0x274>)
 8004804:	685b      	ldr	r3, [r3, #4]
 8004806:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800480a:	2b00      	cmp	r3, #0
 800480c:	d00b      	beq.n	8004826 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800480e:	4b47      	ldr	r3, [pc, #284]	; (800492c <HAL_RCC_OscConfig+0x274>)
 8004810:	689b      	ldr	r3, [r3, #8]
 8004812:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004816:	2b0c      	cmp	r3, #12
 8004818:	d11c      	bne.n	8004854 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800481a:	4b44      	ldr	r3, [pc, #272]	; (800492c <HAL_RCC_OscConfig+0x274>)
 800481c:	685b      	ldr	r3, [r3, #4]
 800481e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004822:	2b00      	cmp	r3, #0
 8004824:	d116      	bne.n	8004854 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004826:	4b41      	ldr	r3, [pc, #260]	; (800492c <HAL_RCC_OscConfig+0x274>)
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f003 0302 	and.w	r3, r3, #2
 800482e:	2b00      	cmp	r3, #0
 8004830:	d005      	beq.n	800483e <HAL_RCC_OscConfig+0x186>
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	68db      	ldr	r3, [r3, #12]
 8004836:	2b01      	cmp	r3, #1
 8004838:	d001      	beq.n	800483e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800483a:	2301      	movs	r3, #1
 800483c:	e1d3      	b.n	8004be6 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800483e:	4b3b      	ldr	r3, [pc, #236]	; (800492c <HAL_RCC_OscConfig+0x274>)
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	691b      	ldr	r3, [r3, #16]
 800484a:	00db      	lsls	r3, r3, #3
 800484c:	4937      	ldr	r1, [pc, #220]	; (800492c <HAL_RCC_OscConfig+0x274>)
 800484e:	4313      	orrs	r3, r2
 8004850:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004852:	e03a      	b.n	80048ca <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	68db      	ldr	r3, [r3, #12]
 8004858:	2b00      	cmp	r3, #0
 800485a:	d020      	beq.n	800489e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800485c:	4b34      	ldr	r3, [pc, #208]	; (8004930 <HAL_RCC_OscConfig+0x278>)
 800485e:	2201      	movs	r2, #1
 8004860:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004862:	f7fe f91b 	bl	8002a9c <HAL_GetTick>
 8004866:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004868:	e008      	b.n	800487c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800486a:	f7fe f917 	bl	8002a9c <HAL_GetTick>
 800486e:	4602      	mov	r2, r0
 8004870:	693b      	ldr	r3, [r7, #16]
 8004872:	1ad3      	subs	r3, r2, r3
 8004874:	2b02      	cmp	r3, #2
 8004876:	d901      	bls.n	800487c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004878:	2303      	movs	r3, #3
 800487a:	e1b4      	b.n	8004be6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800487c:	4b2b      	ldr	r3, [pc, #172]	; (800492c <HAL_RCC_OscConfig+0x274>)
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f003 0302 	and.w	r3, r3, #2
 8004884:	2b00      	cmp	r3, #0
 8004886:	d0f0      	beq.n	800486a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004888:	4b28      	ldr	r3, [pc, #160]	; (800492c <HAL_RCC_OscConfig+0x274>)
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	691b      	ldr	r3, [r3, #16]
 8004894:	00db      	lsls	r3, r3, #3
 8004896:	4925      	ldr	r1, [pc, #148]	; (800492c <HAL_RCC_OscConfig+0x274>)
 8004898:	4313      	orrs	r3, r2
 800489a:	600b      	str	r3, [r1, #0]
 800489c:	e015      	b.n	80048ca <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800489e:	4b24      	ldr	r3, [pc, #144]	; (8004930 <HAL_RCC_OscConfig+0x278>)
 80048a0:	2200      	movs	r2, #0
 80048a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048a4:	f7fe f8fa 	bl	8002a9c <HAL_GetTick>
 80048a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80048aa:	e008      	b.n	80048be <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80048ac:	f7fe f8f6 	bl	8002a9c <HAL_GetTick>
 80048b0:	4602      	mov	r2, r0
 80048b2:	693b      	ldr	r3, [r7, #16]
 80048b4:	1ad3      	subs	r3, r2, r3
 80048b6:	2b02      	cmp	r3, #2
 80048b8:	d901      	bls.n	80048be <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80048ba:	2303      	movs	r3, #3
 80048bc:	e193      	b.n	8004be6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80048be:	4b1b      	ldr	r3, [pc, #108]	; (800492c <HAL_RCC_OscConfig+0x274>)
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f003 0302 	and.w	r3, r3, #2
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d1f0      	bne.n	80048ac <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f003 0308 	and.w	r3, r3, #8
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d036      	beq.n	8004944 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	695b      	ldr	r3, [r3, #20]
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d016      	beq.n	800490c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80048de:	4b15      	ldr	r3, [pc, #84]	; (8004934 <HAL_RCC_OscConfig+0x27c>)
 80048e0:	2201      	movs	r2, #1
 80048e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048e4:	f7fe f8da 	bl	8002a9c <HAL_GetTick>
 80048e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80048ea:	e008      	b.n	80048fe <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80048ec:	f7fe f8d6 	bl	8002a9c <HAL_GetTick>
 80048f0:	4602      	mov	r2, r0
 80048f2:	693b      	ldr	r3, [r7, #16]
 80048f4:	1ad3      	subs	r3, r2, r3
 80048f6:	2b02      	cmp	r3, #2
 80048f8:	d901      	bls.n	80048fe <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80048fa:	2303      	movs	r3, #3
 80048fc:	e173      	b.n	8004be6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80048fe:	4b0b      	ldr	r3, [pc, #44]	; (800492c <HAL_RCC_OscConfig+0x274>)
 8004900:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004902:	f003 0302 	and.w	r3, r3, #2
 8004906:	2b00      	cmp	r3, #0
 8004908:	d0f0      	beq.n	80048ec <HAL_RCC_OscConfig+0x234>
 800490a:	e01b      	b.n	8004944 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800490c:	4b09      	ldr	r3, [pc, #36]	; (8004934 <HAL_RCC_OscConfig+0x27c>)
 800490e:	2200      	movs	r2, #0
 8004910:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004912:	f7fe f8c3 	bl	8002a9c <HAL_GetTick>
 8004916:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004918:	e00e      	b.n	8004938 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800491a:	f7fe f8bf 	bl	8002a9c <HAL_GetTick>
 800491e:	4602      	mov	r2, r0
 8004920:	693b      	ldr	r3, [r7, #16]
 8004922:	1ad3      	subs	r3, r2, r3
 8004924:	2b02      	cmp	r3, #2
 8004926:	d907      	bls.n	8004938 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8004928:	2303      	movs	r3, #3
 800492a:	e15c      	b.n	8004be6 <HAL_RCC_OscConfig+0x52e>
 800492c:	40023800 	.word	0x40023800
 8004930:	42470000 	.word	0x42470000
 8004934:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004938:	4b8a      	ldr	r3, [pc, #552]	; (8004b64 <HAL_RCC_OscConfig+0x4ac>)
 800493a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800493c:	f003 0302 	and.w	r3, r3, #2
 8004940:	2b00      	cmp	r3, #0
 8004942:	d1ea      	bne.n	800491a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f003 0304 	and.w	r3, r3, #4
 800494c:	2b00      	cmp	r3, #0
 800494e:	f000 8097 	beq.w	8004a80 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004952:	2300      	movs	r3, #0
 8004954:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004956:	4b83      	ldr	r3, [pc, #524]	; (8004b64 <HAL_RCC_OscConfig+0x4ac>)
 8004958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800495a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800495e:	2b00      	cmp	r3, #0
 8004960:	d10f      	bne.n	8004982 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004962:	2300      	movs	r3, #0
 8004964:	60bb      	str	r3, [r7, #8]
 8004966:	4b7f      	ldr	r3, [pc, #508]	; (8004b64 <HAL_RCC_OscConfig+0x4ac>)
 8004968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800496a:	4a7e      	ldr	r2, [pc, #504]	; (8004b64 <HAL_RCC_OscConfig+0x4ac>)
 800496c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004970:	6413      	str	r3, [r2, #64]	; 0x40
 8004972:	4b7c      	ldr	r3, [pc, #496]	; (8004b64 <HAL_RCC_OscConfig+0x4ac>)
 8004974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004976:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800497a:	60bb      	str	r3, [r7, #8]
 800497c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800497e:	2301      	movs	r3, #1
 8004980:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004982:	4b79      	ldr	r3, [pc, #484]	; (8004b68 <HAL_RCC_OscConfig+0x4b0>)
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800498a:	2b00      	cmp	r3, #0
 800498c:	d118      	bne.n	80049c0 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800498e:	4b76      	ldr	r3, [pc, #472]	; (8004b68 <HAL_RCC_OscConfig+0x4b0>)
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	4a75      	ldr	r2, [pc, #468]	; (8004b68 <HAL_RCC_OscConfig+0x4b0>)
 8004994:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004998:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800499a:	f7fe f87f 	bl	8002a9c <HAL_GetTick>
 800499e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049a0:	e008      	b.n	80049b4 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80049a2:	f7fe f87b 	bl	8002a9c <HAL_GetTick>
 80049a6:	4602      	mov	r2, r0
 80049a8:	693b      	ldr	r3, [r7, #16]
 80049aa:	1ad3      	subs	r3, r2, r3
 80049ac:	2b02      	cmp	r3, #2
 80049ae:	d901      	bls.n	80049b4 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80049b0:	2303      	movs	r3, #3
 80049b2:	e118      	b.n	8004be6 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049b4:	4b6c      	ldr	r3, [pc, #432]	; (8004b68 <HAL_RCC_OscConfig+0x4b0>)
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d0f0      	beq.n	80049a2 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	689b      	ldr	r3, [r3, #8]
 80049c4:	2b01      	cmp	r3, #1
 80049c6:	d106      	bne.n	80049d6 <HAL_RCC_OscConfig+0x31e>
 80049c8:	4b66      	ldr	r3, [pc, #408]	; (8004b64 <HAL_RCC_OscConfig+0x4ac>)
 80049ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049cc:	4a65      	ldr	r2, [pc, #404]	; (8004b64 <HAL_RCC_OscConfig+0x4ac>)
 80049ce:	f043 0301 	orr.w	r3, r3, #1
 80049d2:	6713      	str	r3, [r2, #112]	; 0x70
 80049d4:	e01c      	b.n	8004a10 <HAL_RCC_OscConfig+0x358>
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	689b      	ldr	r3, [r3, #8]
 80049da:	2b05      	cmp	r3, #5
 80049dc:	d10c      	bne.n	80049f8 <HAL_RCC_OscConfig+0x340>
 80049de:	4b61      	ldr	r3, [pc, #388]	; (8004b64 <HAL_RCC_OscConfig+0x4ac>)
 80049e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049e2:	4a60      	ldr	r2, [pc, #384]	; (8004b64 <HAL_RCC_OscConfig+0x4ac>)
 80049e4:	f043 0304 	orr.w	r3, r3, #4
 80049e8:	6713      	str	r3, [r2, #112]	; 0x70
 80049ea:	4b5e      	ldr	r3, [pc, #376]	; (8004b64 <HAL_RCC_OscConfig+0x4ac>)
 80049ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049ee:	4a5d      	ldr	r2, [pc, #372]	; (8004b64 <HAL_RCC_OscConfig+0x4ac>)
 80049f0:	f043 0301 	orr.w	r3, r3, #1
 80049f4:	6713      	str	r3, [r2, #112]	; 0x70
 80049f6:	e00b      	b.n	8004a10 <HAL_RCC_OscConfig+0x358>
 80049f8:	4b5a      	ldr	r3, [pc, #360]	; (8004b64 <HAL_RCC_OscConfig+0x4ac>)
 80049fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049fc:	4a59      	ldr	r2, [pc, #356]	; (8004b64 <HAL_RCC_OscConfig+0x4ac>)
 80049fe:	f023 0301 	bic.w	r3, r3, #1
 8004a02:	6713      	str	r3, [r2, #112]	; 0x70
 8004a04:	4b57      	ldr	r3, [pc, #348]	; (8004b64 <HAL_RCC_OscConfig+0x4ac>)
 8004a06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a08:	4a56      	ldr	r2, [pc, #344]	; (8004b64 <HAL_RCC_OscConfig+0x4ac>)
 8004a0a:	f023 0304 	bic.w	r3, r3, #4
 8004a0e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	689b      	ldr	r3, [r3, #8]
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d015      	beq.n	8004a44 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a18:	f7fe f840 	bl	8002a9c <HAL_GetTick>
 8004a1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a1e:	e00a      	b.n	8004a36 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004a20:	f7fe f83c 	bl	8002a9c <HAL_GetTick>
 8004a24:	4602      	mov	r2, r0
 8004a26:	693b      	ldr	r3, [r7, #16]
 8004a28:	1ad3      	subs	r3, r2, r3
 8004a2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a2e:	4293      	cmp	r3, r2
 8004a30:	d901      	bls.n	8004a36 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8004a32:	2303      	movs	r3, #3
 8004a34:	e0d7      	b.n	8004be6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a36:	4b4b      	ldr	r3, [pc, #300]	; (8004b64 <HAL_RCC_OscConfig+0x4ac>)
 8004a38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a3a:	f003 0302 	and.w	r3, r3, #2
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d0ee      	beq.n	8004a20 <HAL_RCC_OscConfig+0x368>
 8004a42:	e014      	b.n	8004a6e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a44:	f7fe f82a 	bl	8002a9c <HAL_GetTick>
 8004a48:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a4a:	e00a      	b.n	8004a62 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004a4c:	f7fe f826 	bl	8002a9c <HAL_GetTick>
 8004a50:	4602      	mov	r2, r0
 8004a52:	693b      	ldr	r3, [r7, #16]
 8004a54:	1ad3      	subs	r3, r2, r3
 8004a56:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a5a:	4293      	cmp	r3, r2
 8004a5c:	d901      	bls.n	8004a62 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004a5e:	2303      	movs	r3, #3
 8004a60:	e0c1      	b.n	8004be6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a62:	4b40      	ldr	r3, [pc, #256]	; (8004b64 <HAL_RCC_OscConfig+0x4ac>)
 8004a64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a66:	f003 0302 	and.w	r3, r3, #2
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d1ee      	bne.n	8004a4c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004a6e:	7dfb      	ldrb	r3, [r7, #23]
 8004a70:	2b01      	cmp	r3, #1
 8004a72:	d105      	bne.n	8004a80 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a74:	4b3b      	ldr	r3, [pc, #236]	; (8004b64 <HAL_RCC_OscConfig+0x4ac>)
 8004a76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a78:	4a3a      	ldr	r2, [pc, #232]	; (8004b64 <HAL_RCC_OscConfig+0x4ac>)
 8004a7a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a7e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	699b      	ldr	r3, [r3, #24]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	f000 80ad 	beq.w	8004be4 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004a8a:	4b36      	ldr	r3, [pc, #216]	; (8004b64 <HAL_RCC_OscConfig+0x4ac>)
 8004a8c:	689b      	ldr	r3, [r3, #8]
 8004a8e:	f003 030c 	and.w	r3, r3, #12
 8004a92:	2b08      	cmp	r3, #8
 8004a94:	d060      	beq.n	8004b58 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	699b      	ldr	r3, [r3, #24]
 8004a9a:	2b02      	cmp	r3, #2
 8004a9c:	d145      	bne.n	8004b2a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a9e:	4b33      	ldr	r3, [pc, #204]	; (8004b6c <HAL_RCC_OscConfig+0x4b4>)
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004aa4:	f7fd fffa 	bl	8002a9c <HAL_GetTick>
 8004aa8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004aaa:	e008      	b.n	8004abe <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004aac:	f7fd fff6 	bl	8002a9c <HAL_GetTick>
 8004ab0:	4602      	mov	r2, r0
 8004ab2:	693b      	ldr	r3, [r7, #16]
 8004ab4:	1ad3      	subs	r3, r2, r3
 8004ab6:	2b02      	cmp	r3, #2
 8004ab8:	d901      	bls.n	8004abe <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8004aba:	2303      	movs	r3, #3
 8004abc:	e093      	b.n	8004be6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004abe:	4b29      	ldr	r3, [pc, #164]	; (8004b64 <HAL_RCC_OscConfig+0x4ac>)
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d1f0      	bne.n	8004aac <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	69da      	ldr	r2, [r3, #28]
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6a1b      	ldr	r3, [r3, #32]
 8004ad2:	431a      	orrs	r2, r3
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ad8:	019b      	lsls	r3, r3, #6
 8004ada:	431a      	orrs	r2, r3
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ae0:	085b      	lsrs	r3, r3, #1
 8004ae2:	3b01      	subs	r3, #1
 8004ae4:	041b      	lsls	r3, r3, #16
 8004ae6:	431a      	orrs	r2, r3
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004aec:	061b      	lsls	r3, r3, #24
 8004aee:	431a      	orrs	r2, r3
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004af4:	071b      	lsls	r3, r3, #28
 8004af6:	491b      	ldr	r1, [pc, #108]	; (8004b64 <HAL_RCC_OscConfig+0x4ac>)
 8004af8:	4313      	orrs	r3, r2
 8004afa:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004afc:	4b1b      	ldr	r3, [pc, #108]	; (8004b6c <HAL_RCC_OscConfig+0x4b4>)
 8004afe:	2201      	movs	r2, #1
 8004b00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b02:	f7fd ffcb 	bl	8002a9c <HAL_GetTick>
 8004b06:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b08:	e008      	b.n	8004b1c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b0a:	f7fd ffc7 	bl	8002a9c <HAL_GetTick>
 8004b0e:	4602      	mov	r2, r0
 8004b10:	693b      	ldr	r3, [r7, #16]
 8004b12:	1ad3      	subs	r3, r2, r3
 8004b14:	2b02      	cmp	r3, #2
 8004b16:	d901      	bls.n	8004b1c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004b18:	2303      	movs	r3, #3
 8004b1a:	e064      	b.n	8004be6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b1c:	4b11      	ldr	r3, [pc, #68]	; (8004b64 <HAL_RCC_OscConfig+0x4ac>)
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d0f0      	beq.n	8004b0a <HAL_RCC_OscConfig+0x452>
 8004b28:	e05c      	b.n	8004be4 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b2a:	4b10      	ldr	r3, [pc, #64]	; (8004b6c <HAL_RCC_OscConfig+0x4b4>)
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b30:	f7fd ffb4 	bl	8002a9c <HAL_GetTick>
 8004b34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b36:	e008      	b.n	8004b4a <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b38:	f7fd ffb0 	bl	8002a9c <HAL_GetTick>
 8004b3c:	4602      	mov	r2, r0
 8004b3e:	693b      	ldr	r3, [r7, #16]
 8004b40:	1ad3      	subs	r3, r2, r3
 8004b42:	2b02      	cmp	r3, #2
 8004b44:	d901      	bls.n	8004b4a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8004b46:	2303      	movs	r3, #3
 8004b48:	e04d      	b.n	8004be6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b4a:	4b06      	ldr	r3, [pc, #24]	; (8004b64 <HAL_RCC_OscConfig+0x4ac>)
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d1f0      	bne.n	8004b38 <HAL_RCC_OscConfig+0x480>
 8004b56:	e045      	b.n	8004be4 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	699b      	ldr	r3, [r3, #24]
 8004b5c:	2b01      	cmp	r3, #1
 8004b5e:	d107      	bne.n	8004b70 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8004b60:	2301      	movs	r3, #1
 8004b62:	e040      	b.n	8004be6 <HAL_RCC_OscConfig+0x52e>
 8004b64:	40023800 	.word	0x40023800
 8004b68:	40007000 	.word	0x40007000
 8004b6c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004b70:	4b1f      	ldr	r3, [pc, #124]	; (8004bf0 <HAL_RCC_OscConfig+0x538>)
 8004b72:	685b      	ldr	r3, [r3, #4]
 8004b74:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	699b      	ldr	r3, [r3, #24]
 8004b7a:	2b01      	cmp	r3, #1
 8004b7c:	d030      	beq.n	8004be0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004b88:	429a      	cmp	r2, r3
 8004b8a:	d129      	bne.n	8004be0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b96:	429a      	cmp	r2, r3
 8004b98:	d122      	bne.n	8004be0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004b9a:	68fa      	ldr	r2, [r7, #12]
 8004b9c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004ba0:	4013      	ands	r3, r2
 8004ba2:	687a      	ldr	r2, [r7, #4]
 8004ba4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004ba6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004ba8:	4293      	cmp	r3, r2
 8004baa:	d119      	bne.n	8004be0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bb6:	085b      	lsrs	r3, r3, #1
 8004bb8:	3b01      	subs	r3, #1
 8004bba:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004bbc:	429a      	cmp	r2, r3
 8004bbe:	d10f      	bne.n	8004be0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bca:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004bcc:	429a      	cmp	r2, r3
 8004bce:	d107      	bne.n	8004be0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bda:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004bdc:	429a      	cmp	r2, r3
 8004bde:	d001      	beq.n	8004be4 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8004be0:	2301      	movs	r3, #1
 8004be2:	e000      	b.n	8004be6 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004be4:	2300      	movs	r3, #0
}
 8004be6:	4618      	mov	r0, r3
 8004be8:	3718      	adds	r7, #24
 8004bea:	46bd      	mov	sp, r7
 8004bec:	bd80      	pop	{r7, pc}
 8004bee:	bf00      	nop
 8004bf0:	40023800 	.word	0x40023800

08004bf4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b082      	sub	sp, #8
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d101      	bne.n	8004c06 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004c02:	2301      	movs	r3, #1
 8004c04:	e041      	b.n	8004c8a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c0c:	b2db      	uxtb	r3, r3
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d106      	bne.n	8004c20 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	2200      	movs	r2, #0
 8004c16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004c1a:	6878      	ldr	r0, [r7, #4]
 8004c1c:	f7fd fa58 	bl	80020d0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2202      	movs	r2, #2
 8004c24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681a      	ldr	r2, [r3, #0]
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	3304      	adds	r3, #4
 8004c30:	4619      	mov	r1, r3
 8004c32:	4610      	mov	r0, r2
 8004c34:	f000 fd44 	bl	80056c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2201      	movs	r2, #1
 8004c3c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2201      	movs	r2, #1
 8004c44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2201      	movs	r2, #1
 8004c4c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2201      	movs	r2, #1
 8004c54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2201      	movs	r2, #1
 8004c5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2201      	movs	r2, #1
 8004c64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2201      	movs	r2, #1
 8004c6c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2201      	movs	r2, #1
 8004c74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2201      	movs	r2, #1
 8004c7c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2201      	movs	r2, #1
 8004c84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004c88:	2300      	movs	r3, #0
}
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	3708      	adds	r7, #8
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	bd80      	pop	{r7, pc}
	...

08004c94 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004c94:	b480      	push	{r7}
 8004c96:	b085      	sub	sp, #20
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ca2:	b2db      	uxtb	r3, r3
 8004ca4:	2b01      	cmp	r3, #1
 8004ca6:	d001      	beq.n	8004cac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004ca8:	2301      	movs	r3, #1
 8004caa:	e04e      	b.n	8004d4a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2202      	movs	r2, #2
 8004cb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	68da      	ldr	r2, [r3, #12]
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f042 0201 	orr.w	r2, r2, #1
 8004cc2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	4a23      	ldr	r2, [pc, #140]	; (8004d58 <HAL_TIM_Base_Start_IT+0xc4>)
 8004cca:	4293      	cmp	r3, r2
 8004ccc:	d022      	beq.n	8004d14 <HAL_TIM_Base_Start_IT+0x80>
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cd6:	d01d      	beq.n	8004d14 <HAL_TIM_Base_Start_IT+0x80>
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	4a1f      	ldr	r2, [pc, #124]	; (8004d5c <HAL_TIM_Base_Start_IT+0xc8>)
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d018      	beq.n	8004d14 <HAL_TIM_Base_Start_IT+0x80>
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	4a1e      	ldr	r2, [pc, #120]	; (8004d60 <HAL_TIM_Base_Start_IT+0xcc>)
 8004ce8:	4293      	cmp	r3, r2
 8004cea:	d013      	beq.n	8004d14 <HAL_TIM_Base_Start_IT+0x80>
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	4a1c      	ldr	r2, [pc, #112]	; (8004d64 <HAL_TIM_Base_Start_IT+0xd0>)
 8004cf2:	4293      	cmp	r3, r2
 8004cf4:	d00e      	beq.n	8004d14 <HAL_TIM_Base_Start_IT+0x80>
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	4a1b      	ldr	r2, [pc, #108]	; (8004d68 <HAL_TIM_Base_Start_IT+0xd4>)
 8004cfc:	4293      	cmp	r3, r2
 8004cfe:	d009      	beq.n	8004d14 <HAL_TIM_Base_Start_IT+0x80>
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	4a19      	ldr	r2, [pc, #100]	; (8004d6c <HAL_TIM_Base_Start_IT+0xd8>)
 8004d06:	4293      	cmp	r3, r2
 8004d08:	d004      	beq.n	8004d14 <HAL_TIM_Base_Start_IT+0x80>
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	4a18      	ldr	r2, [pc, #96]	; (8004d70 <HAL_TIM_Base_Start_IT+0xdc>)
 8004d10:	4293      	cmp	r3, r2
 8004d12:	d111      	bne.n	8004d38 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	689b      	ldr	r3, [r3, #8]
 8004d1a:	f003 0307 	and.w	r3, r3, #7
 8004d1e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	2b06      	cmp	r3, #6
 8004d24:	d010      	beq.n	8004d48 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	681a      	ldr	r2, [r3, #0]
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f042 0201 	orr.w	r2, r2, #1
 8004d34:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d36:	e007      	b.n	8004d48 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	681a      	ldr	r2, [r3, #0]
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f042 0201 	orr.w	r2, r2, #1
 8004d46:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004d48:	2300      	movs	r3, #0
}
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	3714      	adds	r7, #20
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d54:	4770      	bx	lr
 8004d56:	bf00      	nop
 8004d58:	40010000 	.word	0x40010000
 8004d5c:	40000400 	.word	0x40000400
 8004d60:	40000800 	.word	0x40000800
 8004d64:	40000c00 	.word	0x40000c00
 8004d68:	40010400 	.word	0x40010400
 8004d6c:	40014000 	.word	0x40014000
 8004d70:	40001800 	.word	0x40001800

08004d74 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8004d74:	b480      	push	{r7}
 8004d76:	b083      	sub	sp, #12
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	68da      	ldr	r2, [r3, #12]
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f022 0201 	bic.w	r2, r2, #1
 8004d8a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	6a1a      	ldr	r2, [r3, #32]
 8004d92:	f241 1311 	movw	r3, #4369	; 0x1111
 8004d96:	4013      	ands	r3, r2
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d10f      	bne.n	8004dbc <HAL_TIM_Base_Stop_IT+0x48>
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	6a1a      	ldr	r2, [r3, #32]
 8004da2:	f240 4344 	movw	r3, #1092	; 0x444
 8004da6:	4013      	ands	r3, r2
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d107      	bne.n	8004dbc <HAL_TIM_Base_Stop_IT+0x48>
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	681a      	ldr	r2, [r3, #0]
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f022 0201 	bic.w	r2, r2, #1
 8004dba:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2201      	movs	r2, #1
 8004dc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8004dc4:	2300      	movs	r3, #0
}
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	370c      	adds	r7, #12
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd0:	4770      	bx	lr

08004dd2 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8004dd2:	b580      	push	{r7, lr}
 8004dd4:	b082      	sub	sp, #8
 8004dd6:	af00      	add	r7, sp, #0
 8004dd8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d101      	bne.n	8004de4 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8004de0:	2301      	movs	r3, #1
 8004de2:	e041      	b.n	8004e68 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004dea:	b2db      	uxtb	r3, r3
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d106      	bne.n	8004dfe <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2200      	movs	r2, #0
 8004df4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8004df8:	6878      	ldr	r0, [r7, #4]
 8004dfa:	f000 f839 	bl	8004e70 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	2202      	movs	r2, #2
 8004e02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681a      	ldr	r2, [r3, #0]
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	3304      	adds	r3, #4
 8004e0e:	4619      	mov	r1, r3
 8004e10:	4610      	mov	r0, r2
 8004e12:	f000 fc55 	bl	80056c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	2201      	movs	r2, #1
 8004e1a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	2201      	movs	r2, #1
 8004e22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	2201      	movs	r2, #1
 8004e2a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	2201      	movs	r2, #1
 8004e32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	2201      	movs	r2, #1
 8004e3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	2201      	movs	r2, #1
 8004e42:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	2201      	movs	r2, #1
 8004e4a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	2201      	movs	r2, #1
 8004e52:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	2201      	movs	r2, #1
 8004e5a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	2201      	movs	r2, #1
 8004e62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004e66:	2300      	movs	r3, #0
}
 8004e68:	4618      	mov	r0, r3
 8004e6a:	3708      	adds	r7, #8
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	bd80      	pop	{r7, pc}

08004e70 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8004e70:	b480      	push	{r7}
 8004e72:	b083      	sub	sp, #12
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8004e78:	bf00      	nop
 8004e7a:	370c      	adds	r7, #12
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e82:	4770      	bx	lr

08004e84 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004e84:	b580      	push	{r7, lr}
 8004e86:	b084      	sub	sp, #16
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
 8004e8c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004e8e:	683b      	ldr	r3, [r7, #0]
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d109      	bne.n	8004ea8 <HAL_TIM_OC_Start_IT+0x24>
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004e9a:	b2db      	uxtb	r3, r3
 8004e9c:	2b01      	cmp	r3, #1
 8004e9e:	bf14      	ite	ne
 8004ea0:	2301      	movne	r3, #1
 8004ea2:	2300      	moveq	r3, #0
 8004ea4:	b2db      	uxtb	r3, r3
 8004ea6:	e022      	b.n	8004eee <HAL_TIM_OC_Start_IT+0x6a>
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	2b04      	cmp	r3, #4
 8004eac:	d109      	bne.n	8004ec2 <HAL_TIM_OC_Start_IT+0x3e>
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004eb4:	b2db      	uxtb	r3, r3
 8004eb6:	2b01      	cmp	r3, #1
 8004eb8:	bf14      	ite	ne
 8004eba:	2301      	movne	r3, #1
 8004ebc:	2300      	moveq	r3, #0
 8004ebe:	b2db      	uxtb	r3, r3
 8004ec0:	e015      	b.n	8004eee <HAL_TIM_OC_Start_IT+0x6a>
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	2b08      	cmp	r3, #8
 8004ec6:	d109      	bne.n	8004edc <HAL_TIM_OC_Start_IT+0x58>
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004ece:	b2db      	uxtb	r3, r3
 8004ed0:	2b01      	cmp	r3, #1
 8004ed2:	bf14      	ite	ne
 8004ed4:	2301      	movne	r3, #1
 8004ed6:	2300      	moveq	r3, #0
 8004ed8:	b2db      	uxtb	r3, r3
 8004eda:	e008      	b.n	8004eee <HAL_TIM_OC_Start_IT+0x6a>
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004ee2:	b2db      	uxtb	r3, r3
 8004ee4:	2b01      	cmp	r3, #1
 8004ee6:	bf14      	ite	ne
 8004ee8:	2301      	movne	r3, #1
 8004eea:	2300      	moveq	r3, #0
 8004eec:	b2db      	uxtb	r3, r3
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d001      	beq.n	8004ef6 <HAL_TIM_OC_Start_IT+0x72>
  {
    return HAL_ERROR;
 8004ef2:	2301      	movs	r3, #1
 8004ef4:	e0c2      	b.n	800507c <HAL_TIM_OC_Start_IT+0x1f8>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004ef6:	683b      	ldr	r3, [r7, #0]
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d104      	bne.n	8004f06 <HAL_TIM_OC_Start_IT+0x82>
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2202      	movs	r2, #2
 8004f00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004f04:	e013      	b.n	8004f2e <HAL_TIM_OC_Start_IT+0xaa>
 8004f06:	683b      	ldr	r3, [r7, #0]
 8004f08:	2b04      	cmp	r3, #4
 8004f0a:	d104      	bne.n	8004f16 <HAL_TIM_OC_Start_IT+0x92>
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2202      	movs	r2, #2
 8004f10:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004f14:	e00b      	b.n	8004f2e <HAL_TIM_OC_Start_IT+0xaa>
 8004f16:	683b      	ldr	r3, [r7, #0]
 8004f18:	2b08      	cmp	r3, #8
 8004f1a:	d104      	bne.n	8004f26 <HAL_TIM_OC_Start_IT+0xa2>
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2202      	movs	r2, #2
 8004f20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004f24:	e003      	b.n	8004f2e <HAL_TIM_OC_Start_IT+0xaa>
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	2202      	movs	r2, #2
 8004f2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004f2e:	683b      	ldr	r3, [r7, #0]
 8004f30:	2b0c      	cmp	r3, #12
 8004f32:	d841      	bhi.n	8004fb8 <HAL_TIM_OC_Start_IT+0x134>
 8004f34:	a201      	add	r2, pc, #4	; (adr r2, 8004f3c <HAL_TIM_OC_Start_IT+0xb8>)
 8004f36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f3a:	bf00      	nop
 8004f3c:	08004f71 	.word	0x08004f71
 8004f40:	08004fb9 	.word	0x08004fb9
 8004f44:	08004fb9 	.word	0x08004fb9
 8004f48:	08004fb9 	.word	0x08004fb9
 8004f4c:	08004f83 	.word	0x08004f83
 8004f50:	08004fb9 	.word	0x08004fb9
 8004f54:	08004fb9 	.word	0x08004fb9
 8004f58:	08004fb9 	.word	0x08004fb9
 8004f5c:	08004f95 	.word	0x08004f95
 8004f60:	08004fb9 	.word	0x08004fb9
 8004f64:	08004fb9 	.word	0x08004fb9
 8004f68:	08004fb9 	.word	0x08004fb9
 8004f6c:	08004fa7 	.word	0x08004fa7
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	68da      	ldr	r2, [r3, #12]
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f042 0202 	orr.w	r2, r2, #2
 8004f7e:	60da      	str	r2, [r3, #12]
      break;
 8004f80:	e01b      	b.n	8004fba <HAL_TIM_OC_Start_IT+0x136>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	68da      	ldr	r2, [r3, #12]
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f042 0204 	orr.w	r2, r2, #4
 8004f90:	60da      	str	r2, [r3, #12]
      break;
 8004f92:	e012      	b.n	8004fba <HAL_TIM_OC_Start_IT+0x136>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	68da      	ldr	r2, [r3, #12]
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f042 0208 	orr.w	r2, r2, #8
 8004fa2:	60da      	str	r2, [r3, #12]
      break;
 8004fa4:	e009      	b.n	8004fba <HAL_TIM_OC_Start_IT+0x136>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	68da      	ldr	r2, [r3, #12]
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f042 0210 	orr.w	r2, r2, #16
 8004fb4:	60da      	str	r2, [r3, #12]
      break;
 8004fb6:	e000      	b.n	8004fba <HAL_TIM_OC_Start_IT+0x136>
    }

    default:
      break;
 8004fb8:	bf00      	nop
  }

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	2201      	movs	r2, #1
 8004fc0:	6839      	ldr	r1, [r7, #0]
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	f000 fe66 	bl	8005c94 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	4a2d      	ldr	r2, [pc, #180]	; (8005084 <HAL_TIM_OC_Start_IT+0x200>)
 8004fce:	4293      	cmp	r3, r2
 8004fd0:	d004      	beq.n	8004fdc <HAL_TIM_OC_Start_IT+0x158>
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	4a2c      	ldr	r2, [pc, #176]	; (8005088 <HAL_TIM_OC_Start_IT+0x204>)
 8004fd8:	4293      	cmp	r3, r2
 8004fda:	d101      	bne.n	8004fe0 <HAL_TIM_OC_Start_IT+0x15c>
 8004fdc:	2301      	movs	r3, #1
 8004fde:	e000      	b.n	8004fe2 <HAL_TIM_OC_Start_IT+0x15e>
 8004fe0:	2300      	movs	r3, #0
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d007      	beq.n	8004ff6 <HAL_TIM_OC_Start_IT+0x172>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004ff4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	4a22      	ldr	r2, [pc, #136]	; (8005084 <HAL_TIM_OC_Start_IT+0x200>)
 8004ffc:	4293      	cmp	r3, r2
 8004ffe:	d022      	beq.n	8005046 <HAL_TIM_OC_Start_IT+0x1c2>
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005008:	d01d      	beq.n	8005046 <HAL_TIM_OC_Start_IT+0x1c2>
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	4a1f      	ldr	r2, [pc, #124]	; (800508c <HAL_TIM_OC_Start_IT+0x208>)
 8005010:	4293      	cmp	r3, r2
 8005012:	d018      	beq.n	8005046 <HAL_TIM_OC_Start_IT+0x1c2>
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	4a1d      	ldr	r2, [pc, #116]	; (8005090 <HAL_TIM_OC_Start_IT+0x20c>)
 800501a:	4293      	cmp	r3, r2
 800501c:	d013      	beq.n	8005046 <HAL_TIM_OC_Start_IT+0x1c2>
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	4a1c      	ldr	r2, [pc, #112]	; (8005094 <HAL_TIM_OC_Start_IT+0x210>)
 8005024:	4293      	cmp	r3, r2
 8005026:	d00e      	beq.n	8005046 <HAL_TIM_OC_Start_IT+0x1c2>
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	4a16      	ldr	r2, [pc, #88]	; (8005088 <HAL_TIM_OC_Start_IT+0x204>)
 800502e:	4293      	cmp	r3, r2
 8005030:	d009      	beq.n	8005046 <HAL_TIM_OC_Start_IT+0x1c2>
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	4a18      	ldr	r2, [pc, #96]	; (8005098 <HAL_TIM_OC_Start_IT+0x214>)
 8005038:	4293      	cmp	r3, r2
 800503a:	d004      	beq.n	8005046 <HAL_TIM_OC_Start_IT+0x1c2>
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	4a16      	ldr	r2, [pc, #88]	; (800509c <HAL_TIM_OC_Start_IT+0x218>)
 8005042:	4293      	cmp	r3, r2
 8005044:	d111      	bne.n	800506a <HAL_TIM_OC_Start_IT+0x1e6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	689b      	ldr	r3, [r3, #8]
 800504c:	f003 0307 	and.w	r3, r3, #7
 8005050:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	2b06      	cmp	r3, #6
 8005056:	d010      	beq.n	800507a <HAL_TIM_OC_Start_IT+0x1f6>
    {
      __HAL_TIM_ENABLE(htim);
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	681a      	ldr	r2, [r3, #0]
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f042 0201 	orr.w	r2, r2, #1
 8005066:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005068:	e007      	b.n	800507a <HAL_TIM_OC_Start_IT+0x1f6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	681a      	ldr	r2, [r3, #0]
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f042 0201 	orr.w	r2, r2, #1
 8005078:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800507a:	2300      	movs	r3, #0
}
 800507c:	4618      	mov	r0, r3
 800507e:	3710      	adds	r7, #16
 8005080:	46bd      	mov	sp, r7
 8005082:	bd80      	pop	{r7, pc}
 8005084:	40010000 	.word	0x40010000
 8005088:	40010400 	.word	0x40010400
 800508c:	40000400 	.word	0x40000400
 8005090:	40000800 	.word	0x40000800
 8005094:	40000c00 	.word	0x40000c00
 8005098:	40014000 	.word	0x40014000
 800509c:	40001800 	.word	0x40001800

080050a0 <HAL_TIM_OC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80050a0:	b580      	push	{r7, lr}
 80050a2:	b082      	sub	sp, #8
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]
 80050a8:	6039      	str	r1, [r7, #0]
 80050aa:	683b      	ldr	r3, [r7, #0]
 80050ac:	2b0c      	cmp	r3, #12
 80050ae:	d841      	bhi.n	8005134 <HAL_TIM_OC_Stop_IT+0x94>
 80050b0:	a201      	add	r2, pc, #4	; (adr r2, 80050b8 <HAL_TIM_OC_Stop_IT+0x18>)
 80050b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050b6:	bf00      	nop
 80050b8:	080050ed 	.word	0x080050ed
 80050bc:	08005135 	.word	0x08005135
 80050c0:	08005135 	.word	0x08005135
 80050c4:	08005135 	.word	0x08005135
 80050c8:	080050ff 	.word	0x080050ff
 80050cc:	08005135 	.word	0x08005135
 80050d0:	08005135 	.word	0x08005135
 80050d4:	08005135 	.word	0x08005135
 80050d8:	08005111 	.word	0x08005111
 80050dc:	08005135 	.word	0x08005135
 80050e0:	08005135 	.word	0x08005135
 80050e4:	08005135 	.word	0x08005135
 80050e8:	08005123 	.word	0x08005123
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	68da      	ldr	r2, [r3, #12]
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f022 0202 	bic.w	r2, r2, #2
 80050fa:	60da      	str	r2, [r3, #12]
      break;
 80050fc:	e01b      	b.n	8005136 <HAL_TIM_OC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	68da      	ldr	r2, [r3, #12]
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	f022 0204 	bic.w	r2, r2, #4
 800510c:	60da      	str	r2, [r3, #12]
      break;
 800510e:	e012      	b.n	8005136 <HAL_TIM_OC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	68da      	ldr	r2, [r3, #12]
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f022 0208 	bic.w	r2, r2, #8
 800511e:	60da      	str	r2, [r3, #12]
      break;
 8005120:	e009      	b.n	8005136 <HAL_TIM_OC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	68da      	ldr	r2, [r3, #12]
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f022 0210 	bic.w	r2, r2, #16
 8005130:	60da      	str	r2, [r3, #12]
      break;
 8005132:	e000      	b.n	8005136 <HAL_TIM_OC_Stop_IT+0x96>
    }

    default:
      break;
 8005134:	bf00      	nop
  }

  /* Disable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	2200      	movs	r2, #0
 800513c:	6839      	ldr	r1, [r7, #0]
 800513e:	4618      	mov	r0, r3
 8005140:	f000 fda8 	bl	8005c94 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	4a2e      	ldr	r2, [pc, #184]	; (8005204 <HAL_TIM_OC_Stop_IT+0x164>)
 800514a:	4293      	cmp	r3, r2
 800514c:	d004      	beq.n	8005158 <HAL_TIM_OC_Stop_IT+0xb8>
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	4a2d      	ldr	r2, [pc, #180]	; (8005208 <HAL_TIM_OC_Stop_IT+0x168>)
 8005154:	4293      	cmp	r3, r2
 8005156:	d101      	bne.n	800515c <HAL_TIM_OC_Stop_IT+0xbc>
 8005158:	2301      	movs	r3, #1
 800515a:	e000      	b.n	800515e <HAL_TIM_OC_Stop_IT+0xbe>
 800515c:	2300      	movs	r3, #0
 800515e:	2b00      	cmp	r3, #0
 8005160:	d017      	beq.n	8005192 <HAL_TIM_OC_Stop_IT+0xf2>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	6a1a      	ldr	r2, [r3, #32]
 8005168:	f241 1311 	movw	r3, #4369	; 0x1111
 800516c:	4013      	ands	r3, r2
 800516e:	2b00      	cmp	r3, #0
 8005170:	d10f      	bne.n	8005192 <HAL_TIM_OC_Stop_IT+0xf2>
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	6a1a      	ldr	r2, [r3, #32]
 8005178:	f240 4344 	movw	r3, #1092	; 0x444
 800517c:	4013      	ands	r3, r2
 800517e:	2b00      	cmp	r3, #0
 8005180:	d107      	bne.n	8005192 <HAL_TIM_OC_Stop_IT+0xf2>
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005190:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	6a1a      	ldr	r2, [r3, #32]
 8005198:	f241 1311 	movw	r3, #4369	; 0x1111
 800519c:	4013      	ands	r3, r2
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d10f      	bne.n	80051c2 <HAL_TIM_OC_Stop_IT+0x122>
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	6a1a      	ldr	r2, [r3, #32]
 80051a8:	f240 4344 	movw	r3, #1092	; 0x444
 80051ac:	4013      	ands	r3, r2
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d107      	bne.n	80051c2 <HAL_TIM_OC_Stop_IT+0x122>
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	681a      	ldr	r2, [r3, #0]
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f022 0201 	bic.w	r2, r2, #1
 80051c0:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80051c2:	683b      	ldr	r3, [r7, #0]
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d104      	bne.n	80051d2 <HAL_TIM_OC_Stop_IT+0x132>
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2201      	movs	r2, #1
 80051cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80051d0:	e013      	b.n	80051fa <HAL_TIM_OC_Stop_IT+0x15a>
 80051d2:	683b      	ldr	r3, [r7, #0]
 80051d4:	2b04      	cmp	r3, #4
 80051d6:	d104      	bne.n	80051e2 <HAL_TIM_OC_Stop_IT+0x142>
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2201      	movs	r2, #1
 80051dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80051e0:	e00b      	b.n	80051fa <HAL_TIM_OC_Stop_IT+0x15a>
 80051e2:	683b      	ldr	r3, [r7, #0]
 80051e4:	2b08      	cmp	r3, #8
 80051e6:	d104      	bne.n	80051f2 <HAL_TIM_OC_Stop_IT+0x152>
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2201      	movs	r2, #1
 80051ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80051f0:	e003      	b.n	80051fa <HAL_TIM_OC_Stop_IT+0x15a>
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	2201      	movs	r2, #1
 80051f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 80051fa:	2300      	movs	r3, #0
}
 80051fc:	4618      	mov	r0, r3
 80051fe:	3708      	adds	r7, #8
 8005200:	46bd      	mov	sp, r7
 8005202:	bd80      	pop	{r7, pc}
 8005204:	40010000 	.word	0x40010000
 8005208:	40010400 	.word	0x40010400

0800520c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800520c:	b580      	push	{r7, lr}
 800520e:	b082      	sub	sp, #8
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	691b      	ldr	r3, [r3, #16]
 800521a:	f003 0302 	and.w	r3, r3, #2
 800521e:	2b02      	cmp	r3, #2
 8005220:	d122      	bne.n	8005268 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	68db      	ldr	r3, [r3, #12]
 8005228:	f003 0302 	and.w	r3, r3, #2
 800522c:	2b02      	cmp	r3, #2
 800522e:	d11b      	bne.n	8005268 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f06f 0202 	mvn.w	r2, #2
 8005238:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	2201      	movs	r2, #1
 800523e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	699b      	ldr	r3, [r3, #24]
 8005246:	f003 0303 	and.w	r3, r3, #3
 800524a:	2b00      	cmp	r3, #0
 800524c:	d003      	beq.n	8005256 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800524e:	6878      	ldr	r0, [r7, #4]
 8005250:	f000 fa0a 	bl	8005668 <HAL_TIM_IC_CaptureCallback>
 8005254:	e005      	b.n	8005262 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005256:	6878      	ldr	r0, [r7, #4]
 8005258:	f000 f9fc 	bl	8005654 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800525c:	6878      	ldr	r0, [r7, #4]
 800525e:	f000 fa0d 	bl	800567c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	2200      	movs	r2, #0
 8005266:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	691b      	ldr	r3, [r3, #16]
 800526e:	f003 0304 	and.w	r3, r3, #4
 8005272:	2b04      	cmp	r3, #4
 8005274:	d122      	bne.n	80052bc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	68db      	ldr	r3, [r3, #12]
 800527c:	f003 0304 	and.w	r3, r3, #4
 8005280:	2b04      	cmp	r3, #4
 8005282:	d11b      	bne.n	80052bc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f06f 0204 	mvn.w	r2, #4
 800528c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	2202      	movs	r2, #2
 8005292:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	699b      	ldr	r3, [r3, #24]
 800529a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d003      	beq.n	80052aa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80052a2:	6878      	ldr	r0, [r7, #4]
 80052a4:	f000 f9e0 	bl	8005668 <HAL_TIM_IC_CaptureCallback>
 80052a8:	e005      	b.n	80052b6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80052aa:	6878      	ldr	r0, [r7, #4]
 80052ac:	f000 f9d2 	bl	8005654 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052b0:	6878      	ldr	r0, [r7, #4]
 80052b2:	f000 f9e3 	bl	800567c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	2200      	movs	r2, #0
 80052ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	691b      	ldr	r3, [r3, #16]
 80052c2:	f003 0308 	and.w	r3, r3, #8
 80052c6:	2b08      	cmp	r3, #8
 80052c8:	d122      	bne.n	8005310 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	68db      	ldr	r3, [r3, #12]
 80052d0:	f003 0308 	and.w	r3, r3, #8
 80052d4:	2b08      	cmp	r3, #8
 80052d6:	d11b      	bne.n	8005310 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f06f 0208 	mvn.w	r2, #8
 80052e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	2204      	movs	r2, #4
 80052e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	69db      	ldr	r3, [r3, #28]
 80052ee:	f003 0303 	and.w	r3, r3, #3
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d003      	beq.n	80052fe <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80052f6:	6878      	ldr	r0, [r7, #4]
 80052f8:	f000 f9b6 	bl	8005668 <HAL_TIM_IC_CaptureCallback>
 80052fc:	e005      	b.n	800530a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80052fe:	6878      	ldr	r0, [r7, #4]
 8005300:	f000 f9a8 	bl	8005654 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005304:	6878      	ldr	r0, [r7, #4]
 8005306:	f000 f9b9 	bl	800567c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	2200      	movs	r2, #0
 800530e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	691b      	ldr	r3, [r3, #16]
 8005316:	f003 0310 	and.w	r3, r3, #16
 800531a:	2b10      	cmp	r3, #16
 800531c:	d122      	bne.n	8005364 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	68db      	ldr	r3, [r3, #12]
 8005324:	f003 0310 	and.w	r3, r3, #16
 8005328:	2b10      	cmp	r3, #16
 800532a:	d11b      	bne.n	8005364 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f06f 0210 	mvn.w	r2, #16
 8005334:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	2208      	movs	r2, #8
 800533a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	69db      	ldr	r3, [r3, #28]
 8005342:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005346:	2b00      	cmp	r3, #0
 8005348:	d003      	beq.n	8005352 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800534a:	6878      	ldr	r0, [r7, #4]
 800534c:	f000 f98c 	bl	8005668 <HAL_TIM_IC_CaptureCallback>
 8005350:	e005      	b.n	800535e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005352:	6878      	ldr	r0, [r7, #4]
 8005354:	f000 f97e 	bl	8005654 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005358:	6878      	ldr	r0, [r7, #4]
 800535a:	f000 f98f 	bl	800567c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	2200      	movs	r2, #0
 8005362:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	691b      	ldr	r3, [r3, #16]
 800536a:	f003 0301 	and.w	r3, r3, #1
 800536e:	2b01      	cmp	r3, #1
 8005370:	d10e      	bne.n	8005390 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	68db      	ldr	r3, [r3, #12]
 8005378:	f003 0301 	and.w	r3, r3, #1
 800537c:	2b01      	cmp	r3, #1
 800537e:	d107      	bne.n	8005390 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f06f 0201 	mvn.w	r2, #1
 8005388:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800538a:	6878      	ldr	r0, [r7, #4]
 800538c:	f7fb fe00 	bl	8000f90 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	691b      	ldr	r3, [r3, #16]
 8005396:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800539a:	2b80      	cmp	r3, #128	; 0x80
 800539c:	d10e      	bne.n	80053bc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	68db      	ldr	r3, [r3, #12]
 80053a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053a8:	2b80      	cmp	r3, #128	; 0x80
 80053aa:	d107      	bne.n	80053bc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80053b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80053b6:	6878      	ldr	r0, [r7, #4]
 80053b8:	f000 fd18 	bl	8005dec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	691b      	ldr	r3, [r3, #16]
 80053c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053c6:	2b40      	cmp	r3, #64	; 0x40
 80053c8:	d10e      	bne.n	80053e8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	68db      	ldr	r3, [r3, #12]
 80053d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053d4:	2b40      	cmp	r3, #64	; 0x40
 80053d6:	d107      	bne.n	80053e8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80053e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80053e2:	6878      	ldr	r0, [r7, #4]
 80053e4:	f000 f954 	bl	8005690 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	691b      	ldr	r3, [r3, #16]
 80053ee:	f003 0320 	and.w	r3, r3, #32
 80053f2:	2b20      	cmp	r3, #32
 80053f4:	d10e      	bne.n	8005414 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	68db      	ldr	r3, [r3, #12]
 80053fc:	f003 0320 	and.w	r3, r3, #32
 8005400:	2b20      	cmp	r3, #32
 8005402:	d107      	bne.n	8005414 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f06f 0220 	mvn.w	r2, #32
 800540c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800540e:	6878      	ldr	r0, [r7, #4]
 8005410:	f000 fce2 	bl	8005dd8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005414:	bf00      	nop
 8005416:	3708      	adds	r7, #8
 8005418:	46bd      	mov	sp, r7
 800541a:	bd80      	pop	{r7, pc}

0800541c <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800541c:	b580      	push	{r7, lr}
 800541e:	b084      	sub	sp, #16
 8005420:	af00      	add	r7, sp, #0
 8005422:	60f8      	str	r0, [r7, #12]
 8005424:	60b9      	str	r1, [r7, #8]
 8005426:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800542e:	2b01      	cmp	r3, #1
 8005430:	d101      	bne.n	8005436 <HAL_TIM_OC_ConfigChannel+0x1a>
 8005432:	2302      	movs	r3, #2
 8005434:	e046      	b.n	80054c4 <HAL_TIM_OC_ConfigChannel+0xa8>
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	2201      	movs	r2, #1
 800543a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	2b0c      	cmp	r3, #12
 8005442:	d839      	bhi.n	80054b8 <HAL_TIM_OC_ConfigChannel+0x9c>
 8005444:	a201      	add	r2, pc, #4	; (adr r2, 800544c <HAL_TIM_OC_ConfigChannel+0x30>)
 8005446:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800544a:	bf00      	nop
 800544c:	08005481 	.word	0x08005481
 8005450:	080054b9 	.word	0x080054b9
 8005454:	080054b9 	.word	0x080054b9
 8005458:	080054b9 	.word	0x080054b9
 800545c:	0800548f 	.word	0x0800548f
 8005460:	080054b9 	.word	0x080054b9
 8005464:	080054b9 	.word	0x080054b9
 8005468:	080054b9 	.word	0x080054b9
 800546c:	0800549d 	.word	0x0800549d
 8005470:	080054b9 	.word	0x080054b9
 8005474:	080054b9 	.word	0x080054b9
 8005478:	080054b9 	.word	0x080054b9
 800547c:	080054ab 	.word	0x080054ab
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	68b9      	ldr	r1, [r7, #8]
 8005486:	4618      	mov	r0, r3
 8005488:	f000 f9ba 	bl	8005800 <TIM_OC1_SetConfig>
      break;
 800548c:	e015      	b.n	80054ba <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	68b9      	ldr	r1, [r7, #8]
 8005494:	4618      	mov	r0, r3
 8005496:	f000 fa23 	bl	80058e0 <TIM_OC2_SetConfig>
      break;
 800549a:	e00e      	b.n	80054ba <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	68b9      	ldr	r1, [r7, #8]
 80054a2:	4618      	mov	r0, r3
 80054a4:	f000 fa92 	bl	80059cc <TIM_OC3_SetConfig>
      break;
 80054a8:	e007      	b.n	80054ba <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	68b9      	ldr	r1, [r7, #8]
 80054b0:	4618      	mov	r0, r3
 80054b2:	f000 faff 	bl	8005ab4 <TIM_OC4_SetConfig>
      break;
 80054b6:	e000      	b.n	80054ba <HAL_TIM_OC_ConfigChannel+0x9e>
    }

    default:
      break;
 80054b8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	2200      	movs	r2, #0
 80054be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80054c2:	2300      	movs	r3, #0
}
 80054c4:	4618      	mov	r0, r3
 80054c6:	3710      	adds	r7, #16
 80054c8:	46bd      	mov	sp, r7
 80054ca:	bd80      	pop	{r7, pc}

080054cc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80054cc:	b580      	push	{r7, lr}
 80054ce:	b084      	sub	sp, #16
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	6078      	str	r0, [r7, #4]
 80054d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80054dc:	2b01      	cmp	r3, #1
 80054de:	d101      	bne.n	80054e4 <HAL_TIM_ConfigClockSource+0x18>
 80054e0:	2302      	movs	r3, #2
 80054e2:	e0b3      	b.n	800564c <HAL_TIM_ConfigClockSource+0x180>
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2201      	movs	r2, #1
 80054e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2202      	movs	r2, #2
 80054f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	689b      	ldr	r3, [r3, #8]
 80054fa:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005502:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800550a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	68fa      	ldr	r2, [r7, #12]
 8005512:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005514:	683b      	ldr	r3, [r7, #0]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800551c:	d03e      	beq.n	800559c <HAL_TIM_ConfigClockSource+0xd0>
 800551e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005522:	f200 8087 	bhi.w	8005634 <HAL_TIM_ConfigClockSource+0x168>
 8005526:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800552a:	f000 8085 	beq.w	8005638 <HAL_TIM_ConfigClockSource+0x16c>
 800552e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005532:	d87f      	bhi.n	8005634 <HAL_TIM_ConfigClockSource+0x168>
 8005534:	2b70      	cmp	r3, #112	; 0x70
 8005536:	d01a      	beq.n	800556e <HAL_TIM_ConfigClockSource+0xa2>
 8005538:	2b70      	cmp	r3, #112	; 0x70
 800553a:	d87b      	bhi.n	8005634 <HAL_TIM_ConfigClockSource+0x168>
 800553c:	2b60      	cmp	r3, #96	; 0x60
 800553e:	d050      	beq.n	80055e2 <HAL_TIM_ConfigClockSource+0x116>
 8005540:	2b60      	cmp	r3, #96	; 0x60
 8005542:	d877      	bhi.n	8005634 <HAL_TIM_ConfigClockSource+0x168>
 8005544:	2b50      	cmp	r3, #80	; 0x50
 8005546:	d03c      	beq.n	80055c2 <HAL_TIM_ConfigClockSource+0xf6>
 8005548:	2b50      	cmp	r3, #80	; 0x50
 800554a:	d873      	bhi.n	8005634 <HAL_TIM_ConfigClockSource+0x168>
 800554c:	2b40      	cmp	r3, #64	; 0x40
 800554e:	d058      	beq.n	8005602 <HAL_TIM_ConfigClockSource+0x136>
 8005550:	2b40      	cmp	r3, #64	; 0x40
 8005552:	d86f      	bhi.n	8005634 <HAL_TIM_ConfigClockSource+0x168>
 8005554:	2b30      	cmp	r3, #48	; 0x30
 8005556:	d064      	beq.n	8005622 <HAL_TIM_ConfigClockSource+0x156>
 8005558:	2b30      	cmp	r3, #48	; 0x30
 800555a:	d86b      	bhi.n	8005634 <HAL_TIM_ConfigClockSource+0x168>
 800555c:	2b20      	cmp	r3, #32
 800555e:	d060      	beq.n	8005622 <HAL_TIM_ConfigClockSource+0x156>
 8005560:	2b20      	cmp	r3, #32
 8005562:	d867      	bhi.n	8005634 <HAL_TIM_ConfigClockSource+0x168>
 8005564:	2b00      	cmp	r3, #0
 8005566:	d05c      	beq.n	8005622 <HAL_TIM_ConfigClockSource+0x156>
 8005568:	2b10      	cmp	r3, #16
 800556a:	d05a      	beq.n	8005622 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800556c:	e062      	b.n	8005634 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	6818      	ldr	r0, [r3, #0]
 8005572:	683b      	ldr	r3, [r7, #0]
 8005574:	6899      	ldr	r1, [r3, #8]
 8005576:	683b      	ldr	r3, [r7, #0]
 8005578:	685a      	ldr	r2, [r3, #4]
 800557a:	683b      	ldr	r3, [r7, #0]
 800557c:	68db      	ldr	r3, [r3, #12]
 800557e:	f000 fb69 	bl	8005c54 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	689b      	ldr	r3, [r3, #8]
 8005588:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005590:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	68fa      	ldr	r2, [r7, #12]
 8005598:	609a      	str	r2, [r3, #8]
      break;
 800559a:	e04e      	b.n	800563a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	6818      	ldr	r0, [r3, #0]
 80055a0:	683b      	ldr	r3, [r7, #0]
 80055a2:	6899      	ldr	r1, [r3, #8]
 80055a4:	683b      	ldr	r3, [r7, #0]
 80055a6:	685a      	ldr	r2, [r3, #4]
 80055a8:	683b      	ldr	r3, [r7, #0]
 80055aa:	68db      	ldr	r3, [r3, #12]
 80055ac:	f000 fb52 	bl	8005c54 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	689a      	ldr	r2, [r3, #8]
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80055be:	609a      	str	r2, [r3, #8]
      break;
 80055c0:	e03b      	b.n	800563a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	6818      	ldr	r0, [r3, #0]
 80055c6:	683b      	ldr	r3, [r7, #0]
 80055c8:	6859      	ldr	r1, [r3, #4]
 80055ca:	683b      	ldr	r3, [r7, #0]
 80055cc:	68db      	ldr	r3, [r3, #12]
 80055ce:	461a      	mov	r2, r3
 80055d0:	f000 fac6 	bl	8005b60 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	2150      	movs	r1, #80	; 0x50
 80055da:	4618      	mov	r0, r3
 80055dc:	f000 fb1f 	bl	8005c1e <TIM_ITRx_SetConfig>
      break;
 80055e0:	e02b      	b.n	800563a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	6818      	ldr	r0, [r3, #0]
 80055e6:	683b      	ldr	r3, [r7, #0]
 80055e8:	6859      	ldr	r1, [r3, #4]
 80055ea:	683b      	ldr	r3, [r7, #0]
 80055ec:	68db      	ldr	r3, [r3, #12]
 80055ee:	461a      	mov	r2, r3
 80055f0:	f000 fae5 	bl	8005bbe <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	2160      	movs	r1, #96	; 0x60
 80055fa:	4618      	mov	r0, r3
 80055fc:	f000 fb0f 	bl	8005c1e <TIM_ITRx_SetConfig>
      break;
 8005600:	e01b      	b.n	800563a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	6818      	ldr	r0, [r3, #0]
 8005606:	683b      	ldr	r3, [r7, #0]
 8005608:	6859      	ldr	r1, [r3, #4]
 800560a:	683b      	ldr	r3, [r7, #0]
 800560c:	68db      	ldr	r3, [r3, #12]
 800560e:	461a      	mov	r2, r3
 8005610:	f000 faa6 	bl	8005b60 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	2140      	movs	r1, #64	; 0x40
 800561a:	4618      	mov	r0, r3
 800561c:	f000 faff 	bl	8005c1e <TIM_ITRx_SetConfig>
      break;
 8005620:	e00b      	b.n	800563a <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681a      	ldr	r2, [r3, #0]
 8005626:	683b      	ldr	r3, [r7, #0]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	4619      	mov	r1, r3
 800562c:	4610      	mov	r0, r2
 800562e:	f000 faf6 	bl	8005c1e <TIM_ITRx_SetConfig>
        break;
 8005632:	e002      	b.n	800563a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8005634:	bf00      	nop
 8005636:	e000      	b.n	800563a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8005638:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	2201      	movs	r2, #1
 800563e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	2200      	movs	r2, #0
 8005646:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800564a:	2300      	movs	r3, #0
}
 800564c:	4618      	mov	r0, r3
 800564e:	3710      	adds	r7, #16
 8005650:	46bd      	mov	sp, r7
 8005652:	bd80      	pop	{r7, pc}

08005654 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005654:	b480      	push	{r7}
 8005656:	b083      	sub	sp, #12
 8005658:	af00      	add	r7, sp, #0
 800565a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800565c:	bf00      	nop
 800565e:	370c      	adds	r7, #12
 8005660:	46bd      	mov	sp, r7
 8005662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005666:	4770      	bx	lr

08005668 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005668:	b480      	push	{r7}
 800566a:	b083      	sub	sp, #12
 800566c:	af00      	add	r7, sp, #0
 800566e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005670:	bf00      	nop
 8005672:	370c      	adds	r7, #12
 8005674:	46bd      	mov	sp, r7
 8005676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567a:	4770      	bx	lr

0800567c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800567c:	b480      	push	{r7}
 800567e:	b083      	sub	sp, #12
 8005680:	af00      	add	r7, sp, #0
 8005682:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005684:	bf00      	nop
 8005686:	370c      	adds	r7, #12
 8005688:	46bd      	mov	sp, r7
 800568a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568e:	4770      	bx	lr

08005690 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005690:	b480      	push	{r7}
 8005692:	b083      	sub	sp, #12
 8005694:	af00      	add	r7, sp, #0
 8005696:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005698:	bf00      	nop
 800569a:	370c      	adds	r7, #12
 800569c:	46bd      	mov	sp, r7
 800569e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a2:	4770      	bx	lr

080056a4 <HAL_TIM_OC_GetState>:
  * @brief  Return the TIM OC handle state.
  * @param  htim TIM Output Compare handle
  * @retval HAL state
  */
HAL_TIM_StateTypeDef HAL_TIM_OC_GetState(TIM_HandleTypeDef *htim)
{
 80056a4:	b480      	push	{r7}
 80056a6:	b083      	sub	sp, #12
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	6078      	str	r0, [r7, #4]
  return htim->State;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056b2:	b2db      	uxtb	r3, r3
}
 80056b4:	4618      	mov	r0, r3
 80056b6:	370c      	adds	r7, #12
 80056b8:	46bd      	mov	sp, r7
 80056ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056be:	4770      	bx	lr

080056c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80056c0:	b480      	push	{r7}
 80056c2:	b085      	sub	sp, #20
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	6078      	str	r0, [r7, #4]
 80056c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	4a40      	ldr	r2, [pc, #256]	; (80057d4 <TIM_Base_SetConfig+0x114>)
 80056d4:	4293      	cmp	r3, r2
 80056d6:	d013      	beq.n	8005700 <TIM_Base_SetConfig+0x40>
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056de:	d00f      	beq.n	8005700 <TIM_Base_SetConfig+0x40>
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	4a3d      	ldr	r2, [pc, #244]	; (80057d8 <TIM_Base_SetConfig+0x118>)
 80056e4:	4293      	cmp	r3, r2
 80056e6:	d00b      	beq.n	8005700 <TIM_Base_SetConfig+0x40>
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	4a3c      	ldr	r2, [pc, #240]	; (80057dc <TIM_Base_SetConfig+0x11c>)
 80056ec:	4293      	cmp	r3, r2
 80056ee:	d007      	beq.n	8005700 <TIM_Base_SetConfig+0x40>
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	4a3b      	ldr	r2, [pc, #236]	; (80057e0 <TIM_Base_SetConfig+0x120>)
 80056f4:	4293      	cmp	r3, r2
 80056f6:	d003      	beq.n	8005700 <TIM_Base_SetConfig+0x40>
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	4a3a      	ldr	r2, [pc, #232]	; (80057e4 <TIM_Base_SetConfig+0x124>)
 80056fc:	4293      	cmp	r3, r2
 80056fe:	d108      	bne.n	8005712 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005706:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005708:	683b      	ldr	r3, [r7, #0]
 800570a:	685b      	ldr	r3, [r3, #4]
 800570c:	68fa      	ldr	r2, [r7, #12]
 800570e:	4313      	orrs	r3, r2
 8005710:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	4a2f      	ldr	r2, [pc, #188]	; (80057d4 <TIM_Base_SetConfig+0x114>)
 8005716:	4293      	cmp	r3, r2
 8005718:	d02b      	beq.n	8005772 <TIM_Base_SetConfig+0xb2>
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005720:	d027      	beq.n	8005772 <TIM_Base_SetConfig+0xb2>
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	4a2c      	ldr	r2, [pc, #176]	; (80057d8 <TIM_Base_SetConfig+0x118>)
 8005726:	4293      	cmp	r3, r2
 8005728:	d023      	beq.n	8005772 <TIM_Base_SetConfig+0xb2>
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	4a2b      	ldr	r2, [pc, #172]	; (80057dc <TIM_Base_SetConfig+0x11c>)
 800572e:	4293      	cmp	r3, r2
 8005730:	d01f      	beq.n	8005772 <TIM_Base_SetConfig+0xb2>
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	4a2a      	ldr	r2, [pc, #168]	; (80057e0 <TIM_Base_SetConfig+0x120>)
 8005736:	4293      	cmp	r3, r2
 8005738:	d01b      	beq.n	8005772 <TIM_Base_SetConfig+0xb2>
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	4a29      	ldr	r2, [pc, #164]	; (80057e4 <TIM_Base_SetConfig+0x124>)
 800573e:	4293      	cmp	r3, r2
 8005740:	d017      	beq.n	8005772 <TIM_Base_SetConfig+0xb2>
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	4a28      	ldr	r2, [pc, #160]	; (80057e8 <TIM_Base_SetConfig+0x128>)
 8005746:	4293      	cmp	r3, r2
 8005748:	d013      	beq.n	8005772 <TIM_Base_SetConfig+0xb2>
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	4a27      	ldr	r2, [pc, #156]	; (80057ec <TIM_Base_SetConfig+0x12c>)
 800574e:	4293      	cmp	r3, r2
 8005750:	d00f      	beq.n	8005772 <TIM_Base_SetConfig+0xb2>
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	4a26      	ldr	r2, [pc, #152]	; (80057f0 <TIM_Base_SetConfig+0x130>)
 8005756:	4293      	cmp	r3, r2
 8005758:	d00b      	beq.n	8005772 <TIM_Base_SetConfig+0xb2>
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	4a25      	ldr	r2, [pc, #148]	; (80057f4 <TIM_Base_SetConfig+0x134>)
 800575e:	4293      	cmp	r3, r2
 8005760:	d007      	beq.n	8005772 <TIM_Base_SetConfig+0xb2>
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	4a24      	ldr	r2, [pc, #144]	; (80057f8 <TIM_Base_SetConfig+0x138>)
 8005766:	4293      	cmp	r3, r2
 8005768:	d003      	beq.n	8005772 <TIM_Base_SetConfig+0xb2>
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	4a23      	ldr	r2, [pc, #140]	; (80057fc <TIM_Base_SetConfig+0x13c>)
 800576e:	4293      	cmp	r3, r2
 8005770:	d108      	bne.n	8005784 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005778:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800577a:	683b      	ldr	r3, [r7, #0]
 800577c:	68db      	ldr	r3, [r3, #12]
 800577e:	68fa      	ldr	r2, [r7, #12]
 8005780:	4313      	orrs	r3, r2
 8005782:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800578a:	683b      	ldr	r3, [r7, #0]
 800578c:	695b      	ldr	r3, [r3, #20]
 800578e:	4313      	orrs	r3, r2
 8005790:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	68fa      	ldr	r2, [r7, #12]
 8005796:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005798:	683b      	ldr	r3, [r7, #0]
 800579a:	689a      	ldr	r2, [r3, #8]
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80057a0:	683b      	ldr	r3, [r7, #0]
 80057a2:	681a      	ldr	r2, [r3, #0]
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	4a0a      	ldr	r2, [pc, #40]	; (80057d4 <TIM_Base_SetConfig+0x114>)
 80057ac:	4293      	cmp	r3, r2
 80057ae:	d003      	beq.n	80057b8 <TIM_Base_SetConfig+0xf8>
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	4a0c      	ldr	r2, [pc, #48]	; (80057e4 <TIM_Base_SetConfig+0x124>)
 80057b4:	4293      	cmp	r3, r2
 80057b6:	d103      	bne.n	80057c0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80057b8:	683b      	ldr	r3, [r7, #0]
 80057ba:	691a      	ldr	r2, [r3, #16]
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2201      	movs	r2, #1
 80057c4:	615a      	str	r2, [r3, #20]
}
 80057c6:	bf00      	nop
 80057c8:	3714      	adds	r7, #20
 80057ca:	46bd      	mov	sp, r7
 80057cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d0:	4770      	bx	lr
 80057d2:	bf00      	nop
 80057d4:	40010000 	.word	0x40010000
 80057d8:	40000400 	.word	0x40000400
 80057dc:	40000800 	.word	0x40000800
 80057e0:	40000c00 	.word	0x40000c00
 80057e4:	40010400 	.word	0x40010400
 80057e8:	40014000 	.word	0x40014000
 80057ec:	40014400 	.word	0x40014400
 80057f0:	40014800 	.word	0x40014800
 80057f4:	40001800 	.word	0x40001800
 80057f8:	40001c00 	.word	0x40001c00
 80057fc:	40002000 	.word	0x40002000

08005800 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005800:	b480      	push	{r7}
 8005802:	b087      	sub	sp, #28
 8005804:	af00      	add	r7, sp, #0
 8005806:	6078      	str	r0, [r7, #4]
 8005808:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	6a1b      	ldr	r3, [r3, #32]
 800580e:	f023 0201 	bic.w	r2, r3, #1
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	6a1b      	ldr	r3, [r3, #32]
 800581a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	685b      	ldr	r3, [r3, #4]
 8005820:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	699b      	ldr	r3, [r3, #24]
 8005826:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800582e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	f023 0303 	bic.w	r3, r3, #3
 8005836:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005838:	683b      	ldr	r3, [r7, #0]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	68fa      	ldr	r2, [r7, #12]
 800583e:	4313      	orrs	r3, r2
 8005840:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005842:	697b      	ldr	r3, [r7, #20]
 8005844:	f023 0302 	bic.w	r3, r3, #2
 8005848:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800584a:	683b      	ldr	r3, [r7, #0]
 800584c:	689b      	ldr	r3, [r3, #8]
 800584e:	697a      	ldr	r2, [r7, #20]
 8005850:	4313      	orrs	r3, r2
 8005852:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	4a20      	ldr	r2, [pc, #128]	; (80058d8 <TIM_OC1_SetConfig+0xd8>)
 8005858:	4293      	cmp	r3, r2
 800585a:	d003      	beq.n	8005864 <TIM_OC1_SetConfig+0x64>
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	4a1f      	ldr	r2, [pc, #124]	; (80058dc <TIM_OC1_SetConfig+0xdc>)
 8005860:	4293      	cmp	r3, r2
 8005862:	d10c      	bne.n	800587e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005864:	697b      	ldr	r3, [r7, #20]
 8005866:	f023 0308 	bic.w	r3, r3, #8
 800586a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800586c:	683b      	ldr	r3, [r7, #0]
 800586e:	68db      	ldr	r3, [r3, #12]
 8005870:	697a      	ldr	r2, [r7, #20]
 8005872:	4313      	orrs	r3, r2
 8005874:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005876:	697b      	ldr	r3, [r7, #20]
 8005878:	f023 0304 	bic.w	r3, r3, #4
 800587c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	4a15      	ldr	r2, [pc, #84]	; (80058d8 <TIM_OC1_SetConfig+0xd8>)
 8005882:	4293      	cmp	r3, r2
 8005884:	d003      	beq.n	800588e <TIM_OC1_SetConfig+0x8e>
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	4a14      	ldr	r2, [pc, #80]	; (80058dc <TIM_OC1_SetConfig+0xdc>)
 800588a:	4293      	cmp	r3, r2
 800588c:	d111      	bne.n	80058b2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800588e:	693b      	ldr	r3, [r7, #16]
 8005890:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005894:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005896:	693b      	ldr	r3, [r7, #16]
 8005898:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800589c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800589e:	683b      	ldr	r3, [r7, #0]
 80058a0:	695b      	ldr	r3, [r3, #20]
 80058a2:	693a      	ldr	r2, [r7, #16]
 80058a4:	4313      	orrs	r3, r2
 80058a6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80058a8:	683b      	ldr	r3, [r7, #0]
 80058aa:	699b      	ldr	r3, [r3, #24]
 80058ac:	693a      	ldr	r2, [r7, #16]
 80058ae:	4313      	orrs	r3, r2
 80058b0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	693a      	ldr	r2, [r7, #16]
 80058b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	68fa      	ldr	r2, [r7, #12]
 80058bc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80058be:	683b      	ldr	r3, [r7, #0]
 80058c0:	685a      	ldr	r2, [r3, #4]
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	697a      	ldr	r2, [r7, #20]
 80058ca:	621a      	str	r2, [r3, #32]
}
 80058cc:	bf00      	nop
 80058ce:	371c      	adds	r7, #28
 80058d0:	46bd      	mov	sp, r7
 80058d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d6:	4770      	bx	lr
 80058d8:	40010000 	.word	0x40010000
 80058dc:	40010400 	.word	0x40010400

080058e0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80058e0:	b480      	push	{r7}
 80058e2:	b087      	sub	sp, #28
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	6078      	str	r0, [r7, #4]
 80058e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	6a1b      	ldr	r3, [r3, #32]
 80058ee:	f023 0210 	bic.w	r2, r3, #16
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	6a1b      	ldr	r3, [r3, #32]
 80058fa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	685b      	ldr	r3, [r3, #4]
 8005900:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	699b      	ldr	r3, [r3, #24]
 8005906:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800590e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005916:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005918:	683b      	ldr	r3, [r7, #0]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	021b      	lsls	r3, r3, #8
 800591e:	68fa      	ldr	r2, [r7, #12]
 8005920:	4313      	orrs	r3, r2
 8005922:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005924:	697b      	ldr	r3, [r7, #20]
 8005926:	f023 0320 	bic.w	r3, r3, #32
 800592a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800592c:	683b      	ldr	r3, [r7, #0]
 800592e:	689b      	ldr	r3, [r3, #8]
 8005930:	011b      	lsls	r3, r3, #4
 8005932:	697a      	ldr	r2, [r7, #20]
 8005934:	4313      	orrs	r3, r2
 8005936:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	4a22      	ldr	r2, [pc, #136]	; (80059c4 <TIM_OC2_SetConfig+0xe4>)
 800593c:	4293      	cmp	r3, r2
 800593e:	d003      	beq.n	8005948 <TIM_OC2_SetConfig+0x68>
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	4a21      	ldr	r2, [pc, #132]	; (80059c8 <TIM_OC2_SetConfig+0xe8>)
 8005944:	4293      	cmp	r3, r2
 8005946:	d10d      	bne.n	8005964 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005948:	697b      	ldr	r3, [r7, #20]
 800594a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800594e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005950:	683b      	ldr	r3, [r7, #0]
 8005952:	68db      	ldr	r3, [r3, #12]
 8005954:	011b      	lsls	r3, r3, #4
 8005956:	697a      	ldr	r2, [r7, #20]
 8005958:	4313      	orrs	r3, r2
 800595a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800595c:	697b      	ldr	r3, [r7, #20]
 800595e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005962:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	4a17      	ldr	r2, [pc, #92]	; (80059c4 <TIM_OC2_SetConfig+0xe4>)
 8005968:	4293      	cmp	r3, r2
 800596a:	d003      	beq.n	8005974 <TIM_OC2_SetConfig+0x94>
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	4a16      	ldr	r2, [pc, #88]	; (80059c8 <TIM_OC2_SetConfig+0xe8>)
 8005970:	4293      	cmp	r3, r2
 8005972:	d113      	bne.n	800599c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005974:	693b      	ldr	r3, [r7, #16]
 8005976:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800597a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800597c:	693b      	ldr	r3, [r7, #16]
 800597e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005982:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005984:	683b      	ldr	r3, [r7, #0]
 8005986:	695b      	ldr	r3, [r3, #20]
 8005988:	009b      	lsls	r3, r3, #2
 800598a:	693a      	ldr	r2, [r7, #16]
 800598c:	4313      	orrs	r3, r2
 800598e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005990:	683b      	ldr	r3, [r7, #0]
 8005992:	699b      	ldr	r3, [r3, #24]
 8005994:	009b      	lsls	r3, r3, #2
 8005996:	693a      	ldr	r2, [r7, #16]
 8005998:	4313      	orrs	r3, r2
 800599a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	693a      	ldr	r2, [r7, #16]
 80059a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	68fa      	ldr	r2, [r7, #12]
 80059a6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80059a8:	683b      	ldr	r3, [r7, #0]
 80059aa:	685a      	ldr	r2, [r3, #4]
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	697a      	ldr	r2, [r7, #20]
 80059b4:	621a      	str	r2, [r3, #32]
}
 80059b6:	bf00      	nop
 80059b8:	371c      	adds	r7, #28
 80059ba:	46bd      	mov	sp, r7
 80059bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c0:	4770      	bx	lr
 80059c2:	bf00      	nop
 80059c4:	40010000 	.word	0x40010000
 80059c8:	40010400 	.word	0x40010400

080059cc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80059cc:	b480      	push	{r7}
 80059ce:	b087      	sub	sp, #28
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	6078      	str	r0, [r7, #4]
 80059d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	6a1b      	ldr	r3, [r3, #32]
 80059da:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	6a1b      	ldr	r3, [r3, #32]
 80059e6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	685b      	ldr	r3, [r3, #4]
 80059ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	69db      	ldr	r3, [r3, #28]
 80059f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	f023 0303 	bic.w	r3, r3, #3
 8005a02:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005a04:	683b      	ldr	r3, [r7, #0]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	68fa      	ldr	r2, [r7, #12]
 8005a0a:	4313      	orrs	r3, r2
 8005a0c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005a0e:	697b      	ldr	r3, [r7, #20]
 8005a10:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005a14:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005a16:	683b      	ldr	r3, [r7, #0]
 8005a18:	689b      	ldr	r3, [r3, #8]
 8005a1a:	021b      	lsls	r3, r3, #8
 8005a1c:	697a      	ldr	r2, [r7, #20]
 8005a1e:	4313      	orrs	r3, r2
 8005a20:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	4a21      	ldr	r2, [pc, #132]	; (8005aac <TIM_OC3_SetConfig+0xe0>)
 8005a26:	4293      	cmp	r3, r2
 8005a28:	d003      	beq.n	8005a32 <TIM_OC3_SetConfig+0x66>
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	4a20      	ldr	r2, [pc, #128]	; (8005ab0 <TIM_OC3_SetConfig+0xe4>)
 8005a2e:	4293      	cmp	r3, r2
 8005a30:	d10d      	bne.n	8005a4e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005a32:	697b      	ldr	r3, [r7, #20]
 8005a34:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005a38:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005a3a:	683b      	ldr	r3, [r7, #0]
 8005a3c:	68db      	ldr	r3, [r3, #12]
 8005a3e:	021b      	lsls	r3, r3, #8
 8005a40:	697a      	ldr	r2, [r7, #20]
 8005a42:	4313      	orrs	r3, r2
 8005a44:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005a46:	697b      	ldr	r3, [r7, #20]
 8005a48:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005a4c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	4a16      	ldr	r2, [pc, #88]	; (8005aac <TIM_OC3_SetConfig+0xe0>)
 8005a52:	4293      	cmp	r3, r2
 8005a54:	d003      	beq.n	8005a5e <TIM_OC3_SetConfig+0x92>
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	4a15      	ldr	r2, [pc, #84]	; (8005ab0 <TIM_OC3_SetConfig+0xe4>)
 8005a5a:	4293      	cmp	r3, r2
 8005a5c:	d113      	bne.n	8005a86 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005a5e:	693b      	ldr	r3, [r7, #16]
 8005a60:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005a64:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005a66:	693b      	ldr	r3, [r7, #16]
 8005a68:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005a6c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005a6e:	683b      	ldr	r3, [r7, #0]
 8005a70:	695b      	ldr	r3, [r3, #20]
 8005a72:	011b      	lsls	r3, r3, #4
 8005a74:	693a      	ldr	r2, [r7, #16]
 8005a76:	4313      	orrs	r3, r2
 8005a78:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005a7a:	683b      	ldr	r3, [r7, #0]
 8005a7c:	699b      	ldr	r3, [r3, #24]
 8005a7e:	011b      	lsls	r3, r3, #4
 8005a80:	693a      	ldr	r2, [r7, #16]
 8005a82:	4313      	orrs	r3, r2
 8005a84:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	693a      	ldr	r2, [r7, #16]
 8005a8a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	68fa      	ldr	r2, [r7, #12]
 8005a90:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005a92:	683b      	ldr	r3, [r7, #0]
 8005a94:	685a      	ldr	r2, [r3, #4]
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	697a      	ldr	r2, [r7, #20]
 8005a9e:	621a      	str	r2, [r3, #32]
}
 8005aa0:	bf00      	nop
 8005aa2:	371c      	adds	r7, #28
 8005aa4:	46bd      	mov	sp, r7
 8005aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aaa:	4770      	bx	lr
 8005aac:	40010000 	.word	0x40010000
 8005ab0:	40010400 	.word	0x40010400

08005ab4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005ab4:	b480      	push	{r7}
 8005ab6:	b087      	sub	sp, #28
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	6078      	str	r0, [r7, #4]
 8005abc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	6a1b      	ldr	r3, [r3, #32]
 8005ac2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	6a1b      	ldr	r3, [r3, #32]
 8005ace:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	685b      	ldr	r3, [r3, #4]
 8005ad4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	69db      	ldr	r3, [r3, #28]
 8005ada:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ae2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005aea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005aec:	683b      	ldr	r3, [r7, #0]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	021b      	lsls	r3, r3, #8
 8005af2:	68fa      	ldr	r2, [r7, #12]
 8005af4:	4313      	orrs	r3, r2
 8005af6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005af8:	693b      	ldr	r3, [r7, #16]
 8005afa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005afe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005b00:	683b      	ldr	r3, [r7, #0]
 8005b02:	689b      	ldr	r3, [r3, #8]
 8005b04:	031b      	lsls	r3, r3, #12
 8005b06:	693a      	ldr	r2, [r7, #16]
 8005b08:	4313      	orrs	r3, r2
 8005b0a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	4a12      	ldr	r2, [pc, #72]	; (8005b58 <TIM_OC4_SetConfig+0xa4>)
 8005b10:	4293      	cmp	r3, r2
 8005b12:	d003      	beq.n	8005b1c <TIM_OC4_SetConfig+0x68>
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	4a11      	ldr	r2, [pc, #68]	; (8005b5c <TIM_OC4_SetConfig+0xa8>)
 8005b18:	4293      	cmp	r3, r2
 8005b1a:	d109      	bne.n	8005b30 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005b1c:	697b      	ldr	r3, [r7, #20]
 8005b1e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005b22:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005b24:	683b      	ldr	r3, [r7, #0]
 8005b26:	695b      	ldr	r3, [r3, #20]
 8005b28:	019b      	lsls	r3, r3, #6
 8005b2a:	697a      	ldr	r2, [r7, #20]
 8005b2c:	4313      	orrs	r3, r2
 8005b2e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	697a      	ldr	r2, [r7, #20]
 8005b34:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	68fa      	ldr	r2, [r7, #12]
 8005b3a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005b3c:	683b      	ldr	r3, [r7, #0]
 8005b3e:	685a      	ldr	r2, [r3, #4]
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	693a      	ldr	r2, [r7, #16]
 8005b48:	621a      	str	r2, [r3, #32]
}
 8005b4a:	bf00      	nop
 8005b4c:	371c      	adds	r7, #28
 8005b4e:	46bd      	mov	sp, r7
 8005b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b54:	4770      	bx	lr
 8005b56:	bf00      	nop
 8005b58:	40010000 	.word	0x40010000
 8005b5c:	40010400 	.word	0x40010400

08005b60 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005b60:	b480      	push	{r7}
 8005b62:	b087      	sub	sp, #28
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	60f8      	str	r0, [r7, #12]
 8005b68:	60b9      	str	r1, [r7, #8]
 8005b6a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	6a1b      	ldr	r3, [r3, #32]
 8005b70:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	6a1b      	ldr	r3, [r3, #32]
 8005b76:	f023 0201 	bic.w	r2, r3, #1
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	699b      	ldr	r3, [r3, #24]
 8005b82:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005b84:	693b      	ldr	r3, [r7, #16]
 8005b86:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005b8a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	011b      	lsls	r3, r3, #4
 8005b90:	693a      	ldr	r2, [r7, #16]
 8005b92:	4313      	orrs	r3, r2
 8005b94:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005b96:	697b      	ldr	r3, [r7, #20]
 8005b98:	f023 030a 	bic.w	r3, r3, #10
 8005b9c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005b9e:	697a      	ldr	r2, [r7, #20]
 8005ba0:	68bb      	ldr	r3, [r7, #8]
 8005ba2:	4313      	orrs	r3, r2
 8005ba4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	693a      	ldr	r2, [r7, #16]
 8005baa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	697a      	ldr	r2, [r7, #20]
 8005bb0:	621a      	str	r2, [r3, #32]
}
 8005bb2:	bf00      	nop
 8005bb4:	371c      	adds	r7, #28
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bbc:	4770      	bx	lr

08005bbe <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005bbe:	b480      	push	{r7}
 8005bc0:	b087      	sub	sp, #28
 8005bc2:	af00      	add	r7, sp, #0
 8005bc4:	60f8      	str	r0, [r7, #12]
 8005bc6:	60b9      	str	r1, [r7, #8]
 8005bc8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	6a1b      	ldr	r3, [r3, #32]
 8005bce:	f023 0210 	bic.w	r2, r3, #16
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	699b      	ldr	r3, [r3, #24]
 8005bda:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	6a1b      	ldr	r3, [r3, #32]
 8005be0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005be2:	697b      	ldr	r3, [r7, #20]
 8005be4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005be8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	031b      	lsls	r3, r3, #12
 8005bee:	697a      	ldr	r2, [r7, #20]
 8005bf0:	4313      	orrs	r3, r2
 8005bf2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005bf4:	693b      	ldr	r3, [r7, #16]
 8005bf6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005bfa:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005bfc:	68bb      	ldr	r3, [r7, #8]
 8005bfe:	011b      	lsls	r3, r3, #4
 8005c00:	693a      	ldr	r2, [r7, #16]
 8005c02:	4313      	orrs	r3, r2
 8005c04:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	697a      	ldr	r2, [r7, #20]
 8005c0a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	693a      	ldr	r2, [r7, #16]
 8005c10:	621a      	str	r2, [r3, #32]
}
 8005c12:	bf00      	nop
 8005c14:	371c      	adds	r7, #28
 8005c16:	46bd      	mov	sp, r7
 8005c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1c:	4770      	bx	lr

08005c1e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005c1e:	b480      	push	{r7}
 8005c20:	b085      	sub	sp, #20
 8005c22:	af00      	add	r7, sp, #0
 8005c24:	6078      	str	r0, [r7, #4]
 8005c26:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	689b      	ldr	r3, [r3, #8]
 8005c2c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c34:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005c36:	683a      	ldr	r2, [r7, #0]
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	4313      	orrs	r3, r2
 8005c3c:	f043 0307 	orr.w	r3, r3, #7
 8005c40:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	68fa      	ldr	r2, [r7, #12]
 8005c46:	609a      	str	r2, [r3, #8]
}
 8005c48:	bf00      	nop
 8005c4a:	3714      	adds	r7, #20
 8005c4c:	46bd      	mov	sp, r7
 8005c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c52:	4770      	bx	lr

08005c54 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005c54:	b480      	push	{r7}
 8005c56:	b087      	sub	sp, #28
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	60f8      	str	r0, [r7, #12]
 8005c5c:	60b9      	str	r1, [r7, #8]
 8005c5e:	607a      	str	r2, [r7, #4]
 8005c60:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	689b      	ldr	r3, [r3, #8]
 8005c66:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005c68:	697b      	ldr	r3, [r7, #20]
 8005c6a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005c6e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005c70:	683b      	ldr	r3, [r7, #0]
 8005c72:	021a      	lsls	r2, r3, #8
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	431a      	orrs	r2, r3
 8005c78:	68bb      	ldr	r3, [r7, #8]
 8005c7a:	4313      	orrs	r3, r2
 8005c7c:	697a      	ldr	r2, [r7, #20]
 8005c7e:	4313      	orrs	r3, r2
 8005c80:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	697a      	ldr	r2, [r7, #20]
 8005c86:	609a      	str	r2, [r3, #8]
}
 8005c88:	bf00      	nop
 8005c8a:	371c      	adds	r7, #28
 8005c8c:	46bd      	mov	sp, r7
 8005c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c92:	4770      	bx	lr

08005c94 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005c94:	b480      	push	{r7}
 8005c96:	b087      	sub	sp, #28
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	60f8      	str	r0, [r7, #12]
 8005c9c:	60b9      	str	r1, [r7, #8]
 8005c9e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005ca0:	68bb      	ldr	r3, [r7, #8]
 8005ca2:	f003 031f 	and.w	r3, r3, #31
 8005ca6:	2201      	movs	r2, #1
 8005ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8005cac:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	6a1a      	ldr	r2, [r3, #32]
 8005cb2:	697b      	ldr	r3, [r7, #20]
 8005cb4:	43db      	mvns	r3, r3
 8005cb6:	401a      	ands	r2, r3
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	6a1a      	ldr	r2, [r3, #32]
 8005cc0:	68bb      	ldr	r3, [r7, #8]
 8005cc2:	f003 031f 	and.w	r3, r3, #31
 8005cc6:	6879      	ldr	r1, [r7, #4]
 8005cc8:	fa01 f303 	lsl.w	r3, r1, r3
 8005ccc:	431a      	orrs	r2, r3
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	621a      	str	r2, [r3, #32]
}
 8005cd2:	bf00      	nop
 8005cd4:	371c      	adds	r7, #28
 8005cd6:	46bd      	mov	sp, r7
 8005cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cdc:	4770      	bx	lr
	...

08005ce0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005ce0:	b480      	push	{r7}
 8005ce2:	b085      	sub	sp, #20
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	6078      	str	r0, [r7, #4]
 8005ce8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005cf0:	2b01      	cmp	r3, #1
 8005cf2:	d101      	bne.n	8005cf8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005cf4:	2302      	movs	r3, #2
 8005cf6:	e05a      	b.n	8005dae <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	2201      	movs	r2, #1
 8005cfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	2202      	movs	r2, #2
 8005d04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	685b      	ldr	r3, [r3, #4]
 8005d0e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	689b      	ldr	r3, [r3, #8]
 8005d16:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d1e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005d20:	683b      	ldr	r3, [r7, #0]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	68fa      	ldr	r2, [r7, #12]
 8005d26:	4313      	orrs	r3, r2
 8005d28:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	68fa      	ldr	r2, [r7, #12]
 8005d30:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	4a21      	ldr	r2, [pc, #132]	; (8005dbc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005d38:	4293      	cmp	r3, r2
 8005d3a:	d022      	beq.n	8005d82 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d44:	d01d      	beq.n	8005d82 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	4a1d      	ldr	r2, [pc, #116]	; (8005dc0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005d4c:	4293      	cmp	r3, r2
 8005d4e:	d018      	beq.n	8005d82 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	4a1b      	ldr	r2, [pc, #108]	; (8005dc4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005d56:	4293      	cmp	r3, r2
 8005d58:	d013      	beq.n	8005d82 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	4a1a      	ldr	r2, [pc, #104]	; (8005dc8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005d60:	4293      	cmp	r3, r2
 8005d62:	d00e      	beq.n	8005d82 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	4a18      	ldr	r2, [pc, #96]	; (8005dcc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005d6a:	4293      	cmp	r3, r2
 8005d6c:	d009      	beq.n	8005d82 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	4a17      	ldr	r2, [pc, #92]	; (8005dd0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005d74:	4293      	cmp	r3, r2
 8005d76:	d004      	beq.n	8005d82 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	4a15      	ldr	r2, [pc, #84]	; (8005dd4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005d7e:	4293      	cmp	r3, r2
 8005d80:	d10c      	bne.n	8005d9c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005d82:	68bb      	ldr	r3, [r7, #8]
 8005d84:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005d88:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005d8a:	683b      	ldr	r3, [r7, #0]
 8005d8c:	685b      	ldr	r3, [r3, #4]
 8005d8e:	68ba      	ldr	r2, [r7, #8]
 8005d90:	4313      	orrs	r3, r2
 8005d92:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	68ba      	ldr	r2, [r7, #8]
 8005d9a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	2201      	movs	r2, #1
 8005da0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	2200      	movs	r2, #0
 8005da8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005dac:	2300      	movs	r3, #0
}
 8005dae:	4618      	mov	r0, r3
 8005db0:	3714      	adds	r7, #20
 8005db2:	46bd      	mov	sp, r7
 8005db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db8:	4770      	bx	lr
 8005dba:	bf00      	nop
 8005dbc:	40010000 	.word	0x40010000
 8005dc0:	40000400 	.word	0x40000400
 8005dc4:	40000800 	.word	0x40000800
 8005dc8:	40000c00 	.word	0x40000c00
 8005dcc:	40010400 	.word	0x40010400
 8005dd0:	40014000 	.word	0x40014000
 8005dd4:	40001800 	.word	0x40001800

08005dd8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005dd8:	b480      	push	{r7}
 8005dda:	b083      	sub	sp, #12
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005de0:	bf00      	nop
 8005de2:	370c      	adds	r7, #12
 8005de4:	46bd      	mov	sp, r7
 8005de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dea:	4770      	bx	lr

08005dec <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005dec:	b480      	push	{r7}
 8005dee:	b083      	sub	sp, #12
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005df4:	bf00      	nop
 8005df6:	370c      	adds	r7, #12
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfe:	4770      	bx	lr

08005e00 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005e00:	b580      	push	{r7, lr}
 8005e02:	b082      	sub	sp, #8
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d101      	bne.n	8005e12 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005e0e:	2301      	movs	r3, #1
 8005e10:	e03f      	b.n	8005e92 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e18:	b2db      	uxtb	r3, r3
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d106      	bne.n	8005e2c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	2200      	movs	r2, #0
 8005e22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005e26:	6878      	ldr	r0, [r7, #4]
 8005e28:	f7fc fa12 	bl	8002250 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	2224      	movs	r2, #36	; 0x24
 8005e30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	68da      	ldr	r2, [r3, #12]
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005e42:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005e44:	6878      	ldr	r0, [r7, #4]
 8005e46:	f000 fb9f 	bl	8006588 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	691a      	ldr	r2, [r3, #16]
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005e58:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	695a      	ldr	r2, [r3, #20]
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005e68:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	68da      	ldr	r2, [r3, #12]
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005e78:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	2200      	movs	r2, #0
 8005e7e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	2220      	movs	r2, #32
 8005e84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	2220      	movs	r2, #32
 8005e8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005e90:	2300      	movs	r3, #0
}
 8005e92:	4618      	mov	r0, r3
 8005e94:	3708      	adds	r7, #8
 8005e96:	46bd      	mov	sp, r7
 8005e98:	bd80      	pop	{r7, pc}

08005e9a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005e9a:	b580      	push	{r7, lr}
 8005e9c:	b084      	sub	sp, #16
 8005e9e:	af00      	add	r7, sp, #0
 8005ea0:	60f8      	str	r0, [r7, #12]
 8005ea2:	60b9      	str	r1, [r7, #8]
 8005ea4:	4613      	mov	r3, r2
 8005ea6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005eae:	b2db      	uxtb	r3, r3
 8005eb0:	2b20      	cmp	r3, #32
 8005eb2:	d11d      	bne.n	8005ef0 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8005eb4:	68bb      	ldr	r3, [r7, #8]
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d002      	beq.n	8005ec0 <HAL_UART_Receive_IT+0x26>
 8005eba:	88fb      	ldrh	r3, [r7, #6]
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d101      	bne.n	8005ec4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005ec0:	2301      	movs	r3, #1
 8005ec2:	e016      	b.n	8005ef2 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005eca:	2b01      	cmp	r3, #1
 8005ecc:	d101      	bne.n	8005ed2 <HAL_UART_Receive_IT+0x38>
 8005ece:	2302      	movs	r3, #2
 8005ed0:	e00f      	b.n	8005ef2 <HAL_UART_Receive_IT+0x58>
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	2201      	movs	r2, #1
 8005ed6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	2200      	movs	r2, #0
 8005ede:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8005ee0:	88fb      	ldrh	r3, [r7, #6]
 8005ee2:	461a      	mov	r2, r3
 8005ee4:	68b9      	ldr	r1, [r7, #8]
 8005ee6:	68f8      	ldr	r0, [r7, #12]
 8005ee8:	f000 f9d4 	bl	8006294 <UART_Start_Receive_IT>
 8005eec:	4603      	mov	r3, r0
 8005eee:	e000      	b.n	8005ef2 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8005ef0:	2302      	movs	r3, #2
  }
}
 8005ef2:	4618      	mov	r0, r3
 8005ef4:	3710      	adds	r7, #16
 8005ef6:	46bd      	mov	sp, r7
 8005ef8:	bd80      	pop	{r7, pc}
	...

08005efc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005efc:	b580      	push	{r7, lr}
 8005efe:	b08a      	sub	sp, #40	; 0x28
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	68db      	ldr	r3, [r3, #12]
 8005f12:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	695b      	ldr	r3, [r3, #20]
 8005f1a:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8005f1c:	2300      	movs	r3, #0
 8005f1e:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8005f20:	2300      	movs	r3, #0
 8005f22:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f26:	f003 030f 	and.w	r3, r3, #15
 8005f2a:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8005f2c:	69bb      	ldr	r3, [r7, #24]
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d10d      	bne.n	8005f4e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f34:	f003 0320 	and.w	r3, r3, #32
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d008      	beq.n	8005f4e <HAL_UART_IRQHandler+0x52>
 8005f3c:	6a3b      	ldr	r3, [r7, #32]
 8005f3e:	f003 0320 	and.w	r3, r3, #32
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d003      	beq.n	8005f4e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8005f46:	6878      	ldr	r0, [r7, #4]
 8005f48:	f000 fa87 	bl	800645a <UART_Receive_IT>
      return;
 8005f4c:	e17c      	b.n	8006248 <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005f4e:	69bb      	ldr	r3, [r7, #24]
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	f000 80b1 	beq.w	80060b8 <HAL_UART_IRQHandler+0x1bc>
 8005f56:	69fb      	ldr	r3, [r7, #28]
 8005f58:	f003 0301 	and.w	r3, r3, #1
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d105      	bne.n	8005f6c <HAL_UART_IRQHandler+0x70>
 8005f60:	6a3b      	ldr	r3, [r7, #32]
 8005f62:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	f000 80a6 	beq.w	80060b8 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f6e:	f003 0301 	and.w	r3, r3, #1
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d00a      	beq.n	8005f8c <HAL_UART_IRQHandler+0x90>
 8005f76:	6a3b      	ldr	r3, [r7, #32]
 8005f78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d005      	beq.n	8005f8c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f84:	f043 0201 	orr.w	r2, r3, #1
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f8e:	f003 0304 	and.w	r3, r3, #4
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d00a      	beq.n	8005fac <HAL_UART_IRQHandler+0xb0>
 8005f96:	69fb      	ldr	r3, [r7, #28]
 8005f98:	f003 0301 	and.w	r3, r3, #1
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d005      	beq.n	8005fac <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fa4:	f043 0202 	orr.w	r2, r3, #2
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fae:	f003 0302 	and.w	r3, r3, #2
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d00a      	beq.n	8005fcc <HAL_UART_IRQHandler+0xd0>
 8005fb6:	69fb      	ldr	r3, [r7, #28]
 8005fb8:	f003 0301 	and.w	r3, r3, #1
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d005      	beq.n	8005fcc <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fc4:	f043 0204 	orr.w	r2, r3, #4
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8005fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fce:	f003 0308 	and.w	r3, r3, #8
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d00f      	beq.n	8005ff6 <HAL_UART_IRQHandler+0xfa>
 8005fd6:	6a3b      	ldr	r3, [r7, #32]
 8005fd8:	f003 0320 	and.w	r3, r3, #32
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d104      	bne.n	8005fea <HAL_UART_IRQHandler+0xee>
 8005fe0:	69fb      	ldr	r3, [r7, #28]
 8005fe2:	f003 0301 	and.w	r3, r3, #1
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d005      	beq.n	8005ff6 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fee:	f043 0208 	orr.w	r2, r3, #8
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	f000 811f 	beq.w	800623e <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006002:	f003 0320 	and.w	r3, r3, #32
 8006006:	2b00      	cmp	r3, #0
 8006008:	d007      	beq.n	800601a <HAL_UART_IRQHandler+0x11e>
 800600a:	6a3b      	ldr	r3, [r7, #32]
 800600c:	f003 0320 	and.w	r3, r3, #32
 8006010:	2b00      	cmp	r3, #0
 8006012:	d002      	beq.n	800601a <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8006014:	6878      	ldr	r0, [r7, #4]
 8006016:	f000 fa20 	bl	800645a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	695b      	ldr	r3, [r3, #20]
 8006020:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006024:	2b40      	cmp	r3, #64	; 0x40
 8006026:	bf0c      	ite	eq
 8006028:	2301      	moveq	r3, #1
 800602a:	2300      	movne	r3, #0
 800602c:	b2db      	uxtb	r3, r3
 800602e:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006034:	f003 0308 	and.w	r3, r3, #8
 8006038:	2b00      	cmp	r3, #0
 800603a:	d102      	bne.n	8006042 <HAL_UART_IRQHandler+0x146>
 800603c:	697b      	ldr	r3, [r7, #20]
 800603e:	2b00      	cmp	r3, #0
 8006040:	d031      	beq.n	80060a6 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006042:	6878      	ldr	r0, [r7, #4]
 8006044:	f000 f960 	bl	8006308 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	695b      	ldr	r3, [r3, #20]
 800604e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006052:	2b40      	cmp	r3, #64	; 0x40
 8006054:	d123      	bne.n	800609e <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	695a      	ldr	r2, [r3, #20]
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006064:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800606a:	2b00      	cmp	r3, #0
 800606c:	d013      	beq.n	8006096 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006072:	4a77      	ldr	r2, [pc, #476]	; (8006250 <HAL_UART_IRQHandler+0x354>)
 8006074:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800607a:	4618      	mov	r0, r3
 800607c:	f7fc febf 	bl	8002dfe <HAL_DMA_Abort_IT>
 8006080:	4603      	mov	r3, r0
 8006082:	2b00      	cmp	r3, #0
 8006084:	d016      	beq.n	80060b4 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800608a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800608c:	687a      	ldr	r2, [r7, #4]
 800608e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006090:	4610      	mov	r0, r2
 8006092:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006094:	e00e      	b.n	80060b4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006096:	6878      	ldr	r0, [r7, #4]
 8006098:	f000 f8e6 	bl	8006268 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800609c:	e00a      	b.n	80060b4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800609e:	6878      	ldr	r0, [r7, #4]
 80060a0:	f000 f8e2 	bl	8006268 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060a4:	e006      	b.n	80060b4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80060a6:	6878      	ldr	r0, [r7, #4]
 80060a8:	f000 f8de 	bl	8006268 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	2200      	movs	r2, #0
 80060b0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80060b2:	e0c4      	b.n	800623e <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060b4:	bf00      	nop
    return;
 80060b6:	e0c2      	b.n	800623e <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060bc:	2b01      	cmp	r3, #1
 80060be:	f040 80a2 	bne.w	8006206 <HAL_UART_IRQHandler+0x30a>
      &&((isrflags & USART_SR_IDLE) != 0U)
 80060c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060c4:	f003 0310 	and.w	r3, r3, #16
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	f000 809c 	beq.w	8006206 <HAL_UART_IRQHandler+0x30a>
      &&((cr1its & USART_SR_IDLE) != 0U))
 80060ce:	6a3b      	ldr	r3, [r7, #32]
 80060d0:	f003 0310 	and.w	r3, r3, #16
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	f000 8096 	beq.w	8006206 <HAL_UART_IRQHandler+0x30a>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80060da:	2300      	movs	r3, #0
 80060dc:	60fb      	str	r3, [r7, #12]
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	60fb      	str	r3, [r7, #12]
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	685b      	ldr	r3, [r3, #4]
 80060ec:	60fb      	str	r3, [r7, #12]
 80060ee:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	695b      	ldr	r3, [r3, #20]
 80060f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060fa:	2b40      	cmp	r3, #64	; 0x40
 80060fc:	d14f      	bne.n	800619e <HAL_UART_IRQHandler+0x2a2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	685b      	ldr	r3, [r3, #4]
 8006106:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8006108:	8a3b      	ldrh	r3, [r7, #16]
 800610a:	2b00      	cmp	r3, #0
 800610c:	f000 8099 	beq.w	8006242 <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006114:	8a3a      	ldrh	r2, [r7, #16]
 8006116:	429a      	cmp	r2, r3
 8006118:	f080 8093 	bcs.w	8006242 <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	8a3a      	ldrh	r2, [r7, #16]
 8006120:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006126:	69db      	ldr	r3, [r3, #28]
 8006128:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800612c:	d02b      	beq.n	8006186 <HAL_UART_IRQHandler+0x28a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	68da      	ldr	r2, [r3, #12]
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800613c:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	695a      	ldr	r2, [r3, #20]
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	f022 0201 	bic.w	r2, r2, #1
 800614c:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	695a      	ldr	r2, [r3, #20]
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800615c:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	2220      	movs	r2, #32
 8006162:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	2200      	movs	r2, #0
 800616a:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	68da      	ldr	r2, [r3, #12]
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	f022 0210 	bic.w	r2, r2, #16
 800617a:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006180:	4618      	mov	r0, r3
 8006182:	f7fc fdcc 	bl	8002d1e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800618e:	b29b      	uxth	r3, r3
 8006190:	1ad3      	subs	r3, r2, r3
 8006192:	b29b      	uxth	r3, r3
 8006194:	4619      	mov	r1, r3
 8006196:	6878      	ldr	r0, [r7, #4]
 8006198:	f000 f870 	bl	800627c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800619c:	e051      	b.n	8006242 <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80061a6:	b29b      	uxth	r3, r3
 80061a8:	1ad3      	subs	r3, r2, r3
 80061aa:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80061b0:	b29b      	uxth	r3, r3
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d047      	beq.n	8006246 <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 80061b6:	8a7b      	ldrh	r3, [r7, #18]
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d044      	beq.n	8006246 <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	68da      	ldr	r2, [r3, #12]
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80061ca:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	695a      	ldr	r2, [r3, #20]
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	f022 0201 	bic.w	r2, r2, #1
 80061da:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	2220      	movs	r2, #32
 80061e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	2200      	movs	r2, #0
 80061e8:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	68da      	ldr	r2, [r3, #12]
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	f022 0210 	bic.w	r2, r2, #16
 80061f8:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80061fa:	8a7b      	ldrh	r3, [r7, #18]
 80061fc:	4619      	mov	r1, r3
 80061fe:	6878      	ldr	r0, [r7, #4]
 8006200:	f000 f83c 	bl	800627c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8006204:	e01f      	b.n	8006246 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006208:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800620c:	2b00      	cmp	r3, #0
 800620e:	d008      	beq.n	8006222 <HAL_UART_IRQHandler+0x326>
 8006210:	6a3b      	ldr	r3, [r7, #32]
 8006212:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006216:	2b00      	cmp	r3, #0
 8006218:	d003      	beq.n	8006222 <HAL_UART_IRQHandler+0x326>
  {
    UART_Transmit_IT(huart);
 800621a:	6878      	ldr	r0, [r7, #4]
 800621c:	f000 f8b5 	bl	800638a <UART_Transmit_IT>
    return;
 8006220:	e012      	b.n	8006248 <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006224:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006228:	2b00      	cmp	r3, #0
 800622a:	d00d      	beq.n	8006248 <HAL_UART_IRQHandler+0x34c>
 800622c:	6a3b      	ldr	r3, [r7, #32]
 800622e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006232:	2b00      	cmp	r3, #0
 8006234:	d008      	beq.n	8006248 <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 8006236:	6878      	ldr	r0, [r7, #4]
 8006238:	f000 f8f7 	bl	800642a <UART_EndTransmit_IT>
    return;
 800623c:	e004      	b.n	8006248 <HAL_UART_IRQHandler+0x34c>
    return;
 800623e:	bf00      	nop
 8006240:	e002      	b.n	8006248 <HAL_UART_IRQHandler+0x34c>
      return;
 8006242:	bf00      	nop
 8006244:	e000      	b.n	8006248 <HAL_UART_IRQHandler+0x34c>
      return;
 8006246:	bf00      	nop
  }
}
 8006248:	3728      	adds	r7, #40	; 0x28
 800624a:	46bd      	mov	sp, r7
 800624c:	bd80      	pop	{r7, pc}
 800624e:	bf00      	nop
 8006250:	08006363 	.word	0x08006363

08006254 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006254:	b480      	push	{r7}
 8006256:	b083      	sub	sp, #12
 8006258:	af00      	add	r7, sp, #0
 800625a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800625c:	bf00      	nop
 800625e:	370c      	adds	r7, #12
 8006260:	46bd      	mov	sp, r7
 8006262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006266:	4770      	bx	lr

08006268 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006268:	b480      	push	{r7}
 800626a:	b083      	sub	sp, #12
 800626c:	af00      	add	r7, sp, #0
 800626e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006270:	bf00      	nop
 8006272:	370c      	adds	r7, #12
 8006274:	46bd      	mov	sp, r7
 8006276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627a:	4770      	bx	lr

0800627c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800627c:	b480      	push	{r7}
 800627e:	b083      	sub	sp, #12
 8006280:	af00      	add	r7, sp, #0
 8006282:	6078      	str	r0, [r7, #4]
 8006284:	460b      	mov	r3, r1
 8006286:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006288:	bf00      	nop
 800628a:	370c      	adds	r7, #12
 800628c:	46bd      	mov	sp, r7
 800628e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006292:	4770      	bx	lr

08006294 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006294:	b480      	push	{r7}
 8006296:	b085      	sub	sp, #20
 8006298:	af00      	add	r7, sp, #0
 800629a:	60f8      	str	r0, [r7, #12]
 800629c:	60b9      	str	r1, [r7, #8]
 800629e:	4613      	mov	r3, r2
 80062a0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	68ba      	ldr	r2, [r7, #8]
 80062a6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	88fa      	ldrh	r2, [r7, #6]
 80062ac:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	88fa      	ldrh	r2, [r7, #6]
 80062b2:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	2200      	movs	r2, #0
 80062b8:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	2222      	movs	r2, #34	; 0x22
 80062be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	2200      	movs	r2, #0
 80062c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	68da      	ldr	r2, [r3, #12]
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80062d8:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	695a      	ldr	r2, [r3, #20]
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	f042 0201 	orr.w	r2, r2, #1
 80062e8:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	68da      	ldr	r2, [r3, #12]
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	f042 0220 	orr.w	r2, r2, #32
 80062f8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80062fa:	2300      	movs	r3, #0
}
 80062fc:	4618      	mov	r0, r3
 80062fe:	3714      	adds	r7, #20
 8006300:	46bd      	mov	sp, r7
 8006302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006306:	4770      	bx	lr

08006308 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006308:	b480      	push	{r7}
 800630a:	b083      	sub	sp, #12
 800630c:	af00      	add	r7, sp, #0
 800630e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	68da      	ldr	r2, [r3, #12]
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800631e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	695a      	ldr	r2, [r3, #20]
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	f022 0201 	bic.w	r2, r2, #1
 800632e:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006334:	2b01      	cmp	r3, #1
 8006336:	d107      	bne.n	8006348 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	68da      	ldr	r2, [r3, #12]
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	f022 0210 	bic.w	r2, r2, #16
 8006346:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	2220      	movs	r2, #32
 800634c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	2200      	movs	r2, #0
 8006354:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006356:	bf00      	nop
 8006358:	370c      	adds	r7, #12
 800635a:	46bd      	mov	sp, r7
 800635c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006360:	4770      	bx	lr

08006362 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006362:	b580      	push	{r7, lr}
 8006364:	b084      	sub	sp, #16
 8006366:	af00      	add	r7, sp, #0
 8006368:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800636e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	2200      	movs	r2, #0
 8006374:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	2200      	movs	r2, #0
 800637a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800637c:	68f8      	ldr	r0, [r7, #12]
 800637e:	f7ff ff73 	bl	8006268 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006382:	bf00      	nop
 8006384:	3710      	adds	r7, #16
 8006386:	46bd      	mov	sp, r7
 8006388:	bd80      	pop	{r7, pc}

0800638a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800638a:	b480      	push	{r7}
 800638c:	b085      	sub	sp, #20
 800638e:	af00      	add	r7, sp, #0
 8006390:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006398:	b2db      	uxtb	r3, r3
 800639a:	2b21      	cmp	r3, #33	; 0x21
 800639c:	d13e      	bne.n	800641c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	689b      	ldr	r3, [r3, #8]
 80063a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80063a6:	d114      	bne.n	80063d2 <UART_Transmit_IT+0x48>
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	691b      	ldr	r3, [r3, #16]
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d110      	bne.n	80063d2 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	6a1b      	ldr	r3, [r3, #32]
 80063b4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	881b      	ldrh	r3, [r3, #0]
 80063ba:	461a      	mov	r2, r3
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80063c4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	6a1b      	ldr	r3, [r3, #32]
 80063ca:	1c9a      	adds	r2, r3, #2
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	621a      	str	r2, [r3, #32]
 80063d0:	e008      	b.n	80063e4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	6a1b      	ldr	r3, [r3, #32]
 80063d6:	1c59      	adds	r1, r3, #1
 80063d8:	687a      	ldr	r2, [r7, #4]
 80063da:	6211      	str	r1, [r2, #32]
 80063dc:	781a      	ldrb	r2, [r3, #0]
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80063e8:	b29b      	uxth	r3, r3
 80063ea:	3b01      	subs	r3, #1
 80063ec:	b29b      	uxth	r3, r3
 80063ee:	687a      	ldr	r2, [r7, #4]
 80063f0:	4619      	mov	r1, r3
 80063f2:	84d1      	strh	r1, [r2, #38]	; 0x26
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d10f      	bne.n	8006418 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	68da      	ldr	r2, [r3, #12]
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006406:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	68da      	ldr	r2, [r3, #12]
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006416:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006418:	2300      	movs	r3, #0
 800641a:	e000      	b.n	800641e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800641c:	2302      	movs	r3, #2
  }
}
 800641e:	4618      	mov	r0, r3
 8006420:	3714      	adds	r7, #20
 8006422:	46bd      	mov	sp, r7
 8006424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006428:	4770      	bx	lr

0800642a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800642a:	b580      	push	{r7, lr}
 800642c:	b082      	sub	sp, #8
 800642e:	af00      	add	r7, sp, #0
 8006430:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	68da      	ldr	r2, [r3, #12]
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006440:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	2220      	movs	r2, #32
 8006446:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800644a:	6878      	ldr	r0, [r7, #4]
 800644c:	f7ff ff02 	bl	8006254 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006450:	2300      	movs	r3, #0
}
 8006452:	4618      	mov	r0, r3
 8006454:	3708      	adds	r7, #8
 8006456:	46bd      	mov	sp, r7
 8006458:	bd80      	pop	{r7, pc}

0800645a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800645a:	b580      	push	{r7, lr}
 800645c:	b084      	sub	sp, #16
 800645e:	af00      	add	r7, sp, #0
 8006460:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006468:	b2db      	uxtb	r3, r3
 800646a:	2b22      	cmp	r3, #34	; 0x22
 800646c:	f040 8087 	bne.w	800657e <UART_Receive_IT+0x124>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	689b      	ldr	r3, [r3, #8]
 8006474:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006478:	d117      	bne.n	80064aa <UART_Receive_IT+0x50>
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	691b      	ldr	r3, [r3, #16]
 800647e:	2b00      	cmp	r3, #0
 8006480:	d113      	bne.n	80064aa <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006482:	2300      	movs	r3, #0
 8006484:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800648a:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	685b      	ldr	r3, [r3, #4]
 8006492:	b29b      	uxth	r3, r3
 8006494:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006498:	b29a      	uxth	r2, r3
 800649a:	68bb      	ldr	r3, [r7, #8]
 800649c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064a2:	1c9a      	adds	r2, r3, #2
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	629a      	str	r2, [r3, #40]	; 0x28
 80064a8:	e026      	b.n	80064f8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064ae:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 80064b0:	2300      	movs	r3, #0
 80064b2:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	689b      	ldr	r3, [r3, #8]
 80064b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80064bc:	d007      	beq.n	80064ce <UART_Receive_IT+0x74>
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	689b      	ldr	r3, [r3, #8]
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d10a      	bne.n	80064dc <UART_Receive_IT+0x82>
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	691b      	ldr	r3, [r3, #16]
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d106      	bne.n	80064dc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	685b      	ldr	r3, [r3, #4]
 80064d4:	b2da      	uxtb	r2, r3
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	701a      	strb	r2, [r3, #0]
 80064da:	e008      	b.n	80064ee <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	685b      	ldr	r3, [r3, #4]
 80064e2:	b2db      	uxtb	r3, r3
 80064e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80064e8:	b2da      	uxtb	r2, r3
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064f2:	1c5a      	adds	r2, r3, #1
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80064fc:	b29b      	uxth	r3, r3
 80064fe:	3b01      	subs	r3, #1
 8006500:	b29b      	uxth	r3, r3
 8006502:	687a      	ldr	r2, [r7, #4]
 8006504:	4619      	mov	r1, r3
 8006506:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006508:	2b00      	cmp	r3, #0
 800650a:	d136      	bne.n	800657a <UART_Receive_IT+0x120>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	68da      	ldr	r2, [r3, #12]
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	f022 0220 	bic.w	r2, r2, #32
 800651a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	68da      	ldr	r2, [r3, #12]
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800652a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	695a      	ldr	r2, [r3, #20]
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	f022 0201 	bic.w	r2, r2, #1
 800653a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	2220      	movs	r2, #32
 8006540:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006548:	2b01      	cmp	r3, #1
 800654a:	d10e      	bne.n	800656a <UART_Receive_IT+0x110>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	68da      	ldr	r2, [r3, #12]
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	f022 0210 	bic.w	r2, r2, #16
 800655a:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006560:	4619      	mov	r1, r3
 8006562:	6878      	ldr	r0, [r7, #4]
 8006564:	f7ff fe8a 	bl	800627c <HAL_UARTEx_RxEventCallback>
 8006568:	e002      	b.n	8006570 <UART_Receive_IT+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 800656a:	6878      	ldr	r0, [r7, #4]
 800656c:	f7fa fcd6 	bl	8000f1c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	2200      	movs	r2, #0
 8006574:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_OK;
 8006576:	2300      	movs	r3, #0
 8006578:	e002      	b.n	8006580 <UART_Receive_IT+0x126>
    }
    return HAL_OK;
 800657a:	2300      	movs	r3, #0
 800657c:	e000      	b.n	8006580 <UART_Receive_IT+0x126>
  }
  else
  {
    return HAL_BUSY;
 800657e:	2302      	movs	r3, #2
  }
}
 8006580:	4618      	mov	r0, r3
 8006582:	3710      	adds	r7, #16
 8006584:	46bd      	mov	sp, r7
 8006586:	bd80      	pop	{r7, pc}

08006588 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006588:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800658c:	b09f      	sub	sp, #124	; 0x7c
 800658e:	af00      	add	r7, sp, #0
 8006590:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006592:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	691b      	ldr	r3, [r3, #16]
 8006598:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800659c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800659e:	68d9      	ldr	r1, [r3, #12]
 80065a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80065a2:	681a      	ldr	r2, [r3, #0]
 80065a4:	ea40 0301 	orr.w	r3, r0, r1
 80065a8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80065aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80065ac:	689a      	ldr	r2, [r3, #8]
 80065ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80065b0:	691b      	ldr	r3, [r3, #16]
 80065b2:	431a      	orrs	r2, r3
 80065b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80065b6:	695b      	ldr	r3, [r3, #20]
 80065b8:	431a      	orrs	r2, r3
 80065ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80065bc:	69db      	ldr	r3, [r3, #28]
 80065be:	4313      	orrs	r3, r2
 80065c0:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80065c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	68db      	ldr	r3, [r3, #12]
 80065c8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80065cc:	f021 010c 	bic.w	r1, r1, #12
 80065d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80065d2:	681a      	ldr	r2, [r3, #0]
 80065d4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80065d6:	430b      	orrs	r3, r1
 80065d8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80065da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	695b      	ldr	r3, [r3, #20]
 80065e0:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80065e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80065e6:	6999      	ldr	r1, [r3, #24]
 80065e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80065ea:	681a      	ldr	r2, [r3, #0]
 80065ec:	ea40 0301 	orr.w	r3, r0, r1
 80065f0:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80065f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80065f4:	681a      	ldr	r2, [r3, #0]
 80065f6:	4bc5      	ldr	r3, [pc, #788]	; (800690c <UART_SetConfig+0x384>)
 80065f8:	429a      	cmp	r2, r3
 80065fa:	d004      	beq.n	8006606 <UART_SetConfig+0x7e>
 80065fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80065fe:	681a      	ldr	r2, [r3, #0]
 8006600:	4bc3      	ldr	r3, [pc, #780]	; (8006910 <UART_SetConfig+0x388>)
 8006602:	429a      	cmp	r2, r3
 8006604:	d103      	bne.n	800660e <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006606:	f7fd fe91 	bl	800432c <HAL_RCC_GetPCLK2Freq>
 800660a:	6778      	str	r0, [r7, #116]	; 0x74
 800660c:	e002      	b.n	8006614 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800660e:	f7fd fe79 	bl	8004304 <HAL_RCC_GetPCLK1Freq>
 8006612:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006614:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006616:	69db      	ldr	r3, [r3, #28]
 8006618:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800661c:	f040 80b6 	bne.w	800678c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006620:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006622:	461c      	mov	r4, r3
 8006624:	f04f 0500 	mov.w	r5, #0
 8006628:	4622      	mov	r2, r4
 800662a:	462b      	mov	r3, r5
 800662c:	1891      	adds	r1, r2, r2
 800662e:	6439      	str	r1, [r7, #64]	; 0x40
 8006630:	415b      	adcs	r3, r3
 8006632:	647b      	str	r3, [r7, #68]	; 0x44
 8006634:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006638:	1912      	adds	r2, r2, r4
 800663a:	eb45 0303 	adc.w	r3, r5, r3
 800663e:	f04f 0000 	mov.w	r0, #0
 8006642:	f04f 0100 	mov.w	r1, #0
 8006646:	00d9      	lsls	r1, r3, #3
 8006648:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800664c:	00d0      	lsls	r0, r2, #3
 800664e:	4602      	mov	r2, r0
 8006650:	460b      	mov	r3, r1
 8006652:	1911      	adds	r1, r2, r4
 8006654:	6639      	str	r1, [r7, #96]	; 0x60
 8006656:	416b      	adcs	r3, r5
 8006658:	667b      	str	r3, [r7, #100]	; 0x64
 800665a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800665c:	685b      	ldr	r3, [r3, #4]
 800665e:	461a      	mov	r2, r3
 8006660:	f04f 0300 	mov.w	r3, #0
 8006664:	1891      	adds	r1, r2, r2
 8006666:	63b9      	str	r1, [r7, #56]	; 0x38
 8006668:	415b      	adcs	r3, r3
 800666a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800666c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006670:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8006674:	f7fa fa84 	bl	8000b80 <__aeabi_uldivmod>
 8006678:	4602      	mov	r2, r0
 800667a:	460b      	mov	r3, r1
 800667c:	4ba5      	ldr	r3, [pc, #660]	; (8006914 <UART_SetConfig+0x38c>)
 800667e:	fba3 2302 	umull	r2, r3, r3, r2
 8006682:	095b      	lsrs	r3, r3, #5
 8006684:	011e      	lsls	r6, r3, #4
 8006686:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006688:	461c      	mov	r4, r3
 800668a:	f04f 0500 	mov.w	r5, #0
 800668e:	4622      	mov	r2, r4
 8006690:	462b      	mov	r3, r5
 8006692:	1891      	adds	r1, r2, r2
 8006694:	6339      	str	r1, [r7, #48]	; 0x30
 8006696:	415b      	adcs	r3, r3
 8006698:	637b      	str	r3, [r7, #52]	; 0x34
 800669a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800669e:	1912      	adds	r2, r2, r4
 80066a0:	eb45 0303 	adc.w	r3, r5, r3
 80066a4:	f04f 0000 	mov.w	r0, #0
 80066a8:	f04f 0100 	mov.w	r1, #0
 80066ac:	00d9      	lsls	r1, r3, #3
 80066ae:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80066b2:	00d0      	lsls	r0, r2, #3
 80066b4:	4602      	mov	r2, r0
 80066b6:	460b      	mov	r3, r1
 80066b8:	1911      	adds	r1, r2, r4
 80066ba:	65b9      	str	r1, [r7, #88]	; 0x58
 80066bc:	416b      	adcs	r3, r5
 80066be:	65fb      	str	r3, [r7, #92]	; 0x5c
 80066c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80066c2:	685b      	ldr	r3, [r3, #4]
 80066c4:	461a      	mov	r2, r3
 80066c6:	f04f 0300 	mov.w	r3, #0
 80066ca:	1891      	adds	r1, r2, r2
 80066cc:	62b9      	str	r1, [r7, #40]	; 0x28
 80066ce:	415b      	adcs	r3, r3
 80066d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80066d2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80066d6:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80066da:	f7fa fa51 	bl	8000b80 <__aeabi_uldivmod>
 80066de:	4602      	mov	r2, r0
 80066e0:	460b      	mov	r3, r1
 80066e2:	4b8c      	ldr	r3, [pc, #560]	; (8006914 <UART_SetConfig+0x38c>)
 80066e4:	fba3 1302 	umull	r1, r3, r3, r2
 80066e8:	095b      	lsrs	r3, r3, #5
 80066ea:	2164      	movs	r1, #100	; 0x64
 80066ec:	fb01 f303 	mul.w	r3, r1, r3
 80066f0:	1ad3      	subs	r3, r2, r3
 80066f2:	00db      	lsls	r3, r3, #3
 80066f4:	3332      	adds	r3, #50	; 0x32
 80066f6:	4a87      	ldr	r2, [pc, #540]	; (8006914 <UART_SetConfig+0x38c>)
 80066f8:	fba2 2303 	umull	r2, r3, r2, r3
 80066fc:	095b      	lsrs	r3, r3, #5
 80066fe:	005b      	lsls	r3, r3, #1
 8006700:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006704:	441e      	add	r6, r3
 8006706:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006708:	4618      	mov	r0, r3
 800670a:	f04f 0100 	mov.w	r1, #0
 800670e:	4602      	mov	r2, r0
 8006710:	460b      	mov	r3, r1
 8006712:	1894      	adds	r4, r2, r2
 8006714:	623c      	str	r4, [r7, #32]
 8006716:	415b      	adcs	r3, r3
 8006718:	627b      	str	r3, [r7, #36]	; 0x24
 800671a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800671e:	1812      	adds	r2, r2, r0
 8006720:	eb41 0303 	adc.w	r3, r1, r3
 8006724:	f04f 0400 	mov.w	r4, #0
 8006728:	f04f 0500 	mov.w	r5, #0
 800672c:	00dd      	lsls	r5, r3, #3
 800672e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006732:	00d4      	lsls	r4, r2, #3
 8006734:	4622      	mov	r2, r4
 8006736:	462b      	mov	r3, r5
 8006738:	1814      	adds	r4, r2, r0
 800673a:	653c      	str	r4, [r7, #80]	; 0x50
 800673c:	414b      	adcs	r3, r1
 800673e:	657b      	str	r3, [r7, #84]	; 0x54
 8006740:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006742:	685b      	ldr	r3, [r3, #4]
 8006744:	461a      	mov	r2, r3
 8006746:	f04f 0300 	mov.w	r3, #0
 800674a:	1891      	adds	r1, r2, r2
 800674c:	61b9      	str	r1, [r7, #24]
 800674e:	415b      	adcs	r3, r3
 8006750:	61fb      	str	r3, [r7, #28]
 8006752:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006756:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800675a:	f7fa fa11 	bl	8000b80 <__aeabi_uldivmod>
 800675e:	4602      	mov	r2, r0
 8006760:	460b      	mov	r3, r1
 8006762:	4b6c      	ldr	r3, [pc, #432]	; (8006914 <UART_SetConfig+0x38c>)
 8006764:	fba3 1302 	umull	r1, r3, r3, r2
 8006768:	095b      	lsrs	r3, r3, #5
 800676a:	2164      	movs	r1, #100	; 0x64
 800676c:	fb01 f303 	mul.w	r3, r1, r3
 8006770:	1ad3      	subs	r3, r2, r3
 8006772:	00db      	lsls	r3, r3, #3
 8006774:	3332      	adds	r3, #50	; 0x32
 8006776:	4a67      	ldr	r2, [pc, #412]	; (8006914 <UART_SetConfig+0x38c>)
 8006778:	fba2 2303 	umull	r2, r3, r2, r3
 800677c:	095b      	lsrs	r3, r3, #5
 800677e:	f003 0207 	and.w	r2, r3, #7
 8006782:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	4432      	add	r2, r6
 8006788:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800678a:	e0b9      	b.n	8006900 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800678c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800678e:	461c      	mov	r4, r3
 8006790:	f04f 0500 	mov.w	r5, #0
 8006794:	4622      	mov	r2, r4
 8006796:	462b      	mov	r3, r5
 8006798:	1891      	adds	r1, r2, r2
 800679a:	6139      	str	r1, [r7, #16]
 800679c:	415b      	adcs	r3, r3
 800679e:	617b      	str	r3, [r7, #20]
 80067a0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80067a4:	1912      	adds	r2, r2, r4
 80067a6:	eb45 0303 	adc.w	r3, r5, r3
 80067aa:	f04f 0000 	mov.w	r0, #0
 80067ae:	f04f 0100 	mov.w	r1, #0
 80067b2:	00d9      	lsls	r1, r3, #3
 80067b4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80067b8:	00d0      	lsls	r0, r2, #3
 80067ba:	4602      	mov	r2, r0
 80067bc:	460b      	mov	r3, r1
 80067be:	eb12 0804 	adds.w	r8, r2, r4
 80067c2:	eb43 0905 	adc.w	r9, r3, r5
 80067c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80067c8:	685b      	ldr	r3, [r3, #4]
 80067ca:	4618      	mov	r0, r3
 80067cc:	f04f 0100 	mov.w	r1, #0
 80067d0:	f04f 0200 	mov.w	r2, #0
 80067d4:	f04f 0300 	mov.w	r3, #0
 80067d8:	008b      	lsls	r3, r1, #2
 80067da:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80067de:	0082      	lsls	r2, r0, #2
 80067e0:	4640      	mov	r0, r8
 80067e2:	4649      	mov	r1, r9
 80067e4:	f7fa f9cc 	bl	8000b80 <__aeabi_uldivmod>
 80067e8:	4602      	mov	r2, r0
 80067ea:	460b      	mov	r3, r1
 80067ec:	4b49      	ldr	r3, [pc, #292]	; (8006914 <UART_SetConfig+0x38c>)
 80067ee:	fba3 2302 	umull	r2, r3, r3, r2
 80067f2:	095b      	lsrs	r3, r3, #5
 80067f4:	011e      	lsls	r6, r3, #4
 80067f6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80067f8:	4618      	mov	r0, r3
 80067fa:	f04f 0100 	mov.w	r1, #0
 80067fe:	4602      	mov	r2, r0
 8006800:	460b      	mov	r3, r1
 8006802:	1894      	adds	r4, r2, r2
 8006804:	60bc      	str	r4, [r7, #8]
 8006806:	415b      	adcs	r3, r3
 8006808:	60fb      	str	r3, [r7, #12]
 800680a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800680e:	1812      	adds	r2, r2, r0
 8006810:	eb41 0303 	adc.w	r3, r1, r3
 8006814:	f04f 0400 	mov.w	r4, #0
 8006818:	f04f 0500 	mov.w	r5, #0
 800681c:	00dd      	lsls	r5, r3, #3
 800681e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006822:	00d4      	lsls	r4, r2, #3
 8006824:	4622      	mov	r2, r4
 8006826:	462b      	mov	r3, r5
 8006828:	1814      	adds	r4, r2, r0
 800682a:	64bc      	str	r4, [r7, #72]	; 0x48
 800682c:	414b      	adcs	r3, r1
 800682e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006830:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006832:	685b      	ldr	r3, [r3, #4]
 8006834:	4618      	mov	r0, r3
 8006836:	f04f 0100 	mov.w	r1, #0
 800683a:	f04f 0200 	mov.w	r2, #0
 800683e:	f04f 0300 	mov.w	r3, #0
 8006842:	008b      	lsls	r3, r1, #2
 8006844:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006848:	0082      	lsls	r2, r0, #2
 800684a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800684e:	f7fa f997 	bl	8000b80 <__aeabi_uldivmod>
 8006852:	4602      	mov	r2, r0
 8006854:	460b      	mov	r3, r1
 8006856:	4b2f      	ldr	r3, [pc, #188]	; (8006914 <UART_SetConfig+0x38c>)
 8006858:	fba3 1302 	umull	r1, r3, r3, r2
 800685c:	095b      	lsrs	r3, r3, #5
 800685e:	2164      	movs	r1, #100	; 0x64
 8006860:	fb01 f303 	mul.w	r3, r1, r3
 8006864:	1ad3      	subs	r3, r2, r3
 8006866:	011b      	lsls	r3, r3, #4
 8006868:	3332      	adds	r3, #50	; 0x32
 800686a:	4a2a      	ldr	r2, [pc, #168]	; (8006914 <UART_SetConfig+0x38c>)
 800686c:	fba2 2303 	umull	r2, r3, r2, r3
 8006870:	095b      	lsrs	r3, r3, #5
 8006872:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006876:	441e      	add	r6, r3
 8006878:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800687a:	4618      	mov	r0, r3
 800687c:	f04f 0100 	mov.w	r1, #0
 8006880:	4602      	mov	r2, r0
 8006882:	460b      	mov	r3, r1
 8006884:	1894      	adds	r4, r2, r2
 8006886:	603c      	str	r4, [r7, #0]
 8006888:	415b      	adcs	r3, r3
 800688a:	607b      	str	r3, [r7, #4]
 800688c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006890:	1812      	adds	r2, r2, r0
 8006892:	eb41 0303 	adc.w	r3, r1, r3
 8006896:	f04f 0400 	mov.w	r4, #0
 800689a:	f04f 0500 	mov.w	r5, #0
 800689e:	00dd      	lsls	r5, r3, #3
 80068a0:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80068a4:	00d4      	lsls	r4, r2, #3
 80068a6:	4622      	mov	r2, r4
 80068a8:	462b      	mov	r3, r5
 80068aa:	eb12 0a00 	adds.w	sl, r2, r0
 80068ae:	eb43 0b01 	adc.w	fp, r3, r1
 80068b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80068b4:	685b      	ldr	r3, [r3, #4]
 80068b6:	4618      	mov	r0, r3
 80068b8:	f04f 0100 	mov.w	r1, #0
 80068bc:	f04f 0200 	mov.w	r2, #0
 80068c0:	f04f 0300 	mov.w	r3, #0
 80068c4:	008b      	lsls	r3, r1, #2
 80068c6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80068ca:	0082      	lsls	r2, r0, #2
 80068cc:	4650      	mov	r0, sl
 80068ce:	4659      	mov	r1, fp
 80068d0:	f7fa f956 	bl	8000b80 <__aeabi_uldivmod>
 80068d4:	4602      	mov	r2, r0
 80068d6:	460b      	mov	r3, r1
 80068d8:	4b0e      	ldr	r3, [pc, #56]	; (8006914 <UART_SetConfig+0x38c>)
 80068da:	fba3 1302 	umull	r1, r3, r3, r2
 80068de:	095b      	lsrs	r3, r3, #5
 80068e0:	2164      	movs	r1, #100	; 0x64
 80068e2:	fb01 f303 	mul.w	r3, r1, r3
 80068e6:	1ad3      	subs	r3, r2, r3
 80068e8:	011b      	lsls	r3, r3, #4
 80068ea:	3332      	adds	r3, #50	; 0x32
 80068ec:	4a09      	ldr	r2, [pc, #36]	; (8006914 <UART_SetConfig+0x38c>)
 80068ee:	fba2 2303 	umull	r2, r3, r2, r3
 80068f2:	095b      	lsrs	r3, r3, #5
 80068f4:	f003 020f 	and.w	r2, r3, #15
 80068f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	4432      	add	r2, r6
 80068fe:	609a      	str	r2, [r3, #8]
}
 8006900:	bf00      	nop
 8006902:	377c      	adds	r7, #124	; 0x7c
 8006904:	46bd      	mov	sp, r7
 8006906:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800690a:	bf00      	nop
 800690c:	40011000 	.word	0x40011000
 8006910:	40011400 	.word	0x40011400
 8006914:	51eb851f 	.word	0x51eb851f

08006918 <arm_pid_init_f32>:
 8006918:	edd0 6a08 	vldr	s13, [r0, #32]
 800691c:	edd0 7a06 	vldr	s15, [r0, #24]
 8006920:	ed90 7a07 	vldr	s14, [r0, #28]
 8006924:	edc0 6a02 	vstr	s13, [r0, #8]
 8006928:	ee37 7a87 	vadd.f32	s14, s15, s14
 800692c:	ee36 6aa6 	vadd.f32	s12, s13, s13
 8006930:	eef1 7a67 	vneg.f32	s15, s15
 8006934:	ee37 7a26 	vadd.f32	s14, s14, s13
 8006938:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800693c:	ed80 7a00 	vstr	s14, [r0]
 8006940:	edc0 7a01 	vstr	s15, [r0, #4]
 8006944:	b119      	cbz	r1, 800694e <arm_pid_init_f32+0x36>
 8006946:	2300      	movs	r3, #0
 8006948:	60c3      	str	r3, [r0, #12]
 800694a:	6103      	str	r3, [r0, #16]
 800694c:	6143      	str	r3, [r0, #20]
 800694e:	4770      	bx	lr

08006950 <__errno>:
 8006950:	4b01      	ldr	r3, [pc, #4]	; (8006958 <__errno+0x8>)
 8006952:	6818      	ldr	r0, [r3, #0]
 8006954:	4770      	bx	lr
 8006956:	bf00      	nop
 8006958:	20000014 	.word	0x20000014

0800695c <__libc_init_array>:
 800695c:	b570      	push	{r4, r5, r6, lr}
 800695e:	4d0d      	ldr	r5, [pc, #52]	; (8006994 <__libc_init_array+0x38>)
 8006960:	4c0d      	ldr	r4, [pc, #52]	; (8006998 <__libc_init_array+0x3c>)
 8006962:	1b64      	subs	r4, r4, r5
 8006964:	10a4      	asrs	r4, r4, #2
 8006966:	2600      	movs	r6, #0
 8006968:	42a6      	cmp	r6, r4
 800696a:	d109      	bne.n	8006980 <__libc_init_array+0x24>
 800696c:	4d0b      	ldr	r5, [pc, #44]	; (800699c <__libc_init_array+0x40>)
 800696e:	4c0c      	ldr	r4, [pc, #48]	; (80069a0 <__libc_init_array+0x44>)
 8006970:	f000 fb80 	bl	8007074 <_init>
 8006974:	1b64      	subs	r4, r4, r5
 8006976:	10a4      	asrs	r4, r4, #2
 8006978:	2600      	movs	r6, #0
 800697a:	42a6      	cmp	r6, r4
 800697c:	d105      	bne.n	800698a <__libc_init_array+0x2e>
 800697e:	bd70      	pop	{r4, r5, r6, pc}
 8006980:	f855 3b04 	ldr.w	r3, [r5], #4
 8006984:	4798      	blx	r3
 8006986:	3601      	adds	r6, #1
 8006988:	e7ee      	b.n	8006968 <__libc_init_array+0xc>
 800698a:	f855 3b04 	ldr.w	r3, [r5], #4
 800698e:	4798      	blx	r3
 8006990:	3601      	adds	r6, #1
 8006992:	e7f2      	b.n	800697a <__libc_init_array+0x1e>
 8006994:	08007120 	.word	0x08007120
 8006998:	08007120 	.word	0x08007120
 800699c:	08007120 	.word	0x08007120
 80069a0:	08007124 	.word	0x08007124

080069a4 <memset>:
 80069a4:	4402      	add	r2, r0
 80069a6:	4603      	mov	r3, r0
 80069a8:	4293      	cmp	r3, r2
 80069aa:	d100      	bne.n	80069ae <memset+0xa>
 80069ac:	4770      	bx	lr
 80069ae:	f803 1b01 	strb.w	r1, [r3], #1
 80069b2:	e7f9      	b.n	80069a8 <memset+0x4>

080069b4 <atan2>:
 80069b4:	f000 b834 	b.w	8006a20 <__ieee754_atan2>

080069b8 <sqrt>:
 80069b8:	b538      	push	{r3, r4, r5, lr}
 80069ba:	ed2d 8b02 	vpush	{d8}
 80069be:	ec55 4b10 	vmov	r4, r5, d0
 80069c2:	f000 f8f7 	bl	8006bb4 <__ieee754_sqrt>
 80069c6:	4b15      	ldr	r3, [pc, #84]	; (8006a1c <sqrt+0x64>)
 80069c8:	eeb0 8a40 	vmov.f32	s16, s0
 80069cc:	eef0 8a60 	vmov.f32	s17, s1
 80069d0:	f993 3000 	ldrsb.w	r3, [r3]
 80069d4:	3301      	adds	r3, #1
 80069d6:	d019      	beq.n	8006a0c <sqrt+0x54>
 80069d8:	4622      	mov	r2, r4
 80069da:	462b      	mov	r3, r5
 80069dc:	4620      	mov	r0, r4
 80069de:	4629      	mov	r1, r5
 80069e0:	f7fa f868 	bl	8000ab4 <__aeabi_dcmpun>
 80069e4:	b990      	cbnz	r0, 8006a0c <sqrt+0x54>
 80069e6:	2200      	movs	r2, #0
 80069e8:	2300      	movs	r3, #0
 80069ea:	4620      	mov	r0, r4
 80069ec:	4629      	mov	r1, r5
 80069ee:	f7fa f839 	bl	8000a64 <__aeabi_dcmplt>
 80069f2:	b158      	cbz	r0, 8006a0c <sqrt+0x54>
 80069f4:	f7ff ffac 	bl	8006950 <__errno>
 80069f8:	2321      	movs	r3, #33	; 0x21
 80069fa:	6003      	str	r3, [r0, #0]
 80069fc:	2200      	movs	r2, #0
 80069fe:	2300      	movs	r3, #0
 8006a00:	4610      	mov	r0, r2
 8006a02:	4619      	mov	r1, r3
 8006a04:	f7f9 fee6 	bl	80007d4 <__aeabi_ddiv>
 8006a08:	ec41 0b18 	vmov	d8, r0, r1
 8006a0c:	eeb0 0a48 	vmov.f32	s0, s16
 8006a10:	eef0 0a68 	vmov.f32	s1, s17
 8006a14:	ecbd 8b02 	vpop	{d8}
 8006a18:	bd38      	pop	{r3, r4, r5, pc}
 8006a1a:	bf00      	nop
 8006a1c:	20000078 	.word	0x20000078

08006a20 <__ieee754_atan2>:
 8006a20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006a24:	ec57 6b11 	vmov	r6, r7, d1
 8006a28:	4273      	negs	r3, r6
 8006a2a:	f8df e184 	ldr.w	lr, [pc, #388]	; 8006bb0 <__ieee754_atan2+0x190>
 8006a2e:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 8006a32:	4333      	orrs	r3, r6
 8006a34:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8006a38:	4573      	cmp	r3, lr
 8006a3a:	ec51 0b10 	vmov	r0, r1, d0
 8006a3e:	ee11 8a10 	vmov	r8, s2
 8006a42:	d80a      	bhi.n	8006a5a <__ieee754_atan2+0x3a>
 8006a44:	4244      	negs	r4, r0
 8006a46:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006a4a:	4304      	orrs	r4, r0
 8006a4c:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8006a50:	4574      	cmp	r4, lr
 8006a52:	ee10 9a10 	vmov	r9, s0
 8006a56:	468c      	mov	ip, r1
 8006a58:	d907      	bls.n	8006a6a <__ieee754_atan2+0x4a>
 8006a5a:	4632      	mov	r2, r6
 8006a5c:	463b      	mov	r3, r7
 8006a5e:	f7f9 fbd9 	bl	8000214 <__adddf3>
 8006a62:	ec41 0b10 	vmov	d0, r0, r1
 8006a66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006a6a:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 8006a6e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8006a72:	4334      	orrs	r4, r6
 8006a74:	d103      	bne.n	8006a7e <__ieee754_atan2+0x5e>
 8006a76:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006a7a:	f000 b951 	b.w	8006d20 <atan>
 8006a7e:	17bc      	asrs	r4, r7, #30
 8006a80:	f004 0402 	and.w	r4, r4, #2
 8006a84:	ea53 0909 	orrs.w	r9, r3, r9
 8006a88:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8006a8c:	d107      	bne.n	8006a9e <__ieee754_atan2+0x7e>
 8006a8e:	2c02      	cmp	r4, #2
 8006a90:	d060      	beq.n	8006b54 <__ieee754_atan2+0x134>
 8006a92:	2c03      	cmp	r4, #3
 8006a94:	d1e5      	bne.n	8006a62 <__ieee754_atan2+0x42>
 8006a96:	a142      	add	r1, pc, #264	; (adr r1, 8006ba0 <__ieee754_atan2+0x180>)
 8006a98:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006a9c:	e7e1      	b.n	8006a62 <__ieee754_atan2+0x42>
 8006a9e:	ea52 0808 	orrs.w	r8, r2, r8
 8006aa2:	d106      	bne.n	8006ab2 <__ieee754_atan2+0x92>
 8006aa4:	f1bc 0f00 	cmp.w	ip, #0
 8006aa8:	da5f      	bge.n	8006b6a <__ieee754_atan2+0x14a>
 8006aaa:	a13f      	add	r1, pc, #252	; (adr r1, 8006ba8 <__ieee754_atan2+0x188>)
 8006aac:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006ab0:	e7d7      	b.n	8006a62 <__ieee754_atan2+0x42>
 8006ab2:	4572      	cmp	r2, lr
 8006ab4:	d10f      	bne.n	8006ad6 <__ieee754_atan2+0xb6>
 8006ab6:	4293      	cmp	r3, r2
 8006ab8:	f104 34ff 	add.w	r4, r4, #4294967295
 8006abc:	d107      	bne.n	8006ace <__ieee754_atan2+0xae>
 8006abe:	2c02      	cmp	r4, #2
 8006ac0:	d84c      	bhi.n	8006b5c <__ieee754_atan2+0x13c>
 8006ac2:	4b35      	ldr	r3, [pc, #212]	; (8006b98 <__ieee754_atan2+0x178>)
 8006ac4:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8006ac8:	e9d4 0100 	ldrd	r0, r1, [r4]
 8006acc:	e7c9      	b.n	8006a62 <__ieee754_atan2+0x42>
 8006ace:	2c02      	cmp	r4, #2
 8006ad0:	d848      	bhi.n	8006b64 <__ieee754_atan2+0x144>
 8006ad2:	4b32      	ldr	r3, [pc, #200]	; (8006b9c <__ieee754_atan2+0x17c>)
 8006ad4:	e7f6      	b.n	8006ac4 <__ieee754_atan2+0xa4>
 8006ad6:	4573      	cmp	r3, lr
 8006ad8:	d0e4      	beq.n	8006aa4 <__ieee754_atan2+0x84>
 8006ada:	1a9b      	subs	r3, r3, r2
 8006adc:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 8006ae0:	ea4f 5223 	mov.w	r2, r3, asr #20
 8006ae4:	da1e      	bge.n	8006b24 <__ieee754_atan2+0x104>
 8006ae6:	2f00      	cmp	r7, #0
 8006ae8:	da01      	bge.n	8006aee <__ieee754_atan2+0xce>
 8006aea:	323c      	adds	r2, #60	; 0x3c
 8006aec:	db1e      	blt.n	8006b2c <__ieee754_atan2+0x10c>
 8006aee:	4632      	mov	r2, r6
 8006af0:	463b      	mov	r3, r7
 8006af2:	f7f9 fe6f 	bl	80007d4 <__aeabi_ddiv>
 8006af6:	ec41 0b10 	vmov	d0, r0, r1
 8006afa:	f000 fab1 	bl	8007060 <fabs>
 8006afe:	f000 f90f 	bl	8006d20 <atan>
 8006b02:	ec51 0b10 	vmov	r0, r1, d0
 8006b06:	2c01      	cmp	r4, #1
 8006b08:	d013      	beq.n	8006b32 <__ieee754_atan2+0x112>
 8006b0a:	2c02      	cmp	r4, #2
 8006b0c:	d015      	beq.n	8006b3a <__ieee754_atan2+0x11a>
 8006b0e:	2c00      	cmp	r4, #0
 8006b10:	d0a7      	beq.n	8006a62 <__ieee754_atan2+0x42>
 8006b12:	a319      	add	r3, pc, #100	; (adr r3, 8006b78 <__ieee754_atan2+0x158>)
 8006b14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b18:	f7f9 fb7a 	bl	8000210 <__aeabi_dsub>
 8006b1c:	a318      	add	r3, pc, #96	; (adr r3, 8006b80 <__ieee754_atan2+0x160>)
 8006b1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b22:	e014      	b.n	8006b4e <__ieee754_atan2+0x12e>
 8006b24:	a118      	add	r1, pc, #96	; (adr r1, 8006b88 <__ieee754_atan2+0x168>)
 8006b26:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006b2a:	e7ec      	b.n	8006b06 <__ieee754_atan2+0xe6>
 8006b2c:	2000      	movs	r0, #0
 8006b2e:	2100      	movs	r1, #0
 8006b30:	e7e9      	b.n	8006b06 <__ieee754_atan2+0xe6>
 8006b32:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006b36:	4619      	mov	r1, r3
 8006b38:	e793      	b.n	8006a62 <__ieee754_atan2+0x42>
 8006b3a:	a30f      	add	r3, pc, #60	; (adr r3, 8006b78 <__ieee754_atan2+0x158>)
 8006b3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b40:	f7f9 fb66 	bl	8000210 <__aeabi_dsub>
 8006b44:	4602      	mov	r2, r0
 8006b46:	460b      	mov	r3, r1
 8006b48:	a10d      	add	r1, pc, #52	; (adr r1, 8006b80 <__ieee754_atan2+0x160>)
 8006b4a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006b4e:	f7f9 fb5f 	bl	8000210 <__aeabi_dsub>
 8006b52:	e786      	b.n	8006a62 <__ieee754_atan2+0x42>
 8006b54:	a10a      	add	r1, pc, #40	; (adr r1, 8006b80 <__ieee754_atan2+0x160>)
 8006b56:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006b5a:	e782      	b.n	8006a62 <__ieee754_atan2+0x42>
 8006b5c:	a10c      	add	r1, pc, #48	; (adr r1, 8006b90 <__ieee754_atan2+0x170>)
 8006b5e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006b62:	e77e      	b.n	8006a62 <__ieee754_atan2+0x42>
 8006b64:	2000      	movs	r0, #0
 8006b66:	2100      	movs	r1, #0
 8006b68:	e77b      	b.n	8006a62 <__ieee754_atan2+0x42>
 8006b6a:	a107      	add	r1, pc, #28	; (adr r1, 8006b88 <__ieee754_atan2+0x168>)
 8006b6c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006b70:	e777      	b.n	8006a62 <__ieee754_atan2+0x42>
 8006b72:	bf00      	nop
 8006b74:	f3af 8000 	nop.w
 8006b78:	33145c07 	.word	0x33145c07
 8006b7c:	3ca1a626 	.word	0x3ca1a626
 8006b80:	54442d18 	.word	0x54442d18
 8006b84:	400921fb 	.word	0x400921fb
 8006b88:	54442d18 	.word	0x54442d18
 8006b8c:	3ff921fb 	.word	0x3ff921fb
 8006b90:	54442d18 	.word	0x54442d18
 8006b94:	3fe921fb 	.word	0x3fe921fb
 8006b98:	080070a8 	.word	0x080070a8
 8006b9c:	080070c0 	.word	0x080070c0
 8006ba0:	54442d18 	.word	0x54442d18
 8006ba4:	c00921fb 	.word	0xc00921fb
 8006ba8:	54442d18 	.word	0x54442d18
 8006bac:	bff921fb 	.word	0xbff921fb
 8006bb0:	7ff00000 	.word	0x7ff00000

08006bb4 <__ieee754_sqrt>:
 8006bb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006bb8:	ec55 4b10 	vmov	r4, r5, d0
 8006bbc:	4e56      	ldr	r6, [pc, #344]	; (8006d18 <__ieee754_sqrt+0x164>)
 8006bbe:	43ae      	bics	r6, r5
 8006bc0:	ee10 0a10 	vmov	r0, s0
 8006bc4:	ee10 3a10 	vmov	r3, s0
 8006bc8:	4629      	mov	r1, r5
 8006bca:	462a      	mov	r2, r5
 8006bcc:	d110      	bne.n	8006bf0 <__ieee754_sqrt+0x3c>
 8006bce:	ee10 2a10 	vmov	r2, s0
 8006bd2:	462b      	mov	r3, r5
 8006bd4:	f7f9 fcd4 	bl	8000580 <__aeabi_dmul>
 8006bd8:	4602      	mov	r2, r0
 8006bda:	460b      	mov	r3, r1
 8006bdc:	4620      	mov	r0, r4
 8006bde:	4629      	mov	r1, r5
 8006be0:	f7f9 fb18 	bl	8000214 <__adddf3>
 8006be4:	4604      	mov	r4, r0
 8006be6:	460d      	mov	r5, r1
 8006be8:	ec45 4b10 	vmov	d0, r4, r5
 8006bec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006bf0:	2d00      	cmp	r5, #0
 8006bf2:	dc10      	bgt.n	8006c16 <__ieee754_sqrt+0x62>
 8006bf4:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8006bf8:	4330      	orrs	r0, r6
 8006bfa:	d0f5      	beq.n	8006be8 <__ieee754_sqrt+0x34>
 8006bfc:	b15d      	cbz	r5, 8006c16 <__ieee754_sqrt+0x62>
 8006bfe:	ee10 2a10 	vmov	r2, s0
 8006c02:	462b      	mov	r3, r5
 8006c04:	ee10 0a10 	vmov	r0, s0
 8006c08:	f7f9 fb02 	bl	8000210 <__aeabi_dsub>
 8006c0c:	4602      	mov	r2, r0
 8006c0e:	460b      	mov	r3, r1
 8006c10:	f7f9 fde0 	bl	80007d4 <__aeabi_ddiv>
 8006c14:	e7e6      	b.n	8006be4 <__ieee754_sqrt+0x30>
 8006c16:	1509      	asrs	r1, r1, #20
 8006c18:	d076      	beq.n	8006d08 <__ieee754_sqrt+0x154>
 8006c1a:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8006c1e:	07ce      	lsls	r6, r1, #31
 8006c20:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 8006c24:	bf5e      	ittt	pl
 8006c26:	0fda      	lsrpl	r2, r3, #31
 8006c28:	005b      	lslpl	r3, r3, #1
 8006c2a:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 8006c2e:	0fda      	lsrs	r2, r3, #31
 8006c30:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 8006c34:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8006c38:	2000      	movs	r0, #0
 8006c3a:	106d      	asrs	r5, r5, #1
 8006c3c:	005b      	lsls	r3, r3, #1
 8006c3e:	f04f 0e16 	mov.w	lr, #22
 8006c42:	4684      	mov	ip, r0
 8006c44:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006c48:	eb0c 0401 	add.w	r4, ip, r1
 8006c4c:	4294      	cmp	r4, r2
 8006c4e:	bfde      	ittt	le
 8006c50:	1b12      	suble	r2, r2, r4
 8006c52:	eb04 0c01 	addle.w	ip, r4, r1
 8006c56:	1840      	addle	r0, r0, r1
 8006c58:	0052      	lsls	r2, r2, #1
 8006c5a:	f1be 0e01 	subs.w	lr, lr, #1
 8006c5e:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8006c62:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8006c66:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8006c6a:	d1ed      	bne.n	8006c48 <__ieee754_sqrt+0x94>
 8006c6c:	4671      	mov	r1, lr
 8006c6e:	2720      	movs	r7, #32
 8006c70:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8006c74:	4562      	cmp	r2, ip
 8006c76:	eb04 060e 	add.w	r6, r4, lr
 8006c7a:	dc02      	bgt.n	8006c82 <__ieee754_sqrt+0xce>
 8006c7c:	d113      	bne.n	8006ca6 <__ieee754_sqrt+0xf2>
 8006c7e:	429e      	cmp	r6, r3
 8006c80:	d811      	bhi.n	8006ca6 <__ieee754_sqrt+0xf2>
 8006c82:	2e00      	cmp	r6, #0
 8006c84:	eb06 0e04 	add.w	lr, r6, r4
 8006c88:	da43      	bge.n	8006d12 <__ieee754_sqrt+0x15e>
 8006c8a:	f1be 0f00 	cmp.w	lr, #0
 8006c8e:	db40      	blt.n	8006d12 <__ieee754_sqrt+0x15e>
 8006c90:	f10c 0801 	add.w	r8, ip, #1
 8006c94:	eba2 020c 	sub.w	r2, r2, ip
 8006c98:	429e      	cmp	r6, r3
 8006c9a:	bf88      	it	hi
 8006c9c:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8006ca0:	1b9b      	subs	r3, r3, r6
 8006ca2:	4421      	add	r1, r4
 8006ca4:	46c4      	mov	ip, r8
 8006ca6:	0052      	lsls	r2, r2, #1
 8006ca8:	3f01      	subs	r7, #1
 8006caa:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8006cae:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8006cb2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8006cb6:	d1dd      	bne.n	8006c74 <__ieee754_sqrt+0xc0>
 8006cb8:	4313      	orrs	r3, r2
 8006cba:	d006      	beq.n	8006cca <__ieee754_sqrt+0x116>
 8006cbc:	1c4c      	adds	r4, r1, #1
 8006cbe:	bf13      	iteet	ne
 8006cc0:	3101      	addne	r1, #1
 8006cc2:	3001      	addeq	r0, #1
 8006cc4:	4639      	moveq	r1, r7
 8006cc6:	f021 0101 	bicne.w	r1, r1, #1
 8006cca:	1043      	asrs	r3, r0, #1
 8006ccc:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8006cd0:	0849      	lsrs	r1, r1, #1
 8006cd2:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8006cd6:	07c2      	lsls	r2, r0, #31
 8006cd8:	bf48      	it	mi
 8006cda:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 8006cde:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 8006ce2:	460c      	mov	r4, r1
 8006ce4:	463d      	mov	r5, r7
 8006ce6:	e77f      	b.n	8006be8 <__ieee754_sqrt+0x34>
 8006ce8:	0ada      	lsrs	r2, r3, #11
 8006cea:	3815      	subs	r0, #21
 8006cec:	055b      	lsls	r3, r3, #21
 8006cee:	2a00      	cmp	r2, #0
 8006cf0:	d0fa      	beq.n	8006ce8 <__ieee754_sqrt+0x134>
 8006cf2:	02d7      	lsls	r7, r2, #11
 8006cf4:	d50a      	bpl.n	8006d0c <__ieee754_sqrt+0x158>
 8006cf6:	f1c1 0420 	rsb	r4, r1, #32
 8006cfa:	fa23 f404 	lsr.w	r4, r3, r4
 8006cfe:	1e4d      	subs	r5, r1, #1
 8006d00:	408b      	lsls	r3, r1
 8006d02:	4322      	orrs	r2, r4
 8006d04:	1b41      	subs	r1, r0, r5
 8006d06:	e788      	b.n	8006c1a <__ieee754_sqrt+0x66>
 8006d08:	4608      	mov	r0, r1
 8006d0a:	e7f0      	b.n	8006cee <__ieee754_sqrt+0x13a>
 8006d0c:	0052      	lsls	r2, r2, #1
 8006d0e:	3101      	adds	r1, #1
 8006d10:	e7ef      	b.n	8006cf2 <__ieee754_sqrt+0x13e>
 8006d12:	46e0      	mov	r8, ip
 8006d14:	e7be      	b.n	8006c94 <__ieee754_sqrt+0xe0>
 8006d16:	bf00      	nop
 8006d18:	7ff00000 	.word	0x7ff00000
 8006d1c:	00000000 	.word	0x00000000

08006d20 <atan>:
 8006d20:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d24:	ec55 4b10 	vmov	r4, r5, d0
 8006d28:	4bc3      	ldr	r3, [pc, #780]	; (8007038 <atan+0x318>)
 8006d2a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8006d2e:	429e      	cmp	r6, r3
 8006d30:	46ab      	mov	fp, r5
 8006d32:	dd18      	ble.n	8006d66 <atan+0x46>
 8006d34:	4bc1      	ldr	r3, [pc, #772]	; (800703c <atan+0x31c>)
 8006d36:	429e      	cmp	r6, r3
 8006d38:	dc01      	bgt.n	8006d3e <atan+0x1e>
 8006d3a:	d109      	bne.n	8006d50 <atan+0x30>
 8006d3c:	b144      	cbz	r4, 8006d50 <atan+0x30>
 8006d3e:	4622      	mov	r2, r4
 8006d40:	462b      	mov	r3, r5
 8006d42:	4620      	mov	r0, r4
 8006d44:	4629      	mov	r1, r5
 8006d46:	f7f9 fa65 	bl	8000214 <__adddf3>
 8006d4a:	4604      	mov	r4, r0
 8006d4c:	460d      	mov	r5, r1
 8006d4e:	e006      	b.n	8006d5e <atan+0x3e>
 8006d50:	f1bb 0f00 	cmp.w	fp, #0
 8006d54:	f300 8131 	bgt.w	8006fba <atan+0x29a>
 8006d58:	a59b      	add	r5, pc, #620	; (adr r5, 8006fc8 <atan+0x2a8>)
 8006d5a:	e9d5 4500 	ldrd	r4, r5, [r5]
 8006d5e:	ec45 4b10 	vmov	d0, r4, r5
 8006d62:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d66:	4bb6      	ldr	r3, [pc, #728]	; (8007040 <atan+0x320>)
 8006d68:	429e      	cmp	r6, r3
 8006d6a:	dc14      	bgt.n	8006d96 <atan+0x76>
 8006d6c:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8006d70:	429e      	cmp	r6, r3
 8006d72:	dc0d      	bgt.n	8006d90 <atan+0x70>
 8006d74:	a396      	add	r3, pc, #600	; (adr r3, 8006fd0 <atan+0x2b0>)
 8006d76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d7a:	ee10 0a10 	vmov	r0, s0
 8006d7e:	4629      	mov	r1, r5
 8006d80:	f7f9 fa48 	bl	8000214 <__adddf3>
 8006d84:	4baf      	ldr	r3, [pc, #700]	; (8007044 <atan+0x324>)
 8006d86:	2200      	movs	r2, #0
 8006d88:	f7f9 fe8a 	bl	8000aa0 <__aeabi_dcmpgt>
 8006d8c:	2800      	cmp	r0, #0
 8006d8e:	d1e6      	bne.n	8006d5e <atan+0x3e>
 8006d90:	f04f 3aff 	mov.w	sl, #4294967295
 8006d94:	e02b      	b.n	8006dee <atan+0xce>
 8006d96:	f000 f963 	bl	8007060 <fabs>
 8006d9a:	4bab      	ldr	r3, [pc, #684]	; (8007048 <atan+0x328>)
 8006d9c:	429e      	cmp	r6, r3
 8006d9e:	ec55 4b10 	vmov	r4, r5, d0
 8006da2:	f300 80bf 	bgt.w	8006f24 <atan+0x204>
 8006da6:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8006daa:	429e      	cmp	r6, r3
 8006dac:	f300 80a0 	bgt.w	8006ef0 <atan+0x1d0>
 8006db0:	ee10 2a10 	vmov	r2, s0
 8006db4:	ee10 0a10 	vmov	r0, s0
 8006db8:	462b      	mov	r3, r5
 8006dba:	4629      	mov	r1, r5
 8006dbc:	f7f9 fa2a 	bl	8000214 <__adddf3>
 8006dc0:	4ba0      	ldr	r3, [pc, #640]	; (8007044 <atan+0x324>)
 8006dc2:	2200      	movs	r2, #0
 8006dc4:	f7f9 fa24 	bl	8000210 <__aeabi_dsub>
 8006dc8:	2200      	movs	r2, #0
 8006dca:	4606      	mov	r6, r0
 8006dcc:	460f      	mov	r7, r1
 8006dce:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006dd2:	4620      	mov	r0, r4
 8006dd4:	4629      	mov	r1, r5
 8006dd6:	f7f9 fa1d 	bl	8000214 <__adddf3>
 8006dda:	4602      	mov	r2, r0
 8006ddc:	460b      	mov	r3, r1
 8006dde:	4630      	mov	r0, r6
 8006de0:	4639      	mov	r1, r7
 8006de2:	f7f9 fcf7 	bl	80007d4 <__aeabi_ddiv>
 8006de6:	f04f 0a00 	mov.w	sl, #0
 8006dea:	4604      	mov	r4, r0
 8006dec:	460d      	mov	r5, r1
 8006dee:	4622      	mov	r2, r4
 8006df0:	462b      	mov	r3, r5
 8006df2:	4620      	mov	r0, r4
 8006df4:	4629      	mov	r1, r5
 8006df6:	f7f9 fbc3 	bl	8000580 <__aeabi_dmul>
 8006dfa:	4602      	mov	r2, r0
 8006dfc:	460b      	mov	r3, r1
 8006dfe:	4680      	mov	r8, r0
 8006e00:	4689      	mov	r9, r1
 8006e02:	f7f9 fbbd 	bl	8000580 <__aeabi_dmul>
 8006e06:	a374      	add	r3, pc, #464	; (adr r3, 8006fd8 <atan+0x2b8>)
 8006e08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e0c:	4606      	mov	r6, r0
 8006e0e:	460f      	mov	r7, r1
 8006e10:	f7f9 fbb6 	bl	8000580 <__aeabi_dmul>
 8006e14:	a372      	add	r3, pc, #456	; (adr r3, 8006fe0 <atan+0x2c0>)
 8006e16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e1a:	f7f9 f9fb 	bl	8000214 <__adddf3>
 8006e1e:	4632      	mov	r2, r6
 8006e20:	463b      	mov	r3, r7
 8006e22:	f7f9 fbad 	bl	8000580 <__aeabi_dmul>
 8006e26:	a370      	add	r3, pc, #448	; (adr r3, 8006fe8 <atan+0x2c8>)
 8006e28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e2c:	f7f9 f9f2 	bl	8000214 <__adddf3>
 8006e30:	4632      	mov	r2, r6
 8006e32:	463b      	mov	r3, r7
 8006e34:	f7f9 fba4 	bl	8000580 <__aeabi_dmul>
 8006e38:	a36d      	add	r3, pc, #436	; (adr r3, 8006ff0 <atan+0x2d0>)
 8006e3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e3e:	f7f9 f9e9 	bl	8000214 <__adddf3>
 8006e42:	4632      	mov	r2, r6
 8006e44:	463b      	mov	r3, r7
 8006e46:	f7f9 fb9b 	bl	8000580 <__aeabi_dmul>
 8006e4a:	a36b      	add	r3, pc, #428	; (adr r3, 8006ff8 <atan+0x2d8>)
 8006e4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e50:	f7f9 f9e0 	bl	8000214 <__adddf3>
 8006e54:	4632      	mov	r2, r6
 8006e56:	463b      	mov	r3, r7
 8006e58:	f7f9 fb92 	bl	8000580 <__aeabi_dmul>
 8006e5c:	a368      	add	r3, pc, #416	; (adr r3, 8007000 <atan+0x2e0>)
 8006e5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e62:	f7f9 f9d7 	bl	8000214 <__adddf3>
 8006e66:	4642      	mov	r2, r8
 8006e68:	464b      	mov	r3, r9
 8006e6a:	f7f9 fb89 	bl	8000580 <__aeabi_dmul>
 8006e6e:	a366      	add	r3, pc, #408	; (adr r3, 8007008 <atan+0x2e8>)
 8006e70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e74:	4680      	mov	r8, r0
 8006e76:	4689      	mov	r9, r1
 8006e78:	4630      	mov	r0, r6
 8006e7a:	4639      	mov	r1, r7
 8006e7c:	f7f9 fb80 	bl	8000580 <__aeabi_dmul>
 8006e80:	a363      	add	r3, pc, #396	; (adr r3, 8007010 <atan+0x2f0>)
 8006e82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e86:	f7f9 f9c3 	bl	8000210 <__aeabi_dsub>
 8006e8a:	4632      	mov	r2, r6
 8006e8c:	463b      	mov	r3, r7
 8006e8e:	f7f9 fb77 	bl	8000580 <__aeabi_dmul>
 8006e92:	a361      	add	r3, pc, #388	; (adr r3, 8007018 <atan+0x2f8>)
 8006e94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e98:	f7f9 f9ba 	bl	8000210 <__aeabi_dsub>
 8006e9c:	4632      	mov	r2, r6
 8006e9e:	463b      	mov	r3, r7
 8006ea0:	f7f9 fb6e 	bl	8000580 <__aeabi_dmul>
 8006ea4:	a35e      	add	r3, pc, #376	; (adr r3, 8007020 <atan+0x300>)
 8006ea6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006eaa:	f7f9 f9b1 	bl	8000210 <__aeabi_dsub>
 8006eae:	4632      	mov	r2, r6
 8006eb0:	463b      	mov	r3, r7
 8006eb2:	f7f9 fb65 	bl	8000580 <__aeabi_dmul>
 8006eb6:	a35c      	add	r3, pc, #368	; (adr r3, 8007028 <atan+0x308>)
 8006eb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ebc:	f7f9 f9a8 	bl	8000210 <__aeabi_dsub>
 8006ec0:	4632      	mov	r2, r6
 8006ec2:	463b      	mov	r3, r7
 8006ec4:	f7f9 fb5c 	bl	8000580 <__aeabi_dmul>
 8006ec8:	4602      	mov	r2, r0
 8006eca:	460b      	mov	r3, r1
 8006ecc:	4640      	mov	r0, r8
 8006ece:	4649      	mov	r1, r9
 8006ed0:	f7f9 f9a0 	bl	8000214 <__adddf3>
 8006ed4:	4622      	mov	r2, r4
 8006ed6:	462b      	mov	r3, r5
 8006ed8:	f7f9 fb52 	bl	8000580 <__aeabi_dmul>
 8006edc:	f1ba 3fff 	cmp.w	sl, #4294967295
 8006ee0:	4602      	mov	r2, r0
 8006ee2:	460b      	mov	r3, r1
 8006ee4:	d14b      	bne.n	8006f7e <atan+0x25e>
 8006ee6:	4620      	mov	r0, r4
 8006ee8:	4629      	mov	r1, r5
 8006eea:	f7f9 f991 	bl	8000210 <__aeabi_dsub>
 8006eee:	e72c      	b.n	8006d4a <atan+0x2a>
 8006ef0:	ee10 0a10 	vmov	r0, s0
 8006ef4:	4b53      	ldr	r3, [pc, #332]	; (8007044 <atan+0x324>)
 8006ef6:	2200      	movs	r2, #0
 8006ef8:	4629      	mov	r1, r5
 8006efa:	f7f9 f989 	bl	8000210 <__aeabi_dsub>
 8006efe:	4b51      	ldr	r3, [pc, #324]	; (8007044 <atan+0x324>)
 8006f00:	4606      	mov	r6, r0
 8006f02:	460f      	mov	r7, r1
 8006f04:	2200      	movs	r2, #0
 8006f06:	4620      	mov	r0, r4
 8006f08:	4629      	mov	r1, r5
 8006f0a:	f7f9 f983 	bl	8000214 <__adddf3>
 8006f0e:	4602      	mov	r2, r0
 8006f10:	460b      	mov	r3, r1
 8006f12:	4630      	mov	r0, r6
 8006f14:	4639      	mov	r1, r7
 8006f16:	f7f9 fc5d 	bl	80007d4 <__aeabi_ddiv>
 8006f1a:	f04f 0a01 	mov.w	sl, #1
 8006f1e:	4604      	mov	r4, r0
 8006f20:	460d      	mov	r5, r1
 8006f22:	e764      	b.n	8006dee <atan+0xce>
 8006f24:	4b49      	ldr	r3, [pc, #292]	; (800704c <atan+0x32c>)
 8006f26:	429e      	cmp	r6, r3
 8006f28:	da1d      	bge.n	8006f66 <atan+0x246>
 8006f2a:	ee10 0a10 	vmov	r0, s0
 8006f2e:	4b48      	ldr	r3, [pc, #288]	; (8007050 <atan+0x330>)
 8006f30:	2200      	movs	r2, #0
 8006f32:	4629      	mov	r1, r5
 8006f34:	f7f9 f96c 	bl	8000210 <__aeabi_dsub>
 8006f38:	4b45      	ldr	r3, [pc, #276]	; (8007050 <atan+0x330>)
 8006f3a:	4606      	mov	r6, r0
 8006f3c:	460f      	mov	r7, r1
 8006f3e:	2200      	movs	r2, #0
 8006f40:	4620      	mov	r0, r4
 8006f42:	4629      	mov	r1, r5
 8006f44:	f7f9 fb1c 	bl	8000580 <__aeabi_dmul>
 8006f48:	4b3e      	ldr	r3, [pc, #248]	; (8007044 <atan+0x324>)
 8006f4a:	2200      	movs	r2, #0
 8006f4c:	f7f9 f962 	bl	8000214 <__adddf3>
 8006f50:	4602      	mov	r2, r0
 8006f52:	460b      	mov	r3, r1
 8006f54:	4630      	mov	r0, r6
 8006f56:	4639      	mov	r1, r7
 8006f58:	f7f9 fc3c 	bl	80007d4 <__aeabi_ddiv>
 8006f5c:	f04f 0a02 	mov.w	sl, #2
 8006f60:	4604      	mov	r4, r0
 8006f62:	460d      	mov	r5, r1
 8006f64:	e743      	b.n	8006dee <atan+0xce>
 8006f66:	462b      	mov	r3, r5
 8006f68:	ee10 2a10 	vmov	r2, s0
 8006f6c:	4939      	ldr	r1, [pc, #228]	; (8007054 <atan+0x334>)
 8006f6e:	2000      	movs	r0, #0
 8006f70:	f7f9 fc30 	bl	80007d4 <__aeabi_ddiv>
 8006f74:	f04f 0a03 	mov.w	sl, #3
 8006f78:	4604      	mov	r4, r0
 8006f7a:	460d      	mov	r5, r1
 8006f7c:	e737      	b.n	8006dee <atan+0xce>
 8006f7e:	4b36      	ldr	r3, [pc, #216]	; (8007058 <atan+0x338>)
 8006f80:	4e36      	ldr	r6, [pc, #216]	; (800705c <atan+0x33c>)
 8006f82:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8006f86:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 8006f8a:	e9da 2300 	ldrd	r2, r3, [sl]
 8006f8e:	f7f9 f93f 	bl	8000210 <__aeabi_dsub>
 8006f92:	4622      	mov	r2, r4
 8006f94:	462b      	mov	r3, r5
 8006f96:	f7f9 f93b 	bl	8000210 <__aeabi_dsub>
 8006f9a:	4602      	mov	r2, r0
 8006f9c:	460b      	mov	r3, r1
 8006f9e:	e9d6 0100 	ldrd	r0, r1, [r6]
 8006fa2:	f7f9 f935 	bl	8000210 <__aeabi_dsub>
 8006fa6:	f1bb 0f00 	cmp.w	fp, #0
 8006faa:	4604      	mov	r4, r0
 8006fac:	460d      	mov	r5, r1
 8006fae:	f6bf aed6 	bge.w	8006d5e <atan+0x3e>
 8006fb2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006fb6:	461d      	mov	r5, r3
 8006fb8:	e6d1      	b.n	8006d5e <atan+0x3e>
 8006fba:	a51d      	add	r5, pc, #116	; (adr r5, 8007030 <atan+0x310>)
 8006fbc:	e9d5 4500 	ldrd	r4, r5, [r5]
 8006fc0:	e6cd      	b.n	8006d5e <atan+0x3e>
 8006fc2:	bf00      	nop
 8006fc4:	f3af 8000 	nop.w
 8006fc8:	54442d18 	.word	0x54442d18
 8006fcc:	bff921fb 	.word	0xbff921fb
 8006fd0:	8800759c 	.word	0x8800759c
 8006fd4:	7e37e43c 	.word	0x7e37e43c
 8006fd8:	e322da11 	.word	0xe322da11
 8006fdc:	3f90ad3a 	.word	0x3f90ad3a
 8006fe0:	24760deb 	.word	0x24760deb
 8006fe4:	3fa97b4b 	.word	0x3fa97b4b
 8006fe8:	a0d03d51 	.word	0xa0d03d51
 8006fec:	3fb10d66 	.word	0x3fb10d66
 8006ff0:	c54c206e 	.word	0xc54c206e
 8006ff4:	3fb745cd 	.word	0x3fb745cd
 8006ff8:	920083ff 	.word	0x920083ff
 8006ffc:	3fc24924 	.word	0x3fc24924
 8007000:	5555550d 	.word	0x5555550d
 8007004:	3fd55555 	.word	0x3fd55555
 8007008:	2c6a6c2f 	.word	0x2c6a6c2f
 800700c:	bfa2b444 	.word	0xbfa2b444
 8007010:	52defd9a 	.word	0x52defd9a
 8007014:	3fadde2d 	.word	0x3fadde2d
 8007018:	af749a6d 	.word	0xaf749a6d
 800701c:	3fb3b0f2 	.word	0x3fb3b0f2
 8007020:	fe231671 	.word	0xfe231671
 8007024:	3fbc71c6 	.word	0x3fbc71c6
 8007028:	9998ebc4 	.word	0x9998ebc4
 800702c:	3fc99999 	.word	0x3fc99999
 8007030:	54442d18 	.word	0x54442d18
 8007034:	3ff921fb 	.word	0x3ff921fb
 8007038:	440fffff 	.word	0x440fffff
 800703c:	7ff00000 	.word	0x7ff00000
 8007040:	3fdbffff 	.word	0x3fdbffff
 8007044:	3ff00000 	.word	0x3ff00000
 8007048:	3ff2ffff 	.word	0x3ff2ffff
 800704c:	40038000 	.word	0x40038000
 8007050:	3ff80000 	.word	0x3ff80000
 8007054:	bff00000 	.word	0xbff00000
 8007058:	080070f8 	.word	0x080070f8
 800705c:	080070d8 	.word	0x080070d8

08007060 <fabs>:
 8007060:	ec51 0b10 	vmov	r0, r1, d0
 8007064:	ee10 2a10 	vmov	r2, s0
 8007068:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800706c:	ec43 2b10 	vmov	d0, r2, r3
 8007070:	4770      	bx	lr
	...

08007074 <_init>:
 8007074:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007076:	bf00      	nop
 8007078:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800707a:	bc08      	pop	{r3}
 800707c:	469e      	mov	lr, r3
 800707e:	4770      	bx	lr

08007080 <_fini>:
 8007080:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007082:	bf00      	nop
 8007084:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007086:	bc08      	pop	{r3}
 8007088:	469e      	mov	lr, r3
 800708a:	4770      	bx	lr
